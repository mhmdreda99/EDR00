
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000084e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a20  00000000  00000000  000008a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000047a  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 0f 04 	call	0x81e	; 0x81e <main>
  64:	0c 94 25 04 	jmp	0x84a	; 0x84a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_voidInit>:
#include "ADC_private.h"
#include "ADC_config.h"
#include "ADC_register.h"

void ADC_voidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/*AVCC as reference voltage*/
	SET_BIT(ADMUX,ADMUX_REFS0);
  74:	a7 e2       	ldi	r26, 0x27	; 39
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e2       	ldi	r30, 0x27	; 39
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
  82:	a7 e2       	ldi	r26, 0x27	; 39
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e2       	ldi	r30, 0x27	; 39
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 77       	andi	r24, 0x7F	; 127
  8e:	8c 93       	st	X, r24

	/*Activate Left adjust result*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
  90:	a7 e2       	ldi	r26, 0x27	; 39
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e7 e2       	ldi	r30, 0x27	; 39
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	8c 93       	st	X, r24

	/*Set Prescaler to divide by 128 */
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
  9e:	a6 e2       	ldi	r26, 0x26	; 38
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e6 e2       	ldi	r30, 0x26	; 38
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
  ac:	a6 e2       	ldi	r26, 0x26	; 38
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e6 e2       	ldi	r30, 0x26	; 38
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
  ba:	a6 e2       	ldi	r26, 0x26	; 38
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e6 e2       	ldi	r30, 0x26	; 38
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	8c 93       	st	X, r24

	/*Enable peripheral */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
  c8:	a6 e2       	ldi	r26, 0x26	; 38
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e6 e2       	ldi	r30, 0x26	; 38
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	8c 93       	st	X, r24
}
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <ADC_u8GetChannelReading>:

u8 ADC_u8GetChannelReading(u8 Copy_u8Channel)
{
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	0f 92       	push	r0
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	89 83       	std	Y+1, r24	; 0x01
	/*Clear the MUX bits in ADMUX register*/
	ADMUX &= 0b11100000;
  e8:	a7 e2       	ldi	r26, 0x27	; 39
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e7 e2       	ldi	r30, 0x27	; 39
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 7e       	andi	r24, 0xE0	; 224
  f4:	8c 93       	st	X, r24

	/*Set the required channel into the MUX bits*/
	ADMUX |= Copy_u8Channel;
  f6:	a7 e2       	ldi	r26, 0x27	; 39
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e7 e2       	ldi	r30, 0x27	; 39
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	89 2b       	or	r24, r25
 104:	8c 93       	st	X, r24

	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
 106:	a6 e2       	ldi	r26, 0x26	; 38
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	e6 e2       	ldi	r30, 0x26	; 38
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8c 93       	st	X, r24

	/*Polling (busy waiting) until the conversion complete flag is set*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF)));
 114:	e6 e2       	ldi	r30, 0x26	; 38
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	82 95       	swap	r24
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	81 70       	andi	r24, 0x01	; 1
 124:	90 70       	andi	r25, 0x00	; 0
 126:	88 23       	and	r24, r24
 128:	a9 f7       	brne	.-22     	; 0x114 <ADC_u8GetChannelReading+0x38>

	/*Clear the conversion clear flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
 12a:	a6 e2       	ldi	r26, 0x26	; 38
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e6 e2       	ldi	r30, 0x26	; 38
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 61       	ori	r24, 0x10	; 16
 136:	8c 93       	st	X, r24

	/*Return the reading*/
	return ADCH;
 138:	e5 e2       	ldi	r30, 0x25	; 37
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
}
 13e:	0f 90       	pop	r0
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	08 95       	ret

00000146 <PORT_voidInit>:




void PORT_voidInit(void)
{
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
	/*SET THE PORT Direction*/
	DDRA=PORTA_DIR;
 14e:	ea e3       	ldi	r30, 0x3A	; 58
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
 154:	e7 e3       	ldi	r30, 0x37	; 55
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 15a:	e4 e3       	ldi	r30, 0x34	; 52
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
 162:	e1 e3       	ldi	r30, 0x31	; 49
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	10 82       	st	Z, r1

	/*SET THE PORT Value*/
	PORTA=PORTA_INT;
 168:	eb e3       	ldi	r30, 0x3B	; 59
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	10 82       	st	Z, r1
	PORTB=PORTB_INT;
 16e:	e8 e3       	ldi	r30, 0x38	; 56
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	10 82       	st	Z, r1
	PORTC=PORTC_INT;
 174:	e5 e3       	ldi	r30, 0x35	; 53
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	10 82       	st	Z, r1
	PORTD=PORTD_INT;
 17a:	e2 e3       	ldi	r30, 0x32	; 50
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	10 82       	st	Z, r1
}
 180:	cf 91       	pop	r28
 182:	df 91       	pop	r29
 184:	08 95       	ret

00000186 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
 186:	df 93       	push	r29
 188:	cf 93       	push	r28
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	28 97       	sbiw	r28, 0x08	; 8
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
 19a:	8a 83       	std	Y+2, r24	; 0x02
 19c:	6b 83       	std	Y+3, r22	; 0x03
 19e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 1a0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	88 30       	cpi	r24, 0x08	; 8
 1a6:	08 f0       	brcs	.+2      	; 0x1aa <DIO_u8SetPinDirection+0x24>
 1a8:	f4 c0       	rjmp	.+488    	; 0x392 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
 1aa:	8c 81       	ldd	r24, Y+4	; 0x04
 1ac:	88 23       	and	r24, r24
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <DIO_u8SetPinDirection+0x2c>
 1b0:	77 c0       	rjmp	.+238    	; 0x2a0 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	38 87       	std	Y+8, r19	; 0x08
 1ba:	2f 83       	std	Y+7, r18	; 0x07
 1bc:	8f 81       	ldd	r24, Y+7	; 0x07
 1be:	98 85       	ldd	r25, Y+8	; 0x08
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	91 05       	cpc	r25, r1
 1c4:	59 f1       	breq	.+86     	; 0x21c <DIO_u8SetPinDirection+0x96>
 1c6:	2f 81       	ldd	r18, Y+7	; 0x07
 1c8:	38 85       	ldd	r19, Y+8	; 0x08
 1ca:	22 30       	cpi	r18, 0x02	; 2
 1cc:	31 05       	cpc	r19, r1
 1ce:	2c f4       	brge	.+10     	; 0x1da <DIO_u8SetPinDirection+0x54>
 1d0:	8f 81       	ldd	r24, Y+7	; 0x07
 1d2:	98 85       	ldd	r25, Y+8	; 0x08
 1d4:	00 97       	sbiw	r24, 0x00	; 0
 1d6:	69 f0       	breq	.+26     	; 0x1f2 <DIO_u8SetPinDirection+0x6c>
 1d8:	60 c0       	rjmp	.+192    	; 0x29a <DIO_u8SetPinDirection+0x114>
 1da:	2f 81       	ldd	r18, Y+7	; 0x07
 1dc:	38 85       	ldd	r19, Y+8	; 0x08
 1de:	22 30       	cpi	r18, 0x02	; 2
 1e0:	31 05       	cpc	r19, r1
 1e2:	89 f1       	breq	.+98     	; 0x246 <DIO_u8SetPinDirection+0xc0>
 1e4:	8f 81       	ldd	r24, Y+7	; 0x07
 1e6:	98 85       	ldd	r25, Y+8	; 0x08
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	91 05       	cpc	r25, r1
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <DIO_u8SetPinDirection+0x6a>
 1ee:	40 c0       	rjmp	.+128    	; 0x270 <DIO_u8SetPinDirection+0xea>
 1f0:	54 c0       	rjmp	.+168    	; 0x29a <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
 1f2:	aa e3       	ldi	r26, 0x3A	; 58
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	ea e3       	ldi	r30, 0x3A	; 58
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	48 2f       	mov	r20, r24
 1fe:	8b 81       	ldd	r24, Y+3	; 0x03
 200:	28 2f       	mov	r18, r24
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 2e       	mov	r0, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8SetPinDirection+0x8a>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8SetPinDirection+0x86>
 214:	80 95       	com	r24
 216:	84 23       	and	r24, r20
 218:	8c 93       	st	X, r24
 21a:	bd c0       	rjmp	.+378    	; 0x396 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
 21c:	a7 e3       	ldi	r26, 0x37	; 55
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e7 e3       	ldi	r30, 0x37	; 55
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 2e       	mov	r0, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_u8SetPinDirection+0xb4>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_u8SetPinDirection+0xb0>
 23e:	80 95       	com	r24
 240:	84 23       	and	r24, r20
 242:	8c 93       	st	X, r24
 244:	a8 c0       	rjmp	.+336    	; 0x396 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
 246:	a4 e3       	ldi	r26, 0x34	; 52
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	e4 e3       	ldi	r30, 0x34	; 52
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	48 2f       	mov	r20, r24
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 2e       	mov	r0, r18
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_u8SetPinDirection+0xde>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_u8SetPinDirection+0xda>
 268:	80 95       	com	r24
 26a:	84 23       	and	r24, r20
 26c:	8c 93       	st	X, r24
 26e:	93 c0       	rjmp	.+294    	; 0x396 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
 270:	a1 e3       	ldi	r26, 0x31	; 49
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	e1 e3       	ldi	r30, 0x31	; 49
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	48 2f       	mov	r20, r24
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
 27e:	28 2f       	mov	r18, r24
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 2e       	mov	r0, r18
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_u8SetPinDirection+0x108>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_u8SetPinDirection+0x104>
 292:	80 95       	com	r24
 294:	84 23       	and	r24, r20
 296:	8c 93       	st	X, r24
 298:	7e c0       	rjmp	.+252    	; 0x396 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	89 83       	std	Y+1, r24	; 0x01
 29e:	7b c0       	rjmp	.+246    	; 0x396 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
 2a0:	8c 81       	ldd	r24, Y+4	; 0x04
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <DIO_u8SetPinDirection+0x122>
 2a6:	72 c0       	rjmp	.+228    	; 0x38c <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	3e 83       	std	Y+6, r19	; 0x06
 2b0:	2d 83       	std	Y+5, r18	; 0x05
 2b2:	8d 81       	ldd	r24, Y+5	; 0x05
 2b4:	9e 81       	ldd	r25, Y+6	; 0x06
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	91 05       	cpc	r25, r1
 2ba:	49 f1       	breq	.+82     	; 0x30e <DIO_u8SetPinDirection+0x188>
 2bc:	2d 81       	ldd	r18, Y+5	; 0x05
 2be:	3e 81       	ldd	r19, Y+6	; 0x06
 2c0:	22 30       	cpi	r18, 0x02	; 2
 2c2:	31 05       	cpc	r19, r1
 2c4:	2c f4       	brge	.+10     	; 0x2d0 <DIO_u8SetPinDirection+0x14a>
 2c6:	8d 81       	ldd	r24, Y+5	; 0x05
 2c8:	9e 81       	ldd	r25, Y+6	; 0x06
 2ca:	00 97       	sbiw	r24, 0x00	; 0
 2cc:	61 f0       	breq	.+24     	; 0x2e6 <DIO_u8SetPinDirection+0x160>
 2ce:	5b c0       	rjmp	.+182    	; 0x386 <DIO_u8SetPinDirection+0x200>
 2d0:	2d 81       	ldd	r18, Y+5	; 0x05
 2d2:	3e 81       	ldd	r19, Y+6	; 0x06
 2d4:	22 30       	cpi	r18, 0x02	; 2
 2d6:	31 05       	cpc	r19, r1
 2d8:	71 f1       	breq	.+92     	; 0x336 <DIO_u8SetPinDirection+0x1b0>
 2da:	8d 81       	ldd	r24, Y+5	; 0x05
 2dc:	9e 81       	ldd	r25, Y+6	; 0x06
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	91 05       	cpc	r25, r1
 2e2:	e9 f1       	breq	.+122    	; 0x35e <DIO_u8SetPinDirection+0x1d8>
 2e4:	50 c0       	rjmp	.+160    	; 0x386 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
 2e6:	aa e3       	ldi	r26, 0x3A	; 58
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	ea e3       	ldi	r30, 0x3A	; 58
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	8b 81       	ldd	r24, Y+3	; 0x03
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_u8SetPinDirection+0x17e>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_u8SetPinDirection+0x17a>
 308:	84 2b       	or	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	44 c0       	rjmp	.+136    	; 0x396 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
 30e:	a7 e3       	ldi	r26, 0x37	; 55
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	e7 e3       	ldi	r30, 0x37	; 55
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	48 2f       	mov	r20, r24
 31a:	8b 81       	ldd	r24, Y+3	; 0x03
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 2e       	mov	r0, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_u8SetPinDirection+0x1a6>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_u8SetPinDirection+0x1a2>
 330:	84 2b       	or	r24, r20
 332:	8c 93       	st	X, r24
 334:	30 c0       	rjmp	.+96     	; 0x396 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
 336:	a4 e3       	ldi	r26, 0x34	; 52
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	e4 e3       	ldi	r30, 0x34	; 52
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	48 2f       	mov	r20, r24
 342:	8b 81       	ldd	r24, Y+3	; 0x03
 344:	28 2f       	mov	r18, r24
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 2e       	mov	r0, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_u8SetPinDirection+0x1ce>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	0a 94       	dec	r0
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_u8SetPinDirection+0x1ca>
 358:	84 2b       	or	r24, r20
 35a:	8c 93       	st	X, r24
 35c:	1c c0       	rjmp	.+56     	; 0x396 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
 35e:	a1 e3       	ldi	r26, 0x31	; 49
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	e1 e3       	ldi	r30, 0x31	; 49
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	48 2f       	mov	r20, r24
 36a:	8b 81       	ldd	r24, Y+3	; 0x03
 36c:	28 2f       	mov	r18, r24
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 2e       	mov	r0, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_u8SetPinDirection+0x1f6>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	0a 94       	dec	r0
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_u8SetPinDirection+0x1f2>
 380:	84 2b       	or	r24, r20
 382:	8c 93       	st	X, r24
 384:	08 c0       	rjmp	.+16     	; 0x396 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	05 c0       	rjmp	.+10     	; 0x396 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	89 83       	std	Y+1, r24	; 0x01
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 396:	89 81       	ldd	r24, Y+1	; 0x01
}
 398:	28 96       	adiw	r28, 0x08	; 8
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <DIO_u8SetPortDirection+0x6>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <DIO_u8SetPortDirection+0x8>
 3b2:	0f 92       	push	r0
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	8a 83       	std	Y+2, r24	; 0x02
 3ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 3bc:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	3d 83       	std	Y+5, r19	; 0x05
 3c6:	2c 83       	std	Y+4, r18	; 0x04
 3c8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ca:	9d 81       	ldd	r25, Y+5	; 0x05
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	91 05       	cpc	r25, r1
 3d0:	d1 f0       	breq	.+52     	; 0x406 <DIO_u8SetPortDirection+0x5c>
 3d2:	2c 81       	ldd	r18, Y+4	; 0x04
 3d4:	3d 81       	ldd	r19, Y+5	; 0x05
 3d6:	22 30       	cpi	r18, 0x02	; 2
 3d8:	31 05       	cpc	r19, r1
 3da:	2c f4       	brge	.+10     	; 0x3e6 <DIO_u8SetPortDirection+0x3c>
 3dc:	8c 81       	ldd	r24, Y+4	; 0x04
 3de:	9d 81       	ldd	r25, Y+5	; 0x05
 3e0:	00 97       	sbiw	r24, 0x00	; 0
 3e2:	61 f0       	breq	.+24     	; 0x3fc <DIO_u8SetPortDirection+0x52>
 3e4:	1f c0       	rjmp	.+62     	; 0x424 <DIO_u8SetPortDirection+0x7a>
 3e6:	2c 81       	ldd	r18, Y+4	; 0x04
 3e8:	3d 81       	ldd	r19, Y+5	; 0x05
 3ea:	22 30       	cpi	r18, 0x02	; 2
 3ec:	31 05       	cpc	r19, r1
 3ee:	81 f0       	breq	.+32     	; 0x410 <DIO_u8SetPortDirection+0x66>
 3f0:	8c 81       	ldd	r24, Y+4	; 0x04
 3f2:	9d 81       	ldd	r25, Y+5	; 0x05
 3f4:	83 30       	cpi	r24, 0x03	; 3
 3f6:	91 05       	cpc	r25, r1
 3f8:	81 f0       	breq	.+32     	; 0x41a <DIO_u8SetPortDirection+0x70>
 3fa:	14 c0       	rjmp	.+40     	; 0x424 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
 3fc:	ea e3       	ldi	r30, 0x3A	; 58
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	8b 81       	ldd	r24, Y+3	; 0x03
 402:	80 83       	st	Z, r24
 404:	11 c0       	rjmp	.+34     	; 0x428 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
 406:	e7 e3       	ldi	r30, 0x37	; 55
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	80 83       	st	Z, r24
 40e:	0c c0       	rjmp	.+24     	; 0x428 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
 410:	e4 e3       	ldi	r30, 0x34	; 52
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	8b 81       	ldd	r24, Y+3	; 0x03
 416:	80 83       	st	Z, r24
 418:	07 c0       	rjmp	.+14     	; 0x428 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
 41a:	e1 e3       	ldi	r30, 0x31	; 49
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	8b 81       	ldd	r24, Y+3	; 0x03
 420:	80 83       	st	Z, r24
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 428:	89 81       	ldd	r24, Y+1	; 0x01
}
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	cf 91       	pop	r28
 436:	df 91       	pop	r29
 438:	08 95       	ret

0000043a <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 43a:	df 93       	push	r29
 43c:	cf 93       	push	r28
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
 442:	28 97       	sbiw	r28, 0x08	; 8
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	f8 94       	cli
 448:	de bf       	out	0x3e, r29	; 62
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	cd bf       	out	0x3d, r28	; 61
 44e:	8a 83       	std	Y+2, r24	; 0x02
 450:	6b 83       	std	Y+3, r22	; 0x03
 452:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 454:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
 456:	8b 81       	ldd	r24, Y+3	; 0x03
 458:	88 30       	cpi	r24, 0x08	; 8
 45a:	08 f0       	brcs	.+2      	; 0x45e <DIO_u8SetPinValue+0x24>
 45c:	f4 c0       	rjmp	.+488    	; 0x646 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
 45e:	8c 81       	ldd	r24, Y+4	; 0x04
 460:	88 23       	and	r24, r24
 462:	09 f0       	breq	.+2      	; 0x466 <DIO_u8SetPinValue+0x2c>
 464:	77 c0       	rjmp	.+238    	; 0x554 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
 466:	8a 81       	ldd	r24, Y+2	; 0x02
 468:	28 2f       	mov	r18, r24
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	38 87       	std	Y+8, r19	; 0x08
 46e:	2f 83       	std	Y+7, r18	; 0x07
 470:	8f 81       	ldd	r24, Y+7	; 0x07
 472:	98 85       	ldd	r25, Y+8	; 0x08
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	91 05       	cpc	r25, r1
 478:	59 f1       	breq	.+86     	; 0x4d0 <DIO_u8SetPinValue+0x96>
 47a:	2f 81       	ldd	r18, Y+7	; 0x07
 47c:	38 85       	ldd	r19, Y+8	; 0x08
 47e:	22 30       	cpi	r18, 0x02	; 2
 480:	31 05       	cpc	r19, r1
 482:	2c f4       	brge	.+10     	; 0x48e <DIO_u8SetPinValue+0x54>
 484:	8f 81       	ldd	r24, Y+7	; 0x07
 486:	98 85       	ldd	r25, Y+8	; 0x08
 488:	00 97       	sbiw	r24, 0x00	; 0
 48a:	69 f0       	breq	.+26     	; 0x4a6 <DIO_u8SetPinValue+0x6c>
 48c:	60 c0       	rjmp	.+192    	; 0x54e <DIO_u8SetPinValue+0x114>
 48e:	2f 81       	ldd	r18, Y+7	; 0x07
 490:	38 85       	ldd	r19, Y+8	; 0x08
 492:	22 30       	cpi	r18, 0x02	; 2
 494:	31 05       	cpc	r19, r1
 496:	89 f1       	breq	.+98     	; 0x4fa <DIO_u8SetPinValue+0xc0>
 498:	8f 81       	ldd	r24, Y+7	; 0x07
 49a:	98 85       	ldd	r25, Y+8	; 0x08
 49c:	83 30       	cpi	r24, 0x03	; 3
 49e:	91 05       	cpc	r25, r1
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <DIO_u8SetPinValue+0x6a>
 4a2:	40 c0       	rjmp	.+128    	; 0x524 <DIO_u8SetPinValue+0xea>
 4a4:	54 c0       	rjmp	.+168    	; 0x54e <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
 4a6:	ab e3       	ldi	r26, 0x3B	; 59
 4a8:	b0 e0       	ldi	r27, 0x00	; 0
 4aa:	eb e3       	ldi	r30, 0x3B	; 59
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	48 2f       	mov	r20, r24
 4b2:	8b 81       	ldd	r24, Y+3	; 0x03
 4b4:	28 2f       	mov	r18, r24
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 2e       	mov	r0, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_u8SetPinValue+0x8a>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	0a 94       	dec	r0
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_u8SetPinValue+0x86>
 4c8:	80 95       	com	r24
 4ca:	84 23       	and	r24, r20
 4cc:	8c 93       	st	X, r24
 4ce:	bd c0       	rjmp	.+378    	; 0x64a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
 4d0:	a8 e3       	ldi	r26, 0x38	; 56
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
 4d4:	e8 e3       	ldi	r30, 0x38	; 56
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	48 2f       	mov	r20, r24
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	28 2f       	mov	r18, r24
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 2e       	mov	r0, r18
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_u8SetPinValue+0xb4>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_u8SetPinValue+0xb0>
 4f2:	80 95       	com	r24
 4f4:	84 23       	and	r24, r20
 4f6:	8c 93       	st	X, r24
 4f8:	a8 c0       	rjmp	.+336    	; 0x64a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
 4fa:	a5 e3       	ldi	r26, 0x35	; 53
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	e5 e3       	ldi	r30, 0x35	; 53
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	48 2f       	mov	r20, r24
 506:	8b 81       	ldd	r24, Y+3	; 0x03
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 2e       	mov	r0, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_u8SetPinValue+0xde>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	0a 94       	dec	r0
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_u8SetPinValue+0xda>
 51c:	80 95       	com	r24
 51e:	84 23       	and	r24, r20
 520:	8c 93       	st	X, r24
 522:	93 c0       	rjmp	.+294    	; 0x64a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
 524:	a2 e3       	ldi	r26, 0x32	; 50
 526:	b0 e0       	ldi	r27, 0x00	; 0
 528:	e2 e3       	ldi	r30, 0x32	; 50
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	48 2f       	mov	r20, r24
 530:	8b 81       	ldd	r24, Y+3	; 0x03
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 2e       	mov	r0, r18
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_u8SetPinValue+0x108>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	0a 94       	dec	r0
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_u8SetPinValue+0x104>
 546:	80 95       	com	r24
 548:	84 23       	and	r24, r20
 54a:	8c 93       	st	X, r24
 54c:	7e c0       	rjmp	.+252    	; 0x64a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	89 83       	std	Y+1, r24	; 0x01
 552:	7b c0       	rjmp	.+246    	; 0x64a <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
 554:	8c 81       	ldd	r24, Y+4	; 0x04
 556:	81 30       	cpi	r24, 0x01	; 1
 558:	09 f0       	breq	.+2      	; 0x55c <DIO_u8SetPinValue+0x122>
 55a:	72 c0       	rjmp	.+228    	; 0x640 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
 55c:	8a 81       	ldd	r24, Y+2	; 0x02
 55e:	28 2f       	mov	r18, r24
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	3e 83       	std	Y+6, r19	; 0x06
 564:	2d 83       	std	Y+5, r18	; 0x05
 566:	8d 81       	ldd	r24, Y+5	; 0x05
 568:	9e 81       	ldd	r25, Y+6	; 0x06
 56a:	81 30       	cpi	r24, 0x01	; 1
 56c:	91 05       	cpc	r25, r1
 56e:	49 f1       	breq	.+82     	; 0x5c2 <DIO_u8SetPinValue+0x188>
 570:	2d 81       	ldd	r18, Y+5	; 0x05
 572:	3e 81       	ldd	r19, Y+6	; 0x06
 574:	22 30       	cpi	r18, 0x02	; 2
 576:	31 05       	cpc	r19, r1
 578:	2c f4       	brge	.+10     	; 0x584 <DIO_u8SetPinValue+0x14a>
 57a:	8d 81       	ldd	r24, Y+5	; 0x05
 57c:	9e 81       	ldd	r25, Y+6	; 0x06
 57e:	00 97       	sbiw	r24, 0x00	; 0
 580:	61 f0       	breq	.+24     	; 0x59a <DIO_u8SetPinValue+0x160>
 582:	5b c0       	rjmp	.+182    	; 0x63a <DIO_u8SetPinValue+0x200>
 584:	2d 81       	ldd	r18, Y+5	; 0x05
 586:	3e 81       	ldd	r19, Y+6	; 0x06
 588:	22 30       	cpi	r18, 0x02	; 2
 58a:	31 05       	cpc	r19, r1
 58c:	71 f1       	breq	.+92     	; 0x5ea <DIO_u8SetPinValue+0x1b0>
 58e:	8d 81       	ldd	r24, Y+5	; 0x05
 590:	9e 81       	ldd	r25, Y+6	; 0x06
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	91 05       	cpc	r25, r1
 596:	e9 f1       	breq	.+122    	; 0x612 <DIO_u8SetPinValue+0x1d8>
 598:	50 c0       	rjmp	.+160    	; 0x63a <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
 59a:	ab e3       	ldi	r26, 0x3B	; 59
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	eb e3       	ldi	r30, 0x3B	; 59
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	48 2f       	mov	r20, r24
 5a6:	8b 81       	ldd	r24, Y+3	; 0x03
 5a8:	28 2f       	mov	r18, r24
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	02 2e       	mov	r0, r18
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_u8SetPinValue+0x17e>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	0a 94       	dec	r0
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_u8SetPinValue+0x17a>
 5bc:	84 2b       	or	r24, r20
 5be:	8c 93       	st	X, r24
 5c0:	44 c0       	rjmp	.+136    	; 0x64a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
 5c2:	a8 e3       	ldi	r26, 0x38	; 56
 5c4:	b0 e0       	ldi	r27, 0x00	; 0
 5c6:	e8 e3       	ldi	r30, 0x38	; 56
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	48 2f       	mov	r20, r24
 5ce:	8b 81       	ldd	r24, Y+3	; 0x03
 5d0:	28 2f       	mov	r18, r24
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 2e       	mov	r0, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_u8SetPinValue+0x1a6>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	0a 94       	dec	r0
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_u8SetPinValue+0x1a2>
 5e4:	84 2b       	or	r24, r20
 5e6:	8c 93       	st	X, r24
 5e8:	30 c0       	rjmp	.+96     	; 0x64a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
 5ea:	a5 e3       	ldi	r26, 0x35	; 53
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	e5 e3       	ldi	r30, 0x35	; 53
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	48 2f       	mov	r20, r24
 5f6:	8b 81       	ldd	r24, Y+3	; 0x03
 5f8:	28 2f       	mov	r18, r24
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 2e       	mov	r0, r18
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_u8SetPinValue+0x1ce>
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	0a 94       	dec	r0
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_u8SetPinValue+0x1ca>
 60c:	84 2b       	or	r24, r20
 60e:	8c 93       	st	X, r24
 610:	1c c0       	rjmp	.+56     	; 0x64a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
 612:	a2 e3       	ldi	r26, 0x32	; 50
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	e2 e3       	ldi	r30, 0x32	; 50
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	48 2f       	mov	r20, r24
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	28 2f       	mov	r18, r24
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 2e       	mov	r0, r18
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_u8SetPinValue+0x1f6>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	0a 94       	dec	r0
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_u8SetPinValue+0x1f2>
 634:	84 2b       	or	r24, r20
 636:	8c 93       	st	X, r24
 638:	08 c0       	rjmp	.+16     	; 0x64a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	89 83       	std	Y+1, r24	; 0x01
 63e:	05 c0       	rjmp	.+10     	; 0x64a <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	89 83       	std	Y+1, r24	; 0x01
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 64a:	89 81       	ldd	r24, Y+1	; 0x01
}
 64c:	28 96       	adiw	r28, 0x08	; 8
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	f8 94       	cli
 652:	de bf       	out	0x3e, r29	; 62
 654:	0f be       	out	0x3f, r0	; 63
 656:	cd bf       	out	0x3d, r28	; 61
 658:	cf 91       	pop	r28
 65a:	df 91       	pop	r29
 65c:	08 95       	ret

0000065e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 65e:	df 93       	push	r29
 660:	cf 93       	push	r28
 662:	00 d0       	rcall	.+0      	; 0x664 <DIO_u8SetPortValue+0x6>
 664:	00 d0       	rcall	.+0      	; 0x666 <DIO_u8SetPortValue+0x8>
 666:	0f 92       	push	r0
 668:	cd b7       	in	r28, 0x3d	; 61
 66a:	de b7       	in	r29, 0x3e	; 62
 66c:	8a 83       	std	Y+2, r24	; 0x02
 66e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 670:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 672:	8a 81       	ldd	r24, Y+2	; 0x02
 674:	28 2f       	mov	r18, r24
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	3d 83       	std	Y+5, r19	; 0x05
 67a:	2c 83       	std	Y+4, r18	; 0x04
 67c:	8c 81       	ldd	r24, Y+4	; 0x04
 67e:	9d 81       	ldd	r25, Y+5	; 0x05
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	91 05       	cpc	r25, r1
 684:	d1 f0       	breq	.+52     	; 0x6ba <DIO_u8SetPortValue+0x5c>
 686:	2c 81       	ldd	r18, Y+4	; 0x04
 688:	3d 81       	ldd	r19, Y+5	; 0x05
 68a:	22 30       	cpi	r18, 0x02	; 2
 68c:	31 05       	cpc	r19, r1
 68e:	2c f4       	brge	.+10     	; 0x69a <DIO_u8SetPortValue+0x3c>
 690:	8c 81       	ldd	r24, Y+4	; 0x04
 692:	9d 81       	ldd	r25, Y+5	; 0x05
 694:	00 97       	sbiw	r24, 0x00	; 0
 696:	61 f0       	breq	.+24     	; 0x6b0 <DIO_u8SetPortValue+0x52>
 698:	1f c0       	rjmp	.+62     	; 0x6d8 <DIO_u8SetPortValue+0x7a>
 69a:	2c 81       	ldd	r18, Y+4	; 0x04
 69c:	3d 81       	ldd	r19, Y+5	; 0x05
 69e:	22 30       	cpi	r18, 0x02	; 2
 6a0:	31 05       	cpc	r19, r1
 6a2:	81 f0       	breq	.+32     	; 0x6c4 <DIO_u8SetPortValue+0x66>
 6a4:	8c 81       	ldd	r24, Y+4	; 0x04
 6a6:	9d 81       	ldd	r25, Y+5	; 0x05
 6a8:	83 30       	cpi	r24, 0x03	; 3
 6aa:	91 05       	cpc	r25, r1
 6ac:	81 f0       	breq	.+32     	; 0x6ce <DIO_u8SetPortValue+0x70>
 6ae:	14 c0       	rjmp	.+40     	; 0x6d8 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value;break;
 6b0:	eb e3       	ldi	r30, 0x3B	; 59
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	8b 81       	ldd	r24, Y+3	; 0x03
 6b6:	80 83       	st	Z, r24
 6b8:	11 c0       	rjmp	.+34     	; 0x6dc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value;break;
 6ba:	e8 e3       	ldi	r30, 0x38	; 56
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	8b 81       	ldd	r24, Y+3	; 0x03
 6c0:	80 83       	st	Z, r24
 6c2:	0c c0       	rjmp	.+24     	; 0x6dc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value;break;
 6c4:	e5 e3       	ldi	r30, 0x35	; 53
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ca:	80 83       	st	Z, r24
 6cc:	07 c0       	rjmp	.+14     	; 0x6dc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value;break;
 6ce:	e2 e3       	ldi	r30, 0x32	; 50
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	8b 81       	ldd	r24, Y+3	; 0x03
 6d4:	80 83       	st	Z, r24
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
}
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0
 6e8:	cf 91       	pop	r28
 6ea:	df 91       	pop	r29
 6ec:	08 95       	ret

000006ee <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
 6ee:	df 93       	push	r29
 6f0:	cf 93       	push	r28
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
 6f6:	27 97       	sbiw	r28, 0x07	; 7
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	f8 94       	cli
 6fc:	de bf       	out	0x3e, r29	; 62
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	cd bf       	out	0x3d, r28	; 61
 702:	8a 83       	std	Y+2, r24	; 0x02
 704:	6b 83       	std	Y+3, r22	; 0x03
 706:	5d 83       	std	Y+5, r21	; 0x05
 708:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 70a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=0) && (Copy_u8Pin<=DIO_u8PIN7))
 70c:	8c 81       	ldd	r24, Y+4	; 0x04
 70e:	9d 81       	ldd	r25, Y+5	; 0x05
 710:	00 97       	sbiw	r24, 0x00	; 0
 712:	09 f4       	brne	.+2      	; 0x716 <DIO_u8GetPinValue+0x28>
 714:	78 c0       	rjmp	.+240    	; 0x806 <DIO_u8GetPinValue+0x118>
 716:	8b 81       	ldd	r24, Y+3	; 0x03
 718:	88 30       	cpi	r24, 0x08	; 8
 71a:	08 f0       	brcs	.+2      	; 0x71e <DIO_u8GetPinValue+0x30>
 71c:	74 c0       	rjmp	.+232    	; 0x806 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
 71e:	8a 81       	ldd	r24, Y+2	; 0x02
 720:	28 2f       	mov	r18, r24
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	3f 83       	std	Y+7, r19	; 0x07
 726:	2e 83       	std	Y+6, r18	; 0x06
 728:	4e 81       	ldd	r20, Y+6	; 0x06
 72a:	5f 81       	ldd	r21, Y+7	; 0x07
 72c:	41 30       	cpi	r20, 0x01	; 1
 72e:	51 05       	cpc	r21, r1
 730:	59 f1       	breq	.+86     	; 0x788 <DIO_u8GetPinValue+0x9a>
 732:	8e 81       	ldd	r24, Y+6	; 0x06
 734:	9f 81       	ldd	r25, Y+7	; 0x07
 736:	82 30       	cpi	r24, 0x02	; 2
 738:	91 05       	cpc	r25, r1
 73a:	34 f4       	brge	.+12     	; 0x748 <DIO_u8GetPinValue+0x5a>
 73c:	2e 81       	ldd	r18, Y+6	; 0x06
 73e:	3f 81       	ldd	r19, Y+7	; 0x07
 740:	21 15       	cp	r18, r1
 742:	31 05       	cpc	r19, r1
 744:	69 f0       	breq	.+26     	; 0x760 <DIO_u8GetPinValue+0x72>
 746:	5c c0       	rjmp	.+184    	; 0x800 <DIO_u8GetPinValue+0x112>
 748:	4e 81       	ldd	r20, Y+6	; 0x06
 74a:	5f 81       	ldd	r21, Y+7	; 0x07
 74c:	42 30       	cpi	r20, 0x02	; 2
 74e:	51 05       	cpc	r21, r1
 750:	79 f1       	breq	.+94     	; 0x7b0 <DIO_u8GetPinValue+0xc2>
 752:	8e 81       	ldd	r24, Y+6	; 0x06
 754:	9f 81       	ldd	r25, Y+7	; 0x07
 756:	83 30       	cpi	r24, 0x03	; 3
 758:	91 05       	cpc	r25, r1
 75a:	09 f4       	brne	.+2      	; 0x75e <DIO_u8GetPinValue+0x70>
 75c:	3d c0       	rjmp	.+122    	; 0x7d8 <DIO_u8GetPinValue+0xea>
 75e:	50 c0       	rjmp	.+160    	; 0x800 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
 760:	e9 e3       	ldi	r30, 0x39	; 57
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	28 2f       	mov	r18, r24
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	8b 81       	ldd	r24, Y+3	; 0x03
 76c:	88 2f       	mov	r24, r24
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	a9 01       	movw	r20, r18
 772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_u8GetPinValue+0x8a>
 774:	55 95       	asr	r21
 776:	47 95       	ror	r20
 778:	8a 95       	dec	r24
 77a:	e2 f7       	brpl	.-8      	; 0x774 <DIO_u8GetPinValue+0x86>
 77c:	ca 01       	movw	r24, r20
 77e:	81 70       	andi	r24, 0x01	; 1
 780:	ec 81       	ldd	r30, Y+4	; 0x04
 782:	fd 81       	ldd	r31, Y+5	; 0x05
 784:	80 83       	st	Z, r24
 786:	41 c0       	rjmp	.+130    	; 0x80a <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
 788:	e6 e3       	ldi	r30, 0x36	; 54
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	80 81       	ld	r24, Z
 78e:	28 2f       	mov	r18, r24
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	8b 81       	ldd	r24, Y+3	; 0x03
 794:	88 2f       	mov	r24, r24
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	a9 01       	movw	r20, r18
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_u8GetPinValue+0xb2>
 79c:	55 95       	asr	r21
 79e:	47 95       	ror	r20
 7a0:	8a 95       	dec	r24
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_u8GetPinValue+0xae>
 7a4:	ca 01       	movw	r24, r20
 7a6:	81 70       	andi	r24, 0x01	; 1
 7a8:	ec 81       	ldd	r30, Y+4	; 0x04
 7aa:	fd 81       	ldd	r31, Y+5	; 0x05
 7ac:	80 83       	st	Z, r24
 7ae:	2d c0       	rjmp	.+90     	; 0x80a <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
 7b0:	e3 e3       	ldi	r30, 0x33	; 51
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	80 81       	ld	r24, Z
 7b6:	28 2f       	mov	r18, r24
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	8b 81       	ldd	r24, Y+3	; 0x03
 7bc:	88 2f       	mov	r24, r24
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	a9 01       	movw	r20, r18
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_u8GetPinValue+0xda>
 7c4:	55 95       	asr	r21
 7c6:	47 95       	ror	r20
 7c8:	8a 95       	dec	r24
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_u8GetPinValue+0xd6>
 7cc:	ca 01       	movw	r24, r20
 7ce:	81 70       	andi	r24, 0x01	; 1
 7d0:	ec 81       	ldd	r30, Y+4	; 0x04
 7d2:	fd 81       	ldd	r31, Y+5	; 0x05
 7d4:	80 83       	st	Z, r24
 7d6:	19 c0       	rjmp	.+50     	; 0x80a <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
 7d8:	e0 e3       	ldi	r30, 0x30	; 48
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	28 2f       	mov	r18, r24
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	8b 81       	ldd	r24, Y+3	; 0x03
 7e4:	88 2f       	mov	r24, r24
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	a9 01       	movw	r20, r18
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_u8GetPinValue+0x102>
 7ec:	55 95       	asr	r21
 7ee:	47 95       	ror	r20
 7f0:	8a 95       	dec	r24
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_u8GetPinValue+0xfe>
 7f4:	ca 01       	movw	r24, r20
 7f6:	81 70       	andi	r24, 0x01	; 1
 7f8:	ec 81       	ldd	r30, Y+4	; 0x04
 7fa:	fd 81       	ldd	r31, Y+5	; 0x05
 7fc:	80 83       	st	Z, r24
 7fe:	05 c0       	rjmp	.+10     	; 0x80a <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState=1;
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	89 83       	std	Y+1, r24	; 0x01
 804:	02 c0       	rjmp	.+4      	; 0x80a <DIO_u8GetPinValue+0x11c>
			}
		}
	else
	{
		Local_u8ErrorState=1;
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_u8ErrorState;
 80a:	89 81       	ldd	r24, Y+1	; 0x01
}
 80c:	27 96       	adiw	r28, 0x07	; 7
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	f8 94       	cli
 812:	de bf       	out	0x3e, r29	; 62
 814:	0f be       	out	0x3f, r0	; 63
 816:	cd bf       	out	0x3d, r28	; 61
 818:	cf 91       	pop	r28
 81a:	df 91       	pop	r29
 81c:	08 95       	ret

0000081e <main>:

#include "DIO_interface.h"
#include "ADC_interface.h"

void main (void)
{
 81e:	df 93       	push	r29
 820:	cf 93       	push	r28
 822:	0f 92       	push	r0
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ADCReading=0;
 828:	19 82       	std	Y+1, r1	; 0x01
	PORT_voidInit();
 82a:	0e 94 a3 00 	call	0x146	; 0x146 <PORT_voidInit>

	ADC_voidInit();
 82e:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_voidInit>

	while(1)
	{
		Local_u8ADCReading=ADC_u8GetChannelReading(0);
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_u8GetChannelReading>
 838:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u8ADCReading>=153)
 83a:	89 81       	ldd	r24, Y+1	; 0x01
 83c:	89 39       	cpi	r24, 0x99	; 153
 83e:	c8 f3       	brcs	.-14     	; 0x832 <main+0x14>
		{
			DIO_u8SetPortValue(DIO_u8PORTC,DIO_u8PORT_HIGH);
 840:	82 e0       	ldi	r24, 0x02	; 2
 842:	6f ef       	ldi	r22, 0xFF	; 255
 844:	0e 94 2f 03 	call	0x65e	; 0x65e <DIO_u8SetPortValue>
 848:	f4 cf       	rjmp	.-24     	; 0x832 <main+0x14>

0000084a <_exit>:
 84a:	f8 94       	cli

0000084c <__stop_program>:
 84c:	ff cf       	rjmp	.-2      	; 0x84c <__stop_program>
