
ADC_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002b20  00002bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800068  00800068  00002bbc  2**0
                  ALLOC
  3 .stab         00002220  00000000  00000000  00002bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c11  00000000  00000000  00004ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000059ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000078e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000087d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009580  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000096e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000996d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a13b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a1 37       	cpi	r26, 0x71	; 113
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e2       	ldi	r30, 0x20	; 32
      78:	fb e2       	ldi	r31, 0x2B	; 43
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 07 14 	call	0x280e	; 0x280e <main>
      8a:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static u16 adcVal;

u8 ADC_u8BusyState=0;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*AVCC as reference voltage*/
#if(VREF==0)
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);
#elif(VREF==1)
	CLR_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS1);
#endif

	/*Activate Left adjust result*/
#if(Resolution==0)
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
#elif(PS==5)
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
	CLR_BIT(ADCSRA,ADCSRA_ADPS0);
#elif(PS==6)
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	8c 93       	st	X, r24
#endif
	/*Enable peripheral */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u16*Copy_pu8Reading)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	28 97       	sbiw	r28, 0x08	; 8
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	8e 83       	std	Y+6, r24	; 0x06
     bcc:	78 87       	std	Y+8, r23	; 0x08
     bce:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     bd0:	1a 82       	std	Y+2, r1	; 0x02
     bd2:	1b 82       	std	Y+3, r1	; 0x03
     bd4:	1c 82       	std	Y+4, r1	; 0x04
     bd6:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=0;
     bd8:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==0)
     bda:	80 91 6c 00 	lds	r24, 0x006C
     bde:	88 23       	and	r24, r24
     be0:	09 f0       	breq	.+2      	; 0xbe4 <ADC_u8StartConversionSynch+0x2e>
     be2:	5e c0       	rjmp	.+188    	; 0xca0 <ADC_u8StartConversionSynch+0xea>
	{
		/*ADC is now busy*/
		ADC_u8BusyState=1;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 6c 00 	sts	0x006C, r24

		/*Clear the MUX bits in ADMUX register*/
		ADMUX &= MUXMask;
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	80 7e       	andi	r24, 0xE0	; 224
     bf6:	8c 93       	st	X, r24

		/*Set the required channel into the MUX bits*/
		ADMUX |= Copy_u8Channel;
     bf8:	a7 e2       	ldi	r26, 0x27	; 39
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e7 e2       	ldi	r30, 0x27	; 39
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	90 81       	ld	r25, Z
     c02:	8e 81       	ldd	r24, Y+6	; 0x06
     c04:	89 2b       	or	r24, r25
     c06:	8c 93       	st	X, r24

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     c08:	a6 e2       	ldi	r26, 0x26	; 38
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e6 e2       	ldi	r30, 0x26	; 38
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 64       	ori	r24, 0x40	; 64
     c14:	8c 93       	st	X, r24
     c16:	0b c0       	rjmp	.+22     	; 0xc2e <ADC_u8StartConversionSynch+0x78>

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter!=ADC_u32TIMEOUT) )
		{
			Local_u32Counter++;
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	9b 81       	ldd	r25, Y+3	; 0x03
     c1c:	ac 81       	ldd	r26, Y+4	; 0x04
     c1e:	bd 81       	ldd	r27, Y+5	; 0x05
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	a1 1d       	adc	r26, r1
     c24:	b1 1d       	adc	r27, r1
     c26:	8a 83       	std	Y+2, r24	; 0x02
     c28:	9b 83       	std	Y+3, r25	; 0x03
     c2a:	ac 83       	std	Y+4, r26	; 0x04
     c2c:	bd 83       	std	Y+5, r27	; 0x05

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter!=ADC_u32TIMEOUT) )
     c2e:	e6 e2       	ldi	r30, 0x26	; 38
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	82 95       	swap	r24
     c36:	8f 70       	andi	r24, 0x0F	; 15
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	81 70       	andi	r24, 0x01	; 1
     c3e:	90 70       	andi	r25, 0x00	; 0
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	61 f4       	brne	.+24     	; 0xc5c <ADC_u8StartConversionSynch+0xa6>
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	9b 81       	ldd	r25, Y+3	; 0x03
     c48:	ac 81       	ldd	r26, Y+4	; 0x04
     c4a:	bd 81       	ldd	r27, Y+5	; 0x05
     c4c:	80 32       	cpi	r24, 0x20	; 32
     c4e:	21 ea       	ldi	r18, 0xA1	; 161
     c50:	92 07       	cpc	r25, r18
     c52:	27 e0       	ldi	r18, 0x07	; 7
     c54:	a2 07       	cpc	r26, r18
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	b2 07       	cpc	r27, r18
     c5a:	f1 f6       	brne	.-68     	; 0xc18 <ADC_u8StartConversionSynch+0x62>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter==ADC_u32TIMEOUT)
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	ac 81       	ldd	r26, Y+4	; 0x04
     c62:	bd 81       	ldd	r27, Y+5	; 0x05
     c64:	80 32       	cpi	r24, 0x20	; 32
     c66:	21 ea       	ldi	r18, 0xA1	; 161
     c68:	92 07       	cpc	r25, r18
     c6a:	27 e0       	ldi	r18, 0x07	; 7
     c6c:	a2 07       	cpc	r26, r18
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	b2 07       	cpc	r27, r18
     c72:	19 f4       	brne	.+6      	; 0xc7a <ADC_u8StartConversionSynch+0xc4>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=1;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	15 c0       	rjmp	.+42     	; 0xca4 <ADC_u8StartConversionSynch+0xee>
		else
		{
			/*Loop is broken because flag is raised*/

			/*Clear the conversion clear flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     c7a:	a6 e2       	ldi	r26, 0x26	; 38
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e6 e2       	ldi	r30, 0x26	; 38
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	80 61       	ori	r24, 0x10	; 16
     c86:	8c 93       	st	X, r24
#if(Resolution==0)
			/*Return the reading*/
			*Copy_pu8Reading=ADCH;
     c88:	e5 e2       	ldi	r30, 0x25	; 37
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	ef 81       	ldd	r30, Y+7	; 0x07
     c94:	f8 85       	ldd	r31, Y+8	; 0x08
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
			adcVal=0;
			adcVal = ADCL + (ADCH << 8); //Get the values of the two ADC registers
			*Copy_pu8Reading = (adcVal & _10_BIT_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
#endif
			/*ADC is finished, return it to idle */
			ADC_u8BusyState=0;
     c9a:	10 92 6c 00 	sts	0x006C, r1
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <ADC_u8StartConversionSynch+0xee>
		}

	}
	else
	{
		Local_u8ErrorState=1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ca6:	28 96       	adiw	r28, 0x08	; 8
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel,u16*Copy_pu8Reading,void(*Copy_pvNotificationFunc)(void))
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <ADC_u8StartConversionAsynch+0x6>
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <ADC_u8StartConversionAsynch+0x8>
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <ADC_u8StartConversionAsynch+0xa>
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	8a 83       	std	Y+2, r24	; 0x02
     cc8:	7c 83       	std	Y+4, r23	; 0x04
     cca:	6b 83       	std	Y+3, r22	; 0x03
     ccc:	5e 83       	std	Y+6, r21	; 0x06
     cce:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=0;
     cd0:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==0)
     cd2:	80 91 6c 00 	lds	r24, 0x006C
     cd6:	88 23       	and	r24, r24
     cd8:	c1 f5       	brne	.+112    	; 0xd4a <ADC_u8StartConversionAsynch+0x92>
	{
		if(Copy_pu8Reading == NULL || Copy_pvNotificationFunc == NULL)
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	9c 81       	ldd	r25, Y+4	; 0x04
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	21 f0       	breq	.+8      	; 0xcea <ADC_u8StartConversionAsynch+0x32>
     ce2:	8d 81       	ldd	r24, Y+5	; 0x05
     ce4:	9e 81       	ldd	r25, Y+6	; 0x06
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	19 f4       	brne	.+6      	; 0xcf0 <ADC_u8StartConversionAsynch+0x38>
		{
			Local_u8ErrorState=1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	2f c0       	rjmp	.+94     	; 0xd4e <ADC_u8StartConversionAsynch+0x96>
		}
		else
		{
			/*Make ADC busy in order not to work until being idle 0*/
			ADC_u8BusyState=1;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	80 93 6c 00 	sts	0x006C, r24

			/*Initialize the reading variable globally*/
			ADC_pu8Reading=Copy_pu8Reading;
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	90 93 69 00 	sts	0x0069, r25
     cfe:	80 93 68 00 	sts	0x0068, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc=Copy_pvNotificationFunc;
     d02:	8d 81       	ldd	r24, Y+5	; 0x05
     d04:	9e 81       	ldd	r25, Y+6	; 0x06
     d06:	90 93 6b 00 	sts	0x006B, r25
     d0a:	80 93 6a 00 	sts	0x006A, r24

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &= MUXMask;
     d0e:	a7 e2       	ldi	r26, 0x27	; 39
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e7 e2       	ldi	r30, 0x27	; 39
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 7e       	andi	r24, 0xE0	; 224
     d1a:	8c 93       	st	X, r24

			/*Set the required channel into the MUX bits*/
			ADMUX |= Copy_u8Channel;
     d1c:	a7 e2       	ldi	r26, 0x27	; 39
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e7 e2       	ldi	r30, 0x27	; 39
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	90 81       	ld	r25, Z
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	89 2b       	or	r24, r25
     d2a:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d2c:	a6 e2       	ldi	r26, 0x26	; 38
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e6 e2       	ldi	r30, 0x26	; 38
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	80 64       	ori	r24, 0x40	; 64
     d38:	8c 93       	st	X, r24

			/*ADC interrupt enable */
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d3a:	a6 e2       	ldi	r26, 0x26	; 38
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e6 e2       	ldi	r30, 0x26	; 38
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	88 60       	ori	r24, 0x08	; 8
     d46:	8c 93       	st	X, r24
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <ADC_u8StartConversionAsynch+0x96>
		}

	}
	else
	{
		Local_u8ErrorState=1;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d50:	26 96       	adiw	r28, 0x06	; 6
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <__vector_16>:

ISR(__vector_16)
{
     d62:	1f 92       	push	r1
     d64:	0f 92       	push	r0
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	0f 92       	push	r0
     d6a:	11 24       	eor	r1, r1
     d6c:	2f 93       	push	r18
     d6e:	3f 93       	push	r19
     d70:	4f 93       	push	r20
     d72:	5f 93       	push	r21
     d74:	6f 93       	push	r22
     d76:	7f 93       	push	r23
     d78:	8f 93       	push	r24
     d7a:	9f 93       	push	r25
     d7c:	af 93       	push	r26
     d7e:	bf 93       	push	r27
     d80:	ef 93       	push	r30
     d82:	ff 93       	push	r31
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62

#if(Resolution==0)
	/*Read ADC result*/
	*ADC_pu8Reading=ADCH;
     d8c:	a0 91 68 00 	lds	r26, 0x0068
     d90:	b0 91 69 00 	lds	r27, 0x0069
     d94:	e5 e2       	ldi	r30, 0x25	; 37
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	8d 93       	st	X+, r24
     da0:	9c 93       	st	X, r25
	adcVal=0;
	adcVal = ADCL + (ADCH << 8); //Get the values of the two ADC registers
	*ADC_pu8Reading = (adcVal & _10_BIT_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
#endif
	/*Make ADC state be idle (0) because it finished */
	ADC_u8BusyState=0;
     da2:	10 92 6c 00 	sts	0x006C, r1

	/*Invoke the callback notification function*/
	(*ADC_pvCallBackNotificationFunc)();
     da6:	e0 91 6a 00 	lds	r30, 0x006A
     daa:	f0 91 6b 00 	lds	r31, 0x006B
     dae:	09 95       	icall

	/*Disable ADC conversion complete interrupt*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     db0:	a6 e2       	ldi	r26, 0x26	; 38
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e6 e2       	ldi	r30, 0x26	; 38
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	87 7f       	andi	r24, 0xF7	; 247
     dbc:	8c 93       	st	X, r24


}
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	ff 91       	pop	r31
     dc4:	ef 91       	pop	r30
     dc6:	bf 91       	pop	r27
     dc8:	af 91       	pop	r26
     dca:	9f 91       	pop	r25
     dcc:	8f 91       	pop	r24
     dce:	7f 91       	pop	r23
     dd0:	6f 91       	pop	r22
     dd2:	5f 91       	pop	r21
     dd4:	4f 91       	pop	r20
     dd6:	3f 91       	pop	r19
     dd8:	2f 91       	pop	r18
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	0f 90       	pop	r0
     de0:	1f 90       	pop	r1
     de2:	18 95       	reti

00000de4 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	6d 97       	sbiw	r28, 0x1d	; 29
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	8d 8f       	std	Y+29, r24	; 0x1d


	/*Set RS pin to low for command*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     e04:	82 e0       	ldi	r24, 0x02	; 2
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
#ifdef _FOUR_BIT

	/*Send The first Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Command,7)==1)
     e0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e10:	88 1f       	adc	r24, r24
     e12:	88 27       	eor	r24, r24
     e14:	88 1f       	adc	r24, r24
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	31 f4       	brne	.+12     	; 0xe26 <CLCD_voidSendCommand+0x42>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	67 e0       	ldi	r22, 0x07	; 7
     e1e:	41 e0       	ldi	r20, 0x01	; 1
     e20:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
     e24:	05 c0       	rjmp	.+10     	; 0xe30 <CLCD_voidSendCommand+0x4c>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	67 e0       	ldi	r22, 0x07	; 7
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,6)==1)
     e30:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e32:	82 95       	swap	r24
     e34:	86 95       	lsr	r24
     e36:	86 95       	lsr	r24
     e38:	83 70       	andi	r24, 0x03	; 3
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	81 70       	andi	r24, 0x01	; 1
     e40:	90 70       	andi	r25, 0x00	; 0
     e42:	88 23       	and	r24, r24
     e44:	31 f0       	breq	.+12     	; 0xe52 <CLCD_voidSendCommand+0x6e>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	66 e0       	ldi	r22, 0x06	; 6
     e4a:	41 e0       	ldi	r20, 0x01	; 1
     e4c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <CLCD_voidSendCommand+0x78>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	66 e0       	ldi	r22, 0x06	; 6
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,5)==1)
     e5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e5e:	82 95       	swap	r24
     e60:	86 95       	lsr	r24
     e62:	87 70       	andi	r24, 0x07	; 7
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	81 70       	andi	r24, 0x01	; 1
     e6a:	90 70       	andi	r25, 0x00	; 0
     e6c:	88 23       	and	r24, r24
     e6e:	31 f0       	breq	.+12     	; 0xe7c <CLCD_voidSendCommand+0x98>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	65 e0       	ldi	r22, 0x05	; 5
     e74:	41 e0       	ldi	r20, 0x01	; 1
     e76:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
     e7a:	05 c0       	rjmp	.+10     	; 0xe86 <CLCD_voidSendCommand+0xa2>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	65 e0       	ldi	r22, 0x05	; 5
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,4)==1)
     e86:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e88:	82 95       	swap	r24
     e8a:	8f 70       	andi	r24, 0x0F	; 15
     e8c:	88 2f       	mov	r24, r24
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	81 70       	andi	r24, 0x01	; 1
     e92:	90 70       	andi	r25, 0x00	; 0
     e94:	88 23       	and	r24, r24
     e96:	31 f0       	breq	.+12     	; 0xea4 <CLCD_voidSendCommand+0xc0>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	64 e0       	ldi	r22, 0x04	; 4
     e9c:	41 e0       	ldi	r20, 0x01	; 1
     e9e:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <CLCD_voidSendCommand+0xca>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	64 e0       	ldi	r22, 0x04	; 4
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	62 e0       	ldi	r22, 0x02	; 2
     eb2:	41 e0       	ldi	r20, 0x01	; 1
     eb4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	a0 e0       	ldi	r26, 0x00	; 0
     ebe:	b0 e4       	ldi	r27, 0x40	; 64
     ec0:	89 8f       	std	Y+25, r24	; 0x19
     ec2:	9a 8f       	std	Y+26, r25	; 0x1a
     ec4:	ab 8f       	std	Y+27, r26	; 0x1b
     ec6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec8:	69 8d       	ldd	r22, Y+25	; 0x19
     eca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ecc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ece:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	4a ef       	ldi	r20, 0xFA	; 250
     ed6:	54 e4       	ldi	r21, 0x44	; 68
     ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	8d 8b       	std	Y+21, r24	; 0x15
     ee2:	9e 8b       	std	Y+22, r25	; 0x16
     ee4:	af 8b       	std	Y+23, r26	; 0x17
     ee6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ee8:	6d 89       	ldd	r22, Y+21	; 0x15
     eea:	7e 89       	ldd	r23, Y+22	; 0x16
     eec:	8f 89       	ldd	r24, Y+23	; 0x17
     eee:	98 8d       	ldd	r25, Y+24	; 0x18
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e8       	ldi	r20, 0x80	; 128
     ef6:	5f e3       	ldi	r21, 0x3F	; 63
     ef8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     efc:	88 23       	and	r24, r24
     efe:	2c f4       	brge	.+10     	; 0xf0a <CLCD_voidSendCommand+0x126>
		__ticks = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	9c 8b       	std	Y+20, r25	; 0x14
     f06:	8b 8b       	std	Y+19, r24	; 0x13
     f08:	3f c0       	rjmp	.+126    	; 0xf88 <CLCD_voidSendCommand+0x1a4>
	else if (__tmp > 65535)
     f0a:	6d 89       	ldd	r22, Y+21	; 0x15
     f0c:	7e 89       	ldd	r23, Y+22	; 0x16
     f0e:	8f 89       	ldd	r24, Y+23	; 0x17
     f10:	98 8d       	ldd	r25, Y+24	; 0x18
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	3f ef       	ldi	r19, 0xFF	; 255
     f16:	4f e7       	ldi	r20, 0x7F	; 127
     f18:	57 e4       	ldi	r21, 0x47	; 71
     f1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f1e:	18 16       	cp	r1, r24
     f20:	4c f5       	brge	.+82     	; 0xf74 <CLCD_voidSendCommand+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f22:	69 8d       	ldd	r22, Y+25	; 0x19
     f24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e2       	ldi	r20, 0x20	; 32
     f30:	51 e4       	ldi	r21, 0x41	; 65
     f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	bc 01       	movw	r22, r24
     f3c:	cd 01       	movw	r24, r26
     f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	9c 8b       	std	Y+20, r25	; 0x14
     f48:	8b 8b       	std	Y+19, r24	; 0x13
     f4a:	0f c0       	rjmp	.+30     	; 0xf6a <CLCD_voidSendCommand+0x186>
     f4c:	88 ec       	ldi	r24, 0xC8	; 200
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9a 8b       	std	Y+18, r25	; 0x12
     f52:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f54:	89 89       	ldd	r24, Y+17	; 0x11
     f56:	9a 89       	ldd	r25, Y+18	; 0x12
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <CLCD_voidSendCommand+0x174>
     f5c:	9a 8b       	std	Y+18, r25	; 0x12
     f5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f60:	8b 89       	ldd	r24, Y+19	; 0x13
     f62:	9c 89       	ldd	r25, Y+20	; 0x14
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	9c 8b       	std	Y+20, r25	; 0x14
     f68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6a:	8b 89       	ldd	r24, Y+19	; 0x13
     f6c:	9c 89       	ldd	r25, Y+20	; 0x14
     f6e:	00 97       	sbiw	r24, 0x00	; 0
     f70:	69 f7       	brne	.-38     	; 0xf4c <CLCD_voidSendCommand+0x168>
     f72:	14 c0       	rjmp	.+40     	; 0xf9c <CLCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f74:	6d 89       	ldd	r22, Y+21	; 0x15
     f76:	7e 89       	ldd	r23, Y+22	; 0x16
     f78:	8f 89       	ldd	r24, Y+23	; 0x17
     f7a:	98 8d       	ldd	r25, Y+24	; 0x18
     f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9c 8b       	std	Y+20, r25	; 0x14
     f86:	8b 8b       	std	Y+19, r24	; 0x13
     f88:	8b 89       	ldd	r24, Y+19	; 0x13
     f8a:	9c 89       	ldd	r25, Y+20	; 0x14
     f8c:	98 8b       	std	Y+16, r25	; 0x10
     f8e:	8f 87       	std	Y+15, r24	; 0x0f
     f90:	8f 85       	ldd	r24, Y+15	; 0x0f
     f92:	98 89       	ldd	r25, Y+16	; 0x10
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <CLCD_voidSendCommand+0x1b0>
     f98:	98 8b       	std	Y+16, r25	; 0x10
     f9a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	62 e0       	ldi	r22, 0x02	; 2
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

	/*Send The Second Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Command,3)==1)
     fa6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa8:	86 95       	lsr	r24
     faa:	86 95       	lsr	r24
     fac:	86 95       	lsr	r24
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	81 70       	andi	r24, 0x01	; 1
     fb4:	90 70       	andi	r25, 0x00	; 0
     fb6:	88 23       	and	r24, r24
     fb8:	31 f0       	breq	.+12     	; 0xfc6 <CLCD_voidSendCommand+0x1e2>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	67 e0       	ldi	r22, 0x07	; 7
     fbe:	41 e0       	ldi	r20, 0x01	; 1
     fc0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <CLCD_voidSendCommand+0x1ec>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	67 e0       	ldi	r22, 0x07	; 7
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,2)==1)
     fd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fd2:	86 95       	lsr	r24
     fd4:	86 95       	lsr	r24
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	81 70       	andi	r24, 0x01	; 1
     fdc:	90 70       	andi	r25, 0x00	; 0
     fde:	88 23       	and	r24, r24
     fe0:	31 f0       	breq	.+12     	; 0xfee <CLCD_voidSendCommand+0x20a>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	66 e0       	ldi	r22, 0x06	; 6
     fe6:	41 e0       	ldi	r20, 0x01	; 1
     fe8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
     fec:	05 c0       	rjmp	.+10     	; 0xff8 <CLCD_voidSendCommand+0x214>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	66 e0       	ldi	r22, 0x06	; 6
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,1)==1)
     ff8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ffa:	86 95       	lsr	r24
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	90 70       	andi	r25, 0x00	; 0
    1004:	88 23       	and	r24, r24
    1006:	31 f0       	breq	.+12     	; 0x1014 <CLCD_voidSendCommand+0x230>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	65 e0       	ldi	r22, 0x05	; 5
    100c:	41 e0       	ldi	r20, 0x01	; 1
    100e:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    1012:	05 c0       	rjmp	.+10     	; 0x101e <CLCD_voidSendCommand+0x23a>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	65 e0       	ldi	r22, 0x05	; 5
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,0)==1)
    101e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	90 70       	andi	r25, 0x00	; 0
    1028:	88 23       	and	r24, r24
    102a:	31 f0       	breq	.+12     	; 0x1038 <CLCD_voidSendCommand+0x254>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	64 e0       	ldi	r22, 0x04	; 4
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    1036:	05 c0       	rjmp	.+10     	; 0x1042 <CLCD_voidSendCommand+0x25e>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	64 e0       	ldi	r22, 0x04	; 4
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	62 e0       	ldi	r22, 0x02	; 2
    1046:	41 e0       	ldi	r20, 0x01	; 1
    1048:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	b0 e4       	ldi	r27, 0x40	; 64
    1054:	8b 87       	std	Y+11, r24	; 0x0b
    1056:	9c 87       	std	Y+12, r25	; 0x0c
    1058:	ad 87       	std	Y+13, r26	; 0x0d
    105a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105c:	6b 85       	ldd	r22, Y+11	; 0x0b
    105e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1060:	8d 85       	ldd	r24, Y+13	; 0x0d
    1062:	9e 85       	ldd	r25, Y+14	; 0x0e
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	4a ef       	ldi	r20, 0xFA	; 250
    106a:	54 e4       	ldi	r21, 0x44	; 68
    106c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	8f 83       	std	Y+7, r24	; 0x07
    1076:	98 87       	std	Y+8, r25	; 0x08
    1078:	a9 87       	std	Y+9, r26	; 0x09
    107a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    107c:	6f 81       	ldd	r22, Y+7	; 0x07
    107e:	78 85       	ldd	r23, Y+8	; 0x08
    1080:	89 85       	ldd	r24, Y+9	; 0x09
    1082:	9a 85       	ldd	r25, Y+10	; 0x0a
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e8       	ldi	r20, 0x80	; 128
    108a:	5f e3       	ldi	r21, 0x3F	; 63
    108c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1090:	88 23       	and	r24, r24
    1092:	2c f4       	brge	.+10     	; 0x109e <CLCD_voidSendCommand+0x2ba>
		__ticks = 1;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	9e 83       	std	Y+6, r25	; 0x06
    109a:	8d 83       	std	Y+5, r24	; 0x05
    109c:	3f c0       	rjmp	.+126    	; 0x111c <CLCD_voidSendCommand+0x338>
	else if (__tmp > 65535)
    109e:	6f 81       	ldd	r22, Y+7	; 0x07
    10a0:	78 85       	ldd	r23, Y+8	; 0x08
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	3f ef       	ldi	r19, 0xFF	; 255
    10aa:	4f e7       	ldi	r20, 0x7F	; 127
    10ac:	57 e4       	ldi	r21, 0x47	; 71
    10ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b2:	18 16       	cp	r1, r24
    10b4:	4c f5       	brge	.+82     	; 0x1108 <CLCD_voidSendCommand+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    10bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e2       	ldi	r20, 0x20	; 32
    10c4:	51 e4       	ldi	r21, 0x41	; 65
    10c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	bc 01       	movw	r22, r24
    10d0:	cd 01       	movw	r24, r26
    10d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	9e 83       	std	Y+6, r25	; 0x06
    10dc:	8d 83       	std	Y+5, r24	; 0x05
    10de:	0f c0       	rjmp	.+30     	; 0x10fe <CLCD_voidSendCommand+0x31a>
    10e0:	88 ec       	ldi	r24, 0xC8	; 200
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	9c 83       	std	Y+4, r25	; 0x04
    10e6:	8b 83       	std	Y+3, r24	; 0x03
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <CLCD_voidSendCommand+0x308>
    10f0:	9c 83       	std	Y+4, r25	; 0x04
    10f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	9e 81       	ldd	r25, Y+6	; 0x06
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	69 f7       	brne	.-38     	; 0x10e0 <CLCD_voidSendCommand+0x2fc>
    1106:	14 c0       	rjmp	.+40     	; 0x1130 <CLCD_voidSendCommand+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1108:	6f 81       	ldd	r22, Y+7	; 0x07
    110a:	78 85       	ldd	r23, Y+8	; 0x08
    110c:	89 85       	ldd	r24, Y+9	; 0x09
    110e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	9e 83       	std	Y+6, r25	; 0x06
    111a:	8d 83       	std	Y+5, r24	; 0x05
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	9e 81       	ldd	r25, Y+6	; 0x06
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <CLCD_voidSendCommand+0x344>
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	62 e0       	ldi	r22, 0x02	; 2
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

	#endif


}
    113a:	6d 96       	adiw	r28, 0x1d	; 29
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	6d 97       	sbiw	r28, 0x1d	; 29
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set RS pin to High for Data*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	41 e0       	ldi	r20, 0x01	; 1
    1168:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	61 e0       	ldi	r22, 0x01	; 1
    1170:	40 e0       	ldi	r20, 0x00	; 0
    1172:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
	#ifdef _FOUR_BIT

	/*Send The first Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Data,7)==1)
    1176:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1178:	88 1f       	adc	r24, r24
    117a:	88 27       	eor	r24, r24
    117c:	88 1f       	adc	r24, r24
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	31 f4       	brne	.+12     	; 0x118e <CLCD_voidSendData+0x42>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	67 e0       	ldi	r22, 0x07	; 7
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <CLCD_voidSendData+0x4c>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	67 e0       	ldi	r22, 0x07	; 7
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,6)==1)
    1198:	8d 8d       	ldd	r24, Y+29	; 0x1d
    119a:	82 95       	swap	r24
    119c:	86 95       	lsr	r24
    119e:	86 95       	lsr	r24
    11a0:	83 70       	andi	r24, 0x03	; 3
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	81 70       	andi	r24, 0x01	; 1
    11a8:	90 70       	andi	r25, 0x00	; 0
    11aa:	88 23       	and	r24, r24
    11ac:	31 f0       	breq	.+12     	; 0x11ba <CLCD_voidSendData+0x6e>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	66 e0       	ldi	r22, 0x06	; 6
    11b2:	41 e0       	ldi	r20, 0x01	; 1
    11b4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    11b8:	05 c0       	rjmp	.+10     	; 0x11c4 <CLCD_voidSendData+0x78>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	66 e0       	ldi	r22, 0x06	; 6
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,5)==1)
    11c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11c6:	82 95       	swap	r24
    11c8:	86 95       	lsr	r24
    11ca:	87 70       	andi	r24, 0x07	; 7
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	81 70       	andi	r24, 0x01	; 1
    11d2:	90 70       	andi	r25, 0x00	; 0
    11d4:	88 23       	and	r24, r24
    11d6:	31 f0       	breq	.+12     	; 0x11e4 <CLCD_voidSendData+0x98>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	65 e0       	ldi	r22, 0x05	; 5
    11dc:	41 e0       	ldi	r20, 0x01	; 1
    11de:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <CLCD_voidSendData+0xa2>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	65 e0       	ldi	r22, 0x05	; 5
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,4)==1)
    11ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11f0:	82 95       	swap	r24
    11f2:	8f 70       	andi	r24, 0x0F	; 15
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	81 70       	andi	r24, 0x01	; 1
    11fa:	90 70       	andi	r25, 0x00	; 0
    11fc:	88 23       	and	r24, r24
    11fe:	31 f0       	breq	.+12     	; 0x120c <CLCD_voidSendData+0xc0>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	64 e0       	ldi	r22, 0x04	; 4
    1204:	41 e0       	ldi	r20, 0x01	; 1
    1206:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    120a:	05 c0       	rjmp	.+10     	; 0x1216 <CLCD_voidSendData+0xca>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	64 e0       	ldi	r22, 0x04	; 4
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	62 e0       	ldi	r22, 0x02	; 2
    121a:	41 e0       	ldi	r20, 0x01	; 1
    121c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	a0 e0       	ldi	r26, 0x00	; 0
    1226:	b0 e4       	ldi	r27, 0x40	; 64
    1228:	89 8f       	std	Y+25, r24	; 0x19
    122a:	9a 8f       	std	Y+26, r25	; 0x1a
    122c:	ab 8f       	std	Y+27, r26	; 0x1b
    122e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1230:	69 8d       	ldd	r22, Y+25	; 0x19
    1232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	4a ef       	ldi	r20, 0xFA	; 250
    123e:	54 e4       	ldi	r21, 0x44	; 68
    1240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	8d 8b       	std	Y+21, r24	; 0x15
    124a:	9e 8b       	std	Y+22, r25	; 0x16
    124c:	af 8b       	std	Y+23, r26	; 0x17
    124e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1250:	6d 89       	ldd	r22, Y+21	; 0x15
    1252:	7e 89       	ldd	r23, Y+22	; 0x16
    1254:	8f 89       	ldd	r24, Y+23	; 0x17
    1256:	98 8d       	ldd	r25, Y+24	; 0x18
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e8       	ldi	r20, 0x80	; 128
    125e:	5f e3       	ldi	r21, 0x3F	; 63
    1260:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1264:	88 23       	and	r24, r24
    1266:	2c f4       	brge	.+10     	; 0x1272 <CLCD_voidSendData+0x126>
		__ticks = 1;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	9c 8b       	std	Y+20, r25	; 0x14
    126e:	8b 8b       	std	Y+19, r24	; 0x13
    1270:	3f c0       	rjmp	.+126    	; 0x12f0 <CLCD_voidSendData+0x1a4>
	else if (__tmp > 65535)
    1272:	6d 89       	ldd	r22, Y+21	; 0x15
    1274:	7e 89       	ldd	r23, Y+22	; 0x16
    1276:	8f 89       	ldd	r24, Y+23	; 0x17
    1278:	98 8d       	ldd	r25, Y+24	; 0x18
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	3f ef       	ldi	r19, 0xFF	; 255
    127e:	4f e7       	ldi	r20, 0x7F	; 127
    1280:	57 e4       	ldi	r21, 0x47	; 71
    1282:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1286:	18 16       	cp	r1, r24
    1288:	4c f5       	brge	.+82     	; 0x12dc <CLCD_voidSendData+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128a:	69 8d       	ldd	r22, Y+25	; 0x19
    128c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    128e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1290:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	40 e2       	ldi	r20, 0x20	; 32
    1298:	51 e4       	ldi	r21, 0x41	; 65
    129a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	9c 8b       	std	Y+20, r25	; 0x14
    12b0:	8b 8b       	std	Y+19, r24	; 0x13
    12b2:	0f c0       	rjmp	.+30     	; 0x12d2 <CLCD_voidSendData+0x186>
    12b4:	88 ec       	ldi	r24, 0xC8	; 200
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9a 8b       	std	Y+18, r25	; 0x12
    12ba:	89 8b       	std	Y+17, r24	; 0x11
    12bc:	89 89       	ldd	r24, Y+17	; 0x11
    12be:	9a 89       	ldd	r25, Y+18	; 0x12
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <CLCD_voidSendData+0x174>
    12c4:	9a 8b       	std	Y+18, r25	; 0x12
    12c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ca:	9c 89       	ldd	r25, Y+20	; 0x14
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9c 8b       	std	Y+20, r25	; 0x14
    12d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d2:	8b 89       	ldd	r24, Y+19	; 0x13
    12d4:	9c 89       	ldd	r25, Y+20	; 0x14
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	69 f7       	brne	.-38     	; 0x12b4 <CLCD_voidSendData+0x168>
    12da:	14 c0       	rjmp	.+40     	; 0x1304 <CLCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12dc:	6d 89       	ldd	r22, Y+21	; 0x15
    12de:	7e 89       	ldd	r23, Y+22	; 0x16
    12e0:	8f 89       	ldd	r24, Y+23	; 0x17
    12e2:	98 8d       	ldd	r25, Y+24	; 0x18
    12e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	9c 8b       	std	Y+20, r25	; 0x14
    12ee:	8b 8b       	std	Y+19, r24	; 0x13
    12f0:	8b 89       	ldd	r24, Y+19	; 0x13
    12f2:	9c 89       	ldd	r25, Y+20	; 0x14
    12f4:	98 8b       	std	Y+16, r25	; 0x10
    12f6:	8f 87       	std	Y+15, r24	; 0x0f
    12f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12fa:	98 89       	ldd	r25, Y+16	; 0x10
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <CLCD_voidSendData+0x1b0>
    1300:	98 8b       	std	Y+16, r25	; 0x10
    1302:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	62 e0       	ldi	r22, 0x02	; 2
    1308:	40 e0       	ldi	r20, 0x00	; 0
    130a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

	/*Send The Second Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Data,3)==1)
    130e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1310:	86 95       	lsr	r24
    1312:	86 95       	lsr	r24
    1314:	86 95       	lsr	r24
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	81 70       	andi	r24, 0x01	; 1
    131c:	90 70       	andi	r25, 0x00	; 0
    131e:	88 23       	and	r24, r24
    1320:	31 f0       	breq	.+12     	; 0x132e <CLCD_voidSendData+0x1e2>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	67 e0       	ldi	r22, 0x07	; 7
    1326:	41 e0       	ldi	r20, 0x01	; 1
    1328:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    132c:	05 c0       	rjmp	.+10     	; 0x1338 <CLCD_voidSendData+0x1ec>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	67 e0       	ldi	r22, 0x07	; 7
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,2)==1)
    1338:	8d 8d       	ldd	r24, Y+29	; 0x1d
    133a:	86 95       	lsr	r24
    133c:	86 95       	lsr	r24
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	81 70       	andi	r24, 0x01	; 1
    1344:	90 70       	andi	r25, 0x00	; 0
    1346:	88 23       	and	r24, r24
    1348:	31 f0       	breq	.+12     	; 0x1356 <CLCD_voidSendData+0x20a>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	66 e0       	ldi	r22, 0x06	; 6
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    1354:	05 c0       	rjmp	.+10     	; 0x1360 <CLCD_voidSendData+0x214>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	66 e0       	ldi	r22, 0x06	; 6
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,1)==1)
    1360:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1362:	86 95       	lsr	r24
    1364:	88 2f       	mov	r24, r24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 70       	andi	r25, 0x00	; 0
    136c:	88 23       	and	r24, r24
    136e:	31 f0       	breq	.+12     	; 0x137c <CLCD_voidSendData+0x230>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	65 e0       	ldi	r22, 0x05	; 5
    1374:	41 e0       	ldi	r20, 0x01	; 1
    1376:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    137a:	05 c0       	rjmp	.+10     	; 0x1386 <CLCD_voidSendData+0x23a>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	65 e0       	ldi	r22, 0x05	; 5
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,0)==1)
    1386:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	81 70       	andi	r24, 0x01	; 1
    138e:	90 70       	andi	r25, 0x00	; 0
    1390:	88 23       	and	r24, r24
    1392:	31 f0       	breq	.+12     	; 0x13a0 <CLCD_voidSendData+0x254>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	64 e0       	ldi	r22, 0x04	; 4
    1398:	41 e0       	ldi	r20, 0x01	; 1
    139a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <CLCD_voidSendData+0x25e>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	64 e0       	ldi	r22, 0x04	; 4
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	62 e0       	ldi	r22, 0x02	; 2
    13ae:	41 e0       	ldi	r20, 0x01	; 1
    13b0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a0 e0       	ldi	r26, 0x00	; 0
    13ba:	b0 e4       	ldi	r27, 0x40	; 64
    13bc:	8b 87       	std	Y+11, r24	; 0x0b
    13be:	9c 87       	std	Y+12, r25	; 0x0c
    13c0:	ad 87       	std	Y+13, r26	; 0x0d
    13c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	4a ef       	ldi	r20, 0xFA	; 250
    13d2:	54 e4       	ldi	r21, 0x44	; 68
    13d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	8f 83       	std	Y+7, r24	; 0x07
    13de:	98 87       	std	Y+8, r25	; 0x08
    13e0:	a9 87       	std	Y+9, r26	; 0x09
    13e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e4:	6f 81       	ldd	r22, Y+7	; 0x07
    13e6:	78 85       	ldd	r23, Y+8	; 0x08
    13e8:	89 85       	ldd	r24, Y+9	; 0x09
    13ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e8       	ldi	r20, 0x80	; 128
    13f2:	5f e3       	ldi	r21, 0x3F	; 63
    13f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13f8:	88 23       	and	r24, r24
    13fa:	2c f4       	brge	.+10     	; 0x1406 <CLCD_voidSendData+0x2ba>
		__ticks = 1;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	3f c0       	rjmp	.+126    	; 0x1484 <CLCD_voidSendData+0x338>
	else if (__tmp > 65535)
    1406:	6f 81       	ldd	r22, Y+7	; 0x07
    1408:	78 85       	ldd	r23, Y+8	; 0x08
    140a:	89 85       	ldd	r24, Y+9	; 0x09
    140c:	9a 85       	ldd	r25, Y+10	; 0x0a
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	3f ef       	ldi	r19, 0xFF	; 255
    1412:	4f e7       	ldi	r20, 0x7F	; 127
    1414:	57 e4       	ldi	r21, 0x47	; 71
    1416:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141a:	18 16       	cp	r1, r24
    141c:	4c f5       	brge	.+82     	; 0x1470 <CLCD_voidSendData+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1420:	7c 85       	ldd	r23, Y+12	; 0x0c
    1422:	8d 85       	ldd	r24, Y+13	; 0x0d
    1424:	9e 85       	ldd	r25, Y+14	; 0x0e
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e2       	ldi	r20, 0x20	; 32
    142c:	51 e4       	ldi	r21, 0x41	; 65
    142e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	bc 01       	movw	r22, r24
    1438:	cd 01       	movw	r24, r26
    143a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	0f c0       	rjmp	.+30     	; 0x1466 <CLCD_voidSendData+0x31a>
    1448:	88 ec       	ldi	r24, 0xC8	; 200
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	8b 83       	std	Y+3, r24	; 0x03
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	f1 f7       	brne	.-4      	; 0x1454 <CLCD_voidSendData+0x308>
    1458:	9c 83       	std	Y+4, r25	; 0x04
    145a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	9e 83       	std	Y+6, r25	; 0x06
    1464:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	69 f7       	brne	.-38     	; 0x1448 <CLCD_voidSendData+0x2fc>
    146e:	14 c0       	rjmp	.+40     	; 0x1498 <CLCD_voidSendData+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1470:	6f 81       	ldd	r22, Y+7	; 0x07
    1472:	78 85       	ldd	r23, Y+8	; 0x08
    1474:	89 85       	ldd	r24, Y+9	; 0x09
    1476:	9a 85       	ldd	r25, Y+10	; 0x0a
    1478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	9e 83       	std	Y+6, r25	; 0x06
    1482:	8d 83       	std	Y+5, r24	; 0x05
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	9a 81       	ldd	r25, Y+2	; 0x02
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <CLCD_voidSendData+0x344>
    1494:	9a 83       	std	Y+2, r25	; 0x02
    1496:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	62 e0       	ldi	r22, 0x02	; 2
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

	#endif

}
    14a2:	6d 96       	adiw	r28, 0x1d	; 29
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <CLCD_voidInit>:

void CLCD_voidInit(u8 Copy_u8Function,u8 Copy_u8Display)
{
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	c8 56       	subi	r28, 0x68	; 104
    14c2:	d0 40       	sbci	r29, 0x00	; 0
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	fe 01       	movw	r30, r28
    14d0:	ed 59       	subi	r30, 0x9D	; 157
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	80 83       	st	Z, r24
    14d6:	fe 01       	movw	r30, r28
    14d8:	ec 59       	subi	r30, 0x9C	; 156
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	60 83       	st	Z, r22
    14de:	fe 01       	movw	r30, r28
    14e0:	e1 5a       	subi	r30, 0xA1	; 161
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	a0 e2       	ldi	r26, 0x20	; 32
    14ea:	b2 e4       	ldi	r27, 0x42	; 66
    14ec:	80 83       	st	Z, r24
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	a2 83       	std	Z+2, r26	; 0x02
    14f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f4:	8e 01       	movw	r16, r28
    14f6:	05 5a       	subi	r16, 0xA5	; 165
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	fe 01       	movw	r30, r28
    14fc:	e1 5a       	subi	r30, 0xA1	; 161
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	60 81       	ld	r22, Z
    1502:	71 81       	ldd	r23, Z+1	; 0x01
    1504:	82 81       	ldd	r24, Z+2	; 0x02
    1506:	93 81       	ldd	r25, Z+3	; 0x03
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	4a ef       	ldi	r20, 0xFA	; 250
    150e:	54 e4       	ldi	r21, 0x44	; 68
    1510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	f8 01       	movw	r30, r16
    151a:	80 83       	st	Z, r24
    151c:	91 83       	std	Z+1, r25	; 0x01
    151e:	a2 83       	std	Z+2, r26	; 0x02
    1520:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1522:	fe 01       	movw	r30, r28
    1524:	e5 5a       	subi	r30, 0xA5	; 165
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	60 81       	ld	r22, Z
    152a:	71 81       	ldd	r23, Z+1	; 0x01
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	93 81       	ldd	r25, Z+3	; 0x03
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	5f e3       	ldi	r21, 0x3F	; 63
    1538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    153c:	88 23       	and	r24, r24
    153e:	44 f4       	brge	.+16     	; 0x1550 <CLCD_voidInit+0x9c>
		__ticks = 1;
    1540:	fe 01       	movw	r30, r28
    1542:	e7 5a       	subi	r30, 0xA7	; 167
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	91 83       	std	Z+1, r25	; 0x01
    154c:	80 83       	st	Z, r24
    154e:	64 c0       	rjmp	.+200    	; 0x1618 <CLCD_voidInit+0x164>
	else if (__tmp > 65535)
    1550:	fe 01       	movw	r30, r28
    1552:	e5 5a       	subi	r30, 0xA5	; 165
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	60 81       	ld	r22, Z
    1558:	71 81       	ldd	r23, Z+1	; 0x01
    155a:	82 81       	ldd	r24, Z+2	; 0x02
    155c:	93 81       	ldd	r25, Z+3	; 0x03
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	3f ef       	ldi	r19, 0xFF	; 255
    1562:	4f e7       	ldi	r20, 0x7F	; 127
    1564:	57 e4       	ldi	r21, 0x47	; 71
    1566:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    156a:	18 16       	cp	r1, r24
    156c:	0c f0       	brlt	.+2      	; 0x1570 <CLCD_voidInit+0xbc>
    156e:	43 c0       	rjmp	.+134    	; 0x15f6 <CLCD_voidInit+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1570:	fe 01       	movw	r30, r28
    1572:	e1 5a       	subi	r30, 0xA1	; 161
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e2       	ldi	r20, 0x20	; 32
    1584:	51 e4       	ldi	r21, 0x41	; 65
    1586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	8e 01       	movw	r16, r28
    1590:	07 5a       	subi	r16, 0xA7	; 167
    1592:	1f 4f       	sbci	r17, 0xFF	; 255
    1594:	bc 01       	movw	r22, r24
    1596:	cd 01       	movw	r24, r26
    1598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	f8 01       	movw	r30, r16
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	80 83       	st	Z, r24
    15a6:	1f c0       	rjmp	.+62     	; 0x15e6 <CLCD_voidInit+0x132>
    15a8:	fe 01       	movw	r30, r28
    15aa:	e9 5a       	subi	r30, 0xA9	; 169
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	88 ec       	ldi	r24, 0xC8	; 200
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	91 83       	std	Z+1, r25	; 0x01
    15b4:	80 83       	st	Z, r24
    15b6:	fe 01       	movw	r30, r28
    15b8:	e9 5a       	subi	r30, 0xA9	; 169
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <CLCD_voidInit+0x10c>
    15c4:	fe 01       	movw	r30, r28
    15c6:	e9 5a       	subi	r30, 0xA9	; 169
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ce:	de 01       	movw	r26, r28
    15d0:	a7 5a       	subi	r26, 0xA7	; 167
    15d2:	bf 4f       	sbci	r27, 0xFF	; 255
    15d4:	fe 01       	movw	r30, r28
    15d6:	e7 5a       	subi	r30, 0xA7	; 167
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	11 96       	adiw	r26, 0x01	; 1
    15e2:	9c 93       	st	X, r25
    15e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e6:	fe 01       	movw	r30, r28
    15e8:	e7 5a       	subi	r30, 0xA7	; 167
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	80 81       	ld	r24, Z
    15ee:	91 81       	ldd	r25, Z+1	; 0x01
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	d1 f6       	brne	.-76     	; 0x15a8 <CLCD_voidInit+0xf4>
    15f4:	27 c0       	rjmp	.+78     	; 0x1644 <CLCD_voidInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f6:	8e 01       	movw	r16, r28
    15f8:	07 5a       	subi	r16, 0xA7	; 167
    15fa:	1f 4f       	sbci	r17, 0xFF	; 255
    15fc:	fe 01       	movw	r30, r28
    15fe:	e5 5a       	subi	r30, 0xA5	; 165
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	60 81       	ld	r22, Z
    1604:	71 81       	ldd	r23, Z+1	; 0x01
    1606:	82 81       	ldd	r24, Z+2	; 0x02
    1608:	93 81       	ldd	r25, Z+3	; 0x03
    160a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	f8 01       	movw	r30, r16
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24
    1618:	de 01       	movw	r26, r28
    161a:	ab 5a       	subi	r26, 0xAB	; 171
    161c:	bf 4f       	sbci	r27, 0xFF	; 255
    161e:	fe 01       	movw	r30, r28
    1620:	e7 5a       	subi	r30, 0xA7	; 167
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	8d 93       	st	X+, r24
    162a:	9c 93       	st	X, r25
    162c:	fe 01       	movw	r30, r28
    162e:	eb 5a       	subi	r30, 0xAB	; 171
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	80 81       	ld	r24, Z
    1634:	91 81       	ldd	r25, Z+1	; 0x01
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <CLCD_voidInit+0x182>
    163a:	fe 01       	movw	r30, r28
    163c:	eb 5a       	subi	r30, 0xAB	; 171
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	91 83       	std	Z+1, r25	; 0x01
    1642:	80 83       	st	Z, r24
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);*/

	/*Wait for more than 30 ms*/
	_delay_ms(40);

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	61 e0       	ldi	r22, 0x01	; 1
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

	/*Set command to data pins*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	67 e0       	ldi	r22, 0x07	; 7
    165c:	40 e0       	ldi	r20, 0x00	; 0
    165e:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	66 e0       	ldi	r22, 0x06	; 6
    1666:	40 e0       	ldi	r20, 0x00	; 0
    1668:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	65 e0       	ldi	r22, 0x05	; 5
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	64 e0       	ldi	r22, 0x04	; 4
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	62 e0       	ldi	r22, 0x02	; 2
    1684:	41 e0       	ldi	r20, 0x01	; 1
    1686:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    168a:	fe 01       	movw	r30, r28
    168c:	ef 5a       	subi	r30, 0xAF	; 175
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a0 e0       	ldi	r26, 0x00	; 0
    1696:	b0 e4       	ldi	r27, 0x40	; 64
    1698:	80 83       	st	Z, r24
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	a2 83       	std	Z+2, r26	; 0x02
    169e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	8e 01       	movw	r16, r28
    16a2:	03 5b       	subi	r16, 0xB3	; 179
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	fe 01       	movw	r30, r28
    16a8:	ef 5a       	subi	r30, 0xAF	; 175
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a ef       	ldi	r20, 0xFA	; 250
    16ba:	54 e4       	ldi	r21, 0x44	; 68
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	f8 01       	movw	r30, r16
    16c6:	80 83       	st	Z, r24
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	a2 83       	std	Z+2, r26	; 0x02
    16cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ce:	fe 01       	movw	r30, r28
    16d0:	e3 5b       	subi	r30, 0xB3	; 179
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	60 81       	ld	r22, Z
    16d6:	71 81       	ldd	r23, Z+1	; 0x01
    16d8:	82 81       	ldd	r24, Z+2	; 0x02
    16da:	93 81       	ldd	r25, Z+3	; 0x03
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e8:	88 23       	and	r24, r24
    16ea:	44 f4       	brge	.+16     	; 0x16fc <CLCD_voidInit+0x248>
		__ticks = 1;
    16ec:	fe 01       	movw	r30, r28
    16ee:	e5 5b       	subi	r30, 0xB5	; 181
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	80 83       	st	Z, r24
    16fa:	64 c0       	rjmp	.+200    	; 0x17c4 <CLCD_voidInit+0x310>
	else if (__tmp > 65535)
    16fc:	fe 01       	movw	r30, r28
    16fe:	e3 5b       	subi	r30, 0xB3	; 179
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	57 e4       	ldi	r21, 0x47	; 71
    1712:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	0c f0       	brlt	.+2      	; 0x171c <CLCD_voidInit+0x268>
    171a:	43 c0       	rjmp	.+134    	; 0x17a2 <CLCD_voidInit+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171c:	fe 01       	movw	r30, r28
    171e:	ef 5a       	subi	r30, 0xAF	; 175
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e2       	ldi	r20, 0x20	; 32
    1730:	51 e4       	ldi	r21, 0x41	; 65
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	8e 01       	movw	r16, r28
    173c:	05 5b       	subi	r16, 0xB5	; 181
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	bc 01       	movw	r22, r24
    1742:	cd 01       	movw	r24, r26
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	f8 01       	movw	r30, r16
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	80 83       	st	Z, r24
    1752:	1f c0       	rjmp	.+62     	; 0x1792 <CLCD_voidInit+0x2de>
    1754:	fe 01       	movw	r30, r28
    1756:	e7 5b       	subi	r30, 0xB7	; 183
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	88 ec       	ldi	r24, 0xC8	; 200
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    1762:	fe 01       	movw	r30, r28
    1764:	e7 5b       	subi	r30, 0xB7	; 183
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <CLCD_voidInit+0x2b8>
    1770:	fe 01       	movw	r30, r28
    1772:	e7 5b       	subi	r30, 0xB7	; 183
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177a:	de 01       	movw	r26, r28
    177c:	a5 5b       	subi	r26, 0xB5	; 181
    177e:	bf 4f       	sbci	r27, 0xFF	; 255
    1780:	fe 01       	movw	r30, r28
    1782:	e5 5b       	subi	r30, 0xB5	; 181
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	11 96       	adiw	r26, 0x01	; 1
    178e:	9c 93       	st	X, r25
    1790:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1792:	fe 01       	movw	r30, r28
    1794:	e5 5b       	subi	r30, 0xB5	; 181
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	80 81       	ld	r24, Z
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	d1 f6       	brne	.-76     	; 0x1754 <CLCD_voidInit+0x2a0>
    17a0:	27 c0       	rjmp	.+78     	; 0x17f0 <CLCD_voidInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a2:	8e 01       	movw	r16, r28
    17a4:	05 5b       	subi	r16, 0xB5	; 181
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	fe 01       	movw	r30, r28
    17aa:	e3 5b       	subi	r30, 0xB3	; 179
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	f8 01       	movw	r30, r16
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
    17c4:	de 01       	movw	r26, r28
    17c6:	a9 5b       	subi	r26, 0xB9	; 185
    17c8:	bf 4f       	sbci	r27, 0xFF	; 255
    17ca:	fe 01       	movw	r30, r28
    17cc:	e5 5b       	subi	r30, 0xB5	; 181
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	8d 93       	st	X+, r24
    17d6:	9c 93       	st	X, r25
    17d8:	fe 01       	movw	r30, r28
    17da:	e9 5b       	subi	r30, 0xB9	; 185
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	80 81       	ld	r24, Z
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <CLCD_voidInit+0x32e>
    17e6:	fe 01       	movw	r30, r28
    17e8:	e9 5b       	subi	r30, 0xB9	; 185
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	80 83       	st	Z, r24
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    17f0:	82 e0       	ldi	r24, 0x02	; 2
    17f2:	62 e0       	ldi	r22, 0x02	; 2
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

	/*Set command to data pins*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	67 e0       	ldi	r22, 0x07	; 7
    17fe:	40 e0       	ldi	r20, 0x00	; 0
    1800:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	66 e0       	ldi	r22, 0x06	; 6
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	65 e0       	ldi	r22, 0x05	; 5
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	64 e0       	ldi	r22, 0x04	; 4
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	62 e0       	ldi	r22, 0x02	; 2
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    182c:	fe 01       	movw	r30, r28
    182e:	ed 5b       	subi	r30, 0xBD	; 189
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e0       	ldi	r26, 0x00	; 0
    1838:	b0 e4       	ldi	r27, 0x40	; 64
    183a:	80 83       	st	Z, r24
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	a2 83       	std	Z+2, r26	; 0x02
    1840:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	8e 01       	movw	r16, r28
    1844:	01 5c       	subi	r16, 0xC1	; 193
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	fe 01       	movw	r30, r28
    184a:	ed 5b       	subi	r30, 0xBD	; 189
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	93 81       	ldd	r25, Z+3	; 0x03
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	4a ef       	ldi	r20, 0xFA	; 250
    185c:	54 e4       	ldi	r21, 0x44	; 68
    185e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	f8 01       	movw	r30, r16
    1868:	80 83       	st	Z, r24
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	a2 83       	std	Z+2, r26	; 0x02
    186e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1870:	fe 01       	movw	r30, r28
    1872:	ff 96       	adiw	r30, 0x3f	; 63
    1874:	60 81       	ld	r22, Z
    1876:	71 81       	ldd	r23, Z+1	; 0x01
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	93 81       	ldd	r25, Z+3	; 0x03
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <CLCD_voidInit+0x3e2>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9e af       	std	Y+62, r25	; 0x3e
    1892:	8d af       	std	Y+61, r24	; 0x3d
    1894:	46 c0       	rjmp	.+140    	; 0x1922 <CLCD_voidInit+0x46e>
	else if (__tmp > 65535)
    1896:	fe 01       	movw	r30, r28
    1898:	ff 96       	adiw	r30, 0x3f	; 63
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	82 81       	ldd	r24, Z+2	; 0x02
    18a0:	93 81       	ldd	r25, Z+3	; 0x03
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	3f ef       	ldi	r19, 0xFF	; 255
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	57 e4       	ldi	r21, 0x47	; 71
    18aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ae:	18 16       	cp	r1, r24
    18b0:	64 f5       	brge	.+88     	; 0x190a <CLCD_voidInit+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b2:	fe 01       	movw	r30, r28
    18b4:	ed 5b       	subi	r30, 0xBD	; 189
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e2       	ldi	r20, 0x20	; 32
    18c6:	51 e4       	ldi	r21, 0x41	; 65
    18c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	bc 01       	movw	r22, r24
    18d2:	cd 01       	movw	r24, r26
    18d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	9e af       	std	Y+62, r25	; 0x3e
    18de:	8d af       	std	Y+61, r24	; 0x3d
    18e0:	0f c0       	rjmp	.+30     	; 0x1900 <CLCD_voidInit+0x44c>
    18e2:	88 ec       	ldi	r24, 0xC8	; 200
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	9c af       	std	Y+60, r25	; 0x3c
    18e8:	8b af       	std	Y+59, r24	; 0x3b
    18ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    18ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <CLCD_voidInit+0x43a>
    18f2:	9c af       	std	Y+60, r25	; 0x3c
    18f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	9e af       	std	Y+62, r25	; 0x3e
    18fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1900:	8d ad       	ldd	r24, Y+61	; 0x3d
    1902:	9e ad       	ldd	r25, Y+62	; 0x3e
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	69 f7       	brne	.-38     	; 0x18e2 <CLCD_voidInit+0x42e>
    1908:	16 c0       	rjmp	.+44     	; 0x1936 <CLCD_voidInit+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190a:	fe 01       	movw	r30, r28
    190c:	ff 96       	adiw	r30, 0x3f	; 63
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9e af       	std	Y+62, r25	; 0x3e
    1920:	8d af       	std	Y+61, r24	; 0x3d
    1922:	8d ad       	ldd	r24, Y+61	; 0x3d
    1924:	9e ad       	ldd	r25, Y+62	; 0x3e
    1926:	9a af       	std	Y+58, r25	; 0x3a
    1928:	89 af       	std	Y+57, r24	; 0x39
    192a:	89 ad       	ldd	r24, Y+57	; 0x39
    192c:	9a ad       	ldd	r25, Y+58	; 0x3a
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <CLCD_voidInit+0x47a>
    1932:	9a af       	std	Y+58, r25	; 0x3a
    1934:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	62 e0       	ldi	r22, 0x02	; 2
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

	switch(Copy_u8Function)
    1940:	fe 01       	movw	r30, r28
    1942:	ed 59       	subi	r30, 0x9D	; 157
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 81       	ld	r24, Z
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	a9 96       	adiw	r28, 0x29	; 41
    194e:	3f af       	std	Y+63, r19	; 0x3f
    1950:	2e af       	std	Y+62, r18	; 0x3e
    1952:	a9 97       	sbiw	r28, 0x29	; 41
    1954:	a9 96       	adiw	r28, 0x29	; 41
    1956:	8e ad       	ldd	r24, Y+62	; 0x3e
    1958:	9f ad       	ldd	r25, Y+63	; 0x3f
    195a:	a9 97       	sbiw	r28, 0x29	; 41
    195c:	84 33       	cpi	r24, 0x34	; 52
    195e:	91 05       	cpc	r25, r1
    1960:	09 f4       	brne	.+2      	; 0x1964 <CLCD_voidInit+0x4b0>
    1962:	b5 c1       	rjmp	.+874    	; 0x1cce <CLCD_voidInit+0x81a>
    1964:	a9 96       	adiw	r28, 0x29	; 41
    1966:	ee ad       	ldd	r30, Y+62	; 0x3e
    1968:	ff ad       	ldd	r31, Y+63	; 0x3f
    196a:	a9 97       	sbiw	r28, 0x29	; 41
    196c:	e5 33       	cpi	r30, 0x35	; 53
    196e:	f1 05       	cpc	r31, r1
    1970:	4c f4       	brge	.+18     	; 0x1984 <CLCD_voidInit+0x4d0>
    1972:	a9 96       	adiw	r28, 0x29	; 41
    1974:	2e ad       	ldd	r18, Y+62	; 0x3e
    1976:	3f ad       	ldd	r19, Y+63	; 0x3f
    1978:	a9 97       	sbiw	r28, 0x29	; 41
    197a:	20 33       	cpi	r18, 0x30	; 48
    197c:	31 05       	cpc	r19, r1
    197e:	09 f4       	brne	.+2      	; 0x1982 <CLCD_voidInit+0x4ce>
    1980:	1f c1       	rjmp	.+574    	; 0x1bc0 <CLCD_voidInit+0x70c>
    1982:	2b c2       	rjmp	.+1110   	; 0x1dda <CLCD_voidInit+0x926>
    1984:	a9 96       	adiw	r28, 0x29	; 41
    1986:	8e ad       	ldd	r24, Y+62	; 0x3e
    1988:	9f ad       	ldd	r25, Y+63	; 0x3f
    198a:	a9 97       	sbiw	r28, 0x29	; 41
    198c:	88 33       	cpi	r24, 0x38	; 56
    198e:	91 05       	cpc	r25, r1
    1990:	49 f0       	breq	.+18     	; 0x19a4 <CLCD_voidInit+0x4f0>
    1992:	a9 96       	adiw	r28, 0x29	; 41
    1994:	ee ad       	ldd	r30, Y+62	; 0x3e
    1996:	ff ad       	ldd	r31, Y+63	; 0x3f
    1998:	a9 97       	sbiw	r28, 0x29	; 41
    199a:	ec 33       	cpi	r30, 0x3C	; 60
    199c:	f1 05       	cpc	r31, r1
    199e:	09 f4       	brne	.+2      	; 0x19a2 <CLCD_voidInit+0x4ee>
    19a0:	88 c0       	rjmp	.+272    	; 0x1ab2 <CLCD_voidInit+0x5fe>
    19a2:	1b c2       	rjmp	.+1078   	; 0x1dda <CLCD_voidInit+0x926>
    {
		case CLCD_2Lines_5x8Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	67 e0       	ldi	r22, 0x07	; 7
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	66 e0       	ldi	r22, 0x06	; 6
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a0 e0       	ldi	r26, 0x00	; 0
    19c8:	b0 e4       	ldi	r27, 0x40	; 64
    19ca:	8d ab       	std	Y+53, r24	; 0x35
    19cc:	9e ab       	std	Y+54, r25	; 0x36
    19ce:	af ab       	std	Y+55, r26	; 0x37
    19d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d2:	6d a9       	ldd	r22, Y+53	; 0x35
    19d4:	7e a9       	ldd	r23, Y+54	; 0x36
    19d6:	8f a9       	ldd	r24, Y+55	; 0x37
    19d8:	98 ad       	ldd	r25, Y+56	; 0x38
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	4a ef       	ldi	r20, 0xFA	; 250
    19e0:	54 e4       	ldi	r21, 0x44	; 68
    19e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	89 ab       	std	Y+49, r24	; 0x31
    19ec:	9a ab       	std	Y+50, r25	; 0x32
    19ee:	ab ab       	std	Y+51, r26	; 0x33
    19f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19f2:	69 a9       	ldd	r22, Y+49	; 0x31
    19f4:	7a a9       	ldd	r23, Y+50	; 0x32
    19f6:	8b a9       	ldd	r24, Y+51	; 0x33
    19f8:	9c a9       	ldd	r25, Y+52	; 0x34
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e8       	ldi	r20, 0x80	; 128
    1a00:	5f e3       	ldi	r21, 0x3F	; 63
    1a02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a06:	88 23       	and	r24, r24
    1a08:	2c f4       	brge	.+10     	; 0x1a14 <CLCD_voidInit+0x560>
		__ticks = 1;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	98 ab       	std	Y+48, r25	; 0x30
    1a10:	8f a7       	std	Y+47, r24	; 0x2f
    1a12:	3f c0       	rjmp	.+126    	; 0x1a92 <CLCD_voidInit+0x5de>
	else if (__tmp > 65535)
    1a14:	69 a9       	ldd	r22, Y+49	; 0x31
    1a16:	7a a9       	ldd	r23, Y+50	; 0x32
    1a18:	8b a9       	ldd	r24, Y+51	; 0x33
    1a1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	3f ef       	ldi	r19, 0xFF	; 255
    1a20:	4f e7       	ldi	r20, 0x7F	; 127
    1a22:	57 e4       	ldi	r21, 0x47	; 71
    1a24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a28:	18 16       	cp	r1, r24
    1a2a:	4c f5       	brge	.+82     	; 0x1a7e <CLCD_voidInit+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a2e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a30:	8f a9       	ldd	r24, Y+55	; 0x37
    1a32:	98 ad       	ldd	r25, Y+56	; 0x38
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e2       	ldi	r20, 0x20	; 32
    1a3a:	51 e4       	ldi	r21, 0x41	; 65
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	bc 01       	movw	r22, r24
    1a46:	cd 01       	movw	r24, r26
    1a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	98 ab       	std	Y+48, r25	; 0x30
    1a52:	8f a7       	std	Y+47, r24	; 0x2f
    1a54:	0f c0       	rjmp	.+30     	; 0x1a74 <CLCD_voidInit+0x5c0>
    1a56:	88 ec       	ldi	r24, 0xC8	; 200
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9e a7       	std	Y+46, r25	; 0x2e
    1a5c:	8d a7       	std	Y+45, r24	; 0x2d
    1a5e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a60:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <CLCD_voidInit+0x5ae>
    1a66:	9e a7       	std	Y+46, r25	; 0x2e
    1a68:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	98 ab       	std	Y+48, r25	; 0x30
    1a72:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a76:	98 a9       	ldd	r25, Y+48	; 0x30
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	69 f7       	brne	.-38     	; 0x1a56 <CLCD_voidInit+0x5a2>
    1a7c:	14 c0       	rjmp	.+40     	; 0x1aa6 <CLCD_voidInit+0x5f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a80:	7a a9       	ldd	r23, Y+50	; 0x32
    1a82:	8b a9       	ldd	r24, Y+51	; 0x33
    1a84:	9c a9       	ldd	r25, Y+52	; 0x34
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	98 ab       	std	Y+48, r25	; 0x30
    1a90:	8f a7       	std	Y+47, r24	; 0x2f
    1a92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a94:	98 a9       	ldd	r25, Y+48	; 0x30
    1a96:	9c a7       	std	Y+44, r25	; 0x2c
    1a98:	8b a7       	std	Y+43, r24	; 0x2b
    1a9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <CLCD_voidInit+0x5ea>
    1aa2:	9c a7       	std	Y+44, r25	; 0x2c
    1aa4:	8b a7       	std	Y+43, r24	; 0x2b
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	62 e0       	ldi	r22, 0x02	; 2
    1aaa:	40 e0       	ldi	r20, 0x00	; 0
    1aac:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    1ab0:	94 c1       	rjmp	.+808    	; 0x1dda <CLCD_voidInit+0x926>
            break;
        case CLCD_2Lines_5x11Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	67 e0       	ldi	r22, 0x07	; 7
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	66 e0       	ldi	r22, 0x06	; 6
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	62 e0       	ldi	r22, 0x02	; 2
    1aca:	41 e0       	ldi	r20, 0x01	; 1
    1acc:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	a0 e0       	ldi	r26, 0x00	; 0
    1ad6:	b0 e4       	ldi	r27, 0x40	; 64
    1ad8:	8f a3       	std	Y+39, r24	; 0x27
    1ada:	98 a7       	std	Y+40, r25	; 0x28
    1adc:	a9 a7       	std	Y+41, r26	; 0x29
    1ade:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ae2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ae4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ae6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	4a ef       	ldi	r20, 0xFA	; 250
    1aee:	54 e4       	ldi	r21, 0x44	; 68
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	8b a3       	std	Y+35, r24	; 0x23
    1afa:	9c a3       	std	Y+36, r25	; 0x24
    1afc:	ad a3       	std	Y+37, r26	; 0x25
    1afe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b00:	6b a1       	ldd	r22, Y+35	; 0x23
    1b02:	7c a1       	ldd	r23, Y+36	; 0x24
    1b04:	8d a1       	ldd	r24, Y+37	; 0x25
    1b06:	9e a1       	ldd	r25, Y+38	; 0x26
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e8       	ldi	r20, 0x80	; 128
    1b0e:	5f e3       	ldi	r21, 0x3F	; 63
    1b10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b14:	88 23       	and	r24, r24
    1b16:	2c f4       	brge	.+10     	; 0x1b22 <CLCD_voidInit+0x66e>
		__ticks = 1;
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	9a a3       	std	Y+34, r25	; 0x22
    1b1e:	89 a3       	std	Y+33, r24	; 0x21
    1b20:	3f c0       	rjmp	.+126    	; 0x1ba0 <CLCD_voidInit+0x6ec>
	else if (__tmp > 65535)
    1b22:	6b a1       	ldd	r22, Y+35	; 0x23
    1b24:	7c a1       	ldd	r23, Y+36	; 0x24
    1b26:	8d a1       	ldd	r24, Y+37	; 0x25
    1b28:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	3f ef       	ldi	r19, 0xFF	; 255
    1b2e:	4f e7       	ldi	r20, 0x7F	; 127
    1b30:	57 e4       	ldi	r21, 0x47	; 71
    1b32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b36:	18 16       	cp	r1, r24
    1b38:	4c f5       	brge	.+82     	; 0x1b8c <CLCD_voidInit+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b3c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b3e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b40:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e2       	ldi	r20, 0x20	; 32
    1b48:	51 e4       	ldi	r21, 0x41	; 65
    1b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	bc 01       	movw	r22, r24
    1b54:	cd 01       	movw	r24, r26
    1b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	9a a3       	std	Y+34, r25	; 0x22
    1b60:	89 a3       	std	Y+33, r24	; 0x21
    1b62:	0f c0       	rjmp	.+30     	; 0x1b82 <CLCD_voidInit+0x6ce>
    1b64:	88 ec       	ldi	r24, 0xC8	; 200
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	98 a3       	std	Y+32, r25	; 0x20
    1b6a:	8f 8f       	std	Y+31, r24	; 0x1f
    1b6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b6e:	98 a1       	ldd	r25, Y+32	; 0x20
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <CLCD_voidInit+0x6bc>
    1b74:	98 a3       	std	Y+32, r25	; 0x20
    1b76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b78:	89 a1       	ldd	r24, Y+33	; 0x21
    1b7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	9a a3       	std	Y+34, r25	; 0x22
    1b80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b82:	89 a1       	ldd	r24, Y+33	; 0x21
    1b84:	9a a1       	ldd	r25, Y+34	; 0x22
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	69 f7       	brne	.-38     	; 0x1b64 <CLCD_voidInit+0x6b0>
    1b8a:	14 c0       	rjmp	.+40     	; 0x1bb4 <CLCD_voidInit+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b90:	8d a1       	ldd	r24, Y+37	; 0x25
    1b92:	9e a1       	ldd	r25, Y+38	; 0x26
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9a a3       	std	Y+34, r25	; 0x22
    1b9e:	89 a3       	std	Y+33, r24	; 0x21
    1ba0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ba8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1baa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <CLCD_voidInit+0x6f8>
    1bb0:	9e 8f       	std	Y+30, r25	; 0x1e
    1bb2:	8d 8f       	std	Y+29, r24	; 0x1d
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
    1bb6:	62 e0       	ldi	r22, 0x02	; 2
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    1bbe:	0d c1       	rjmp	.+538    	; 0x1dda <CLCD_voidInit+0x926>
            break;
        case CLCD_1Lines_5x8Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	67 e0       	ldi	r22, 0x07	; 7
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	66 e0       	ldi	r22, 0x06	; 6
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	62 e0       	ldi	r22, 0x02	; 2
    1bd8:	41 e0       	ldi	r20, 0x01	; 1
    1bda:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a0 e0       	ldi	r26, 0x00	; 0
    1be4:	b0 e4       	ldi	r27, 0x40	; 64
    1be6:	89 8f       	std	Y+25, r24	; 0x19
    1be8:	9a 8f       	std	Y+26, r25	; 0x1a
    1bea:	ab 8f       	std	Y+27, r26	; 0x1b
    1bec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bee:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a ef       	ldi	r20, 0xFA	; 250
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	8d 8b       	std	Y+21, r24	; 0x15
    1c08:	9e 8b       	std	Y+22, r25	; 0x16
    1c0a:	af 8b       	std	Y+23, r26	; 0x17
    1c0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c10:	7e 89       	ldd	r23, Y+22	; 0x16
    1c12:	8f 89       	ldd	r24, Y+23	; 0x17
    1c14:	98 8d       	ldd	r25, Y+24	; 0x18
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e8       	ldi	r20, 0x80	; 128
    1c1c:	5f e3       	ldi	r21, 0x3F	; 63
    1c1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c22:	88 23       	and	r24, r24
    1c24:	2c f4       	brge	.+10     	; 0x1c30 <CLCD_voidInit+0x77c>
		__ticks = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	9c 8b       	std	Y+20, r25	; 0x14
    1c2c:	8b 8b       	std	Y+19, r24	; 0x13
    1c2e:	3f c0       	rjmp	.+126    	; 0x1cae <CLCD_voidInit+0x7fa>
	else if (__tmp > 65535)
    1c30:	6d 89       	ldd	r22, Y+21	; 0x15
    1c32:	7e 89       	ldd	r23, Y+22	; 0x16
    1c34:	8f 89       	ldd	r24, Y+23	; 0x17
    1c36:	98 8d       	ldd	r25, Y+24	; 0x18
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	3f ef       	ldi	r19, 0xFF	; 255
    1c3c:	4f e7       	ldi	r20, 0x7F	; 127
    1c3e:	57 e4       	ldi	r21, 0x47	; 71
    1c40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c44:	18 16       	cp	r1, r24
    1c46:	4c f5       	brge	.+82     	; 0x1c9a <CLCD_voidInit+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c48:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e2       	ldi	r20, 0x20	; 32
    1c56:	51 e4       	ldi	r21, 0x41	; 65
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9c 8b       	std	Y+20, r25	; 0x14
    1c6e:	8b 8b       	std	Y+19, r24	; 0x13
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <CLCD_voidInit+0x7dc>
    1c72:	88 ec       	ldi	r24, 0xC8	; 200
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9a 8b       	std	Y+18, r25	; 0x12
    1c78:	89 8b       	std	Y+17, r24	; 0x11
    1c7a:	89 89       	ldd	r24, Y+17	; 0x11
    1c7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <CLCD_voidInit+0x7ca>
    1c82:	9a 8b       	std	Y+18, r25	; 0x12
    1c84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c86:	8b 89       	ldd	r24, Y+19	; 0x13
    1c88:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	9c 8b       	std	Y+20, r25	; 0x14
    1c8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c90:	8b 89       	ldd	r24, Y+19	; 0x13
    1c92:	9c 89       	ldd	r25, Y+20	; 0x14
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	69 f7       	brne	.-38     	; 0x1c72 <CLCD_voidInit+0x7be>
    1c98:	14 c0       	rjmp	.+40     	; 0x1cc2 <CLCD_voidInit+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9c 8b       	std	Y+20, r25	; 0x14
    1cac:	8b 8b       	std	Y+19, r24	; 0x13
    1cae:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb2:	98 8b       	std	Y+16, r25	; 0x10
    1cb4:	8f 87       	std	Y+15, r24	; 0x0f
    1cb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb8:	98 89       	ldd	r25, Y+16	; 0x10
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <CLCD_voidInit+0x806>
    1cbe:	98 8b       	std	Y+16, r25	; 0x10
    1cc0:	8f 87       	std	Y+15, r24	; 0x0f
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	62 e0       	ldi	r22, 0x02	; 2
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    1ccc:	86 c0       	rjmp	.+268    	; 0x1dda <CLCD_voidInit+0x926>
            break;
        case CLCD_1Lines_5x11Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	67 e0       	ldi	r22, 0x07	; 7
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	66 e0       	ldi	r22, 0x06	; 6
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
    1ce4:	62 e0       	ldi	r22, 0x02	; 2
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	a0 e0       	ldi	r26, 0x00	; 0
    1cf2:	b0 e4       	ldi	r27, 0x40	; 64
    1cf4:	8b 87       	std	Y+11, r24	; 0x0b
    1cf6:	9c 87       	std	Y+12, r25	; 0x0c
    1cf8:	ad 87       	std	Y+13, r26	; 0x0d
    1cfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a ef       	ldi	r20, 0xFA	; 250
    1d0a:	54 e4       	ldi	r21, 0x44	; 68
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	8f 83       	std	Y+7, r24	; 0x07
    1d16:	98 87       	std	Y+8, r25	; 0x08
    1d18:	a9 87       	std	Y+9, r26	; 0x09
    1d1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1e:	78 85       	ldd	r23, Y+8	; 0x08
    1d20:	89 85       	ldd	r24, Y+9	; 0x09
    1d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e8       	ldi	r20, 0x80	; 128
    1d2a:	5f e3       	ldi	r21, 0x3F	; 63
    1d2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d30:	88 23       	and	r24, r24
    1d32:	2c f4       	brge	.+10     	; 0x1d3e <CLCD_voidInit+0x88a>
		__ticks = 1;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	3f c0       	rjmp	.+126    	; 0x1dbc <CLCD_voidInit+0x908>
	else if (__tmp > 65535)
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	3f ef       	ldi	r19, 0xFF	; 255
    1d4a:	4f e7       	ldi	r20, 0x7F	; 127
    1d4c:	57 e4       	ldi	r21, 0x47	; 71
    1d4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d52:	18 16       	cp	r1, r24
    1d54:	4c f5       	brge	.+82     	; 0x1da8 <CLCD_voidInit+0x8f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e2       	ldi	r20, 0x20	; 32
    1d64:	51 e4       	ldi	r21, 0x41	; 65
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	bc 01       	movw	r22, r24
    1d70:	cd 01       	movw	r24, r26
    1d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	9e 83       	std	Y+6, r25	; 0x06
    1d7c:	8d 83       	std	Y+5, r24	; 0x05
    1d7e:	0f c0       	rjmp	.+30     	; 0x1d9e <CLCD_voidInit+0x8ea>
    1d80:	88 ec       	ldi	r24, 0xC8	; 200
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	8b 83       	std	Y+3, r24	; 0x03
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <CLCD_voidInit+0x8d8>
    1d90:	9c 83       	std	Y+4, r25	; 0x04
    1d92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d94:	8d 81       	ldd	r24, Y+5	; 0x05
    1d96:	9e 81       	ldd	r25, Y+6	; 0x06
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1da0:	9e 81       	ldd	r25, Y+6	; 0x06
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	69 f7       	brne	.-38     	; 0x1d80 <CLCD_voidInit+0x8cc>
    1da6:	14 c0       	rjmp	.+40     	; 0x1dd0 <CLCD_voidInit+0x91c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da8:	6f 81       	ldd	r22, Y+7	; 0x07
    1daa:	78 85       	ldd	r23, Y+8	; 0x08
    1dac:	89 85       	ldd	r24, Y+9	; 0x09
    1dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	9e 83       	std	Y+6, r25	; 0x06
    1dba:	8d 83       	std	Y+5, r24	; 0x05
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	89 83       	std	Y+1, r24	; 0x01
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <CLCD_voidInit+0x914>
    1dcc:	9a 83       	std	Y+2, r25	; 0x02
    1dce:	89 83       	std	Y+1, r24	; 0x01
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1dd0:	82 e0       	ldi	r24, 0x02	; 2
    1dd2:	62 e0       	ldi	r22, 0x02	; 2
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <DIO_u8SetPinValue>
            break;

    }

	/*Display on off control: display enable, disable/enable cursor, no/ blink cursor*/
	switch(Copy_u8Display)
    1dda:	fe 01       	movw	r30, r28
    1ddc:	ec 59       	subi	r30, 0x9C	; 156
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	80 81       	ld	r24, Z
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	a7 96       	adiw	r28, 0x27	; 39
    1de8:	3f af       	std	Y+63, r19	; 0x3f
    1dea:	2e af       	std	Y+62, r18	; 0x3e
    1dec:	a7 97       	sbiw	r28, 0x27	; 39
    1dee:	a7 96       	adiw	r28, 0x27	; 39
    1df0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1df2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1df4:	a7 97       	sbiw	r28, 0x27	; 39
    1df6:	8e 30       	cpi	r24, 0x0E	; 14
    1df8:	91 05       	cpc	r25, r1
    1dfa:	91 f0       	breq	.+36     	; 0x1e20 <CLCD_voidInit+0x96c>
    1dfc:	a7 96       	adiw	r28, 0x27	; 39
    1dfe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e00:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e02:	a7 97       	sbiw	r28, 0x27	; 39
    1e04:	ef 30       	cpi	r30, 0x0F	; 15
    1e06:	f1 05       	cpc	r31, r1
    1e08:	79 f0       	breq	.+30     	; 0x1e28 <CLCD_voidInit+0x974>
    1e0a:	a7 96       	adiw	r28, 0x27	; 39
    1e0c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1e0e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1e10:	a7 97       	sbiw	r28, 0x27	; 39
    1e12:	2c 30       	cpi	r18, 0x0C	; 12
    1e14:	31 05       	cpc	r19, r1
    1e16:	59 f4       	brne	.+22     	; 0x1e2e <CLCD_voidInit+0x97a>
    {

        case CLCD_Curser_OFF:
            CLCD_voidSendCommand(CLCD_Curser_OFF);
    1e18:	8c e0       	ldi	r24, 0x0C	; 12
    1e1a:	0e 94 f2 06 	call	0xde4	; 0xde4 <CLCD_voidSendCommand>
    1e1e:	07 c0       	rjmp	.+14     	; 0x1e2e <CLCD_voidInit+0x97a>
            break;
        case CLCD_Curser_ON_NoBlinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_NoBlinking);
    1e20:	8e e0       	ldi	r24, 0x0E	; 14
    1e22:	0e 94 f2 06 	call	0xde4	; 0xde4 <CLCD_voidSendCommand>
    1e26:	03 c0       	rjmp	.+6      	; 0x1e2e <CLCD_voidInit+0x97a>
            break;
        case CLCD_Curser_ON_Blinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_Blinking);
    1e28:	8f e0       	ldi	r24, 0x0F	; 15
    1e2a:	0e 94 f2 06 	call	0xde4	; 0xde4 <CLCD_voidSendCommand>
            break;

    }

	/*Clear display*/
	CLCD_voidSendCommand(1);
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	0e 94 f2 06 	call	0xde4	; 0xde4 <CLCD_voidSendCommand>

	#endif


}
    1e34:	c8 59       	subi	r28, 0x98	; 152
    1e36:	df 4f       	sbci	r29, 0xFF	; 255
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	08 95       	ret

00001e4c <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <CLCD_voidSendString+0x6>
    1e52:	0f 92       	push	r0
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	9b 83       	std	Y+3, r25	; 0x03
    1e5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    1e5c:	19 82       	std	Y+1, r1	; 0x01
    1e5e:	15 c0       	rjmp	.+42     	; 0x1e8a <CLCD_voidSendString+0x3e>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	e2 0f       	add	r30, r18
    1e6e:	f3 1f       	adc	r31, r19
    1e70:	80 81       	ld	r24, Z
    1e72:	0e 94 a6 08 	call	0x114c	; 0x114c <CLCD_voidSendData>
		Local_u8Counter++;
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	8f 5f       	subi	r24, 0xFF	; 255
    1e7a:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u8Counter==16)
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	80 31       	cpi	r24, 0x10	; 16
    1e80:	21 f4       	brne	.+8      	; 0x1e8a <CLCD_voidSendString+0x3e>
			CLCD_voidGoToXY(1,0);
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	60 e0       	ldi	r22, 0x00	; 0
    1e86:	0e 94 56 0f 	call	0x1eac	; 0x1eac <CLCD_voidGoToXY>
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	9b 81       	ldd	r25, Y+3	; 0x03
    1e94:	fc 01       	movw	r30, r24
    1e96:	e2 0f       	add	r30, r18
    1e98:	f3 1f       	adc	r31, r19
    1e9a:	80 81       	ld	r24, Z
    1e9c:	88 23       	and	r24, r24
    1e9e:	01 f7       	brne	.-64     	; 0x1e60 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
		if(Local_u8Counter==16)
			CLCD_voidGoToXY(1,0);
	}
}
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <CLCD_voidGoToXY+0x6>
    1eb2:	0f 92       	push	r0
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	8a 83       	std	Y+2, r24	; 0x02
    1eba:	6b 83       	std	Y+3, r22	; 0x03
	/*Calculating the Address of the DDRAM by the coordinates X and Y*/
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	88 23       	and	r24, r24
    1ec0:	19 f4       	brne	.+6      	; 0x1ec8 <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at the first line*/
		Local_u8Address=Copy_u8YPos;
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	06 c0       	rjmp	.+12     	; 0x1ed4 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	19 f4       	brne	.+6      	; 0x1ed4 <CLCD_voidGoToXY+0x28>
	{
		/*Location is at the second line*/
		Local_u8Address=Copy_u8YPos+0x40;
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	80 5c       	subi	r24, 0xC0	; 192
    1ed2:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Send the DDRAM Address to point on the location on the screen you want to write on it with setting bit 7*/
	CLCD_voidSendCommand(Local_u8Address+128);
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	80 58       	subi	r24, 0x80	; 128
    1ed8:	0e 94 f2 06 	call	0xde4	; 0xde4 <CLCD_voidSendCommand>
}
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8arr,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	27 97       	sbiw	r28, 0x07	; 7
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	8b 83       	std	Y+3, r24	; 0x03
    1f00:	6d 83       	std	Y+5, r22	; 0x05
    1f02:	4e 83       	std	Y+6, r20	; 0x06
    1f04:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Counter,Local_u8CGRAM_Address;

	/*Calculating the Address of the CGRAM whose block is 8 bytes*/
	Local_u8CGRAM_Address=Copy_u8PatternNumber*8;
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	89 83       	std	Y+1, r24	; 0x01

	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	80 5c       	subi	r24, 0xC0	; 192
    1f1e:	0e 94 f2 06 	call	0xde4	; 0xde4 <CLCD_voidSendCommand>

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1f22:	1a 82       	std	Y+2, r1	; 0x02
    1f24:	0e c0       	rjmp	.+28     	; 0x1f42 <CLCD_voidWriteSpecialCharacter+0x5a>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	fc 01       	movw	r30, r24
    1f32:	e2 0f       	add	r30, r18
    1f34:	f3 1f       	adc	r31, r19
    1f36:	80 81       	ld	r24, Z
    1f38:	0e 94 a6 08 	call	0x114c	; 0x114c <CLCD_voidSendData>
	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	8f 5f       	subi	r24, 0xFF	; 255
    1f40:	8a 83       	std	Y+2, r24	; 0x02
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	88 30       	cpi	r24, 0x08	; 8
    1f46:	78 f3       	brcs	.-34     	; 0x1f26 <CLCD_voidWriteSpecialCharacter+0x3e>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
		}

	/*go back to the DDRAM to display the pattern in the selected position*/
		CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1f48:	8e 81       	ldd	r24, Y+6	; 0x06
    1f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <CLCD_voidGoToXY>

	/*The DDRAM accessing the CGRAM by block to Displaying the pattern*/
		CLCD_voidSendData(Copy_u8PatternNumber);
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	0e 94 a6 08 	call	0x114c	; 0x114c <CLCD_voidSendData>
}
    1f56:	27 96       	adiw	r28, 0x07	; 7
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	6b 97       	sbiw	r28, 0x1b	; 27
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	6c 8b       	std	Y+20, r22	; 0x14
    1f82:	7d 8b       	std	Y+21, r23	; 0x15
    1f84:	8e 8b       	std	Y+22, r24	; 0x16
    1f86:	9f 8b       	std	Y+23, r25	; 0x17
	/*define local counter and local itrator and temp variable for the swapping*/
	u8 i,temp;
	u8 Local_u8Counter,arr[16]={48};
    1f88:	80 e1       	ldi	r24, 0x10	; 16
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	34 96       	adiw	r30, 0x04	; 4
    1f8e:	df 01       	movw	r26, r30
    1f90:	28 2f       	mov	r18, r24
    1f92:	1d 92       	st	X+, r1
    1f94:	2a 95       	dec	r18
    1f96:	e9 f7       	brne	.-6      	; 0x1f92 <CLCD_voidWriteNumber+0x2a>
    1f98:	80 e3       	ldi	r24, 0x30	; 48
    1f9a:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8Counter=0;
    1f9c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u32Number==0)
    1f9e:	8c 89       	ldd	r24, Y+20	; 0x14
    1fa0:	9d 89       	ldd	r25, Y+21	; 0x15
    1fa2:	ae 89       	ldd	r26, Y+22	; 0x16
    1fa4:	bf 89       	ldd	r27, Y+23	; 0x17
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	a1 05       	cpc	r26, r1
    1faa:	b1 05       	cpc	r27, r1
    1fac:	91 f5       	brne	.+100    	; 0x2012 <CLCD_voidWriteNumber+0xaa>
		CLCD_voidSendData('0');
    1fae:	80 e3       	ldi	r24, 0x30	; 48
    1fb0:	0e 94 a6 08 	call	0x114c	; 0x114c <CLCD_voidSendData>
    1fb4:	99 c0       	rjmp	.+306    	; 0x20e8 <CLCD_voidWriteNumber+0x180>
	else{
	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	08 2f       	mov	r16, r24
    1fba:	10 e0       	ldi	r17, 0x00	; 0
    1fbc:	8c 89       	ldd	r24, Y+20	; 0x14
    1fbe:	9d 89       	ldd	r25, Y+21	; 0x15
    1fc0:	ae 89       	ldd	r26, Y+22	; 0x16
    1fc2:	bf 89       	ldd	r27, Y+23	; 0x17
    1fc4:	2a e0       	ldi	r18, 0x0A	; 10
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e0       	ldi	r20, 0x00	; 0
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__udivmodsi4>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	28 2f       	mov	r18, r24
    1fda:	20 5d       	subi	r18, 0xD0	; 208
    1fdc:	ce 01       	movw	r24, r28
    1fde:	04 96       	adiw	r24, 0x04	; 4
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	e0 0f       	add	r30, r16
    1fe4:	f1 1f       	adc	r31, r17
    1fe6:	20 83       	st	Z, r18
		Copy_u32Number/=10;
    1fe8:	8c 89       	ldd	r24, Y+20	; 0x14
    1fea:	9d 89       	ldd	r25, Y+21	; 0x15
    1fec:	ae 89       	ldd	r26, Y+22	; 0x16
    1fee:	bf 89       	ldd	r27, Y+23	; 0x17
    1ff0:	2a e0       	ldi	r18, 0x0A	; 10
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e0       	ldi	r20, 0x00	; 0
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	bc 01       	movw	r22, r24
    1ffa:	cd 01       	movw	r24, r26
    1ffc:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__udivmodsi4>
    2000:	da 01       	movw	r26, r20
    2002:	c9 01       	movw	r24, r18
    2004:	8c 8b       	std	Y+20, r24	; 0x14
    2006:	9d 8b       	std	Y+21, r25	; 0x15
    2008:	ae 8b       	std	Y+22, r26	; 0x16
    200a:	bf 8b       	std	Y+23, r27	; 0x17
		Local_u8Counter++;
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	8f 5f       	subi	r24, 0xFF	; 255
    2010:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u32Number==0)
		CLCD_voidSendData('0');
	else{
	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
    2012:	8c 89       	ldd	r24, Y+20	; 0x14
    2014:	9d 89       	ldd	r25, Y+21	; 0x15
    2016:	ae 89       	ldd	r26, Y+22	; 0x16
    2018:	bf 89       	ldd	r27, Y+23	; 0x17
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	a1 05       	cpc	r26, r1
    201e:	b1 05       	cpc	r27, r1
    2020:	51 f6       	brne	.-108    	; 0x1fb6 <CLCD_voidWriteNumber+0x4e>
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
		Copy_u32Number/=10;
		Local_u8Counter++;
	}
	arr[Local_u8Counter]='\0';
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	ce 01       	movw	r24, r28
    202a:	04 96       	adiw	r24, 0x04	; 4
    202c:	fc 01       	movw	r30, r24
    202e:	e2 0f       	add	r30, r18
    2030:	f3 1f       	adc	r31, r19
    2032:	10 82       	st	Z, r1

	/*Loop to reverse the array*/
	Local_u8Counter--;
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	81 50       	subi	r24, 0x01	; 1
    2038:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    203a:	1b 82       	std	Y+3, r1	; 0x03
    203c:	33 c0       	rjmp	.+102    	; 0x20a4 <CLCD_voidWriteNumber+0x13c>
	{
		temp=arr[i];
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	ce 01       	movw	r24, r28
    2046:	04 96       	adiw	r24, 0x04	; 4
    2048:	fc 01       	movw	r30, r24
    204a:	e2 0f       	add	r30, r18
    204c:	f3 1f       	adc	r31, r19
    204e:	80 81       	ld	r24, Z
    2050:	8a 83       	std	Y+2, r24	; 0x02
		arr[i]=arr[Local_u8Counter-i];
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	48 2f       	mov	r20, r24
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	88 2f       	mov	r24, r24
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	28 1b       	sub	r18, r24
    2066:	39 0b       	sbc	r19, r25
    2068:	ce 01       	movw	r24, r28
    206a:	04 96       	adiw	r24, 0x04	; 4
    206c:	fc 01       	movw	r30, r24
    206e:	e2 0f       	add	r30, r18
    2070:	f3 1f       	adc	r31, r19
    2072:	20 81       	ld	r18, Z
    2074:	ce 01       	movw	r24, r28
    2076:	04 96       	adiw	r24, 0x04	; 4
    2078:	fc 01       	movw	r30, r24
    207a:	e4 0f       	add	r30, r20
    207c:	f5 1f       	adc	r31, r21
    207e:	20 83       	st	Z, r18
		arr[Local_u8Counter-i]=temp;
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	28 1b       	sub	r18, r24
    208e:	39 0b       	sbc	r19, r25
    2090:	ce 01       	movw	r24, r28
    2092:	04 96       	adiw	r24, 0x04	; 4
    2094:	fc 01       	movw	r30, r24
    2096:	e2 0f       	add	r30, r18
    2098:	f3 1f       	adc	r31, r19
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	80 83       	st	Z, r24
	}
	arr[Local_u8Counter]='\0';

	/*Loop to reverse the array*/
	Local_u8Counter--;
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	8f 5f       	subi	r24, 0xFF	; 255
    20a2:	8b 83       	std	Y+3, r24	; 0x03
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	a8 2f       	mov	r26, r24
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	b9 8f       	std	Y+25, r27	; 0x19
    20ac:	a8 8f       	std	Y+24, r26	; 0x18
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	9b 8f       	std	Y+27, r25	; 0x1b
    20b8:	8a 8f       	std	Y+26, r24	; 0x1a
    20ba:	2a 8d       	ldd	r18, Y+26	; 0x1a
    20bc:	3b 8d       	ldd	r19, Y+27	; 0x1b
    20be:	33 23       	and	r19, r19
    20c0:	2c f4       	brge	.+10     	; 0x20cc <CLCD_voidWriteNumber+0x164>
    20c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20c6:	01 96       	adiw	r24, 0x01	; 1
    20c8:	9b 8f       	std	Y+27, r25	; 0x1b
    20ca:	8a 8f       	std	Y+26, r24	; 0x1a
    20cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20ce:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20d0:	95 95       	asr	r25
    20d2:	87 95       	ror	r24
    20d4:	a8 8d       	ldd	r26, Y+24	; 0x18
    20d6:	b9 8d       	ldd	r27, Y+25	; 0x19
    20d8:	a8 17       	cp	r26, r24
    20da:	b9 07       	cpc	r27, r25
    20dc:	0c f4       	brge	.+2      	; 0x20e0 <CLCD_voidWriteNumber+0x178>
    20de:	af cf       	rjmp	.-162    	; 0x203e <CLCD_voidWriteNumber+0xd6>
		arr[i]=arr[Local_u8Counter-i];
		arr[Local_u8Counter-i]=temp;
	}

	/*displaying the array on the screen*/
	CLCD_voidSendString(arr);
    20e0:	ce 01       	movw	r24, r28
    20e2:	04 96       	adiw	r24, 0x04	; 4
    20e4:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <CLCD_voidSendString>
	}
}
    20e8:	6b 96       	adiw	r28, 0x1b	; 27
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	08 95       	ret

000020fe <PORT_voidInit>:




void PORT_voidInit(void)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
	/*SET THE PORT Direction*/
	DDRA=PORTA_DIR;
    2106:	ea e3       	ldi	r30, 0x3A	; 58
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
    210c:	e7 e3       	ldi	r30, 0x37	; 55
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
    2112:	e4 e3       	ldi	r30, 0x34	; 52
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	8f ef       	ldi	r24, 0xFF	; 255
    2118:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    211a:	e1 e3       	ldi	r30, 0x31	; 49
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	10 82       	st	Z, r1

	/*SET THE PORT Value*/
	PORTA=PORTA_INT;
    2120:	eb e3       	ldi	r30, 0x3B	; 59
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	10 82       	st	Z, r1
	PORTB=PORTB_INT;
    2126:	e8 e3       	ldi	r30, 0x38	; 56
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	10 82       	st	Z, r1
	PORTC=PORTC_INT;
    212c:	e5 e3       	ldi	r30, 0x35	; 53
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	10 82       	st	Z, r1
	PORTD=PORTD_INT;
    2132:	e2 e3       	ldi	r30, 0x32	; 50
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	10 82       	st	Z, r1
}
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	28 97       	sbiw	r28, 0x08	; 8
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	8a 83       	std	Y+2, r24	; 0x02
    2154:	6b 83       	std	Y+3, r22	; 0x03
    2156:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2158:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	88 30       	cpi	r24, 0x08	; 8
    215e:	08 f0       	brcs	.+2      	; 0x2162 <DIO_u8SetPinDirection+0x24>
    2160:	f4 c0       	rjmp	.+488    	; 0x234a <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    2162:	8c 81       	ldd	r24, Y+4	; 0x04
    2164:	88 23       	and	r24, r24
    2166:	09 f0       	breq	.+2      	; 0x216a <DIO_u8SetPinDirection+0x2c>
    2168:	77 c0       	rjmp	.+238    	; 0x2258 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	38 87       	std	Y+8, r19	; 0x08
    2172:	2f 83       	std	Y+7, r18	; 0x07
    2174:	8f 81       	ldd	r24, Y+7	; 0x07
    2176:	98 85       	ldd	r25, Y+8	; 0x08
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	91 05       	cpc	r25, r1
    217c:	59 f1       	breq	.+86     	; 0x21d4 <DIO_u8SetPinDirection+0x96>
    217e:	2f 81       	ldd	r18, Y+7	; 0x07
    2180:	38 85       	ldd	r19, Y+8	; 0x08
    2182:	22 30       	cpi	r18, 0x02	; 2
    2184:	31 05       	cpc	r19, r1
    2186:	2c f4       	brge	.+10     	; 0x2192 <DIO_u8SetPinDirection+0x54>
    2188:	8f 81       	ldd	r24, Y+7	; 0x07
    218a:	98 85       	ldd	r25, Y+8	; 0x08
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	69 f0       	breq	.+26     	; 0x21aa <DIO_u8SetPinDirection+0x6c>
    2190:	60 c0       	rjmp	.+192    	; 0x2252 <DIO_u8SetPinDirection+0x114>
    2192:	2f 81       	ldd	r18, Y+7	; 0x07
    2194:	38 85       	ldd	r19, Y+8	; 0x08
    2196:	22 30       	cpi	r18, 0x02	; 2
    2198:	31 05       	cpc	r19, r1
    219a:	89 f1       	breq	.+98     	; 0x21fe <DIO_u8SetPinDirection+0xc0>
    219c:	8f 81       	ldd	r24, Y+7	; 0x07
    219e:	98 85       	ldd	r25, Y+8	; 0x08
    21a0:	83 30       	cpi	r24, 0x03	; 3
    21a2:	91 05       	cpc	r25, r1
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <DIO_u8SetPinDirection+0x6a>
    21a6:	40 c0       	rjmp	.+128    	; 0x2228 <DIO_u8SetPinDirection+0xea>
    21a8:	54 c0       	rjmp	.+168    	; 0x2252 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
    21aa:	aa e3       	ldi	r26, 0x3A	; 58
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	ea e3       	ldi	r30, 0x3A	; 58
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	48 2f       	mov	r20, r24
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	02 2e       	mov	r0, r18
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <DIO_u8SetPinDirection+0x8a>
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	0a 94       	dec	r0
    21ca:	e2 f7       	brpl	.-8      	; 0x21c4 <DIO_u8SetPinDirection+0x86>
    21cc:	80 95       	com	r24
    21ce:	84 23       	and	r24, r20
    21d0:	8c 93       	st	X, r24
    21d2:	bd c0       	rjmp	.+378    	; 0x234e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
    21d4:	a7 e3       	ldi	r26, 0x37	; 55
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e7 e3       	ldi	r30, 0x37	; 55
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 2e       	mov	r0, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <DIO_u8SetPinDirection+0xb4>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <DIO_u8SetPinDirection+0xb0>
    21f6:	80 95       	com	r24
    21f8:	84 23       	and	r24, r20
    21fa:	8c 93       	st	X, r24
    21fc:	a8 c0       	rjmp	.+336    	; 0x234e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
    21fe:	a4 e3       	ldi	r26, 0x34	; 52
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e4 e3       	ldi	r30, 0x34	; 52
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	48 2f       	mov	r20, r24
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	02 2e       	mov	r0, r18
    2216:	02 c0       	rjmp	.+4      	; 0x221c <DIO_u8SetPinDirection+0xde>
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	0a 94       	dec	r0
    221e:	e2 f7       	brpl	.-8      	; 0x2218 <DIO_u8SetPinDirection+0xda>
    2220:	80 95       	com	r24
    2222:	84 23       	and	r24, r20
    2224:	8c 93       	st	X, r24
    2226:	93 c0       	rjmp	.+294    	; 0x234e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
    2228:	a1 e3       	ldi	r26, 0x31	; 49
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e1 e3       	ldi	r30, 0x31	; 49
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	48 2f       	mov	r20, r24
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	02 2e       	mov	r0, r18
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <DIO_u8SetPinDirection+0x108>
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	0a 94       	dec	r0
    2248:	e2 f7       	brpl	.-8      	; 0x2242 <DIO_u8SetPinDirection+0x104>
    224a:	80 95       	com	r24
    224c:	84 23       	and	r24, r20
    224e:	8c 93       	st	X, r24
    2250:	7e c0       	rjmp	.+252    	; 0x234e <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	89 83       	std	Y+1, r24	; 0x01
    2256:	7b c0       	rjmp	.+246    	; 0x234e <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	09 f0       	breq	.+2      	; 0x2260 <DIO_u8SetPinDirection+0x122>
    225e:	72 c0       	rjmp	.+228    	; 0x2344 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	3e 83       	std	Y+6, r19	; 0x06
    2268:	2d 83       	std	Y+5, r18	; 0x05
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	91 05       	cpc	r25, r1
    2272:	49 f1       	breq	.+82     	; 0x22c6 <DIO_u8SetPinDirection+0x188>
    2274:	2d 81       	ldd	r18, Y+5	; 0x05
    2276:	3e 81       	ldd	r19, Y+6	; 0x06
    2278:	22 30       	cpi	r18, 0x02	; 2
    227a:	31 05       	cpc	r19, r1
    227c:	2c f4       	brge	.+10     	; 0x2288 <DIO_u8SetPinDirection+0x14a>
    227e:	8d 81       	ldd	r24, Y+5	; 0x05
    2280:	9e 81       	ldd	r25, Y+6	; 0x06
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	61 f0       	breq	.+24     	; 0x229e <DIO_u8SetPinDirection+0x160>
    2286:	5b c0       	rjmp	.+182    	; 0x233e <DIO_u8SetPinDirection+0x200>
    2288:	2d 81       	ldd	r18, Y+5	; 0x05
    228a:	3e 81       	ldd	r19, Y+6	; 0x06
    228c:	22 30       	cpi	r18, 0x02	; 2
    228e:	31 05       	cpc	r19, r1
    2290:	71 f1       	breq	.+92     	; 0x22ee <DIO_u8SetPinDirection+0x1b0>
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	9e 81       	ldd	r25, Y+6	; 0x06
    2296:	83 30       	cpi	r24, 0x03	; 3
    2298:	91 05       	cpc	r25, r1
    229a:	e9 f1       	breq	.+122    	; 0x2316 <DIO_u8SetPinDirection+0x1d8>
    229c:	50 c0       	rjmp	.+160    	; 0x233e <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
    229e:	aa e3       	ldi	r26, 0x3A	; 58
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	ea e3       	ldi	r30, 0x3A	; 58
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	48 2f       	mov	r20, r24
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	02 2e       	mov	r0, r18
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <DIO_u8SetPinDirection+0x17e>
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	0a 94       	dec	r0
    22be:	e2 f7       	brpl	.-8      	; 0x22b8 <DIO_u8SetPinDirection+0x17a>
    22c0:	84 2b       	or	r24, r20
    22c2:	8c 93       	st	X, r24
    22c4:	44 c0       	rjmp	.+136    	; 0x234e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
    22c6:	a7 e3       	ldi	r26, 0x37	; 55
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e7 e3       	ldi	r30, 0x37	; 55
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	48 2f       	mov	r20, r24
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	02 2e       	mov	r0, r18
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <DIO_u8SetPinDirection+0x1a6>
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	0a 94       	dec	r0
    22e6:	e2 f7       	brpl	.-8      	; 0x22e0 <DIO_u8SetPinDirection+0x1a2>
    22e8:	84 2b       	or	r24, r20
    22ea:	8c 93       	st	X, r24
    22ec:	30 c0       	rjmp	.+96     	; 0x234e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
    22ee:	a4 e3       	ldi	r26, 0x34	; 52
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e4 e3       	ldi	r30, 0x34	; 52
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	48 2f       	mov	r20, r24
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	02 2e       	mov	r0, r18
    2306:	02 c0       	rjmp	.+4      	; 0x230c <DIO_u8SetPinDirection+0x1ce>
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	0a 94       	dec	r0
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <DIO_u8SetPinDirection+0x1ca>
    2310:	84 2b       	or	r24, r20
    2312:	8c 93       	st	X, r24
    2314:	1c c0       	rjmp	.+56     	; 0x234e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
    2316:	a1 e3       	ldi	r26, 0x31	; 49
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e1 e3       	ldi	r30, 0x31	; 49
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	48 2f       	mov	r20, r24
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	02 2e       	mov	r0, r18
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <DIO_u8SetPinDirection+0x1f6>
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	0a 94       	dec	r0
    2336:	e2 f7       	brpl	.-8      	; 0x2330 <DIO_u8SetPinDirection+0x1f2>
    2338:	84 2b       	or	r24, r20
    233a:	8c 93       	st	X, r24
    233c:	08 c0       	rjmp	.+16     	; 0x234e <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	05 c0       	rjmp	.+10     	; 0x234e <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	02 c0       	rjmp	.+4      	; 0x234e <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    234e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2350:	28 96       	adiw	r28, 0x08	; 8
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	00 d0       	rcall	.+0      	; 0x2368 <DIO_u8SetPortDirection+0x6>
    2368:	00 d0       	rcall	.+0      	; 0x236a <DIO_u8SetPortDirection+0x8>
    236a:	0f 92       	push	r0
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	8a 83       	std	Y+2, r24	; 0x02
    2372:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2374:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	3d 83       	std	Y+5, r19	; 0x05
    237e:	2c 83       	std	Y+4, r18	; 0x04
    2380:	8c 81       	ldd	r24, Y+4	; 0x04
    2382:	9d 81       	ldd	r25, Y+5	; 0x05
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	91 05       	cpc	r25, r1
    2388:	d1 f0       	breq	.+52     	; 0x23be <DIO_u8SetPortDirection+0x5c>
    238a:	2c 81       	ldd	r18, Y+4	; 0x04
    238c:	3d 81       	ldd	r19, Y+5	; 0x05
    238e:	22 30       	cpi	r18, 0x02	; 2
    2390:	31 05       	cpc	r19, r1
    2392:	2c f4       	brge	.+10     	; 0x239e <DIO_u8SetPortDirection+0x3c>
    2394:	8c 81       	ldd	r24, Y+4	; 0x04
    2396:	9d 81       	ldd	r25, Y+5	; 0x05
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	61 f0       	breq	.+24     	; 0x23b4 <DIO_u8SetPortDirection+0x52>
    239c:	1f c0       	rjmp	.+62     	; 0x23dc <DIO_u8SetPortDirection+0x7a>
    239e:	2c 81       	ldd	r18, Y+4	; 0x04
    23a0:	3d 81       	ldd	r19, Y+5	; 0x05
    23a2:	22 30       	cpi	r18, 0x02	; 2
    23a4:	31 05       	cpc	r19, r1
    23a6:	81 f0       	breq	.+32     	; 0x23c8 <DIO_u8SetPortDirection+0x66>
    23a8:	8c 81       	ldd	r24, Y+4	; 0x04
    23aa:	9d 81       	ldd	r25, Y+5	; 0x05
    23ac:	83 30       	cpi	r24, 0x03	; 3
    23ae:	91 05       	cpc	r25, r1
    23b0:	81 f0       	breq	.+32     	; 0x23d2 <DIO_u8SetPortDirection+0x70>
    23b2:	14 c0       	rjmp	.+40     	; 0x23dc <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
    23b4:	ea e3       	ldi	r30, 0x3A	; 58
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	80 83       	st	Z, r24
    23bc:	11 c0       	rjmp	.+34     	; 0x23e0 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
    23be:	e7 e3       	ldi	r30, 0x37	; 55
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	80 83       	st	Z, r24
    23c6:	0c c0       	rjmp	.+24     	; 0x23e0 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
    23c8:	e4 e3       	ldi	r30, 0x34	; 52
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	80 83       	st	Z, r24
    23d0:	07 c0       	rjmp	.+14     	; 0x23e0 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
    23d2:	e1 e3       	ldi	r30, 0x31	; 49
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	80 83       	st	Z, r24
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	28 97       	sbiw	r28, 0x08	; 8
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	8a 83       	std	Y+2, r24	; 0x02
    2408:	6b 83       	std	Y+3, r22	; 0x03
    240a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    240c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	88 30       	cpi	r24, 0x08	; 8
    2412:	08 f0       	brcs	.+2      	; 0x2416 <DIO_u8SetPinValue+0x24>
    2414:	f4 c0       	rjmp	.+488    	; 0x25fe <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    2416:	8c 81       	ldd	r24, Y+4	; 0x04
    2418:	88 23       	and	r24, r24
    241a:	09 f0       	breq	.+2      	; 0x241e <DIO_u8SetPinValue+0x2c>
    241c:	77 c0       	rjmp	.+238    	; 0x250c <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	38 87       	std	Y+8, r19	; 0x08
    2426:	2f 83       	std	Y+7, r18	; 0x07
    2428:	8f 81       	ldd	r24, Y+7	; 0x07
    242a:	98 85       	ldd	r25, Y+8	; 0x08
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	91 05       	cpc	r25, r1
    2430:	59 f1       	breq	.+86     	; 0x2488 <DIO_u8SetPinValue+0x96>
    2432:	2f 81       	ldd	r18, Y+7	; 0x07
    2434:	38 85       	ldd	r19, Y+8	; 0x08
    2436:	22 30       	cpi	r18, 0x02	; 2
    2438:	31 05       	cpc	r19, r1
    243a:	2c f4       	brge	.+10     	; 0x2446 <DIO_u8SetPinValue+0x54>
    243c:	8f 81       	ldd	r24, Y+7	; 0x07
    243e:	98 85       	ldd	r25, Y+8	; 0x08
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	69 f0       	breq	.+26     	; 0x245e <DIO_u8SetPinValue+0x6c>
    2444:	60 c0       	rjmp	.+192    	; 0x2506 <DIO_u8SetPinValue+0x114>
    2446:	2f 81       	ldd	r18, Y+7	; 0x07
    2448:	38 85       	ldd	r19, Y+8	; 0x08
    244a:	22 30       	cpi	r18, 0x02	; 2
    244c:	31 05       	cpc	r19, r1
    244e:	89 f1       	breq	.+98     	; 0x24b2 <DIO_u8SetPinValue+0xc0>
    2450:	8f 81       	ldd	r24, Y+7	; 0x07
    2452:	98 85       	ldd	r25, Y+8	; 0x08
    2454:	83 30       	cpi	r24, 0x03	; 3
    2456:	91 05       	cpc	r25, r1
    2458:	09 f4       	brne	.+2      	; 0x245c <DIO_u8SetPinValue+0x6a>
    245a:	40 c0       	rjmp	.+128    	; 0x24dc <DIO_u8SetPinValue+0xea>
    245c:	54 c0       	rjmp	.+168    	; 0x2506 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
    245e:	ab e3       	ldi	r26, 0x3B	; 59
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	eb e3       	ldi	r30, 0x3B	; 59
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	48 2f       	mov	r20, r24
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	02 2e       	mov	r0, r18
    2476:	02 c0       	rjmp	.+4      	; 0x247c <DIO_u8SetPinValue+0x8a>
    2478:	88 0f       	add	r24, r24
    247a:	99 1f       	adc	r25, r25
    247c:	0a 94       	dec	r0
    247e:	e2 f7       	brpl	.-8      	; 0x2478 <DIO_u8SetPinValue+0x86>
    2480:	80 95       	com	r24
    2482:	84 23       	and	r24, r20
    2484:	8c 93       	st	X, r24
    2486:	bd c0       	rjmp	.+378    	; 0x2602 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
    2488:	a8 e3       	ldi	r26, 0x38	; 56
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e8 e3       	ldi	r30, 0x38	; 56
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	48 2f       	mov	r20, r24
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	28 2f       	mov	r18, r24
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	02 2e       	mov	r0, r18
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <DIO_u8SetPinValue+0xb4>
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	0a 94       	dec	r0
    24a8:	e2 f7       	brpl	.-8      	; 0x24a2 <DIO_u8SetPinValue+0xb0>
    24aa:	80 95       	com	r24
    24ac:	84 23       	and	r24, r20
    24ae:	8c 93       	st	X, r24
    24b0:	a8 c0       	rjmp	.+336    	; 0x2602 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
    24b2:	a5 e3       	ldi	r26, 0x35	; 53
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e5 e3       	ldi	r30, 0x35	; 53
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	48 2f       	mov	r20, r24
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	02 2e       	mov	r0, r18
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <DIO_u8SetPinValue+0xde>
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	0a 94       	dec	r0
    24d2:	e2 f7       	brpl	.-8      	; 0x24cc <DIO_u8SetPinValue+0xda>
    24d4:	80 95       	com	r24
    24d6:	84 23       	and	r24, r20
    24d8:	8c 93       	st	X, r24
    24da:	93 c0       	rjmp	.+294    	; 0x2602 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
    24dc:	a2 e3       	ldi	r26, 0x32	; 50
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e2 e3       	ldi	r30, 0x32	; 50
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	48 2f       	mov	r20, r24
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	02 2e       	mov	r0, r18
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <DIO_u8SetPinValue+0x108>
    24f6:	88 0f       	add	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	0a 94       	dec	r0
    24fc:	e2 f7       	brpl	.-8      	; 0x24f6 <DIO_u8SetPinValue+0x104>
    24fe:	80 95       	com	r24
    2500:	84 23       	and	r24, r20
    2502:	8c 93       	st	X, r24
    2504:	7e c0       	rjmp	.+252    	; 0x2602 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	89 83       	std	Y+1, r24	; 0x01
    250a:	7b c0       	rjmp	.+246    	; 0x2602 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    250c:	8c 81       	ldd	r24, Y+4	; 0x04
    250e:	81 30       	cpi	r24, 0x01	; 1
    2510:	09 f0       	breq	.+2      	; 0x2514 <DIO_u8SetPinValue+0x122>
    2512:	72 c0       	rjmp	.+228    	; 0x25f8 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	3e 83       	std	Y+6, r19	; 0x06
    251c:	2d 83       	std	Y+5, r18	; 0x05
    251e:	8d 81       	ldd	r24, Y+5	; 0x05
    2520:	9e 81       	ldd	r25, Y+6	; 0x06
    2522:	81 30       	cpi	r24, 0x01	; 1
    2524:	91 05       	cpc	r25, r1
    2526:	49 f1       	breq	.+82     	; 0x257a <DIO_u8SetPinValue+0x188>
    2528:	2d 81       	ldd	r18, Y+5	; 0x05
    252a:	3e 81       	ldd	r19, Y+6	; 0x06
    252c:	22 30       	cpi	r18, 0x02	; 2
    252e:	31 05       	cpc	r19, r1
    2530:	2c f4       	brge	.+10     	; 0x253c <DIO_u8SetPinValue+0x14a>
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	61 f0       	breq	.+24     	; 0x2552 <DIO_u8SetPinValue+0x160>
    253a:	5b c0       	rjmp	.+182    	; 0x25f2 <DIO_u8SetPinValue+0x200>
    253c:	2d 81       	ldd	r18, Y+5	; 0x05
    253e:	3e 81       	ldd	r19, Y+6	; 0x06
    2540:	22 30       	cpi	r18, 0x02	; 2
    2542:	31 05       	cpc	r19, r1
    2544:	71 f1       	breq	.+92     	; 0x25a2 <DIO_u8SetPinValue+0x1b0>
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	83 30       	cpi	r24, 0x03	; 3
    254c:	91 05       	cpc	r25, r1
    254e:	e9 f1       	breq	.+122    	; 0x25ca <DIO_u8SetPinValue+0x1d8>
    2550:	50 c0       	rjmp	.+160    	; 0x25f2 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
    2552:	ab e3       	ldi	r26, 0x3B	; 59
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	eb e3       	ldi	r30, 0x3B	; 59
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	48 2f       	mov	r20, r24
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 2e       	mov	r0, r18
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <DIO_u8SetPinValue+0x17e>
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	0a 94       	dec	r0
    2572:	e2 f7       	brpl	.-8      	; 0x256c <DIO_u8SetPinValue+0x17a>
    2574:	84 2b       	or	r24, r20
    2576:	8c 93       	st	X, r24
    2578:	44 c0       	rjmp	.+136    	; 0x2602 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
    257a:	a8 e3       	ldi	r26, 0x38	; 56
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e8 e3       	ldi	r30, 0x38	; 56
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	48 2f       	mov	r20, r24
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	02 2e       	mov	r0, r18
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <DIO_u8SetPinValue+0x1a6>
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	0a 94       	dec	r0
    259a:	e2 f7       	brpl	.-8      	; 0x2594 <DIO_u8SetPinValue+0x1a2>
    259c:	84 2b       	or	r24, r20
    259e:	8c 93       	st	X, r24
    25a0:	30 c0       	rjmp	.+96     	; 0x2602 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
    25a2:	a5 e3       	ldi	r26, 0x35	; 53
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e5 e3       	ldi	r30, 0x35	; 53
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	48 2f       	mov	r20, r24
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	02 2e       	mov	r0, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <DIO_u8SetPinValue+0x1ce>
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	0a 94       	dec	r0
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <DIO_u8SetPinValue+0x1ca>
    25c4:	84 2b       	or	r24, r20
    25c6:	8c 93       	st	X, r24
    25c8:	1c c0       	rjmp	.+56     	; 0x2602 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
    25ca:	a2 e3       	ldi	r26, 0x32	; 50
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e2 e3       	ldi	r30, 0x32	; 50
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	48 2f       	mov	r20, r24
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	02 2e       	mov	r0, r18
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <DIO_u8SetPinValue+0x1f6>
    25e4:	88 0f       	add	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	0a 94       	dec	r0
    25ea:	e2 f7       	brpl	.-8      	; 0x25e4 <DIO_u8SetPinValue+0x1f2>
    25ec:	84 2b       	or	r24, r20
    25ee:	8c 93       	st	X, r24
    25f0:	08 c0       	rjmp	.+16     	; 0x2602 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	05 c0       	rjmp	.+10     	; 0x2602 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2602:	89 81       	ldd	r24, Y+1	; 0x01
}
    2604:	28 96       	adiw	r28, 0x08	; 8
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	00 d0       	rcall	.+0      	; 0x261c <DIO_u8SetPortValue+0x6>
    261c:	00 d0       	rcall	.+0      	; 0x261e <DIO_u8SetPortValue+0x8>
    261e:	0f 92       	push	r0
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	8a 83       	std	Y+2, r24	; 0x02
    2626:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2628:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	3d 83       	std	Y+5, r19	; 0x05
    2632:	2c 83       	std	Y+4, r18	; 0x04
    2634:	8c 81       	ldd	r24, Y+4	; 0x04
    2636:	9d 81       	ldd	r25, Y+5	; 0x05
    2638:	81 30       	cpi	r24, 0x01	; 1
    263a:	91 05       	cpc	r25, r1
    263c:	d1 f0       	breq	.+52     	; 0x2672 <DIO_u8SetPortValue+0x5c>
    263e:	2c 81       	ldd	r18, Y+4	; 0x04
    2640:	3d 81       	ldd	r19, Y+5	; 0x05
    2642:	22 30       	cpi	r18, 0x02	; 2
    2644:	31 05       	cpc	r19, r1
    2646:	2c f4       	brge	.+10     	; 0x2652 <DIO_u8SetPortValue+0x3c>
    2648:	8c 81       	ldd	r24, Y+4	; 0x04
    264a:	9d 81       	ldd	r25, Y+5	; 0x05
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	61 f0       	breq	.+24     	; 0x2668 <DIO_u8SetPortValue+0x52>
    2650:	1f c0       	rjmp	.+62     	; 0x2690 <DIO_u8SetPortValue+0x7a>
    2652:	2c 81       	ldd	r18, Y+4	; 0x04
    2654:	3d 81       	ldd	r19, Y+5	; 0x05
    2656:	22 30       	cpi	r18, 0x02	; 2
    2658:	31 05       	cpc	r19, r1
    265a:	81 f0       	breq	.+32     	; 0x267c <DIO_u8SetPortValue+0x66>
    265c:	8c 81       	ldd	r24, Y+4	; 0x04
    265e:	9d 81       	ldd	r25, Y+5	; 0x05
    2660:	83 30       	cpi	r24, 0x03	; 3
    2662:	91 05       	cpc	r25, r1
    2664:	81 f0       	breq	.+32     	; 0x2686 <DIO_u8SetPortValue+0x70>
    2666:	14 c0       	rjmp	.+40     	; 0x2690 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value;break;
    2668:	eb e3       	ldi	r30, 0x3B	; 59
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	80 83       	st	Z, r24
    2670:	11 c0       	rjmp	.+34     	; 0x2694 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value;break;
    2672:	e8 e3       	ldi	r30, 0x38	; 56
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	80 83       	st	Z, r24
    267a:	0c c0       	rjmp	.+24     	; 0x2694 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value;break;
    267c:	e5 e3       	ldi	r30, 0x35	; 53
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	80 83       	st	Z, r24
    2684:	07 c0       	rjmp	.+14     	; 0x2694 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value;break;
    2686:	e2 e3       	ldi	r30, 0x32	; 50
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	80 83       	st	Z, r24
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
}
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	27 97       	sbiw	r28, 0x07	; 7
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	8a 83       	std	Y+2, r24	; 0x02
    26bc:	6b 83       	std	Y+3, r22	; 0x03
    26be:	5d 83       	std	Y+5, r21	; 0x05
    26c0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    26c2:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=0) && (Copy_u8Pin<=DIO_u8PIN7))
    26c4:	8c 81       	ldd	r24, Y+4	; 0x04
    26c6:	9d 81       	ldd	r25, Y+5	; 0x05
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	09 f4       	brne	.+2      	; 0x26ce <DIO_u8GetPinValue+0x28>
    26cc:	78 c0       	rjmp	.+240    	; 0x27be <DIO_u8GetPinValue+0x118>
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	88 30       	cpi	r24, 0x08	; 8
    26d2:	08 f0       	brcs	.+2      	; 0x26d6 <DIO_u8GetPinValue+0x30>
    26d4:	74 c0       	rjmp	.+232    	; 0x27be <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	3f 83       	std	Y+7, r19	; 0x07
    26de:	2e 83       	std	Y+6, r18	; 0x06
    26e0:	4e 81       	ldd	r20, Y+6	; 0x06
    26e2:	5f 81       	ldd	r21, Y+7	; 0x07
    26e4:	41 30       	cpi	r20, 0x01	; 1
    26e6:	51 05       	cpc	r21, r1
    26e8:	59 f1       	breq	.+86     	; 0x2740 <DIO_u8GetPinValue+0x9a>
    26ea:	8e 81       	ldd	r24, Y+6	; 0x06
    26ec:	9f 81       	ldd	r25, Y+7	; 0x07
    26ee:	82 30       	cpi	r24, 0x02	; 2
    26f0:	91 05       	cpc	r25, r1
    26f2:	34 f4       	brge	.+12     	; 0x2700 <DIO_u8GetPinValue+0x5a>
    26f4:	2e 81       	ldd	r18, Y+6	; 0x06
    26f6:	3f 81       	ldd	r19, Y+7	; 0x07
    26f8:	21 15       	cp	r18, r1
    26fa:	31 05       	cpc	r19, r1
    26fc:	69 f0       	breq	.+26     	; 0x2718 <DIO_u8GetPinValue+0x72>
    26fe:	5c c0       	rjmp	.+184    	; 0x27b8 <DIO_u8GetPinValue+0x112>
    2700:	4e 81       	ldd	r20, Y+6	; 0x06
    2702:	5f 81       	ldd	r21, Y+7	; 0x07
    2704:	42 30       	cpi	r20, 0x02	; 2
    2706:	51 05       	cpc	r21, r1
    2708:	79 f1       	breq	.+94     	; 0x2768 <DIO_u8GetPinValue+0xc2>
    270a:	8e 81       	ldd	r24, Y+6	; 0x06
    270c:	9f 81       	ldd	r25, Y+7	; 0x07
    270e:	83 30       	cpi	r24, 0x03	; 3
    2710:	91 05       	cpc	r25, r1
    2712:	09 f4       	brne	.+2      	; 0x2716 <DIO_u8GetPinValue+0x70>
    2714:	3d c0       	rjmp	.+122    	; 0x2790 <DIO_u8GetPinValue+0xea>
    2716:	50 c0       	rjmp	.+160    	; 0x27b8 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    2718:	e9 e3       	ldi	r30, 0x39	; 57
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	28 2f       	mov	r18, r24
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	88 2f       	mov	r24, r24
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	a9 01       	movw	r20, r18
    272a:	02 c0       	rjmp	.+4      	; 0x2730 <DIO_u8GetPinValue+0x8a>
    272c:	55 95       	asr	r21
    272e:	47 95       	ror	r20
    2730:	8a 95       	dec	r24
    2732:	e2 f7       	brpl	.-8      	; 0x272c <DIO_u8GetPinValue+0x86>
    2734:	ca 01       	movw	r24, r20
    2736:	81 70       	andi	r24, 0x01	; 1
    2738:	ec 81       	ldd	r30, Y+4	; 0x04
    273a:	fd 81       	ldd	r31, Y+5	; 0x05
    273c:	80 83       	st	Z, r24
    273e:	41 c0       	rjmp	.+130    	; 0x27c2 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    2740:	e6 e3       	ldi	r30, 0x36	; 54
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	88 2f       	mov	r24, r24
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	a9 01       	movw	r20, r18
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <DIO_u8GetPinValue+0xb2>
    2754:	55 95       	asr	r21
    2756:	47 95       	ror	r20
    2758:	8a 95       	dec	r24
    275a:	e2 f7       	brpl	.-8      	; 0x2754 <DIO_u8GetPinValue+0xae>
    275c:	ca 01       	movw	r24, r20
    275e:	81 70       	andi	r24, 0x01	; 1
    2760:	ec 81       	ldd	r30, Y+4	; 0x04
    2762:	fd 81       	ldd	r31, Y+5	; 0x05
    2764:	80 83       	st	Z, r24
    2766:	2d c0       	rjmp	.+90     	; 0x27c2 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    2768:	e3 e3       	ldi	r30, 0x33	; 51
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	a9 01       	movw	r20, r18
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <DIO_u8GetPinValue+0xda>
    277c:	55 95       	asr	r21
    277e:	47 95       	ror	r20
    2780:	8a 95       	dec	r24
    2782:	e2 f7       	brpl	.-8      	; 0x277c <DIO_u8GetPinValue+0xd6>
    2784:	ca 01       	movw	r24, r20
    2786:	81 70       	andi	r24, 0x01	; 1
    2788:	ec 81       	ldd	r30, Y+4	; 0x04
    278a:	fd 81       	ldd	r31, Y+5	; 0x05
    278c:	80 83       	st	Z, r24
    278e:	19 c0       	rjmp	.+50     	; 0x27c2 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    2790:	e0 e3       	ldi	r30, 0x30	; 48
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	88 2f       	mov	r24, r24
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	a9 01       	movw	r20, r18
    27a2:	02 c0       	rjmp	.+4      	; 0x27a8 <DIO_u8GetPinValue+0x102>
    27a4:	55 95       	asr	r21
    27a6:	47 95       	ror	r20
    27a8:	8a 95       	dec	r24
    27aa:	e2 f7       	brpl	.-8      	; 0x27a4 <DIO_u8GetPinValue+0xfe>
    27ac:	ca 01       	movw	r24, r20
    27ae:	81 70       	andi	r24, 0x01	; 1
    27b0:	ec 81       	ldd	r30, Y+4	; 0x04
    27b2:	fd 81       	ldd	r31, Y+5	; 0x05
    27b4:	80 83       	st	Z, r24
    27b6:	05 c0       	rjmp	.+10     	; 0x27c2 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState=1;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <DIO_u8GetPinValue+0x11c>
			}
		}
	else
	{
		Local_u8ErrorState=1;
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_u8ErrorState;
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    27c4:	27 96       	adiw	r28, 0x07	; 7
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	08 95       	ret

000027d6 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
    27de:	af e5       	ldi	r26, 0x5F	; 95
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	ef e5       	ldi	r30, 0x5F	; 95
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	80 68       	ori	r24, 0x80	; 128
    27ea:	8c 93       	st	X, r24
}
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	08 95       	ret

000027f2 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,SREG_I);   
    27fa:	af e5       	ldi	r26, 0x5F	; 95
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	ef e5       	ldi	r30, 0x5F	; 95
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	8f 77       	andi	r24, 0x7F	; 127
    2806:	8c 93       	st	X, r24
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <main>:
#include "CLCD_interface.h"

u16 App_u8ADCReading=0 ;
void ADCNotification(void);
void main (void)
{
    280e:	df 93       	push	r29
    2810:	cf 93       	push	r28
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	2e 97       	sbiw	r28, 0x0e	; 14
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61

	PORT_voidInit();
    2822:	0e 94 7f 10 	call	0x20fe	; 0x20fe <PORT_voidInit>

	CLCD_voidInit(CLCD_2Lines_5x11Fontsize,CLCD_Curser_OFF);
    2826:	8c e3       	ldi	r24, 0x3C	; 60
    2828:	6c e0       	ldi	r22, 0x0C	; 12
    282a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <CLCD_voidInit>

	GIE_voidEnable();
    282e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <GIE_voidEnable>

	ADC_voidInit();
    2832:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>


	while(1)
	{
		//ADC_u8StartConversionAsynch(0,&App_u8ADCReading,&ADCNotification);
		ADC_u8StartConversionSynch(0,&App_u8ADCReading);
    2836:	2f e6       	ldi	r18, 0x6F	; 111
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	b9 01       	movw	r22, r18
    283e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
		CLCD_voidWriteNumber(App_u8ADCReading);
    2842:	80 91 6f 00 	lds	r24, 0x006F
    2846:	90 91 70 00 	lds	r25, 0x0070
    284a:	cc 01       	movw	r24, r24
    284c:	a0 e0       	ldi	r26, 0x00	; 0
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidWriteNumber>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	aa e7       	ldi	r26, 0x7A	; 122
    285e:	b3 e4       	ldi	r27, 0x43	; 67
    2860:	8b 87       	std	Y+11, r24	; 0x0b
    2862:	9c 87       	std	Y+12, r25	; 0x0c
    2864:	ad 87       	std	Y+13, r26	; 0x0d
    2866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2868:	6b 85       	ldd	r22, Y+11	; 0x0b
    286a:	7c 85       	ldd	r23, Y+12	; 0x0c
    286c:	8d 85       	ldd	r24, Y+13	; 0x0d
    286e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4a ef       	ldi	r20, 0xFA	; 250
    2876:	54 e4       	ldi	r21, 0x44	; 68
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	8f 83       	std	Y+7, r24	; 0x07
    2882:	98 87       	std	Y+8, r25	; 0x08
    2884:	a9 87       	std	Y+9, r26	; 0x09
    2886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2888:	6f 81       	ldd	r22, Y+7	; 0x07
    288a:	78 85       	ldd	r23, Y+8	; 0x08
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e8       	ldi	r20, 0x80	; 128
    2896:	5f e3       	ldi	r21, 0x3F	; 63
    2898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289c:	88 23       	and	r24, r24
    289e:	2c f4       	brge	.+10     	; 0x28aa <main+0x9c>
		__ticks = 1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	3f c0       	rjmp	.+126    	; 0x2928 <main+0x11a>
	else if (__tmp > 65535)
    28aa:	6f 81       	ldd	r22, Y+7	; 0x07
    28ac:	78 85       	ldd	r23, Y+8	; 0x08
    28ae:	89 85       	ldd	r24, Y+9	; 0x09
    28b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	4c f5       	brge	.+82     	; 0x2914 <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e2       	ldi	r20, 0x20	; 32
    28d0:	51 e4       	ldi	r21, 0x41	; 65
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	bc 01       	movw	r22, r24
    28dc:	cd 01       	movw	r24, r26
    28de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <main+0xfc>
    28ec:	88 ec       	ldi	r24, 0xC8	; 200
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9c 83       	std	Y+4, r25	; 0x04
    28f2:	8b 83       	std	Y+3, r24	; 0x03
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	9c 81       	ldd	r25, Y+4	; 0x04
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <main+0xea>
    28fc:	9c 83       	std	Y+4, r25	; 0x04
    28fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	8d 81       	ldd	r24, Y+5	; 0x05
    2902:	9e 81       	ldd	r25, Y+6	; 0x06
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	69 f7       	brne	.-38     	; 0x28ec <main+0xde>
    2912:	14 c0       	rjmp	.+40     	; 0x293c <main+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2914:	6f 81       	ldd	r22, Y+7	; 0x07
    2916:	78 85       	ldd	r23, Y+8	; 0x08
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <main+0x126>
    2938:	9a 83       	std	Y+2, r25	; 0x02
    293a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		CLCD_voidSendCommand(CLCD_Clear_Display);
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	0e 94 f2 06 	call	0xde4	; 0xde4 <CLCD_voidSendCommand>
    2942:	79 cf       	rjmp	.-270    	; 0x2836 <main+0x28>

00002944 <ADCNotification>:
	}

}
void ADCNotification(void)
{
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	2e 97       	sbiw	r28, 0x0e	; 14
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidWriteNumber(App_u8ADCReading);
    2958:	80 91 6f 00 	lds	r24, 0x006F
    295c:	90 91 70 00 	lds	r25, 0x0070
    2960:	cc 01       	movw	r24, r24
    2962:	a0 e0       	ldi	r26, 0x00	; 0
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	bc 01       	movw	r22, r24
    2968:	cd 01       	movw	r24, r26
    296a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <CLCD_voidWriteNumber>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	aa e7       	ldi	r26, 0x7A	; 122
    2974:	b3 e4       	ldi	r27, 0x43	; 67
    2976:	8b 87       	std	Y+11, r24	; 0x0b
    2978:	9c 87       	std	Y+12, r25	; 0x0c
    297a:	ad 87       	std	Y+13, r26	; 0x0d
    297c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2980:	7c 85       	ldd	r23, Y+12	; 0x0c
    2982:	8d 85       	ldd	r24, Y+13	; 0x0d
    2984:	9e 85       	ldd	r25, Y+14	; 0x0e
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	4a ef       	ldi	r20, 0xFA	; 250
    298c:	54 e4       	ldi	r21, 0x44	; 68
    298e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	8f 83       	std	Y+7, r24	; 0x07
    2998:	98 87       	std	Y+8, r25	; 0x08
    299a:	a9 87       	std	Y+9, r26	; 0x09
    299c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    299e:	6f 81       	ldd	r22, Y+7	; 0x07
    29a0:	78 85       	ldd	r23, Y+8	; 0x08
    29a2:	89 85       	ldd	r24, Y+9	; 0x09
    29a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e8       	ldi	r20, 0x80	; 128
    29ac:	5f e3       	ldi	r21, 0x3F	; 63
    29ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b2:	88 23       	and	r24, r24
    29b4:	2c f4       	brge	.+10     	; 0x29c0 <ADCNotification+0x7c>
		__ticks = 1;
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	9e 83       	std	Y+6, r25	; 0x06
    29bc:	8d 83       	std	Y+5, r24	; 0x05
    29be:	3f c0       	rjmp	.+126    	; 0x2a3e <ADCNotification+0xfa>
	else if (__tmp > 65535)
    29c0:	6f 81       	ldd	r22, Y+7	; 0x07
    29c2:	78 85       	ldd	r23, Y+8	; 0x08
    29c4:	89 85       	ldd	r24, Y+9	; 0x09
    29c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	3f ef       	ldi	r19, 0xFF	; 255
    29cc:	4f e7       	ldi	r20, 0x7F	; 127
    29ce:	57 e4       	ldi	r21, 0x47	; 71
    29d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d4:	18 16       	cp	r1, r24
    29d6:	4c f5       	brge	.+82     	; 0x2a2a <ADCNotification+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29da:	7c 85       	ldd	r23, Y+12	; 0x0c
    29dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29de:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e2       	ldi	r20, 0x20	; 32
    29e6:	51 e4       	ldi	r21, 0x41	; 65
    29e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	bc 01       	movw	r22, r24
    29f2:	cd 01       	movw	r24, r26
    29f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	9e 83       	std	Y+6, r25	; 0x06
    29fe:	8d 83       	std	Y+5, r24	; 0x05
    2a00:	0f c0       	rjmp	.+30     	; 0x2a20 <ADCNotification+0xdc>
    2a02:	88 ec       	ldi	r24, 0xC8	; 200
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	9c 83       	std	Y+4, r25	; 0x04
    2a08:	8b 83       	std	Y+3, r24	; 0x03
    2a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <ADCNotification+0xca>
    2a12:	9c 83       	std	Y+4, r25	; 0x04
    2a14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	9e 83       	std	Y+6, r25	; 0x06
    2a1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a20:	8d 81       	ldd	r24, Y+5	; 0x05
    2a22:	9e 81       	ldd	r25, Y+6	; 0x06
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	69 f7       	brne	.-38     	; 0x2a02 <ADCNotification+0xbe>
    2a28:	14 c0       	rjmp	.+40     	; 0x2a52 <ADCNotification+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2c:	78 85       	ldd	r23, Y+8	; 0x08
    2a2e:	89 85       	ldd	r24, Y+9	; 0x09
    2a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	9e 83       	std	Y+6, r25	; 0x06
    2a3c:	8d 83       	std	Y+5, r24	; 0x05
    2a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a40:	9e 81       	ldd	r25, Y+6	; 0x06
    2a42:	9a 83       	std	Y+2, r25	; 0x02
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <ADCNotification+0x106>
    2a4e:	9a 83       	std	Y+2, r25	; 0x02
    2a50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	CLCD_voidSendCommand(CLCD_Clear_Display);
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	0e 94 f2 06 	call	0xde4	; 0xde4 <CLCD_voidSendCommand>
}
    2a58:	2e 96       	adiw	r28, 0x0e	; 14
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	08 95       	ret

00002a6a <__udivmodsi4>:
    2a6a:	a1 e2       	ldi	r26, 0x21	; 33
    2a6c:	1a 2e       	mov	r1, r26
    2a6e:	aa 1b       	sub	r26, r26
    2a70:	bb 1b       	sub	r27, r27
    2a72:	fd 01       	movw	r30, r26
    2a74:	0d c0       	rjmp	.+26     	; 0x2a90 <__udivmodsi4_ep>

00002a76 <__udivmodsi4_loop>:
    2a76:	aa 1f       	adc	r26, r26
    2a78:	bb 1f       	adc	r27, r27
    2a7a:	ee 1f       	adc	r30, r30
    2a7c:	ff 1f       	adc	r31, r31
    2a7e:	a2 17       	cp	r26, r18
    2a80:	b3 07       	cpc	r27, r19
    2a82:	e4 07       	cpc	r30, r20
    2a84:	f5 07       	cpc	r31, r21
    2a86:	20 f0       	brcs	.+8      	; 0x2a90 <__udivmodsi4_ep>
    2a88:	a2 1b       	sub	r26, r18
    2a8a:	b3 0b       	sbc	r27, r19
    2a8c:	e4 0b       	sbc	r30, r20
    2a8e:	f5 0b       	sbc	r31, r21

00002a90 <__udivmodsi4_ep>:
    2a90:	66 1f       	adc	r22, r22
    2a92:	77 1f       	adc	r23, r23
    2a94:	88 1f       	adc	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	1a 94       	dec	r1
    2a9a:	69 f7       	brne	.-38     	; 0x2a76 <__udivmodsi4_loop>
    2a9c:	60 95       	com	r22
    2a9e:	70 95       	com	r23
    2aa0:	80 95       	com	r24
    2aa2:	90 95       	com	r25
    2aa4:	9b 01       	movw	r18, r22
    2aa6:	ac 01       	movw	r20, r24
    2aa8:	bd 01       	movw	r22, r26
    2aaa:	cf 01       	movw	r24, r30
    2aac:	08 95       	ret

00002aae <__prologue_saves__>:
    2aae:	2f 92       	push	r2
    2ab0:	3f 92       	push	r3
    2ab2:	4f 92       	push	r4
    2ab4:	5f 92       	push	r5
    2ab6:	6f 92       	push	r6
    2ab8:	7f 92       	push	r7
    2aba:	8f 92       	push	r8
    2abc:	9f 92       	push	r9
    2abe:	af 92       	push	r10
    2ac0:	bf 92       	push	r11
    2ac2:	cf 92       	push	r12
    2ac4:	df 92       	push	r13
    2ac6:	ef 92       	push	r14
    2ac8:	ff 92       	push	r15
    2aca:	0f 93       	push	r16
    2acc:	1f 93       	push	r17
    2ace:	cf 93       	push	r28
    2ad0:	df 93       	push	r29
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	ca 1b       	sub	r28, r26
    2ad8:	db 0b       	sbc	r29, r27
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	f8 94       	cli
    2ade:	de bf       	out	0x3e, r29	; 62
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	09 94       	ijmp

00002ae6 <__epilogue_restores__>:
    2ae6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ae8:	39 88       	ldd	r3, Y+17	; 0x11
    2aea:	48 88       	ldd	r4, Y+16	; 0x10
    2aec:	5f 84       	ldd	r5, Y+15	; 0x0f
    2aee:	6e 84       	ldd	r6, Y+14	; 0x0e
    2af0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2af2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2af4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2af6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2af8:	b9 84       	ldd	r11, Y+9	; 0x09
    2afa:	c8 84       	ldd	r12, Y+8	; 0x08
    2afc:	df 80       	ldd	r13, Y+7	; 0x07
    2afe:	ee 80       	ldd	r14, Y+6	; 0x06
    2b00:	fd 80       	ldd	r15, Y+5	; 0x05
    2b02:	0c 81       	ldd	r16, Y+4	; 0x04
    2b04:	1b 81       	ldd	r17, Y+3	; 0x03
    2b06:	aa 81       	ldd	r26, Y+2	; 0x02
    2b08:	b9 81       	ldd	r27, Y+1	; 0x01
    2b0a:	ce 0f       	add	r28, r30
    2b0c:	d1 1d       	adc	r29, r1
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	cd bf       	out	0x3d, r28	; 61
    2b18:	ed 01       	movw	r28, r26
    2b1a:	08 95       	ret

00002b1c <_exit>:
    2b1c:	f8 94       	cli

00002b1e <__stop_program>:
    2b1e:	ff cf       	rjmp	.-2      	; 0x2b1e <__stop_program>
