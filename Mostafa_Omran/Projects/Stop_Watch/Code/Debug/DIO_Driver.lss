
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bdc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000bdc  00000c50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001170  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000985  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 b5 03 	call	0x76a	; 0x76a <main>
  7a:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_u8SetPinDirection>:




u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	28 97       	sbiw	r28, 0x08	; 8
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	8a 83       	std	Y+2, r24	; 0x02
  98:	6b 83       	std	Y+3, r22	; 0x03
  9a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
  9c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
  9e:	8b 81       	ldd	r24, Y+3	; 0x03
  a0:	88 30       	cpi	r24, 0x08	; 8
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_u8SetPinDirection+0x24>
  a4:	f4 c0       	rjmp	.+488    	; 0x28e <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
  a6:	8c 81       	ldd	r24, Y+4	; 0x04
  a8:	88 23       	and	r24, r24
  aa:	09 f0       	breq	.+2      	; 0xae <DIO_u8SetPinDirection+0x2c>
  ac:	77 c0       	rjmp	.+238    	; 0x19c <DIO_u8SetPinDirection+0x11a>
			switch(Copy_u8Port)
  ae:	8a 81       	ldd	r24, Y+2	; 0x02
  b0:	28 2f       	mov	r18, r24
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	38 87       	std	Y+8, r19	; 0x08
  b6:	2f 83       	std	Y+7, r18	; 0x07
  b8:	8f 81       	ldd	r24, Y+7	; 0x07
  ba:	98 85       	ldd	r25, Y+8	; 0x08
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	91 05       	cpc	r25, r1
  c0:	59 f1       	breq	.+86     	; 0x118 <DIO_u8SetPinDirection+0x96>
  c2:	2f 81       	ldd	r18, Y+7	; 0x07
  c4:	38 85       	ldd	r19, Y+8	; 0x08
  c6:	22 30       	cpi	r18, 0x02	; 2
  c8:	31 05       	cpc	r19, r1
  ca:	2c f4       	brge	.+10     	; 0xd6 <DIO_u8SetPinDirection+0x54>
  cc:	8f 81       	ldd	r24, Y+7	; 0x07
  ce:	98 85       	ldd	r25, Y+8	; 0x08
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	69 f0       	breq	.+26     	; 0xee <DIO_u8SetPinDirection+0x6c>
  d4:	60 c0       	rjmp	.+192    	; 0x196 <DIO_u8SetPinDirection+0x114>
  d6:	2f 81       	ldd	r18, Y+7	; 0x07
  d8:	38 85       	ldd	r19, Y+8	; 0x08
  da:	22 30       	cpi	r18, 0x02	; 2
  dc:	31 05       	cpc	r19, r1
  de:	89 f1       	breq	.+98     	; 0x142 <DIO_u8SetPinDirection+0xc0>
  e0:	8f 81       	ldd	r24, Y+7	; 0x07
  e2:	98 85       	ldd	r25, Y+8	; 0x08
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	91 05       	cpc	r25, r1
  e8:	09 f4       	brne	.+2      	; 0xec <DIO_u8SetPinDirection+0x6a>
  ea:	40 c0       	rjmp	.+128    	; 0x16c <DIO_u8SetPinDirection+0xea>
  ec:	54 c0       	rjmp	.+168    	; 0x196 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
  ee:	aa e3       	ldi	r26, 0x3A	; 58
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	ea e3       	ldi	r30, 0x3A	; 58
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	48 2f       	mov	r20, r24
  fa:	8b 81       	ldd	r24, Y+3	; 0x03
  fc:	28 2f       	mov	r18, r24
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 2e       	mov	r0, r18
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_u8SetPinDirection+0x8a>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_u8SetPinDirection+0x86>
 110:	80 95       	com	r24
 112:	84 23       	and	r24, r20
 114:	8c 93       	st	X, r24
 116:	bd c0       	rjmp	.+378    	; 0x292 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
 118:	a7 e3       	ldi	r26, 0x37	; 55
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e7 e3       	ldi	r30, 0x37	; 55
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	48 2f       	mov	r20, r24
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	28 2f       	mov	r18, r24
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 2e       	mov	r0, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_u8SetPinDirection+0xb4>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_u8SetPinDirection+0xb0>
 13a:	80 95       	com	r24
 13c:	84 23       	and	r24, r20
 13e:	8c 93       	st	X, r24
 140:	a8 c0       	rjmp	.+336    	; 0x292 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
 142:	a4 e3       	ldi	r26, 0x34	; 52
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	e4 e3       	ldi	r30, 0x34	; 52
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	48 2f       	mov	r20, r24
 14e:	8b 81       	ldd	r24, Y+3	; 0x03
 150:	28 2f       	mov	r18, r24
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 2e       	mov	r0, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_u8SetPinDirection+0xde>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_u8SetPinDirection+0xda>
 164:	80 95       	com	r24
 166:	84 23       	and	r24, r20
 168:	8c 93       	st	X, r24
 16a:	93 c0       	rjmp	.+294    	; 0x292 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
 16c:	a1 e3       	ldi	r26, 0x31	; 49
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	e1 e3       	ldi	r30, 0x31	; 49
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	48 2f       	mov	r20, r24
 178:	8b 81       	ldd	r24, Y+3	; 0x03
 17a:	28 2f       	mov	r18, r24
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 2e       	mov	r0, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_u8SetPinDirection+0x108>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_u8SetPinDirection+0x104>
 18e:	80 95       	com	r24
 190:	84 23       	and	r24, r20
 192:	8c 93       	st	X, r24
 194:	7e c0       	rjmp	.+252    	; 0x292 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	89 83       	std	Y+1, r24	; 0x01
 19a:	7b c0       	rjmp	.+246    	; 0x292 <DIO_u8SetPinDirection+0x210>
			}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
 19c:	8c 81       	ldd	r24, Y+4	; 0x04
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <DIO_u8SetPinDirection+0x122>
 1a2:	72 c0       	rjmp	.+228    	; 0x288 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	3e 83       	std	Y+6, r19	; 0x06
 1ac:	2d 83       	std	Y+5, r18	; 0x05
 1ae:	8d 81       	ldd	r24, Y+5	; 0x05
 1b0:	9e 81       	ldd	r25, Y+6	; 0x06
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	91 05       	cpc	r25, r1
 1b6:	49 f1       	breq	.+82     	; 0x20a <DIO_u8SetPinDirection+0x188>
 1b8:	2d 81       	ldd	r18, Y+5	; 0x05
 1ba:	3e 81       	ldd	r19, Y+6	; 0x06
 1bc:	22 30       	cpi	r18, 0x02	; 2
 1be:	31 05       	cpc	r19, r1
 1c0:	2c f4       	brge	.+10     	; 0x1cc <DIO_u8SetPinDirection+0x14a>
 1c2:	8d 81       	ldd	r24, Y+5	; 0x05
 1c4:	9e 81       	ldd	r25, Y+6	; 0x06
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	61 f0       	breq	.+24     	; 0x1e2 <DIO_u8SetPinDirection+0x160>
 1ca:	5b c0       	rjmp	.+182    	; 0x282 <DIO_u8SetPinDirection+0x200>
 1cc:	2d 81       	ldd	r18, Y+5	; 0x05
 1ce:	3e 81       	ldd	r19, Y+6	; 0x06
 1d0:	22 30       	cpi	r18, 0x02	; 2
 1d2:	31 05       	cpc	r19, r1
 1d4:	71 f1       	breq	.+92     	; 0x232 <DIO_u8SetPinDirection+0x1b0>
 1d6:	8d 81       	ldd	r24, Y+5	; 0x05
 1d8:	9e 81       	ldd	r25, Y+6	; 0x06
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	91 05       	cpc	r25, r1
 1de:	e9 f1       	breq	.+122    	; 0x25a <DIO_u8SetPinDirection+0x1d8>
 1e0:	50 c0       	rjmp	.+160    	; 0x282 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
 1e2:	aa e3       	ldi	r26, 0x3A	; 58
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	ea e3       	ldi	r30, 0x3A	; 58
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	48 2f       	mov	r20, r24
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 2e       	mov	r0, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_u8SetPinDirection+0x17e>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_u8SetPinDirection+0x17a>
 204:	84 2b       	or	r24, r20
 206:	8c 93       	st	X, r24
 208:	44 c0       	rjmp	.+136    	; 0x292 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
 20a:	a7 e3       	ldi	r26, 0x37	; 55
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	e7 e3       	ldi	r30, 0x37	; 55
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	48 2f       	mov	r20, r24
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	28 2f       	mov	r18, r24
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 2e       	mov	r0, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_u8SetPinDirection+0x1a6>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_u8SetPinDirection+0x1a2>
 22c:	84 2b       	or	r24, r20
 22e:	8c 93       	st	X, r24
 230:	30 c0       	rjmp	.+96     	; 0x292 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
 232:	a4 e3       	ldi	r26, 0x34	; 52
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	e4 e3       	ldi	r30, 0x34	; 52
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	48 2f       	mov	r20, r24
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	28 2f       	mov	r18, r24
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 2e       	mov	r0, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_u8SetPinDirection+0x1ce>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_u8SetPinDirection+0x1ca>
 254:	84 2b       	or	r24, r20
 256:	8c 93       	st	X, r24
 258:	1c c0       	rjmp	.+56     	; 0x292 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
 25a:	a1 e3       	ldi	r26, 0x31	; 49
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	e1 e3       	ldi	r30, 0x31	; 49
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	48 2f       	mov	r20, r24
 266:	8b 81       	ldd	r24, Y+3	; 0x03
 268:	28 2f       	mov	r18, r24
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 2e       	mov	r0, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_u8SetPinDirection+0x1f6>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	0a 94       	dec	r0
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_u8SetPinDirection+0x1f2>
 27c:	84 2b       	or	r24, r20
 27e:	8c 93       	st	X, r24
 280:	08 c0       	rjmp	.+16     	; 0x292 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	05 c0       	rjmp	.+10     	; 0x292 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 83       	std	Y+1, r24	; 0x01
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 292:	89 81       	ldd	r24, Y+1	; 0x01
}
 294:	28 96       	adiw	r28, 0x08	; 8
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
 2a0:	cf 91       	pop	r28
 2a2:	df 91       	pop	r29
 2a4:	08 95       	ret

000002a6 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
 2a6:	df 93       	push	r29
 2a8:	cf 93       	push	r28
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <DIO_u8SetPortDirection+0x6>
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <DIO_u8SetPortDirection+0x8>
 2ae:	0f 92       	push	r0
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	8a 83       	std	Y+2, r24	; 0x02
 2b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 2b8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	28 2f       	mov	r18, r24
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	3d 83       	std	Y+5, r19	; 0x05
 2c2:	2c 83       	std	Y+4, r18	; 0x04
 2c4:	8c 81       	ldd	r24, Y+4	; 0x04
 2c6:	9d 81       	ldd	r25, Y+5	; 0x05
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	91 05       	cpc	r25, r1
 2cc:	d1 f0       	breq	.+52     	; 0x302 <DIO_u8SetPortDirection+0x5c>
 2ce:	2c 81       	ldd	r18, Y+4	; 0x04
 2d0:	3d 81       	ldd	r19, Y+5	; 0x05
 2d2:	22 30       	cpi	r18, 0x02	; 2
 2d4:	31 05       	cpc	r19, r1
 2d6:	2c f4       	brge	.+10     	; 0x2e2 <DIO_u8SetPortDirection+0x3c>
 2d8:	8c 81       	ldd	r24, Y+4	; 0x04
 2da:	9d 81       	ldd	r25, Y+5	; 0x05
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	61 f0       	breq	.+24     	; 0x2f8 <DIO_u8SetPortDirection+0x52>
 2e0:	1f c0       	rjmp	.+62     	; 0x320 <DIO_u8SetPortDirection+0x7a>
 2e2:	2c 81       	ldd	r18, Y+4	; 0x04
 2e4:	3d 81       	ldd	r19, Y+5	; 0x05
 2e6:	22 30       	cpi	r18, 0x02	; 2
 2e8:	31 05       	cpc	r19, r1
 2ea:	81 f0       	breq	.+32     	; 0x30c <DIO_u8SetPortDirection+0x66>
 2ec:	8c 81       	ldd	r24, Y+4	; 0x04
 2ee:	9d 81       	ldd	r25, Y+5	; 0x05
 2f0:	83 30       	cpi	r24, 0x03	; 3
 2f2:	91 05       	cpc	r25, r1
 2f4:	81 f0       	breq	.+32     	; 0x316 <DIO_u8SetPortDirection+0x70>
 2f6:	14 c0       	rjmp	.+40     	; 0x320 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
 2f8:	ea e3       	ldi	r30, 0x3A	; 58
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	80 83       	st	Z, r24
 300:	11 c0       	rjmp	.+34     	; 0x324 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
 302:	e7 e3       	ldi	r30, 0x37	; 55
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	8b 81       	ldd	r24, Y+3	; 0x03
 308:	80 83       	st	Z, r24
 30a:	0c c0       	rjmp	.+24     	; 0x324 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
 30c:	e4 e3       	ldi	r30, 0x34	; 52
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	80 83       	st	Z, r24
 314:	07 c0       	rjmp	.+14     	; 0x324 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
 316:	e1 e3       	ldi	r30, 0x31	; 49
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	8b 81       	ldd	r24, Y+3	; 0x03
 31c:	80 83       	st	Z, r24
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 324:	89 81       	ldd	r24, Y+1	; 0x01
}
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	cf 91       	pop	r28
 332:	df 91       	pop	r29
 334:	08 95       	ret

00000336 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 336:	df 93       	push	r29
 338:	cf 93       	push	r28
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
 33e:	28 97       	sbiw	r28, 0x08	; 8
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	f8 94       	cli
 344:	de bf       	out	0x3e, r29	; 62
 346:	0f be       	out	0x3f, r0	; 63
 348:	cd bf       	out	0x3d, r28	; 61
 34a:	8a 83       	std	Y+2, r24	; 0x02
 34c:	6b 83       	std	Y+3, r22	; 0x03
 34e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 350:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
 352:	8b 81       	ldd	r24, Y+3	; 0x03
 354:	88 30       	cpi	r24, 0x08	; 8
 356:	08 f0       	brcs	.+2      	; 0x35a <DIO_u8SetPinValue+0x24>
 358:	f4 c0       	rjmp	.+488    	; 0x542 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
 35a:	8c 81       	ldd	r24, Y+4	; 0x04
 35c:	88 23       	and	r24, r24
 35e:	09 f0       	breq	.+2      	; 0x362 <DIO_u8SetPinValue+0x2c>
 360:	77 c0       	rjmp	.+238    	; 0x450 <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port)
 362:	8a 81       	ldd	r24, Y+2	; 0x02
 364:	28 2f       	mov	r18, r24
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	38 87       	std	Y+8, r19	; 0x08
 36a:	2f 83       	std	Y+7, r18	; 0x07
 36c:	8f 81       	ldd	r24, Y+7	; 0x07
 36e:	98 85       	ldd	r25, Y+8	; 0x08
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	91 05       	cpc	r25, r1
 374:	59 f1       	breq	.+86     	; 0x3cc <DIO_u8SetPinValue+0x96>
 376:	2f 81       	ldd	r18, Y+7	; 0x07
 378:	38 85       	ldd	r19, Y+8	; 0x08
 37a:	22 30       	cpi	r18, 0x02	; 2
 37c:	31 05       	cpc	r19, r1
 37e:	2c f4       	brge	.+10     	; 0x38a <DIO_u8SetPinValue+0x54>
 380:	8f 81       	ldd	r24, Y+7	; 0x07
 382:	98 85       	ldd	r25, Y+8	; 0x08
 384:	00 97       	sbiw	r24, 0x00	; 0
 386:	69 f0       	breq	.+26     	; 0x3a2 <DIO_u8SetPinValue+0x6c>
 388:	60 c0       	rjmp	.+192    	; 0x44a <DIO_u8SetPinValue+0x114>
 38a:	2f 81       	ldd	r18, Y+7	; 0x07
 38c:	38 85       	ldd	r19, Y+8	; 0x08
 38e:	22 30       	cpi	r18, 0x02	; 2
 390:	31 05       	cpc	r19, r1
 392:	89 f1       	breq	.+98     	; 0x3f6 <DIO_u8SetPinValue+0xc0>
 394:	8f 81       	ldd	r24, Y+7	; 0x07
 396:	98 85       	ldd	r25, Y+8	; 0x08
 398:	83 30       	cpi	r24, 0x03	; 3
 39a:	91 05       	cpc	r25, r1
 39c:	09 f4       	brne	.+2      	; 0x3a0 <DIO_u8SetPinValue+0x6a>
 39e:	40 c0       	rjmp	.+128    	; 0x420 <DIO_u8SetPinValue+0xea>
 3a0:	54 c0       	rjmp	.+168    	; 0x44a <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
 3a2:	ab e3       	ldi	r26, 0x3B	; 59
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	eb e3       	ldi	r30, 0x3B	; 59
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	48 2f       	mov	r20, r24
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 2e       	mov	r0, r18
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_u8SetPinValue+0x8a>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	0a 94       	dec	r0
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_u8SetPinValue+0x86>
 3c4:	80 95       	com	r24
 3c6:	84 23       	and	r24, r20
 3c8:	8c 93       	st	X, r24
 3ca:	bd c0       	rjmp	.+378    	; 0x546 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
 3cc:	a8 e3       	ldi	r26, 0x38	; 56
 3ce:	b0 e0       	ldi	r27, 0x00	; 0
 3d0:	e8 e3       	ldi	r30, 0x38	; 56
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	48 2f       	mov	r20, r24
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	28 2f       	mov	r18, r24
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 2e       	mov	r0, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_u8SetPinValue+0xb4>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_u8SetPinValue+0xb0>
 3ee:	80 95       	com	r24
 3f0:	84 23       	and	r24, r20
 3f2:	8c 93       	st	X, r24
 3f4:	a8 c0       	rjmp	.+336    	; 0x546 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
 3f6:	a5 e3       	ldi	r26, 0x35	; 53
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	e5 e3       	ldi	r30, 0x35	; 53
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	48 2f       	mov	r20, r24
 402:	8b 81       	ldd	r24, Y+3	; 0x03
 404:	28 2f       	mov	r18, r24
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 2e       	mov	r0, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_u8SetPinValue+0xde>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	0a 94       	dec	r0
 416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_u8SetPinValue+0xda>
 418:	80 95       	com	r24
 41a:	84 23       	and	r24, r20
 41c:	8c 93       	st	X, r24
 41e:	93 c0       	rjmp	.+294    	; 0x546 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
 420:	a2 e3       	ldi	r26, 0x32	; 50
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	e2 e3       	ldi	r30, 0x32	; 50
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	48 2f       	mov	r20, r24
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	28 2f       	mov	r18, r24
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 2e       	mov	r0, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_u8SetPinValue+0x108>
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	0a 94       	dec	r0
 440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_u8SetPinValue+0x104>
 442:	80 95       	com	r24
 444:	84 23       	and	r24, r20
 446:	8c 93       	st	X, r24
 448:	7e c0       	rjmp	.+252    	; 0x546 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	89 83       	std	Y+1, r24	; 0x01
 44e:	7b c0       	rjmp	.+246    	; 0x546 <DIO_u8SetPinValue+0x210>
			}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
 450:	8c 81       	ldd	r24, Y+4	; 0x04
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	09 f0       	breq	.+2      	; 0x458 <DIO_u8SetPinValue+0x122>
 456:	72 c0       	rjmp	.+228    	; 0x53c <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
 458:	8a 81       	ldd	r24, Y+2	; 0x02
 45a:	28 2f       	mov	r18, r24
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	3e 83       	std	Y+6, r19	; 0x06
 460:	2d 83       	std	Y+5, r18	; 0x05
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	9e 81       	ldd	r25, Y+6	; 0x06
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	91 05       	cpc	r25, r1
 46a:	49 f1       	breq	.+82     	; 0x4be <DIO_u8SetPinValue+0x188>
 46c:	2d 81       	ldd	r18, Y+5	; 0x05
 46e:	3e 81       	ldd	r19, Y+6	; 0x06
 470:	22 30       	cpi	r18, 0x02	; 2
 472:	31 05       	cpc	r19, r1
 474:	2c f4       	brge	.+10     	; 0x480 <DIO_u8SetPinValue+0x14a>
 476:	8d 81       	ldd	r24, Y+5	; 0x05
 478:	9e 81       	ldd	r25, Y+6	; 0x06
 47a:	00 97       	sbiw	r24, 0x00	; 0
 47c:	61 f0       	breq	.+24     	; 0x496 <DIO_u8SetPinValue+0x160>
 47e:	5b c0       	rjmp	.+182    	; 0x536 <DIO_u8SetPinValue+0x200>
 480:	2d 81       	ldd	r18, Y+5	; 0x05
 482:	3e 81       	ldd	r19, Y+6	; 0x06
 484:	22 30       	cpi	r18, 0x02	; 2
 486:	31 05       	cpc	r19, r1
 488:	71 f1       	breq	.+92     	; 0x4e6 <DIO_u8SetPinValue+0x1b0>
 48a:	8d 81       	ldd	r24, Y+5	; 0x05
 48c:	9e 81       	ldd	r25, Y+6	; 0x06
 48e:	83 30       	cpi	r24, 0x03	; 3
 490:	91 05       	cpc	r25, r1
 492:	e9 f1       	breq	.+122    	; 0x50e <DIO_u8SetPinValue+0x1d8>
 494:	50 c0       	rjmp	.+160    	; 0x536 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
 496:	ab e3       	ldi	r26, 0x3B	; 59
 498:	b0 e0       	ldi	r27, 0x00	; 0
 49a:	eb e3       	ldi	r30, 0x3B	; 59
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	48 2f       	mov	r20, r24
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	28 2f       	mov	r18, r24
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 2e       	mov	r0, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_u8SetPinValue+0x17e>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_u8SetPinValue+0x17a>
 4b8:	84 2b       	or	r24, r20
 4ba:	8c 93       	st	X, r24
 4bc:	44 c0       	rjmp	.+136    	; 0x546 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
 4be:	a8 e3       	ldi	r26, 0x38	; 56
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	e8 e3       	ldi	r30, 0x38	; 56
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	48 2f       	mov	r20, r24
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 2e       	mov	r0, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_u8SetPinValue+0x1a6>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_u8SetPinValue+0x1a2>
 4e0:	84 2b       	or	r24, r20
 4e2:	8c 93       	st	X, r24
 4e4:	30 c0       	rjmp	.+96     	; 0x546 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
 4e6:	a5 e3       	ldi	r26, 0x35	; 53
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	e5 e3       	ldi	r30, 0x35	; 53
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	48 2f       	mov	r20, r24
 4f2:	8b 81       	ldd	r24, Y+3	; 0x03
 4f4:	28 2f       	mov	r18, r24
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 2e       	mov	r0, r18
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_u8SetPinValue+0x1ce>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	0a 94       	dec	r0
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_u8SetPinValue+0x1ca>
 508:	84 2b       	or	r24, r20
 50a:	8c 93       	st	X, r24
 50c:	1c c0       	rjmp	.+56     	; 0x546 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
 50e:	a2 e3       	ldi	r26, 0x32	; 50
 510:	b0 e0       	ldi	r27, 0x00	; 0
 512:	e2 e3       	ldi	r30, 0x32	; 50
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	48 2f       	mov	r20, r24
 51a:	8b 81       	ldd	r24, Y+3	; 0x03
 51c:	28 2f       	mov	r18, r24
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 2e       	mov	r0, r18
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_u8SetPinValue+0x1f6>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	0a 94       	dec	r0
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_u8SetPinValue+0x1f2>
 530:	84 2b       	or	r24, r20
 532:	8c 93       	st	X, r24
 534:	08 c0       	rjmp	.+16     	; 0x546 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	89 83       	std	Y+1, r24	; 0x01
 53a:	05 c0       	rjmp	.+10     	; 0x546 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	89 83       	std	Y+1, r24	; 0x01
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 546:	89 81       	ldd	r24, Y+1	; 0x01
}
 548:	28 96       	adiw	r28, 0x08	; 8
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	cf 91       	pop	r28
 556:	df 91       	pop	r29
 558:	08 95       	ret

0000055a <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 55a:	df 93       	push	r29
 55c:	cf 93       	push	r28
 55e:	00 d0       	rcall	.+0      	; 0x560 <DIO_u8SetPortValue+0x6>
 560:	00 d0       	rcall	.+0      	; 0x562 <DIO_u8SetPortValue+0x8>
 562:	0f 92       	push	r0
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	8a 83       	std	Y+2, r24	; 0x02
 56a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 56c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 56e:	8a 81       	ldd	r24, Y+2	; 0x02
 570:	28 2f       	mov	r18, r24
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	3d 83       	std	Y+5, r19	; 0x05
 576:	2c 83       	std	Y+4, r18	; 0x04
 578:	8c 81       	ldd	r24, Y+4	; 0x04
 57a:	9d 81       	ldd	r25, Y+5	; 0x05
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	91 05       	cpc	r25, r1
 580:	d1 f0       	breq	.+52     	; 0x5b6 <DIO_u8SetPortValue+0x5c>
 582:	2c 81       	ldd	r18, Y+4	; 0x04
 584:	3d 81       	ldd	r19, Y+5	; 0x05
 586:	22 30       	cpi	r18, 0x02	; 2
 588:	31 05       	cpc	r19, r1
 58a:	2c f4       	brge	.+10     	; 0x596 <DIO_u8SetPortValue+0x3c>
 58c:	8c 81       	ldd	r24, Y+4	; 0x04
 58e:	9d 81       	ldd	r25, Y+5	; 0x05
 590:	00 97       	sbiw	r24, 0x00	; 0
 592:	61 f0       	breq	.+24     	; 0x5ac <DIO_u8SetPortValue+0x52>
 594:	1f c0       	rjmp	.+62     	; 0x5d4 <DIO_u8SetPortValue+0x7a>
 596:	2c 81       	ldd	r18, Y+4	; 0x04
 598:	3d 81       	ldd	r19, Y+5	; 0x05
 59a:	22 30       	cpi	r18, 0x02	; 2
 59c:	31 05       	cpc	r19, r1
 59e:	81 f0       	breq	.+32     	; 0x5c0 <DIO_u8SetPortValue+0x66>
 5a0:	8c 81       	ldd	r24, Y+4	; 0x04
 5a2:	9d 81       	ldd	r25, Y+5	; 0x05
 5a4:	83 30       	cpi	r24, 0x03	; 3
 5a6:	91 05       	cpc	r25, r1
 5a8:	81 f0       	breq	.+32     	; 0x5ca <DIO_u8SetPortValue+0x70>
 5aa:	14 c0       	rjmp	.+40     	; 0x5d4 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value;break;
 5ac:	eb e3       	ldi	r30, 0x3B	; 59
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	8b 81       	ldd	r24, Y+3	; 0x03
 5b2:	80 83       	st	Z, r24
 5b4:	11 c0       	rjmp	.+34     	; 0x5d8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value;break;
 5b6:	e8 e3       	ldi	r30, 0x38	; 56
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	80 83       	st	Z, r24
 5be:	0c c0       	rjmp	.+24     	; 0x5d8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value;break;
 5c0:	e5 e3       	ldi	r30, 0x35	; 53
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	8b 81       	ldd	r24, Y+3	; 0x03
 5c6:	80 83       	st	Z, r24
 5c8:	07 c0       	rjmp	.+14     	; 0x5d8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value;break;
 5ca:	e2 e3       	ldi	r30, 0x32	; 50
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	8b 81       	ldd	r24, Y+3	; 0x03
 5d0:	80 83       	st	Z, r24
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
}
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	cf 91       	pop	r28
 5e6:	df 91       	pop	r29
 5e8:	08 95       	ret

000005ea <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
 5ea:	df 93       	push	r29
 5ec:	cf 93       	push	r28
 5ee:	cd b7       	in	r28, 0x3d	; 61
 5f0:	de b7       	in	r29, 0x3e	; 62
 5f2:	27 97       	sbiw	r28, 0x07	; 7
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	f8 94       	cli
 5f8:	de bf       	out	0x3e, r29	; 62
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	cd bf       	out	0x3d, r28	; 61
 5fe:	8a 83       	std	Y+2, r24	; 0x02
 600:	6b 83       	std	Y+3, r22	; 0x03
 602:	5d 83       	std	Y+5, r21	; 0x05
 604:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 606:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=0) && (Copy_u8Pin<=DIO_u8PIN7))
 608:	8c 81       	ldd	r24, Y+4	; 0x04
 60a:	9d 81       	ldd	r25, Y+5	; 0x05
 60c:	00 97       	sbiw	r24, 0x00	; 0
 60e:	09 f4       	brne	.+2      	; 0x612 <DIO_u8GetPinValue+0x28>
 610:	78 c0       	rjmp	.+240    	; 0x702 <DIO_u8GetPinValue+0x118>
 612:	8b 81       	ldd	r24, Y+3	; 0x03
 614:	88 30       	cpi	r24, 0x08	; 8
 616:	08 f0       	brcs	.+2      	; 0x61a <DIO_u8GetPinValue+0x30>
 618:	74 c0       	rjmp	.+232    	; 0x702 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
 61a:	8a 81       	ldd	r24, Y+2	; 0x02
 61c:	28 2f       	mov	r18, r24
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	3f 83       	std	Y+7, r19	; 0x07
 622:	2e 83       	std	Y+6, r18	; 0x06
 624:	4e 81       	ldd	r20, Y+6	; 0x06
 626:	5f 81       	ldd	r21, Y+7	; 0x07
 628:	41 30       	cpi	r20, 0x01	; 1
 62a:	51 05       	cpc	r21, r1
 62c:	59 f1       	breq	.+86     	; 0x684 <DIO_u8GetPinValue+0x9a>
 62e:	8e 81       	ldd	r24, Y+6	; 0x06
 630:	9f 81       	ldd	r25, Y+7	; 0x07
 632:	82 30       	cpi	r24, 0x02	; 2
 634:	91 05       	cpc	r25, r1
 636:	34 f4       	brge	.+12     	; 0x644 <DIO_u8GetPinValue+0x5a>
 638:	2e 81       	ldd	r18, Y+6	; 0x06
 63a:	3f 81       	ldd	r19, Y+7	; 0x07
 63c:	21 15       	cp	r18, r1
 63e:	31 05       	cpc	r19, r1
 640:	69 f0       	breq	.+26     	; 0x65c <DIO_u8GetPinValue+0x72>
 642:	5c c0       	rjmp	.+184    	; 0x6fc <DIO_u8GetPinValue+0x112>
 644:	4e 81       	ldd	r20, Y+6	; 0x06
 646:	5f 81       	ldd	r21, Y+7	; 0x07
 648:	42 30       	cpi	r20, 0x02	; 2
 64a:	51 05       	cpc	r21, r1
 64c:	79 f1       	breq	.+94     	; 0x6ac <DIO_u8GetPinValue+0xc2>
 64e:	8e 81       	ldd	r24, Y+6	; 0x06
 650:	9f 81       	ldd	r25, Y+7	; 0x07
 652:	83 30       	cpi	r24, 0x03	; 3
 654:	91 05       	cpc	r25, r1
 656:	09 f4       	brne	.+2      	; 0x65a <DIO_u8GetPinValue+0x70>
 658:	3d c0       	rjmp	.+122    	; 0x6d4 <DIO_u8GetPinValue+0xea>
 65a:	50 c0       	rjmp	.+160    	; 0x6fc <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
 65c:	e9 e3       	ldi	r30, 0x39	; 57
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	28 2f       	mov	r18, r24
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	88 2f       	mov	r24, r24
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	a9 01       	movw	r20, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_u8GetPinValue+0x8a>
 670:	55 95       	asr	r21
 672:	47 95       	ror	r20
 674:	8a 95       	dec	r24
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_u8GetPinValue+0x86>
 678:	ca 01       	movw	r24, r20
 67a:	81 70       	andi	r24, 0x01	; 1
 67c:	ec 81       	ldd	r30, Y+4	; 0x04
 67e:	fd 81       	ldd	r31, Y+5	; 0x05
 680:	80 83       	st	Z, r24
 682:	41 c0       	rjmp	.+130    	; 0x706 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
 684:	e6 e3       	ldi	r30, 0x36	; 54
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	8b 81       	ldd	r24, Y+3	; 0x03
 690:	88 2f       	mov	r24, r24
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	a9 01       	movw	r20, r18
 696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_u8GetPinValue+0xb2>
 698:	55 95       	asr	r21
 69a:	47 95       	ror	r20
 69c:	8a 95       	dec	r24
 69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_u8GetPinValue+0xae>
 6a0:	ca 01       	movw	r24, r20
 6a2:	81 70       	andi	r24, 0x01	; 1
 6a4:	ec 81       	ldd	r30, Y+4	; 0x04
 6a6:	fd 81       	ldd	r31, Y+5	; 0x05
 6a8:	80 83       	st	Z, r24
 6aa:	2d c0       	rjmp	.+90     	; 0x706 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
 6ac:	e3 e3       	ldi	r30, 0x33	; 51
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	28 2f       	mov	r18, r24
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	88 2f       	mov	r24, r24
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	a9 01       	movw	r20, r18
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_u8GetPinValue+0xda>
 6c0:	55 95       	asr	r21
 6c2:	47 95       	ror	r20
 6c4:	8a 95       	dec	r24
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_u8GetPinValue+0xd6>
 6c8:	ca 01       	movw	r24, r20
 6ca:	81 70       	andi	r24, 0x01	; 1
 6cc:	ec 81       	ldd	r30, Y+4	; 0x04
 6ce:	fd 81       	ldd	r31, Y+5	; 0x05
 6d0:	80 83       	st	Z, r24
 6d2:	19 c0       	rjmp	.+50     	; 0x706 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
 6d4:	e0 e3       	ldi	r30, 0x30	; 48
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	28 2f       	mov	r18, r24
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	8b 81       	ldd	r24, Y+3	; 0x03
 6e0:	88 2f       	mov	r24, r24
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	a9 01       	movw	r20, r18
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_u8GetPinValue+0x102>
 6e8:	55 95       	asr	r21
 6ea:	47 95       	ror	r20
 6ec:	8a 95       	dec	r24
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_u8GetPinValue+0xfe>
 6f0:	ca 01       	movw	r24, r20
 6f2:	81 70       	andi	r24, 0x01	; 1
 6f4:	ec 81       	ldd	r30, Y+4	; 0x04
 6f6:	fd 81       	ldd	r31, Y+5	; 0x05
 6f8:	80 83       	st	Z, r24
 6fa:	05 c0       	rjmp	.+10     	; 0x706 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState=1;
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	89 83       	std	Y+1, r24	; 0x01
 700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_u8GetPinValue+0x11c>
			}
		}
	else
	{
		Local_u8ErrorState=1;
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_u8ErrorState;
 706:	89 81       	ldd	r24, Y+1	; 0x01
}
 708:	27 96       	adiw	r28, 0x07	; 7
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	f8 94       	cli
 70e:	de bf       	out	0x3e, r29	; 62
 710:	0f be       	out	0x3f, r0	; 63
 712:	cd bf       	out	0x3d, r28	; 61
 714:	cf 91       	pop	r28
 716:	df 91       	pop	r29
 718:	08 95       	ret

0000071a <softwareDelayMs>:
/************************************************************************/
/*                        Software Delay functions                      */
/************************************************************************/

void softwareDelayMs(int u32_delay_in_ms)
{
 71a:	df 93       	push	r29
 71c:	cf 93       	push	r28
 71e:	00 d0       	rcall	.+0      	; 0x720 <softwareDelayMs+0x6>
 720:	00 d0       	rcall	.+0      	; 0x722 <softwareDelayMs+0x8>
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	9c 83       	std	Y+4, r25	; 0x04
 728:	8b 83       	std	Y+3, r24	; 0x03
 72a:	13 c0       	rjmp	.+38     	; 0x752 <softwareDelayMs+0x38>
	/*looping for number of counts that each count is 1ms approximately*/
	while(u32_delay_in_ms > 0)
	{
		for (int i = 0 ; i < 2000 ; i++);
 72c:	1a 82       	std	Y+2, r1	; 0x02
 72e:	19 82       	std	Y+1, r1	; 0x01
 730:	05 c0       	rjmp	.+10     	; 0x73c <softwareDelayMs+0x22>
 732:	89 81       	ldd	r24, Y+1	; 0x01
 734:	9a 81       	ldd	r25, Y+2	; 0x02
 736:	01 96       	adiw	r24, 0x01	; 1
 738:	9a 83       	std	Y+2, r25	; 0x02
 73a:	89 83       	std	Y+1, r24	; 0x01
 73c:	89 81       	ldd	r24, Y+1	; 0x01
 73e:	9a 81       	ldd	r25, Y+2	; 0x02
 740:	27 e0       	ldi	r18, 0x07	; 7
 742:	80 3d       	cpi	r24, 0xD0	; 208
 744:	92 07       	cpc	r25, r18
 746:	ac f3       	brlt	.-22     	; 0x732 <softwareDelayMs+0x18>
		u32_delay_in_ms--;
 748:	8b 81       	ldd	r24, Y+3	; 0x03
 74a:	9c 81       	ldd	r25, Y+4	; 0x04
 74c:	01 97       	sbiw	r24, 0x01	; 1
 74e:	9c 83       	std	Y+4, r25	; 0x04
 750:	8b 83       	std	Y+3, r24	; 0x03
/************************************************************************/

void softwareDelayMs(int u32_delay_in_ms)
{
	/*looping for number of counts that each count is 1ms approximately*/
	while(u32_delay_in_ms > 0)
 752:	8b 81       	ldd	r24, Y+3	; 0x03
 754:	9c 81       	ldd	r25, Y+4	; 0x04
 756:	18 16       	cp	r1, r24
 758:	19 06       	cpc	r1, r25
 75a:	44 f3       	brlt	.-48     	; 0x72c <softwareDelayMs+0x12>
	{
		for (int i = 0 ; i < 2000 ; i++);
		u32_delay_in_ms--;
	}
	return;
}
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	cf 91       	pop	r28
 766:	df 91       	pop	r29
 768:	08 95       	ret

0000076a <main>:

#define F_CPU 8000000UL


int main()
{
 76a:	df 93       	push	r29
 76c:	cf 93       	push	r28
 76e:	cd b7       	in	r28, 0x3d	; 61
 770:	de b7       	in	r29, 0x3e	; 62
 772:	6e 97       	sbiw	r28, 0x1e	; 30
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	f8 94       	cli
 778:	de bf       	out	0x3e, r29	; 62
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	cd bf       	out	0x3d, r28	; 61
	/*Define new  7-Segment */
	SSD_t SSD1={Cathode,DIO_u8PORTB,DIO_u8PORTC,DIO_u8PIN0};
 77e:	1f 86       	std	Y+15, r1	; 0x0f
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	88 8b       	std	Y+16, r24	; 0x10
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	89 8b       	std	Y+17, r24	; 0x11
 788:	1a 8a       	std	Y+18, r1	; 0x12

	/*Define new  7-Segment */
	SSD_t SSD2={Cathode,DIO_u8PORTB,DIO_u8PORTC,DIO_u8PIN1};
 78a:	1b 8a       	std	Y+19, r1	; 0x13
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	8c 8b       	std	Y+20, r24	; 0x14
 790:	82 e0       	ldi	r24, 0x02	; 2
 792:	8d 8b       	std	Y+21, r24	; 0x15
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	8e 8b       	std	Y+22, r24	; 0x16

	/*Define new  7-Segment */
	SSD_t SSD3={Cathode,DIO_u8PORTB,DIO_u8PORTC,DIO_u8PIN2};
 798:	1f 8a       	std	Y+23, r1	; 0x17
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	88 8f       	std	Y+24, r24	; 0x18
 79e:	82 e0       	ldi	r24, 0x02	; 2
 7a0:	89 8f       	std	Y+25, r24	; 0x19
 7a2:	82 e0       	ldi	r24, 0x02	; 2
 7a4:	8a 8f       	std	Y+26, r24	; 0x1a

	/*Define new  7-Segment */
	SSD_t SSD4={Cathode,DIO_u8PORTB,DIO_u8PORTC,DIO_u8PIN3};
 7a6:	1b 8e       	std	Y+27, r1	; 0x1b
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	8c 8f       	std	Y+28, r24	; 0x1c
 7ac:	82 e0       	ldi	r24, 0x02	; 2
 7ae:	8d 8f       	std	Y+29, r24	; 0x1d
 7b0:	83 e0       	ldi	r24, 0x03	; 3
 7b2:	8e 8f       	std	Y+30, r24	; 0x1e

	/*Define pointer to the struct*/
	SSD_t*ptr1=&SSD1;
 7b4:	ce 01       	movw	r24, r28
 7b6:	0f 96       	adiw	r24, 0x0f	; 15
 7b8:	9e 87       	std	Y+14, r25	; 0x0e
 7ba:	8d 87       	std	Y+13, r24	; 0x0d

	/*Define pointer to the struct*/
	SSD_t*ptr2=&SSD2;
 7bc:	ce 01       	movw	r24, r28
 7be:	43 96       	adiw	r24, 0x13	; 19
 7c0:	9c 87       	std	Y+12, r25	; 0x0c
 7c2:	8b 87       	std	Y+11, r24	; 0x0b

	/*Define pointer to the struct*/
	SSD_t*ptr3=&SSD3;
 7c4:	ce 01       	movw	r24, r28
 7c6:	47 96       	adiw	r24, 0x17	; 23
 7c8:	9a 87       	std	Y+10, r25	; 0x0a
 7ca:	89 87       	std	Y+9, r24	; 0x09

	/*Define pointer to the struct*/
	SSD_t*ptr4=&SSD4;
 7cc:	ce 01       	movw	r24, r28
 7ce:	4b 96       	adiw	r24, 0x1b	; 27
 7d0:	98 87       	std	Y+8, r25	; 0x08
 7d2:	8f 83       	std	Y+7, r24	; 0x07

	DIO_u8SetPortDirection(DIO_u8PORTD,DIO_u8PORT_INPUT);
 7d4:	83 e0       	ldi	r24, 0x03	; 3
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPortDirection>

	DIO_u8SetPortValue(DIO_u8PORTD,DIO_u8PORT_HIGH);
 7dc:	83 e0       	ldi	r24, 0x03	; 3
 7de:	6f ef       	ldi	r22, 0xFF	; 255
 7e0:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_u8SetPortValue>
	u8 i,j,s,k,m,e;

	while(1)
	{
		if(GET_BIT(PIND,0)==0)
 7e4:	e0 e3       	ldi	r30, 0x30	; 48
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	88 2f       	mov	r24, r24
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	81 70       	andi	r24, 0x01	; 1
 7f0:	90 70       	andi	r25, 0x00	; 0
 7f2:	00 97       	sbiw	r24, 0x00	; 0
 7f4:	b9 f7       	brne	.-18     	; 0x7e4 <main+0x7a>
		{
			for(e=0;e<7;e++)
 7f6:	19 82       	std	Y+1, r1	; 0x01
 7f8:	e8 c0       	rjmp	.+464    	; 0x9ca <__stack+0x16b>
			{
				for(m=0;m<10;m++)
 7fa:	1a 82       	std	Y+2, r1	; 0x02
 7fc:	df c0       	rjmp	.+446    	; 0x9bc <__stack+0x15d>
				{
					for(i=0;i<6;i++)
 7fe:	1e 82       	std	Y+6, r1	; 0x06
 800:	d6 c0       	rjmp	.+428    	; 0x9ae <__stack+0x14f>
					{
						for(k=0;k<10;k++)
 802:	1b 82       	std	Y+3, r1	; 0x03
 804:	cd c0       	rjmp	.+410    	; 0x9a0 <__stack+0x141>
						{
							for(j=0;j<5;j++)
 806:	1d 82       	std	Y+5, r1	; 0x05
 808:	c4 c0       	rjmp	.+392    	; 0x992 <__stack+0x133>
							{
								for(s=0;s<10;s++)
 80a:	1c 82       	std	Y+4, r1	; 0x04
 80c:	bb c0       	rjmp	.+374    	; 0x984 <__stack+0x125>
								{

									if(GET_BIT(PIND,1)==0)
 80e:	e0 e3       	ldi	r30, 0x30	; 48
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	86 95       	lsr	r24
 816:	88 2f       	mov	r24, r24
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	81 70       	andi	r24, 0x01	; 1
 81c:	90 70       	andi	r25, 0x00	; 0
 81e:	00 97       	sbiw	r24, 0x00	; 0
 820:	31 f4       	brne	.+12     	; 0x82e <main+0xc4>
									{
										i=0;j=0;s=0;k=0;m=0;e=0;
 822:	1e 82       	std	Y+6, r1	; 0x06
 824:	1d 82       	std	Y+5, r1	; 0x05
 826:	1c 82       	std	Y+4, r1	; 0x04
 828:	1b 82       	std	Y+3, r1	; 0x03
 82a:	1a 82       	std	Y+2, r1	; 0x02
 82c:	19 82       	std	Y+1, r1	; 0x01
									}
									if(GET_BIT(PIND,2)==0)
 82e:	e0 e3       	ldi	r30, 0x30	; 48
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	86 95       	lsr	r24
 836:	86 95       	lsr	r24
 838:	88 2f       	mov	r24, r24
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	81 70       	andi	r24, 0x01	; 1
 83e:	90 70       	andi	r25, 0x00	; 0
 840:	00 97       	sbiw	r24, 0x00	; 0
 842:	09 f0       	breq	.+2      	; 0x846 <main+0xdc>
 844:	54 c0       	rjmp	.+168    	; 0x8ee <__stack+0x8f>
									{
										do
										{
											SSD_Enable(ptr1);
 846:	8d 85       	ldd	r24, Y+13	; 0x0d
 848:	9e 85       	ldd	r25, Y+14	; 0x0e
 84a:	0e 94 88 05 	call	0xb10	; 0xb10 <SSD_Enable>
											SSD_Set_Number(k, ptr1);
 84e:	2d 85       	ldd	r18, Y+13	; 0x0d
 850:	3e 85       	ldd	r19, Y+14	; 0x0e
 852:	8b 81       	ldd	r24, Y+3	; 0x03
 854:	b9 01       	movw	r22, r18
 856:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <SSD_Set_Number>
											softwareDelayMs(1);
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 8d 03 	call	0x71a	; 0x71a <softwareDelayMs>
											//_delay_ms(5);
											SSD_Disable(ptr1);
 862:	8d 85       	ldd	r24, Y+13	; 0x0d
 864:	9e 85       	ldd	r25, Y+14	; 0x0e
 866:	0e 94 ba 05 	call	0xb74	; 0xb74 <SSD_Disable>

											SSD_Enable(ptr2);
 86a:	8b 85       	ldd	r24, Y+11	; 0x0b
 86c:	9c 85       	ldd	r25, Y+12	; 0x0c
 86e:	0e 94 88 05 	call	0xb10	; 0xb10 <SSD_Enable>
											SSD_Set_Number(i, ptr2);
 872:	2b 85       	ldd	r18, Y+11	; 0x0b
 874:	3c 85       	ldd	r19, Y+12	; 0x0c
 876:	8e 81       	ldd	r24, Y+6	; 0x06
 878:	b9 01       	movw	r22, r18
 87a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <SSD_Set_Number>
											softwareDelayMs(1);
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	0e 94 8d 03 	call	0x71a	; 0x71a <softwareDelayMs>
											//_delay_ms(5);
											SSD_Disable(ptr2);
 886:	8b 85       	ldd	r24, Y+11	; 0x0b
 888:	9c 85       	ldd	r25, Y+12	; 0x0c
 88a:	0e 94 ba 05 	call	0xb74	; 0xb74 <SSD_Disable>

											SSD_Enable(ptr3);
 88e:	89 85       	ldd	r24, Y+9	; 0x09
 890:	9a 85       	ldd	r25, Y+10	; 0x0a
 892:	0e 94 88 05 	call	0xb10	; 0xb10 <SSD_Enable>
											SSD_Set_Number(m, ptr3);
 896:	29 85       	ldd	r18, Y+9	; 0x09
 898:	3a 85       	ldd	r19, Y+10	; 0x0a
 89a:	8a 81       	ldd	r24, Y+2	; 0x02
 89c:	b9 01       	movw	r22, r18
 89e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <SSD_Set_Number>
											softwareDelayMs(1);
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	0e 94 8d 03 	call	0x71a	; 0x71a <softwareDelayMs>
											//_delay_ms(5);
											SSD_Disable(ptr3);
 8aa:	89 85       	ldd	r24, Y+9	; 0x09
 8ac:	9a 85       	ldd	r25, Y+10	; 0x0a
 8ae:	0e 94 ba 05 	call	0xb74	; 0xb74 <SSD_Disable>

											SSD_Enable(ptr4);
 8b2:	8f 81       	ldd	r24, Y+7	; 0x07
 8b4:	98 85       	ldd	r25, Y+8	; 0x08
 8b6:	0e 94 88 05 	call	0xb10	; 0xb10 <SSD_Enable>
											SSD_Set_Number(e, ptr4);
 8ba:	2f 81       	ldd	r18, Y+7	; 0x07
 8bc:	38 85       	ldd	r19, Y+8	; 0x08
 8be:	89 81       	ldd	r24, Y+1	; 0x01
 8c0:	b9 01       	movw	r22, r18
 8c2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <SSD_Set_Number>
											softwareDelayMs(1);
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 8d 03 	call	0x71a	; 0x71a <softwareDelayMs>
											//_delay_ms(5);
											SSD_Disable(ptr4);
 8ce:	8f 81       	ldd	r24, Y+7	; 0x07
 8d0:	98 85       	ldd	r25, Y+8	; 0x08
 8d2:	0e 94 ba 05 	call	0xb74	; 0xb74 <SSD_Disable>

										}
										while(GET_BIT(PIND,2)==1);
 8d6:	e0 e3       	ldi	r30, 0x30	; 48
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	80 81       	ld	r24, Z
 8dc:	86 95       	lsr	r24
 8de:	86 95       	lsr	r24
 8e0:	88 2f       	mov	r24, r24
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	81 70       	andi	r24, 0x01	; 1
 8e6:	90 70       	andi	r25, 0x00	; 0
 8e8:	88 23       	and	r24, r24
 8ea:	09 f0       	breq	.+2      	; 0x8ee <__stack+0x8f>
 8ec:	ac cf       	rjmp	.-168    	; 0x846 <main+0xdc>
									}
									SSD_Enable(ptr1);
 8ee:	8d 85       	ldd	r24, Y+13	; 0x0d
 8f0:	9e 85       	ldd	r25, Y+14	; 0x0e
 8f2:	0e 94 88 05 	call	0xb10	; 0xb10 <SSD_Enable>
									SSD_Set_Number(k, ptr1);
 8f6:	2d 85       	ldd	r18, Y+13	; 0x0d
 8f8:	3e 85       	ldd	r19, Y+14	; 0x0e
 8fa:	8b 81       	ldd	r24, Y+3	; 0x03
 8fc:	b9 01       	movw	r22, r18
 8fe:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <SSD_Set_Number>
									softwareDelayMs(1);
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 8d 03 	call	0x71a	; 0x71a <softwareDelayMs>
									//_delay_ms(5);
									SSD_Disable(ptr1);
 90a:	8d 85       	ldd	r24, Y+13	; 0x0d
 90c:	9e 85       	ldd	r25, Y+14	; 0x0e
 90e:	0e 94 ba 05 	call	0xb74	; 0xb74 <SSD_Disable>

									SSD_Enable(ptr2);
 912:	8b 85       	ldd	r24, Y+11	; 0x0b
 914:	9c 85       	ldd	r25, Y+12	; 0x0c
 916:	0e 94 88 05 	call	0xb10	; 0xb10 <SSD_Enable>
									SSD_Set_Number(i, ptr2);
 91a:	2b 85       	ldd	r18, Y+11	; 0x0b
 91c:	3c 85       	ldd	r19, Y+12	; 0x0c
 91e:	8e 81       	ldd	r24, Y+6	; 0x06
 920:	b9 01       	movw	r22, r18
 922:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <SSD_Set_Number>
									softwareDelayMs(1);
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	0e 94 8d 03 	call	0x71a	; 0x71a <softwareDelayMs>
									//_delay_ms(5);
									SSD_Disable(ptr2);
 92e:	8b 85       	ldd	r24, Y+11	; 0x0b
 930:	9c 85       	ldd	r25, Y+12	; 0x0c
 932:	0e 94 ba 05 	call	0xb74	; 0xb74 <SSD_Disable>

									SSD_Enable(ptr3);
 936:	89 85       	ldd	r24, Y+9	; 0x09
 938:	9a 85       	ldd	r25, Y+10	; 0x0a
 93a:	0e 94 88 05 	call	0xb10	; 0xb10 <SSD_Enable>
									SSD_Set_Number(m, ptr3);
 93e:	29 85       	ldd	r18, Y+9	; 0x09
 940:	3a 85       	ldd	r19, Y+10	; 0x0a
 942:	8a 81       	ldd	r24, Y+2	; 0x02
 944:	b9 01       	movw	r22, r18
 946:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <SSD_Set_Number>
									softwareDelayMs(1);
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	0e 94 8d 03 	call	0x71a	; 0x71a <softwareDelayMs>
									//_delay_ms(5);
									SSD_Disable(ptr3);
 952:	89 85       	ldd	r24, Y+9	; 0x09
 954:	9a 85       	ldd	r25, Y+10	; 0x0a
 956:	0e 94 ba 05 	call	0xb74	; 0xb74 <SSD_Disable>

									SSD_Enable(ptr4);
 95a:	8f 81       	ldd	r24, Y+7	; 0x07
 95c:	98 85       	ldd	r25, Y+8	; 0x08
 95e:	0e 94 88 05 	call	0xb10	; 0xb10 <SSD_Enable>
									SSD_Set_Number(e, ptr4);
 962:	2f 81       	ldd	r18, Y+7	; 0x07
 964:	38 85       	ldd	r19, Y+8	; 0x08
 966:	89 81       	ldd	r24, Y+1	; 0x01
 968:	b9 01       	movw	r22, r18
 96a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <SSD_Set_Number>
									softwareDelayMs(1);
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	0e 94 8d 03 	call	0x71a	; 0x71a <softwareDelayMs>
									//_delay_ms(5);
									SSD_Disable(ptr4);
 976:	8f 81       	ldd	r24, Y+7	; 0x07
 978:	98 85       	ldd	r25, Y+8	; 0x08
 97a:	0e 94 ba 05 	call	0xb74	; 0xb74 <SSD_Disable>
					{
						for(k=0;k<10;k++)
						{
							for(j=0;j<5;j++)
							{
								for(s=0;s<10;s++)
 97e:	8c 81       	ldd	r24, Y+4	; 0x04
 980:	8f 5f       	subi	r24, 0xFF	; 255
 982:	8c 83       	std	Y+4, r24	; 0x04
 984:	8c 81       	ldd	r24, Y+4	; 0x04
 986:	8a 30       	cpi	r24, 0x0A	; 10
 988:	08 f4       	brcc	.+2      	; 0x98c <__stack+0x12d>
 98a:	41 cf       	rjmp	.-382    	; 0x80e <main+0xa4>
				{
					for(i=0;i<6;i++)
					{
						for(k=0;k<10;k++)
						{
							for(j=0;j<5;j++)
 98c:	8d 81       	ldd	r24, Y+5	; 0x05
 98e:	8f 5f       	subi	r24, 0xFF	; 255
 990:	8d 83       	std	Y+5, r24	; 0x05
 992:	8d 81       	ldd	r24, Y+5	; 0x05
 994:	85 30       	cpi	r24, 0x05	; 5
 996:	08 f4       	brcc	.+2      	; 0x99a <__stack+0x13b>
 998:	38 cf       	rjmp	.-400    	; 0x80a <main+0xa0>
			{
				for(m=0;m<10;m++)
				{
					for(i=0;i<6;i++)
					{
						for(k=0;k<10;k++)
 99a:	8b 81       	ldd	r24, Y+3	; 0x03
 99c:	8f 5f       	subi	r24, 0xFF	; 255
 99e:	8b 83       	std	Y+3, r24	; 0x03
 9a0:	8b 81       	ldd	r24, Y+3	; 0x03
 9a2:	8a 30       	cpi	r24, 0x0A	; 10
 9a4:	08 f4       	brcc	.+2      	; 0x9a8 <__stack+0x149>
 9a6:	2f cf       	rjmp	.-418    	; 0x806 <main+0x9c>
		{
			for(e=0;e<7;e++)
			{
				for(m=0;m<10;m++)
				{
					for(i=0;i<6;i++)
 9a8:	8e 81       	ldd	r24, Y+6	; 0x06
 9aa:	8f 5f       	subi	r24, 0xFF	; 255
 9ac:	8e 83       	std	Y+6, r24	; 0x06
 9ae:	8e 81       	ldd	r24, Y+6	; 0x06
 9b0:	86 30       	cpi	r24, 0x06	; 6
 9b2:	08 f4       	brcc	.+2      	; 0x9b6 <__stack+0x157>
 9b4:	26 cf       	rjmp	.-436    	; 0x802 <main+0x98>
	{
		if(GET_BIT(PIND,0)==0)
		{
			for(e=0;e<7;e++)
			{
				for(m=0;m<10;m++)
 9b6:	8a 81       	ldd	r24, Y+2	; 0x02
 9b8:	8f 5f       	subi	r24, 0xFF	; 255
 9ba:	8a 83       	std	Y+2, r24	; 0x02
 9bc:	8a 81       	ldd	r24, Y+2	; 0x02
 9be:	8a 30       	cpi	r24, 0x0A	; 10
 9c0:	08 f4       	brcc	.+2      	; 0x9c4 <__stack+0x165>
 9c2:	1d cf       	rjmp	.-454    	; 0x7fe <main+0x94>

	while(1)
	{
		if(GET_BIT(PIND,0)==0)
		{
			for(e=0;e<7;e++)
 9c4:	89 81       	ldd	r24, Y+1	; 0x01
 9c6:	8f 5f       	subi	r24, 0xFF	; 255
 9c8:	89 83       	std	Y+1, r24	; 0x01
 9ca:	89 81       	ldd	r24, Y+1	; 0x01
 9cc:	87 30       	cpi	r24, 0x07	; 7
 9ce:	08 f4       	brcc	.+2      	; 0x9d2 <__stack+0x173>
 9d0:	14 cf       	rjmp	.-472    	; 0x7fa <main+0x90>
 9d2:	08 cf       	rjmp	.-496    	; 0x7e4 <main+0x7a>

000009d4 <SSD_Set_Number>:
#include "DIO_private.h"
#include "DIO_config.h"
#include "SSD_interface.h"

u8 SSD_Set_Number(u8 Number, SSD_t*SSD)
{
 9d4:	df 93       	push	r29
 9d6:	cf 93       	push	r28
 9d8:	cd b7       	in	r28, 0x3d	; 61
 9da:	de b7       	in	r29, 0x3e	; 62
 9dc:	63 97       	sbiw	r28, 0x13	; 19
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	f8 94       	cli
 9e2:	de bf       	out	0x3e, r29	; 62
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	cd bf       	out	0x3d, r28	; 61
 9e8:	8c 87       	std	Y+12, r24	; 0x0c
 9ea:	7e 87       	std	Y+14, r23	; 0x0e
 9ec:	6d 87       	std	Y+13, r22	; 0x0d
	u8 sevenSeg[10]={Digit_0,Digit_1,Digit_2,Digit_3,Digit_4,Digit_5,Digit_6,Digit_7,Digit_8,Digit_9};
 9ee:	ce 01       	movw	r24, r28
 9f0:	02 96       	adiw	r24, 0x02	; 2
 9f2:	98 8b       	std	Y+16, r25	; 0x10
 9f4:	8f 87       	std	Y+15, r24	; 0x0f
 9f6:	e0 e6       	ldi	r30, 0x60	; 96
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	fa 8b       	std	Y+18, r31	; 0x12
 9fc:	e9 8b       	std	Y+17, r30	; 0x11
 9fe:	fa e0       	ldi	r31, 0x0A	; 10
 a00:	fb 8b       	std	Y+19, r31	; 0x13
 a02:	e9 89       	ldd	r30, Y+17	; 0x11
 a04:	fa 89       	ldd	r31, Y+18	; 0x12
 a06:	00 80       	ld	r0, Z
 a08:	89 89       	ldd	r24, Y+17	; 0x11
 a0a:	9a 89       	ldd	r25, Y+18	; 0x12
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	9a 8b       	std	Y+18, r25	; 0x12
 a10:	89 8b       	std	Y+17, r24	; 0x11
 a12:	ef 85       	ldd	r30, Y+15	; 0x0f
 a14:	f8 89       	ldd	r31, Y+16	; 0x10
 a16:	00 82       	st	Z, r0
 a18:	8f 85       	ldd	r24, Y+15	; 0x0f
 a1a:	98 89       	ldd	r25, Y+16	; 0x10
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	98 8b       	std	Y+16, r25	; 0x10
 a20:	8f 87       	std	Y+15, r24	; 0x0f
 a22:	9b 89       	ldd	r25, Y+19	; 0x13
 a24:	91 50       	subi	r25, 0x01	; 1
 a26:	9b 8b       	std	Y+19, r25	; 0x13
 a28:	eb 89       	ldd	r30, Y+19	; 0x13
 a2a:	ee 23       	and	r30, r30
 a2c:	51 f7       	brne	.-44     	; 0xa02 <SSD_Set_Number+0x2e>
	u8 Local_u8ErrorState=0;
 a2e:	19 82       	std	Y+1, r1	; 0x01
	if(SSD!=NULL)
 a30:	8d 85       	ldd	r24, Y+13	; 0x0d
 a32:	9e 85       	ldd	r25, Y+14	; 0x0e
 a34:	00 97       	sbiw	r24, 0x00	; 0
 a36:	09 f4       	brne	.+2      	; 0xa3a <SSD_Set_Number+0x66>
 a38:	5f c0       	rjmp	.+190    	; 0xaf8 <SSD_Set_Number+0x124>
	{
		if(Number<=9&&Number>=0)
 a3a:	8c 85       	ldd	r24, Y+12	; 0x0c
 a3c:	8a 30       	cpi	r24, 0x0A	; 10
 a3e:	08 f0       	brcs	.+2      	; 0xa42 <SSD_Set_Number+0x6e>
 a40:	58 c0       	rjmp	.+176    	; 0xaf2 <SSD_Set_Number+0x11e>
		{
			if(SSD->COM_TYPE==Anode)
 a42:	ed 85       	ldd	r30, Y+13	; 0x0d
 a44:	fe 85       	ldd	r31, Y+14	; 0x0e
 a46:	80 81       	ld	r24, Z
 a48:	81 30       	cpi	r24, 0x01	; 1
 a4a:	69 f5       	brne	.+90     	; 0xaa6 <SSD_Set_Number+0xd2>
			{
				DIO_u8SetPortDirection(SSD->PORT,DIO_u8PORT_OUTPUT);
 a4c:	ed 85       	ldd	r30, Y+13	; 0x0d
 a4e:	fe 85       	ldd	r31, Y+14	; 0x0e
 a50:	81 81       	ldd	r24, Z+1	; 0x01
 a52:	6f ef       	ldi	r22, 0xFF	; 255
 a54:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPortDirection>
				DIO_u8SetPinDirection(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_OUTPUT);
 a58:	ed 85       	ldd	r30, Y+13	; 0x0d
 a5a:	fe 85       	ldd	r31, Y+14	; 0x0e
 a5c:	82 81       	ldd	r24, Z+2	; 0x02
 a5e:	ed 85       	ldd	r30, Y+13	; 0x0d
 a60:	fe 85       	ldd	r31, Y+14	; 0x0e
 a62:	93 81       	ldd	r25, Z+3	; 0x03
 a64:	69 2f       	mov	r22, r25
 a66:	41 e0       	ldi	r20, 0x01	; 1
 a68:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_HIGH);
 a6c:	ed 85       	ldd	r30, Y+13	; 0x0d
 a6e:	fe 85       	ldd	r31, Y+14	; 0x0e
 a70:	82 81       	ldd	r24, Z+2	; 0x02
 a72:	ed 85       	ldd	r30, Y+13	; 0x0d
 a74:	fe 85       	ldd	r31, Y+14	; 0x0e
 a76:	93 81       	ldd	r25, Z+3	; 0x03
 a78:	69 2f       	mov	r22, r25
 a7a:	41 e0       	ldi	r20, 0x01	; 1
 a7c:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_u8SetPinValue>
				DIO_u8SetPortValue(SSD->PORT,~sevenSeg[Number]);
 a80:	ed 85       	ldd	r30, Y+13	; 0x0d
 a82:	fe 85       	ldd	r31, Y+14	; 0x0e
 a84:	41 81       	ldd	r20, Z+1	; 0x01
 a86:	8c 85       	ldd	r24, Y+12	; 0x0c
 a88:	28 2f       	mov	r18, r24
 a8a:	30 e0       	ldi	r19, 0x00	; 0
 a8c:	ce 01       	movw	r24, r28
 a8e:	02 96       	adiw	r24, 0x02	; 2
 a90:	fc 01       	movw	r30, r24
 a92:	e2 0f       	add	r30, r18
 a94:	f3 1f       	adc	r31, r19
 a96:	80 81       	ld	r24, Z
 a98:	98 2f       	mov	r25, r24
 a9a:	90 95       	com	r25
 a9c:	84 2f       	mov	r24, r20
 a9e:	69 2f       	mov	r22, r25
 aa0:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_u8SetPortValue>
 aa4:	2b c0       	rjmp	.+86     	; 0xafc <SSD_Set_Number+0x128>
			}
			else if(SSD->COM_TYPE==Cathode)
 aa6:	ed 85       	ldd	r30, Y+13	; 0x0d
 aa8:	fe 85       	ldd	r31, Y+14	; 0x0e
 aaa:	80 81       	ld	r24, Z
 aac:	88 23       	and	r24, r24
 aae:	31 f5       	brne	.+76     	; 0xafc <SSD_Set_Number+0x128>
			{
				DIO_u8SetPinDirection(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_OUTPUT);
 ab0:	ed 85       	ldd	r30, Y+13	; 0x0d
 ab2:	fe 85       	ldd	r31, Y+14	; 0x0e
 ab4:	82 81       	ldd	r24, Z+2	; 0x02
 ab6:	ed 85       	ldd	r30, Y+13	; 0x0d
 ab8:	fe 85       	ldd	r31, Y+14	; 0x0e
 aba:	93 81       	ldd	r25, Z+3	; 0x03
 abc:	69 2f       	mov	r22, r25
 abe:	41 e0       	ldi	r20, 0x01	; 1
 ac0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
				DIO_u8SetPortDirection(SSD->PORT,DIO_u8PORT_OUTPUT);
 ac4:	ed 85       	ldd	r30, Y+13	; 0x0d
 ac6:	fe 85       	ldd	r31, Y+14	; 0x0e
 ac8:	81 81       	ldd	r24, Z+1	; 0x01
 aca:	6f ef       	ldi	r22, 0xFF	; 255
 acc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPortDirection>
				//DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_LOW);
				DIO_u8SetPortValue(SSD->PORT,sevenSeg[Number]);
 ad0:	ed 85       	ldd	r30, Y+13	; 0x0d
 ad2:	fe 85       	ldd	r31, Y+14	; 0x0e
 ad4:	41 81       	ldd	r20, Z+1	; 0x01
 ad6:	8c 85       	ldd	r24, Y+12	; 0x0c
 ad8:	28 2f       	mov	r18, r24
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	ce 01       	movw	r24, r28
 ade:	02 96       	adiw	r24, 0x02	; 2
 ae0:	fc 01       	movw	r30, r24
 ae2:	e2 0f       	add	r30, r18
 ae4:	f3 1f       	adc	r31, r19
 ae6:	90 81       	ld	r25, Z
 ae8:	84 2f       	mov	r24, r20
 aea:	69 2f       	mov	r22, r25
 aec:	0e 94 ad 02 	call	0x55a	; 0x55a <DIO_u8SetPortValue>
 af0:	05 c0       	rjmp	.+10     	; 0xafc <SSD_Set_Number+0x128>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 af2:	81 e0       	ldi	r24, 0x01	; 1
 af4:	89 83       	std	Y+1, r24	; 0x01
 af6:	02 c0       	rjmp	.+4      	; 0xafc <SSD_Set_Number+0x128>
		}

	}
	else
	{
		Local_u8ErrorState=1;
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 afc:	89 81       	ldd	r24, Y+1	; 0x01
}
 afe:	63 96       	adiw	r28, 0x13	; 19
 b00:	0f b6       	in	r0, 0x3f	; 63
 b02:	f8 94       	cli
 b04:	de bf       	out	0x3e, r29	; 62
 b06:	0f be       	out	0x3f, r0	; 63
 b08:	cd bf       	out	0x3d, r28	; 61
 b0a:	cf 91       	pop	r28
 b0c:	df 91       	pop	r29
 b0e:	08 95       	ret

00000b10 <SSD_Enable>:
u8 SSD_Enable(SSD_t*SSD)
{
 b10:	df 93       	push	r29
 b12:	cf 93       	push	r28
 b14:	00 d0       	rcall	.+0      	; 0xb16 <SSD_Enable+0x6>
 b16:	0f 92       	push	r0
 b18:	cd b7       	in	r28, 0x3d	; 61
 b1a:	de b7       	in	r29, 0x3e	; 62
 b1c:	9b 83       	std	Y+3, r25	; 0x03
 b1e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
 b20:	19 82       	std	Y+1, r1	; 0x01
	if(SSD->COM_TYPE==Anode)
 b22:	ea 81       	ldd	r30, Y+2	; 0x02
 b24:	fb 81       	ldd	r31, Y+3	; 0x03
 b26:	80 81       	ld	r24, Z
 b28:	81 30       	cpi	r24, 0x01	; 1
 b2a:	59 f4       	brne	.+22     	; 0xb42 <SSD_Enable+0x32>
	{
		DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_HIGH);
 b2c:	ea 81       	ldd	r30, Y+2	; 0x02
 b2e:	fb 81       	ldd	r31, Y+3	; 0x03
 b30:	82 81       	ldd	r24, Z+2	; 0x02
 b32:	ea 81       	ldd	r30, Y+2	; 0x02
 b34:	fb 81       	ldd	r31, Y+3	; 0x03
 b36:	93 81       	ldd	r25, Z+3	; 0x03
 b38:	69 2f       	mov	r22, r25
 b3a:	41 e0       	ldi	r20, 0x01	; 1
 b3c:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_u8SetPinValue>
 b40:	12 c0       	rjmp	.+36     	; 0xb66 <SSD_Enable+0x56>
	}
	else if(SSD->COM_TYPE==Cathode)
 b42:	ea 81       	ldd	r30, Y+2	; 0x02
 b44:	fb 81       	ldd	r31, Y+3	; 0x03
 b46:	80 81       	ld	r24, Z
 b48:	88 23       	and	r24, r24
 b4a:	59 f4       	brne	.+22     	; 0xb62 <SSD_Enable+0x52>
	{
		DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_LOW);
 b4c:	ea 81       	ldd	r30, Y+2	; 0x02
 b4e:	fb 81       	ldd	r31, Y+3	; 0x03
 b50:	82 81       	ldd	r24, Z+2	; 0x02
 b52:	ea 81       	ldd	r30, Y+2	; 0x02
 b54:	fb 81       	ldd	r31, Y+3	; 0x03
 b56:	93 81       	ldd	r25, Z+3	; 0x03
 b58:	69 2f       	mov	r22, r25
 b5a:	40 e0       	ldi	r20, 0x00	; 0
 b5c:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_u8SetPinValue>
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <SSD_Enable+0x56>
	}
	else
	{
		Local_u8ErrorState=1;
 b62:	81 e0       	ldi	r24, 0x01	; 1
 b64:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 b66:	89 81       	ldd	r24, Y+1	; 0x01
}
 b68:	0f 90       	pop	r0
 b6a:	0f 90       	pop	r0
 b6c:	0f 90       	pop	r0
 b6e:	cf 91       	pop	r28
 b70:	df 91       	pop	r29
 b72:	08 95       	ret

00000b74 <SSD_Disable>:
u8 SSD_Disable(SSD_t*SSD)
{
 b74:	df 93       	push	r29
 b76:	cf 93       	push	r28
 b78:	00 d0       	rcall	.+0      	; 0xb7a <SSD_Disable+0x6>
 b7a:	0f 92       	push	r0
 b7c:	cd b7       	in	r28, 0x3d	; 61
 b7e:	de b7       	in	r29, 0x3e	; 62
 b80:	9b 83       	std	Y+3, r25	; 0x03
 b82:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
 b84:	19 82       	std	Y+1, r1	; 0x01
	if(SSD->COM_TYPE==Anode)
 b86:	ea 81       	ldd	r30, Y+2	; 0x02
 b88:	fb 81       	ldd	r31, Y+3	; 0x03
 b8a:	80 81       	ld	r24, Z
 b8c:	81 30       	cpi	r24, 0x01	; 1
 b8e:	59 f4       	brne	.+22     	; 0xba6 <SSD_Disable+0x32>
	{
		DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_LOW);
 b90:	ea 81       	ldd	r30, Y+2	; 0x02
 b92:	fb 81       	ldd	r31, Y+3	; 0x03
 b94:	82 81       	ldd	r24, Z+2	; 0x02
 b96:	ea 81       	ldd	r30, Y+2	; 0x02
 b98:	fb 81       	ldd	r31, Y+3	; 0x03
 b9a:	93 81       	ldd	r25, Z+3	; 0x03
 b9c:	69 2f       	mov	r22, r25
 b9e:	40 e0       	ldi	r20, 0x00	; 0
 ba0:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_u8SetPinValue>
 ba4:	12 c0       	rjmp	.+36     	; 0xbca <SSD_Disable+0x56>
	}
	else if(SSD->COM_TYPE==Cathode)
 ba6:	ea 81       	ldd	r30, Y+2	; 0x02
 ba8:	fb 81       	ldd	r31, Y+3	; 0x03
 baa:	80 81       	ld	r24, Z
 bac:	88 23       	and	r24, r24
 bae:	59 f4       	brne	.+22     	; 0xbc6 <SSD_Disable+0x52>
	{
		DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_HIGH);
 bb0:	ea 81       	ldd	r30, Y+2	; 0x02
 bb2:	fb 81       	ldd	r31, Y+3	; 0x03
 bb4:	82 81       	ldd	r24, Z+2	; 0x02
 bb6:	ea 81       	ldd	r30, Y+2	; 0x02
 bb8:	fb 81       	ldd	r31, Y+3	; 0x03
 bba:	93 81       	ldd	r25, Z+3	; 0x03
 bbc:	69 2f       	mov	r22, r25
 bbe:	41 e0       	ldi	r20, 0x01	; 1
 bc0:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_u8SetPinValue>
 bc4:	02 c0       	rjmp	.+4      	; 0xbca <SSD_Disable+0x56>
	}
	else
	{
		Local_u8ErrorState=1;
 bc6:	81 e0       	ldi	r24, 0x01	; 1
 bc8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 bca:	89 81       	ldd	r24, Y+1	; 0x01
}
 bcc:	0f 90       	pop	r0
 bce:	0f 90       	pop	r0
 bd0:	0f 90       	pop	r0
 bd2:	cf 91       	pop	r28
 bd4:	df 91       	pop	r29
 bd6:	08 95       	ret

00000bd8 <_exit>:
 bd8:	f8 94       	cli

00000bda <__stop_program>:
 bda:	ff cf       	rjmp	.-2      	; 0xbda <__stop_program>
