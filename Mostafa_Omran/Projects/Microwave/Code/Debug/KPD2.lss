
KPD2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002364  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00002364  000023f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000d8  008000d8  00002470  2**0
                  ALLOC
  3 .stab         000021c0  00000000  00000000  00002470  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eec  00000000  00000000  00004630  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000551c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000565c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000057cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007415  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000090b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000949d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009c6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_1>
       8:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__vector_2>
       c:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3e       	cpi	r26, 0xE7	; 231
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <main>
      8a:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 eb       	ldi	r26, 0xB7	; 183
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 95 11 	jmp	0x232a	; 0x232a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 85 11 	jmp	0x230a	; 0x230a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 85 11 	jmp	0x230a	; 0x230a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 eb       	ldi	r24, 0xB7	; 183
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 95 11 	jmp	0x232a	; 0x232a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 85 11 	jmp	0x230a	; 0x230a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 85 11 	jmp	0x230a	; 0x230a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 85 11 	jmp	0x230a	; 0x230a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f


	/*Set RS pin to low for command*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>

	#ifdef  _EIGHT_BIT

    /*Set command to data pins*/
    DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 b2 0b 	call	0x1764	; 0x1764 <DIO_u8SetPortValue>
    
    /*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

	#endif


}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to High for Data*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>

	#ifdef _EIGHT_BIT

    /*Set command to data pins*/
    DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 b2 0b 	call	0x1764	; 0x1764 <DIO_u8SetPortValue>

    /*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

	#endif

}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidInit>:

void CLCD_voidInit(u8 Copy_u8Function,u8 Copy_u8Display)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	64 97       	sbiw	r28, 0x14	; 20
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	8f 87       	std	Y+15, r24	; 0x0f
     dd4:	68 8b       	std	Y+16, r22	; 0x10
	#ifdef _EIGHT_BIT

	/*Initialize LCD pins direction*/
	DIO_u8SetPortDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	41 e0       	ldi	r20, 0x01	; 1
     de4:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	41 e0       	ldi	r20, 0x01	; 1
     dee:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	62 e0       	ldi	r22, 0x02	; 2
     df6:	41 e0       	ldi	r20, 0x01	; 1
     df8:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8SetPinDirection>
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a0 e2       	ldi	r26, 0x20	; 32
     e02:	b2 e4       	ldi	r27, 0x42	; 66
     e04:	8b 87       	std	Y+11, r24	; 0x0b
     e06:	9c 87       	std	Y+12, r25	; 0x0c
     e08:	ad 87       	std	Y+13, r26	; 0x0d
     e0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e10:	8d 85       	ldd	r24, Y+13	; 0x0d
     e12:	9e 85       	ldd	r25, Y+14	; 0x0e
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	4a ef       	ldi	r20, 0xFA	; 250
     e1a:	54 e4       	ldi	r21, 0x44	; 68
     e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	8f 83       	std	Y+7, r24	; 0x07
     e26:	98 87       	std	Y+8, r25	; 0x08
     e28:	a9 87       	std	Y+9, r26	; 0x09
     e2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e2c:	6f 81       	ldd	r22, Y+7	; 0x07
     e2e:	78 85       	ldd	r23, Y+8	; 0x08
     e30:	89 85       	ldd	r24, Y+9	; 0x09
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e8       	ldi	r20, 0x80	; 128
     e3a:	5f e3       	ldi	r21, 0x3F	; 63
     e3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e40:	88 23       	and	r24, r24
     e42:	2c f4       	brge	.+10     	; 0xe4e <CLCD_voidInit+0x90>
		__ticks = 1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	9e 83       	std	Y+6, r25	; 0x06
     e4a:	8d 83       	std	Y+5, r24	; 0x05
     e4c:	3f c0       	rjmp	.+126    	; 0xecc <CLCD_voidInit+0x10e>
	else if (__tmp > 65535)
     e4e:	6f 81       	ldd	r22, Y+7	; 0x07
     e50:	78 85       	ldd	r23, Y+8	; 0x08
     e52:	89 85       	ldd	r24, Y+9	; 0x09
     e54:	9a 85       	ldd	r25, Y+10	; 0x0a
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	3f ef       	ldi	r19, 0xFF	; 255
     e5a:	4f e7       	ldi	r20, 0x7F	; 127
     e5c:	57 e4       	ldi	r21, 0x47	; 71
     e5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e62:	18 16       	cp	r1, r24
     e64:	4c f5       	brge	.+82     	; 0xeb8 <CLCD_voidInit+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e66:	6b 85       	ldd	r22, Y+11	; 0x0b
     e68:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e2       	ldi	r20, 0x20	; 32
     e74:	51 e4       	ldi	r21, 0x41	; 65
     e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	9e 83       	std	Y+6, r25	; 0x06
     e8c:	8d 83       	std	Y+5, r24	; 0x05
     e8e:	0f c0       	rjmp	.+30     	; 0xeae <CLCD_voidInit+0xf0>
     e90:	88 ec       	ldi	r24, 0xC8	; 200
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	9c 83       	std	Y+4, r25	; 0x04
     e96:	8b 83       	std	Y+3, r24	; 0x03
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <CLCD_voidInit+0xde>
     ea0:	9c 83       	std	Y+4, r25	; 0x04
     ea2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea4:	8d 81       	ldd	r24, Y+5	; 0x05
     ea6:	9e 81       	ldd	r25, Y+6	; 0x06
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	9e 83       	std	Y+6, r25	; 0x06
     eac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
     eb0:	9e 81       	ldd	r25, Y+6	; 0x06
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	69 f7       	brne	.-38     	; 0xe90 <CLCD_voidInit+0xd2>
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <CLCD_voidInit+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb8:	6f 81       	ldd	r22, Y+7	; 0x07
     eba:	78 85       	ldd	r23, Y+8	; 0x08
     ebc:	89 85       	ldd	r24, Y+9	; 0x09
     ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	9e 83       	std	Y+6, r25	; 0x06
     eca:	8d 83       	std	Y+5, r24	; 0x05
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	9a 83       	std	Y+2, r25	; 0x02
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <CLCD_voidInit+0x11a>
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set command: Choose lines, Choose Font size*/
	switch(Copy_u8Function)
     ee0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	3c 8b       	std	Y+20, r19	; 0x14
     ee8:	2b 8b       	std	Y+19, r18	; 0x13
     eea:	8b 89       	ldd	r24, Y+19	; 0x13
     eec:	9c 89       	ldd	r25, Y+20	; 0x14
     eee:	84 33       	cpi	r24, 0x34	; 52
     ef0:	91 05       	cpc	r25, r1
     ef2:	11 f1       	breq	.+68     	; 0xf38 <CLCD_voidInit+0x17a>
     ef4:	2b 89       	ldd	r18, Y+19	; 0x13
     ef6:	3c 89       	ldd	r19, Y+20	; 0x14
     ef8:	25 33       	cpi	r18, 0x35	; 53
     efa:	31 05       	cpc	r19, r1
     efc:	34 f4       	brge	.+12     	; 0xf0a <CLCD_voidInit+0x14c>
     efe:	8b 89       	ldd	r24, Y+19	; 0x13
     f00:	9c 89       	ldd	r25, Y+20	; 0x14
     f02:	80 33       	cpi	r24, 0x30	; 48
     f04:	91 05       	cpc	r25, r1
     f06:	a1 f0       	breq	.+40     	; 0xf30 <CLCD_voidInit+0x172>
     f08:	1a c0       	rjmp	.+52     	; 0xf3e <CLCD_voidInit+0x180>
     f0a:	2b 89       	ldd	r18, Y+19	; 0x13
     f0c:	3c 89       	ldd	r19, Y+20	; 0x14
     f0e:	28 33       	cpi	r18, 0x38	; 56
     f10:	31 05       	cpc	r19, r1
     f12:	31 f0       	breq	.+12     	; 0xf20 <CLCD_voidInit+0x162>
     f14:	8b 89       	ldd	r24, Y+19	; 0x13
     f16:	9c 89       	ldd	r25, Y+20	; 0x14
     f18:	8c 33       	cpi	r24, 0x3C	; 60
     f1a:	91 05       	cpc	r25, r1
     f1c:	29 f0       	breq	.+10     	; 0xf28 <CLCD_voidInit+0x16a>
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <CLCD_voidInit+0x180>
    {
		case CLCD_2Lines_5x8Fontsize:
            CLCD_voidSendCommand(CLCD_2Lines_5x8Fontsize);
     f20:	88 e3       	ldi	r24, 0x38	; 56
     f22:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
     f26:	0b c0       	rjmp	.+22     	; 0xf3e <CLCD_voidInit+0x180>
            break;
        case CLCD_2Lines_5x11Fontsize:
            CLCD_voidSendCommand(CLCD_2Lines_5x11Fontsize);
     f28:	8c e3       	ldi	r24, 0x3C	; 60
     f2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
     f2e:	07 c0       	rjmp	.+14     	; 0xf3e <CLCD_voidInit+0x180>
            break;
        case CLCD_1Lines_5x8Fontsize:
            CLCD_voidSendCommand(CLCD_1Lines_5x11Fontsize);
     f30:	84 e3       	ldi	r24, 0x34	; 52
     f32:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <CLCD_voidInit+0x180>
            break;
        case CLCD_1Lines_5x11Fontsize:
            CLCD_voidSendCommand(CLCD_1Lines_5x11Fontsize);
     f38:	84 e3       	ldi	r24, 0x34	; 52
     f3a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
            break;
    }

	/*Display on off control: display enable, disable/enable cursor, no/ blink cursor*/
	switch(Copy_u8Display)
     f3e:	88 89       	ldd	r24, Y+16	; 0x10
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	3a 8b       	std	Y+18, r19	; 0x12
     f46:	29 8b       	std	Y+17, r18	; 0x11
     f48:	89 89       	ldd	r24, Y+17	; 0x11
     f4a:	9a 89       	ldd	r25, Y+18	; 0x12
     f4c:	8e 30       	cpi	r24, 0x0E	; 14
     f4e:	91 05       	cpc	r25, r1
     f50:	71 f0       	breq	.+28     	; 0xf6e <CLCD_voidInit+0x1b0>
     f52:	29 89       	ldd	r18, Y+17	; 0x11
     f54:	3a 89       	ldd	r19, Y+18	; 0x12
     f56:	2f 30       	cpi	r18, 0x0F	; 15
     f58:	31 05       	cpc	r19, r1
     f5a:	69 f0       	breq	.+26     	; 0xf76 <CLCD_voidInit+0x1b8>
     f5c:	89 89       	ldd	r24, Y+17	; 0x11
     f5e:	9a 89       	ldd	r25, Y+18	; 0x12
     f60:	8c 30       	cpi	r24, 0x0C	; 12
     f62:	91 05       	cpc	r25, r1
     f64:	59 f4       	brne	.+22     	; 0xf7c <CLCD_voidInit+0x1be>
    {

        case CLCD_Curser_OFF:
            CLCD_voidSendCommand(CLCD_Curser_OFF);
     f66:	8c e0       	ldi	r24, 0x0C	; 12
     f68:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
     f6c:	07 c0       	rjmp	.+14     	; 0xf7c <CLCD_voidInit+0x1be>
            break;
        case CLCD_Curser_ON_NoBlinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_NoBlinking);
     f6e:	8e e0       	ldi	r24, 0x0E	; 14
     f70:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <CLCD_voidInit+0x1be>
            break;
        case CLCD_Curser_ON_Blinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_Blinking);
     f76:	8f e0       	ldi	r24, 0x0F	; 15
     f78:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
            break;

    }

	/*Clear display*/
	CLCD_voidSendCommand(1);
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(1);

	#endif


}
     f82:	64 96       	adiw	r28, 0x14	; 20
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <CLCD_voidSendString+0x6>
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	9b 83       	std	Y+3, r25	; 0x03
     fa2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	15 c0       	rjmp	.+42     	; 0xfd2 <CLCD_voidSendString+0x3e>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	9b 81       	ldd	r25, Y+3	; 0x03
     fb2:	fc 01       	movw	r30, r24
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	80 81       	ld	r24, Z
     fba:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		Local_u8Counter++;
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u8Counter==16)
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	80 31       	cpi	r24, 0x10	; 16
     fc8:	21 f4       	brne	.+8      	; 0xfd2 <CLCD_voidSendString+0x3e>
			CLCD_voidGoToXY(1,0);
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	9b 81       	ldd	r25, Y+3	; 0x03
     fdc:	fc 01       	movw	r30, r24
     fde:	e2 0f       	add	r30, r18
     fe0:	f3 1f       	adc	r31, r19
     fe2:	80 81       	ld	r24, Z
     fe4:	88 23       	and	r24, r24
     fe6:	01 f7       	brne	.-64     	; 0xfa8 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
		if(Local_u8Counter==16)
			CLCD_voidGoToXY(1,0);
	}
}
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <CLCD_voidGoToXY+0x6>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	8a 83       	std	Y+2, r24	; 0x02
    1002:	6b 83       	std	Y+3, r22	; 0x03
	/*Calculating the Address of the DDRAM by the coordinates X and Y*/
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	88 23       	and	r24, r24
    1008:	19 f4       	brne	.+6      	; 0x1010 <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at the first line*/
		Local_u8Address=Copy_u8YPos;
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	06 c0       	rjmp	.+12     	; 0x101c <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	19 f4       	brne	.+6      	; 0x101c <CLCD_voidGoToXY+0x28>
	{
		/*Location is at the second line*/
		Local_u8Address=Copy_u8YPos+0x40;
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	80 5c       	subi	r24, 0xC0	; 192
    101a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Send the DDRAM Address to point on the location on the screen you want to write on it with setting bit 7*/
	CLCD_voidSendCommand(Local_u8Address+128);
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	80 58       	subi	r24, 0x80	; 128
    1020:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8arr,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	27 97       	sbiw	r28, 0x07	; 7
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	9c 83       	std	Y+4, r25	; 0x04
    1046:	8b 83       	std	Y+3, r24	; 0x03
    1048:	6d 83       	std	Y+5, r22	; 0x05
    104a:	4e 83       	std	Y+6, r20	; 0x06
    104c:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Counter,Local_u8CGRAM_Address;

	/*Calculating the Address of the CGRAM whose block is 8 bytes*/
	Local_u8CGRAM_Address=Copy_u8PatternNumber*8;
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	89 83       	std	Y+1, r24	; 0x01

	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	80 5c       	subi	r24, 0xC0	; 192
    1066:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    106a:	1a 82       	std	Y+2, r1	; 0x02
    106c:	0e c0       	rjmp	.+28     	; 0x108a <CLCD_voidWriteSpecialCharacter+0x5a>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	fc 01       	movw	r30, r24
    107a:	e2 0f       	add	r30, r18
    107c:	f3 1f       	adc	r31, r19
    107e:	80 81       	ld	r24, Z
    1080:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	8f 5f       	subi	r24, 0xFF	; 255
    1088:	8a 83       	std	Y+2, r24	; 0x02
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	88 30       	cpi	r24, 0x08	; 8
    108e:	78 f3       	brcs	.-34     	; 0x106e <CLCD_voidWriteSpecialCharacter+0x3e>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
		}

	/*go back to the DDRAM to display the pattern in the selected position*/
		CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1090:	8e 81       	ldd	r24, Y+6	; 0x06
    1092:	6f 81       	ldd	r22, Y+7	; 0x07
    1094:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>

	/*The DDRAM accessing the CGRAM by block to Displaying the pattern*/
		CLCD_voidSendData(Copy_u8PatternNumber);
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
}
    109e:	27 96       	adiw	r28, 0x07	; 7
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	6b 97       	sbiw	r28, 0x1b	; 27
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	6c 8b       	std	Y+20, r22	; 0x14
    10ca:	7d 8b       	std	Y+21, r23	; 0x15
    10cc:	8e 8b       	std	Y+22, r24	; 0x16
    10ce:	9f 8b       	std	Y+23, r25	; 0x17
	/*define local counter and local itrator and temp variable for the swapping*/
	u8 i,temp;
	u8 Local_u8Counter,arr[16]={48};
    10d0:	80 e1       	ldi	r24, 0x10	; 16
    10d2:	fe 01       	movw	r30, r28
    10d4:	34 96       	adiw	r30, 0x04	; 4
    10d6:	df 01       	movw	r26, r30
    10d8:	28 2f       	mov	r18, r24
    10da:	1d 92       	st	X+, r1
    10dc:	2a 95       	dec	r18
    10de:	e9 f7       	brne	.-6      	; 0x10da <CLCD_voidWriteNumber+0x2a>
    10e0:	80 e3       	ldi	r24, 0x30	; 48
    10e2:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8Counter=0;
    10e4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u32Number==0)
    10e6:	8c 89       	ldd	r24, Y+20	; 0x14
    10e8:	9d 89       	ldd	r25, Y+21	; 0x15
    10ea:	ae 89       	ldd	r26, Y+22	; 0x16
    10ec:	bf 89       	ldd	r27, Y+23	; 0x17
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	a1 05       	cpc	r26, r1
    10f2:	b1 05       	cpc	r27, r1
    10f4:	91 f5       	brne	.+100    	; 0x115a <CLCD_voidWriteNumber+0xaa>
		CLCD_voidSendData('0');
    10f6:	80 e3       	ldi	r24, 0x30	; 48
    10f8:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    10fc:	99 c0       	rjmp	.+306    	; 0x1230 <CLCD_voidWriteNumber+0x180>
	else{
	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	08 2f       	mov	r16, r24
    1102:	10 e0       	ldi	r17, 0x00	; 0
    1104:	8c 89       	ldd	r24, Y+20	; 0x14
    1106:	9d 89       	ldd	r25, Y+21	; 0x15
    1108:	ae 89       	ldd	r26, Y+22	; 0x16
    110a:	bf 89       	ldd	r27, Y+23	; 0x17
    110c:	2a e0       	ldi	r18, 0x0A	; 10
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	bc 01       	movw	r22, r24
    1116:	cd 01       	movw	r24, r26
    1118:	0e 94 57 11 	call	0x22ae	; 0x22ae <__udivmodsi4>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	28 2f       	mov	r18, r24
    1122:	20 5d       	subi	r18, 0xD0	; 208
    1124:	ce 01       	movw	r24, r28
    1126:	04 96       	adiw	r24, 0x04	; 4
    1128:	fc 01       	movw	r30, r24
    112a:	e0 0f       	add	r30, r16
    112c:	f1 1f       	adc	r31, r17
    112e:	20 83       	st	Z, r18
		Copy_u32Number/=10;
    1130:	8c 89       	ldd	r24, Y+20	; 0x14
    1132:	9d 89       	ldd	r25, Y+21	; 0x15
    1134:	ae 89       	ldd	r26, Y+22	; 0x16
    1136:	bf 89       	ldd	r27, Y+23	; 0x17
    1138:	2a e0       	ldi	r18, 0x0A	; 10
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 57 11 	call	0x22ae	; 0x22ae <__udivmodsi4>
    1148:	da 01       	movw	r26, r20
    114a:	c9 01       	movw	r24, r18
    114c:	8c 8b       	std	Y+20, r24	; 0x14
    114e:	9d 8b       	std	Y+21, r25	; 0x15
    1150:	ae 8b       	std	Y+22, r26	; 0x16
    1152:	bf 8b       	std	Y+23, r27	; 0x17
		Local_u8Counter++;
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    1158:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u32Number==0)
		CLCD_voidSendData('0');
	else{
	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
    115a:	8c 89       	ldd	r24, Y+20	; 0x14
    115c:	9d 89       	ldd	r25, Y+21	; 0x15
    115e:	ae 89       	ldd	r26, Y+22	; 0x16
    1160:	bf 89       	ldd	r27, Y+23	; 0x17
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	a1 05       	cpc	r26, r1
    1166:	b1 05       	cpc	r27, r1
    1168:	51 f6       	brne	.-108    	; 0x10fe <CLCD_voidWriteNumber+0x4e>
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
		Copy_u32Number/=10;
		Local_u8Counter++;
	}
	arr[Local_u8Counter]='\0';
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	ce 01       	movw	r24, r28
    1172:	04 96       	adiw	r24, 0x04	; 4
    1174:	fc 01       	movw	r30, r24
    1176:	e2 0f       	add	r30, r18
    1178:	f3 1f       	adc	r31, r19
    117a:	10 82       	st	Z, r1

	/*Loop to reverse the array*/
	Local_u8Counter--;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	81 50       	subi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    1182:	1b 82       	std	Y+3, r1	; 0x03
    1184:	33 c0       	rjmp	.+102    	; 0x11ec <CLCD_voidWriteNumber+0x13c>
	{
		temp=arr[i];
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	ce 01       	movw	r24, r28
    118e:	04 96       	adiw	r24, 0x04	; 4
    1190:	fc 01       	movw	r30, r24
    1192:	e2 0f       	add	r30, r18
    1194:	f3 1f       	adc	r31, r19
    1196:	80 81       	ld	r24, Z
    1198:	8a 83       	std	Y+2, r24	; 0x02
		arr[i]=arr[Local_u8Counter-i];
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	48 2f       	mov	r20, r24
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	28 1b       	sub	r18, r24
    11ae:	39 0b       	sbc	r19, r25
    11b0:	ce 01       	movw	r24, r28
    11b2:	04 96       	adiw	r24, 0x04	; 4
    11b4:	fc 01       	movw	r30, r24
    11b6:	e2 0f       	add	r30, r18
    11b8:	f3 1f       	adc	r31, r19
    11ba:	20 81       	ld	r18, Z
    11bc:	ce 01       	movw	r24, r28
    11be:	04 96       	adiw	r24, 0x04	; 4
    11c0:	fc 01       	movw	r30, r24
    11c2:	e4 0f       	add	r30, r20
    11c4:	f5 1f       	adc	r31, r21
    11c6:	20 83       	st	Z, r18
		arr[Local_u8Counter-i]=temp;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	28 1b       	sub	r18, r24
    11d6:	39 0b       	sbc	r19, r25
    11d8:	ce 01       	movw	r24, r28
    11da:	04 96       	adiw	r24, 0x04	; 4
    11dc:	fc 01       	movw	r30, r24
    11de:	e2 0f       	add	r30, r18
    11e0:	f3 1f       	adc	r31, r19
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
	}
	arr[Local_u8Counter]='\0';

	/*Loop to reverse the array*/
	Local_u8Counter--;
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	8b 83       	std	Y+3, r24	; 0x03
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	a8 2f       	mov	r26, r24
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	b9 8f       	std	Y+25, r27	; 0x19
    11f4:	a8 8f       	std	Y+24, r26	; 0x18
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	9b 8f       	std	Y+27, r25	; 0x1b
    1200:	8a 8f       	std	Y+26, r24	; 0x1a
    1202:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1204:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1206:	33 23       	and	r19, r19
    1208:	2c f4       	brge	.+10     	; 0x1214 <CLCD_voidWriteNumber+0x164>
    120a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    120c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	9b 8f       	std	Y+27, r25	; 0x1b
    1212:	8a 8f       	std	Y+26, r24	; 0x1a
    1214:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1216:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1218:	95 95       	asr	r25
    121a:	87 95       	ror	r24
    121c:	a8 8d       	ldd	r26, Y+24	; 0x18
    121e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1220:	a8 17       	cp	r26, r24
    1222:	b9 07       	cpc	r27, r25
    1224:	0c f4       	brge	.+2      	; 0x1228 <CLCD_voidWriteNumber+0x178>
    1226:	af cf       	rjmp	.-162    	; 0x1186 <CLCD_voidWriteNumber+0xd6>
		arr[i]=arr[Local_u8Counter-i];
		arr[Local_u8Counter-i]=temp;
	}

	/*displaying the array on the screen*/
	CLCD_voidSendString(arr);
    1228:	ce 01       	movw	r24, r28
    122a:	04 96       	adiw	r24, 0x04	; 4
    122c:	0e 94 ca 07 	call	0xf94	; 0xf94 <CLCD_voidSendString>
		CLCD_voidSendData((Local_u32Reserved%10)+'0');
		Local_u32Reserved/=10;
	}
	while(Local_u32Reserved != 1);*/

}
    1230:	6b 96       	adiw	r28, 0x1b	; 27
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	08 95       	ret

00001246 <PORT_voidInit>:




void PORT_voidInit(void)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
	/*SET THE PORT Direction*/
	DDRA=PORTA_DIR;
    124e:	ea e3       	ldi	r30, 0x3A	; 58
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
    1254:	e7 e3       	ldi	r30, 0x37	; 55
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
    125a:	e4 e3       	ldi	r30, 0x34	; 52
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 ee       	ldi	r24, 0xE0	; 224
    1260:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    1262:	e1 e3       	ldi	r30, 0x31	; 49
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8f e0       	ldi	r24, 0x0F	; 15
    1268:	80 83       	st	Z, r24

	/*SET THE PORT Value*/
	PORTA=PORTA_INT;
    126a:	eb e3       	ldi	r30, 0x3B	; 59
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	10 82       	st	Z, r1
	PORTB=PORTB_INT;
    1270:	e8 e3       	ldi	r30, 0x38	; 56
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	84 e0       	ldi	r24, 0x04	; 4
    1276:	80 83       	st	Z, r24
	PORTC=PORTC_INT;
    1278:	e5 e3       	ldi	r30, 0x35	; 53
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	10 82       	st	Z, r1
	PORTD=PORTD_INT;
    127e:	e2 e3       	ldi	r30, 0x32	; 50
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	8f ef       	ldi	r24, 0xFF	; 255
    1284:	80 83       	st	Z, r24
}
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	28 97       	sbiw	r28, 0x08	; 8
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	8a 83       	std	Y+2, r24	; 0x02
    12a2:	6b 83       	std	Y+3, r22	; 0x03
    12a4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    12a6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	88 30       	cpi	r24, 0x08	; 8
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <DIO_u8SetPinDirection+0x24>
    12ae:	f4 c0       	rjmp	.+488    	; 0x1498 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	88 23       	and	r24, r24
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <DIO_u8SetPinDirection+0x2c>
    12b6:	77 c0       	rjmp	.+238    	; 0x13a6 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	38 87       	std	Y+8, r19	; 0x08
    12c0:	2f 83       	std	Y+7, r18	; 0x07
    12c2:	8f 81       	ldd	r24, Y+7	; 0x07
    12c4:	98 85       	ldd	r25, Y+8	; 0x08
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	59 f1       	breq	.+86     	; 0x1322 <DIO_u8SetPinDirection+0x96>
    12cc:	2f 81       	ldd	r18, Y+7	; 0x07
    12ce:	38 85       	ldd	r19, Y+8	; 0x08
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <DIO_u8SetPinDirection+0x54>
    12d6:	8f 81       	ldd	r24, Y+7	; 0x07
    12d8:	98 85       	ldd	r25, Y+8	; 0x08
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	69 f0       	breq	.+26     	; 0x12f8 <DIO_u8SetPinDirection+0x6c>
    12de:	60 c0       	rjmp	.+192    	; 0x13a0 <DIO_u8SetPinDirection+0x114>
    12e0:	2f 81       	ldd	r18, Y+7	; 0x07
    12e2:	38 85       	ldd	r19, Y+8	; 0x08
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	89 f1       	breq	.+98     	; 0x134c <DIO_u8SetPinDirection+0xc0>
    12ea:	8f 81       	ldd	r24, Y+7	; 0x07
    12ec:	98 85       	ldd	r25, Y+8	; 0x08
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	91 05       	cpc	r25, r1
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <DIO_u8SetPinDirection+0x6a>
    12f4:	40 c0       	rjmp	.+128    	; 0x1376 <DIO_u8SetPinDirection+0xea>
    12f6:	54 c0       	rjmp	.+168    	; 0x13a0 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
    12f8:	aa e3       	ldi	r26, 0x3A	; 58
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ea e3       	ldi	r30, 0x3A	; 58
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_u8SetPinDirection+0x8a>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_u8SetPinDirection+0x86>
    131a:	80 95       	com	r24
    131c:	84 23       	and	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	bd c0       	rjmp	.+378    	; 0x149c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
    1322:	a7 e3       	ldi	r26, 0x37	; 55
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e7 e3       	ldi	r30, 0x37	; 55
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_u8SetPinDirection+0xb4>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_u8SetPinDirection+0xb0>
    1344:	80 95       	com	r24
    1346:	84 23       	and	r24, r20
    1348:	8c 93       	st	X, r24
    134a:	a8 c0       	rjmp	.+336    	; 0x149c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
    134c:	a4 e3       	ldi	r26, 0x34	; 52
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e4 e3       	ldi	r30, 0x34	; 52
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <DIO_u8SetPinDirection+0xde>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <DIO_u8SetPinDirection+0xda>
    136e:	80 95       	com	r24
    1370:	84 23       	and	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	93 c0       	rjmp	.+294    	; 0x149c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
    1376:	a1 e3       	ldi	r26, 0x31	; 49
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e1 e3       	ldi	r30, 0x31	; 49
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_u8SetPinDirection+0x108>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_u8SetPinDirection+0x104>
    1398:	80 95       	com	r24
    139a:	84 23       	and	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	7e c0       	rjmp	.+252    	; 0x149c <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	7b c0       	rjmp	.+246    	; 0x149c <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	09 f0       	breq	.+2      	; 0x13ae <DIO_u8SetPinDirection+0x122>
    13ac:	72 c0       	rjmp	.+228    	; 0x1492 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	3e 83       	std	Y+6, r19	; 0x06
    13b6:	2d 83       	std	Y+5, r18	; 0x05
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	91 05       	cpc	r25, r1
    13c0:	49 f1       	breq	.+82     	; 0x1414 <DIO_u8SetPinDirection+0x188>
    13c2:	2d 81       	ldd	r18, Y+5	; 0x05
    13c4:	3e 81       	ldd	r19, Y+6	; 0x06
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	2c f4       	brge	.+10     	; 0x13d6 <DIO_u8SetPinDirection+0x14a>
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	9e 81       	ldd	r25, Y+6	; 0x06
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	61 f0       	breq	.+24     	; 0x13ec <DIO_u8SetPinDirection+0x160>
    13d4:	5b c0       	rjmp	.+182    	; 0x148c <DIO_u8SetPinDirection+0x200>
    13d6:	2d 81       	ldd	r18, Y+5	; 0x05
    13d8:	3e 81       	ldd	r19, Y+6	; 0x06
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	71 f1       	breq	.+92     	; 0x143c <DIO_u8SetPinDirection+0x1b0>
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	83 30       	cpi	r24, 0x03	; 3
    13e6:	91 05       	cpc	r25, r1
    13e8:	e9 f1       	breq	.+122    	; 0x1464 <DIO_u8SetPinDirection+0x1d8>
    13ea:	50 c0       	rjmp	.+160    	; 0x148c <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
    13ec:	aa e3       	ldi	r26, 0x3A	; 58
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ea e3       	ldi	r30, 0x3A	; 58
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO_u8SetPinDirection+0x17e>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <DIO_u8SetPinDirection+0x17a>
    140e:	84 2b       	or	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	44 c0       	rjmp	.+136    	; 0x149c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
    1414:	a7 e3       	ldi	r26, 0x37	; 55
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e7 e3       	ldi	r30, 0x37	; 55
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_u8SetPinDirection+0x1a6>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_u8SetPinDirection+0x1a2>
    1436:	84 2b       	or	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	30 c0       	rjmp	.+96     	; 0x149c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
    143c:	a4 e3       	ldi	r26, 0x34	; 52
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e4 e3       	ldi	r30, 0x34	; 52
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DIO_u8SetPinDirection+0x1ce>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <DIO_u8SetPinDirection+0x1ca>
    145e:	84 2b       	or	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	1c c0       	rjmp	.+56     	; 0x149c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
    1464:	a1 e3       	ldi	r26, 0x31	; 49
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e1 e3       	ldi	r30, 0x31	; 49
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_u8SetPinDirection+0x1f6>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_u8SetPinDirection+0x1f2>
    1486:	84 2b       	or	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	08 c0       	rjmp	.+16     	; 0x149c <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	05 c0       	rjmp	.+10     	; 0x149c <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    149c:	89 81       	ldd	r24, Y+1	; 0x01
}
    149e:	28 96       	adiw	r28, 0x08	; 8
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <DIO_u8SetPortDirection+0x6>
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <DIO_u8SetPortDirection+0x8>
    14b8:	0f 92       	push	r0
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	8a 83       	std	Y+2, r24	; 0x02
    14c0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    14c2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	3d 83       	std	Y+5, r19	; 0x05
    14cc:	2c 83       	std	Y+4, r18	; 0x04
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	91 05       	cpc	r25, r1
    14d6:	d1 f0       	breq	.+52     	; 0x150c <DIO_u8SetPortDirection+0x5c>
    14d8:	2c 81       	ldd	r18, Y+4	; 0x04
    14da:	3d 81       	ldd	r19, Y+5	; 0x05
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	2c f4       	brge	.+10     	; 0x14ec <DIO_u8SetPortDirection+0x3c>
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	9d 81       	ldd	r25, Y+5	; 0x05
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	61 f0       	breq	.+24     	; 0x1502 <DIO_u8SetPortDirection+0x52>
    14ea:	1f c0       	rjmp	.+62     	; 0x152a <DIO_u8SetPortDirection+0x7a>
    14ec:	2c 81       	ldd	r18, Y+4	; 0x04
    14ee:	3d 81       	ldd	r19, Y+5	; 0x05
    14f0:	22 30       	cpi	r18, 0x02	; 2
    14f2:	31 05       	cpc	r19, r1
    14f4:	81 f0       	breq	.+32     	; 0x1516 <DIO_u8SetPortDirection+0x66>
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	91 05       	cpc	r25, r1
    14fe:	81 f0       	breq	.+32     	; 0x1520 <DIO_u8SetPortDirection+0x70>
    1500:	14 c0       	rjmp	.+40     	; 0x152a <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
    1502:	ea e3       	ldi	r30, 0x3A	; 58
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	80 83       	st	Z, r24
    150a:	11 c0       	rjmp	.+34     	; 0x152e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
    150c:	e7 e3       	ldi	r30, 0x37	; 55
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	80 83       	st	Z, r24
    1514:	0c c0       	rjmp	.+24     	; 0x152e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
    1516:	e4 e3       	ldi	r30, 0x34	; 52
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	80 83       	st	Z, r24
    151e:	07 c0       	rjmp	.+14     	; 0x152e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
    1520:	e1 e3       	ldi	r30, 0x31	; 49
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	80 83       	st	Z, r24
    1528:	02 c0       	rjmp	.+4      	; 0x152e <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    152e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	28 97       	sbiw	r28, 0x08	; 8
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	8a 83       	std	Y+2, r24	; 0x02
    1556:	6b 83       	std	Y+3, r22	; 0x03
    1558:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    155a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	88 30       	cpi	r24, 0x08	; 8
    1560:	08 f0       	brcs	.+2      	; 0x1564 <DIO_u8SetPinValue+0x24>
    1562:	f4 c0       	rjmp	.+488    	; 0x174c <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	88 23       	and	r24, r24
    1568:	09 f0       	breq	.+2      	; 0x156c <DIO_u8SetPinValue+0x2c>
    156a:	77 c0       	rjmp	.+238    	; 0x165a <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	38 87       	std	Y+8, r19	; 0x08
    1574:	2f 83       	std	Y+7, r18	; 0x07
    1576:	8f 81       	ldd	r24, Y+7	; 0x07
    1578:	98 85       	ldd	r25, Y+8	; 0x08
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	59 f1       	breq	.+86     	; 0x15d6 <DIO_u8SetPinValue+0x96>
    1580:	2f 81       	ldd	r18, Y+7	; 0x07
    1582:	38 85       	ldd	r19, Y+8	; 0x08
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	2c f4       	brge	.+10     	; 0x1594 <DIO_u8SetPinValue+0x54>
    158a:	8f 81       	ldd	r24, Y+7	; 0x07
    158c:	98 85       	ldd	r25, Y+8	; 0x08
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	69 f0       	breq	.+26     	; 0x15ac <DIO_u8SetPinValue+0x6c>
    1592:	60 c0       	rjmp	.+192    	; 0x1654 <DIO_u8SetPinValue+0x114>
    1594:	2f 81       	ldd	r18, Y+7	; 0x07
    1596:	38 85       	ldd	r19, Y+8	; 0x08
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	89 f1       	breq	.+98     	; 0x1600 <DIO_u8SetPinValue+0xc0>
    159e:	8f 81       	ldd	r24, Y+7	; 0x07
    15a0:	98 85       	ldd	r25, Y+8	; 0x08
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	91 05       	cpc	r25, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <DIO_u8SetPinValue+0x6a>
    15a8:	40 c0       	rjmp	.+128    	; 0x162a <DIO_u8SetPinValue+0xea>
    15aa:	54 c0       	rjmp	.+168    	; 0x1654 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
    15ac:	ab e3       	ldi	r26, 0x3B	; 59
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	eb e3       	ldi	r30, 0x3B	; 59
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <DIO_u8SetPinValue+0x8a>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <DIO_u8SetPinValue+0x86>
    15ce:	80 95       	com	r24
    15d0:	84 23       	and	r24, r20
    15d2:	8c 93       	st	X, r24
    15d4:	bd c0       	rjmp	.+378    	; 0x1750 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
    15d6:	a8 e3       	ldi	r26, 0x38	; 56
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e8 e3       	ldi	r30, 0x38	; 56
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_u8SetPinValue+0xb4>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_u8SetPinValue+0xb0>
    15f8:	80 95       	com	r24
    15fa:	84 23       	and	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	a8 c0       	rjmp	.+336    	; 0x1750 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
    1600:	a5 e3       	ldi	r26, 0x35	; 53
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e5 e3       	ldi	r30, 0x35	; 53
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <DIO_u8SetPinValue+0xde>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <DIO_u8SetPinValue+0xda>
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	93 c0       	rjmp	.+294    	; 0x1750 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
    162a:	a2 e3       	ldi	r26, 0x32	; 50
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e2 e3       	ldi	r30, 0x32	; 50
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <DIO_u8SetPinValue+0x108>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <DIO_u8SetPinValue+0x104>
    164c:	80 95       	com	r24
    164e:	84 23       	and	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	7e c0       	rjmp	.+252    	; 0x1750 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	7b c0       	rjmp	.+246    	; 0x1750 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	09 f0       	breq	.+2      	; 0x1662 <DIO_u8SetPinValue+0x122>
    1660:	72 c0       	rjmp	.+228    	; 0x1746 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	3e 83       	std	Y+6, r19	; 0x06
    166a:	2d 83       	std	Y+5, r18	; 0x05
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	91 05       	cpc	r25, r1
    1674:	49 f1       	breq	.+82     	; 0x16c8 <DIO_u8SetPinValue+0x188>
    1676:	2d 81       	ldd	r18, Y+5	; 0x05
    1678:	3e 81       	ldd	r19, Y+6	; 0x06
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	31 05       	cpc	r19, r1
    167e:	2c f4       	brge	.+10     	; 0x168a <DIO_u8SetPinValue+0x14a>
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	61 f0       	breq	.+24     	; 0x16a0 <DIO_u8SetPinValue+0x160>
    1688:	5b c0       	rjmp	.+182    	; 0x1740 <DIO_u8SetPinValue+0x200>
    168a:	2d 81       	ldd	r18, Y+5	; 0x05
    168c:	3e 81       	ldd	r19, Y+6	; 0x06
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	71 f1       	breq	.+92     	; 0x16f0 <DIO_u8SetPinValue+0x1b0>
    1694:	8d 81       	ldd	r24, Y+5	; 0x05
    1696:	9e 81       	ldd	r25, Y+6	; 0x06
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	91 05       	cpc	r25, r1
    169c:	e9 f1       	breq	.+122    	; 0x1718 <DIO_u8SetPinValue+0x1d8>
    169e:	50 c0       	rjmp	.+160    	; 0x1740 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
    16a0:	ab e3       	ldi	r26, 0x3B	; 59
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	eb e3       	ldi	r30, 0x3B	; 59
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <DIO_u8SetPinValue+0x17e>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <DIO_u8SetPinValue+0x17a>
    16c2:	84 2b       	or	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	44 c0       	rjmp	.+136    	; 0x1750 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
    16c8:	a8 e3       	ldi	r26, 0x38	; 56
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e8 e3       	ldi	r30, 0x38	; 56
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_u8SetPinValue+0x1a6>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <DIO_u8SetPinValue+0x1a2>
    16ea:	84 2b       	or	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	30 c0       	rjmp	.+96     	; 0x1750 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
    16f0:	a5 e3       	ldi	r26, 0x35	; 53
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e5 e3       	ldi	r30, 0x35	; 53
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_u8SetPinValue+0x1ce>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_u8SetPinValue+0x1ca>
    1712:	84 2b       	or	r24, r20
    1714:	8c 93       	st	X, r24
    1716:	1c c0       	rjmp	.+56     	; 0x1750 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
    1718:	a2 e3       	ldi	r26, 0x32	; 50
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e2 e3       	ldi	r30, 0x32	; 50
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	48 2f       	mov	r20, r24
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 2e       	mov	r0, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_u8SetPinValue+0x1f6>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	0a 94       	dec	r0
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_u8SetPinValue+0x1f2>
    173a:	84 2b       	or	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	08 c0       	rjmp	.+16     	; 0x1750 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	05 c0       	rjmp	.+10     	; 0x1750 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1750:	89 81       	ldd	r24, Y+1	; 0x01
}
    1752:	28 96       	adiw	r28, 0x08	; 8
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <DIO_u8SetPortValue+0x6>
    176a:	00 d0       	rcall	.+0      	; 0x176c <DIO_u8SetPortValue+0x8>
    176c:	0f 92       	push	r0
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	8a 83       	std	Y+2, r24	; 0x02
    1774:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1776:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	3d 83       	std	Y+5, r19	; 0x05
    1780:	2c 83       	std	Y+4, r18	; 0x04
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	91 05       	cpc	r25, r1
    178a:	d1 f0       	breq	.+52     	; 0x17c0 <DIO_u8SetPortValue+0x5c>
    178c:	2c 81       	ldd	r18, Y+4	; 0x04
    178e:	3d 81       	ldd	r19, Y+5	; 0x05
    1790:	22 30       	cpi	r18, 0x02	; 2
    1792:	31 05       	cpc	r19, r1
    1794:	2c f4       	brge	.+10     	; 0x17a0 <DIO_u8SetPortValue+0x3c>
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	9d 81       	ldd	r25, Y+5	; 0x05
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	61 f0       	breq	.+24     	; 0x17b6 <DIO_u8SetPortValue+0x52>
    179e:	1f c0       	rjmp	.+62     	; 0x17de <DIO_u8SetPortValue+0x7a>
    17a0:	2c 81       	ldd	r18, Y+4	; 0x04
    17a2:	3d 81       	ldd	r19, Y+5	; 0x05
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	31 05       	cpc	r19, r1
    17a8:	81 f0       	breq	.+32     	; 0x17ca <DIO_u8SetPortValue+0x66>
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	9d 81       	ldd	r25, Y+5	; 0x05
    17ae:	83 30       	cpi	r24, 0x03	; 3
    17b0:	91 05       	cpc	r25, r1
    17b2:	81 f0       	breq	.+32     	; 0x17d4 <DIO_u8SetPortValue+0x70>
    17b4:	14 c0       	rjmp	.+40     	; 0x17de <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value;break;
    17b6:	eb e3       	ldi	r30, 0x3B	; 59
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	80 83       	st	Z, r24
    17be:	11 c0       	rjmp	.+34     	; 0x17e2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value;break;
    17c0:	e8 e3       	ldi	r30, 0x38	; 56
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	80 83       	st	Z, r24
    17c8:	0c c0       	rjmp	.+24     	; 0x17e2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value;break;
    17ca:	e5 e3       	ldi	r30, 0x35	; 53
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	80 83       	st	Z, r24
    17d2:	07 c0       	rjmp	.+14     	; 0x17e2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value;break;
    17d4:	e2 e3       	ldi	r30, 0x32	; 50
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	80 83       	st	Z, r24
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	27 97       	sbiw	r28, 0x07	; 7
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	8a 83       	std	Y+2, r24	; 0x02
    180a:	6b 83       	std	Y+3, r22	; 0x03
    180c:	5d 83       	std	Y+5, r21	; 0x05
    180e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1810:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=0) && (Copy_u8Pin<=DIO_u8PIN7))
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	9d 81       	ldd	r25, Y+5	; 0x05
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	09 f4       	brne	.+2      	; 0x181c <DIO_u8GetPinValue+0x28>
    181a:	78 c0       	rjmp	.+240    	; 0x190c <DIO_u8GetPinValue+0x118>
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	88 30       	cpi	r24, 0x08	; 8
    1820:	08 f0       	brcs	.+2      	; 0x1824 <DIO_u8GetPinValue+0x30>
    1822:	74 c0       	rjmp	.+232    	; 0x190c <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	3f 83       	std	Y+7, r19	; 0x07
    182c:	2e 83       	std	Y+6, r18	; 0x06
    182e:	4e 81       	ldd	r20, Y+6	; 0x06
    1830:	5f 81       	ldd	r21, Y+7	; 0x07
    1832:	41 30       	cpi	r20, 0x01	; 1
    1834:	51 05       	cpc	r21, r1
    1836:	59 f1       	breq	.+86     	; 0x188e <DIO_u8GetPinValue+0x9a>
    1838:	8e 81       	ldd	r24, Y+6	; 0x06
    183a:	9f 81       	ldd	r25, Y+7	; 0x07
    183c:	82 30       	cpi	r24, 0x02	; 2
    183e:	91 05       	cpc	r25, r1
    1840:	34 f4       	brge	.+12     	; 0x184e <DIO_u8GetPinValue+0x5a>
    1842:	2e 81       	ldd	r18, Y+6	; 0x06
    1844:	3f 81       	ldd	r19, Y+7	; 0x07
    1846:	21 15       	cp	r18, r1
    1848:	31 05       	cpc	r19, r1
    184a:	69 f0       	breq	.+26     	; 0x1866 <DIO_u8GetPinValue+0x72>
    184c:	5c c0       	rjmp	.+184    	; 0x1906 <DIO_u8GetPinValue+0x112>
    184e:	4e 81       	ldd	r20, Y+6	; 0x06
    1850:	5f 81       	ldd	r21, Y+7	; 0x07
    1852:	42 30       	cpi	r20, 0x02	; 2
    1854:	51 05       	cpc	r21, r1
    1856:	79 f1       	breq	.+94     	; 0x18b6 <DIO_u8GetPinValue+0xc2>
    1858:	8e 81       	ldd	r24, Y+6	; 0x06
    185a:	9f 81       	ldd	r25, Y+7	; 0x07
    185c:	83 30       	cpi	r24, 0x03	; 3
    185e:	91 05       	cpc	r25, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <DIO_u8GetPinValue+0x70>
    1862:	3d c0       	rjmp	.+122    	; 0x18de <DIO_u8GetPinValue+0xea>
    1864:	50 c0       	rjmp	.+160    	; 0x1906 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    1866:	e9 e3       	ldi	r30, 0x39	; 57
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a9 01       	movw	r20, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_u8GetPinValue+0x8a>
    187a:	55 95       	asr	r21
    187c:	47 95       	ror	r20
    187e:	8a 95       	dec	r24
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_u8GetPinValue+0x86>
    1882:	ca 01       	movw	r24, r20
    1884:	81 70       	andi	r24, 0x01	; 1
    1886:	ec 81       	ldd	r30, Y+4	; 0x04
    1888:	fd 81       	ldd	r31, Y+5	; 0x05
    188a:	80 83       	st	Z, r24
    188c:	41 c0       	rjmp	.+130    	; 0x1910 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    188e:	e6 e3       	ldi	r30, 0x36	; 54
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a9 01       	movw	r20, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <DIO_u8GetPinValue+0xb2>
    18a2:	55 95       	asr	r21
    18a4:	47 95       	ror	r20
    18a6:	8a 95       	dec	r24
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <DIO_u8GetPinValue+0xae>
    18aa:	ca 01       	movw	r24, r20
    18ac:	81 70       	andi	r24, 0x01	; 1
    18ae:	ec 81       	ldd	r30, Y+4	; 0x04
    18b0:	fd 81       	ldd	r31, Y+5	; 0x05
    18b2:	80 83       	st	Z, r24
    18b4:	2d c0       	rjmp	.+90     	; 0x1910 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    18b6:	e3 e3       	ldi	r30, 0x33	; 51
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a9 01       	movw	r20, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <DIO_u8GetPinValue+0xda>
    18ca:	55 95       	asr	r21
    18cc:	47 95       	ror	r20
    18ce:	8a 95       	dec	r24
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <DIO_u8GetPinValue+0xd6>
    18d2:	ca 01       	movw	r24, r20
    18d4:	81 70       	andi	r24, 0x01	; 1
    18d6:	ec 81       	ldd	r30, Y+4	; 0x04
    18d8:	fd 81       	ldd	r31, Y+5	; 0x05
    18da:	80 83       	st	Z, r24
    18dc:	19 c0       	rjmp	.+50     	; 0x1910 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    18de:	e0 e3       	ldi	r30, 0x30	; 48
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a9 01       	movw	r20, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <DIO_u8GetPinValue+0x102>
    18f2:	55 95       	asr	r21
    18f4:	47 95       	ror	r20
    18f6:	8a 95       	dec	r24
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <DIO_u8GetPinValue+0xfe>
    18fa:	ca 01       	movw	r24, r20
    18fc:	81 70       	andi	r24, 0x01	; 1
    18fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1900:	fd 81       	ldd	r31, Y+5	; 0x05
    1902:	80 83       	st	Z, r24
    1904:	05 c0       	rjmp	.+10     	; 0x1910 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState=1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_u8GetPinValue+0x11c>
			}
		}
	else
	{
		Local_u8ErrorState=1;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_u8ErrorState;
    1910:	89 81       	ldd	r24, Y+1	; 0x01
}
    1912:	27 96       	adiw	r28, 0x07	; 7
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <__vector_1>:
static void(*User_Func1)(void);
static void(*User_Func2)(void);

//ISR for external interrupt 0
ISR(INT0_vect)
{ 
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	2f 93       	push	r18
    1930:	3f 93       	push	r19
    1932:	4f 93       	push	r20
    1934:	5f 93       	push	r21
    1936:	6f 93       	push	r22
    1938:	7f 93       	push	r23
    193a:	8f 93       	push	r24
    193c:	9f 93       	push	r25
    193e:	af 93       	push	r26
    1940:	bf 93       	push	r27
    1942:	ef 93       	push	r30
    1944:	ff 93       	push	r31
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
	(*User_Func0)();
    194e:	e0 91 d8 00 	lds	r30, 0x00D8
    1952:	f0 91 d9 00 	lds	r31, 0x00D9
    1956:	09 95       	icall
}
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	ff 91       	pop	r31
    195e:	ef 91       	pop	r30
    1960:	bf 91       	pop	r27
    1962:	af 91       	pop	r26
    1964:	9f 91       	pop	r25
    1966:	8f 91       	pop	r24
    1968:	7f 91       	pop	r23
    196a:	6f 91       	pop	r22
    196c:	5f 91       	pop	r21
    196e:	4f 91       	pop	r20
    1970:	3f 91       	pop	r19
    1972:	2f 91       	pop	r18
    1974:	0f 90       	pop	r0
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	0f 90       	pop	r0
    197a:	1f 90       	pop	r1
    197c:	18 95       	reti

0000197e <__vector_2>:

//ISR for external interrupt 1
ISR(INT1_vect) 
{
    197e:	1f 92       	push	r1
    1980:	0f 92       	push	r0
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	0f 92       	push	r0
    1986:	11 24       	eor	r1, r1
    1988:	2f 93       	push	r18
    198a:	3f 93       	push	r19
    198c:	4f 93       	push	r20
    198e:	5f 93       	push	r21
    1990:	6f 93       	push	r22
    1992:	7f 93       	push	r23
    1994:	8f 93       	push	r24
    1996:	9f 93       	push	r25
    1998:	af 93       	push	r26
    199a:	bf 93       	push	r27
    199c:	ef 93       	push	r30
    199e:	ff 93       	push	r31
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
	(*User_Func1)();
    19a8:	e0 91 da 00 	lds	r30, 0x00DA
    19ac:	f0 91 db 00 	lds	r31, 0x00DB
    19b0:	09 95       	icall
}
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	ff 91       	pop	r31
    19b8:	ef 91       	pop	r30
    19ba:	bf 91       	pop	r27
    19bc:	af 91       	pop	r26
    19be:	9f 91       	pop	r25
    19c0:	8f 91       	pop	r24
    19c2:	7f 91       	pop	r23
    19c4:	6f 91       	pop	r22
    19c6:	5f 91       	pop	r21
    19c8:	4f 91       	pop	r20
    19ca:	3f 91       	pop	r19
    19cc:	2f 91       	pop	r18
    19ce:	0f 90       	pop	r0
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	0f 90       	pop	r0
    19d4:	1f 90       	pop	r1
    19d6:	18 95       	reti

000019d8 <__vector_3>:
//ISR for external interrupt 2
ISR( INT2_vect)
{
    19d8:	1f 92       	push	r1
    19da:	0f 92       	push	r0
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	0f 92       	push	r0
    19e0:	11 24       	eor	r1, r1
    19e2:	2f 93       	push	r18
    19e4:	3f 93       	push	r19
    19e6:	4f 93       	push	r20
    19e8:	5f 93       	push	r21
    19ea:	6f 93       	push	r22
    19ec:	7f 93       	push	r23
    19ee:	8f 93       	push	r24
    19f0:	9f 93       	push	r25
    19f2:	af 93       	push	r26
    19f4:	bf 93       	push	r27
    19f6:	ef 93       	push	r30
    19f8:	ff 93       	push	r31
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
	(*User_Func2)();
    1a02:	e0 91 dc 00 	lds	r30, 0x00DC
    1a06:	f0 91 dd 00 	lds	r31, 0x00DD
    1a0a:	09 95       	icall
}
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	ff 91       	pop	r31
    1a12:	ef 91       	pop	r30
    1a14:	bf 91       	pop	r27
    1a16:	af 91       	pop	r26
    1a18:	9f 91       	pop	r25
    1a1a:	8f 91       	pop	r24
    1a1c:	7f 91       	pop	r23
    1a1e:	6f 91       	pop	r22
    1a20:	5f 91       	pop	r21
    1a22:	4f 91       	pop	r20
    1a24:	3f 91       	pop	r19
    1a26:	2f 91       	pop	r18
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	0f 90       	pop	r0
    1a2e:	1f 90       	pop	r1
    1a30:	18 95       	reti

00001a32 <EXTI_u8Int0Init>:

// initializaing the External Interrupt 0
u8 EXTI_u8Int0Init(u8 ExtInt_SenseControl)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <EXTI_u8Int0Init+0x6>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <EXTI_u8Int0Init+0x8>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    1a40:	19 82       	std	Y+1, r1	; 0x01

	//Enable external interrupt 0
	SET_BIT(GICR,GICR_INT0);
    1a42:	ab e5       	ldi	r26, 0x5B	; 91
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	eb e5       	ldi	r30, 0x5B	; 91
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	80 64       	ori	r24, 0x40	; 64
    1a4e:	8c 93       	st	X, r24

	switch(ExtInt_SenseControl)
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	3c 83       	std	Y+4, r19	; 0x04
    1a58:	2b 83       	std	Y+3, r18	; 0x03
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	31 f0       	breq	.+12     	; 0x1a6e <EXTI_u8Int0Init+0x3c>
    1a62:	2b 81       	ldd	r18, Y+3	; 0x03
    1a64:	3c 81       	ldd	r19, Y+4	; 0x04
    1a66:	21 30       	cpi	r18, 0x01	; 1
    1a68:	31 05       	cpc	r19, r1
    1a6a:	81 f0       	breq	.+32     	; 0x1a8c <EXTI_u8Int0Init+0x5a>
    1a6c:	1e c0       	rjmp	.+60     	; 0x1aaa <EXTI_u8Int0Init+0x78>
	{
	case EXTI_FALLING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC01);
    1a6e:	a5 e5       	ldi	r26, 0x55	; 85
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e5 e5       	ldi	r30, 0x55	; 85
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	82 60       	ori	r24, 0x02	; 2
    1a7a:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC00);
    1a7c:	a5 e5       	ldi	r26, 0x55	; 85
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e5 e5       	ldi	r30, 0x55	; 85
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8e 7f       	andi	r24, 0xFE	; 254
    1a88:	8c 93       	st	X, r24
    1a8a:	11 c0       	rjmp	.+34     	; 0x1aae <EXTI_u8Int0Init+0x7c>
		break;
	case EXTI_RISING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC00);
    1a8c:	a5 e5       	ldi	r26, 0x55	; 85
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e5 e5       	ldi	r30, 0x55	; 85
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	81 60       	ori	r24, 0x01	; 1
    1a98:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC01);
    1a9a:	a5 e5       	ldi	r26, 0x55	; 85
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e5 e5       	ldi	r30, 0x55	; 85
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	82 60       	ori	r24, 0x02	; 2
    1aa6:	8c 93       	st	X, r24
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <EXTI_u8Int0Init+0x7c>
		break;
	default:
		Local_u8ErrorState=1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <INT0_voidCallBack>:

//set user function to be executed on ISR
void INT0_voidCallBack(void(*func_Ptr)(void))
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <INT0_voidCallBack+0x6>
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	89 83       	std	Y+1, r24	; 0x01
	User_Func0=func_Ptr;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad0:	90 93 d9 00 	sts	0x00D9, r25
    1ad4:	80 93 d8 00 	sts	0x00D8, r24
}
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <EXTI_u8Int0SetSenseControl>:

u8 EXTI_u8Int0SetSenseControl(u8 Copy_u8Sense)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <EXTI_u8Int0SetSenseControl+0x6>
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <EXTI_u8Int0SetSenseControl+0x8>
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    1af0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Sense)
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	3c 83       	std	Y+4, r19	; 0x04
    1afa:	2b 83       	std	Y+3, r18	; 0x03
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	31 f0       	breq	.+12     	; 0x1b10 <EXTI_u8Int0SetSenseControl+0x2e>
    1b04:	2b 81       	ldd	r18, Y+3	; 0x03
    1b06:	3c 81       	ldd	r19, Y+4	; 0x04
    1b08:	21 30       	cpi	r18, 0x01	; 1
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	81 f0       	breq	.+32     	; 0x1b2e <EXTI_u8Int0SetSenseControl+0x4c>
    1b0e:	1e c0       	rjmp	.+60     	; 0x1b4c <EXTI_u8Int0SetSenseControl+0x6a>
	{
	case EXTI_FALLING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC01);
    1b10:	a5 e5       	ldi	r26, 0x55	; 85
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e5 e5       	ldi	r30, 0x55	; 85
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	82 60       	ori	r24, 0x02	; 2
    1b1c:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC00);
    1b1e:	a5 e5       	ldi	r26, 0x55	; 85
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e5 e5       	ldi	r30, 0x55	; 85
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	8e 7f       	andi	r24, 0xFE	; 254
    1b2a:	8c 93       	st	X, r24
    1b2c:	11 c0       	rjmp	.+34     	; 0x1b50 <EXTI_u8Int0SetSenseControl+0x6e>
		break;
	case EXTI_RISING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC00);
    1b2e:	a5 e5       	ldi	r26, 0x55	; 85
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e5 e5       	ldi	r30, 0x55	; 85
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	81 60       	ori	r24, 0x01	; 1
    1b3a:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC01);
    1b3c:	a5 e5       	ldi	r26, 0x55	; 85
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e5 e5       	ldi	r30, 0x55	; 85
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	82 60       	ori	r24, 0x02	; 2
    1b48:	8c 93       	st	X, r24
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <EXTI_u8Int0SetSenseControl+0x6e>
		break;
	default:
		Local_u8ErrorState=1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <EXTI_u8DisableInterrupt>:

u8 EXTI_u8DisableInterrupt(u8 Copy_IntNum)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <EXTI_u8DisableInterrupt+0x6>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    1b6c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_IntNum>INT2 && Copy_IntNum<INT1)
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	86 30       	cpi	r24, 0x06	; 6
    1b72:	c0 f0       	brcs	.+48     	; 0x1ba4 <EXTI_u8DisableInterrupt+0x44>
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	87 30       	cpi	r24, 0x07	; 7
    1b78:	a8 f4       	brcc	.+42     	; 0x1ba4 <EXTI_u8DisableInterrupt+0x44>
	{
	/*Clear the required bit*/
	CLR_BIT(GICR,Copy_IntNum);
    1b7a:	ab e5       	ldi	r26, 0x5B	; 91
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	eb e5       	ldi	r30, 0x5B	; 91
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <EXTI_u8DisableInterrupt+0x38>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <EXTI_u8DisableInterrupt+0x34>
    1b9c:	80 95       	com	r24
    1b9e:	84 23       	and	r24, r20
    1ba0:	8c 93       	st	X, r24
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <EXTI_u8DisableInterrupt+0x48>
	}
	else
	{
		Local_u8ErrorState=1;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <EXTI_u8EnableInterrupt>:

u8 EXTI_u8EnableInterrupt(u8 Copy_IntNum)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <EXTI_u8EnableInterrupt+0x6>
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    1bc0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_IntNum>INT2 && Copy_IntNum<INT1)
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	86 30       	cpi	r24, 0x06	; 6
    1bc6:	b8 f0       	brcs	.+46     	; 0x1bf6 <EXTI_u8EnableInterrupt+0x42>
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	87 30       	cpi	r24, 0x07	; 7
    1bcc:	a0 f4       	brcc	.+40     	; 0x1bf6 <EXTI_u8EnableInterrupt+0x42>
	{
	/*Clear the required bit*/
	SET_BIT(GICR,Copy_IntNum);
    1bce:	ab e5       	ldi	r26, 0x5B	; 91
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	eb e5       	ldi	r30, 0x5B	; 91
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	48 2f       	mov	r20, r24
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	02 2e       	mov	r0, r18
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <EXTI_u8EnableInterrupt+0x38>
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	0a 94       	dec	r0
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <EXTI_u8EnableInterrupt+0x34>
    1bf0:	84 2b       	or	r24, r20
    1bf2:	8c 93       	st	X, r24
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <EXTI_u8EnableInterrupt+0x46>
	}
	else
	{
		Local_u8ErrorState=1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <EXTI_u8Int1Init>:

// initializaing the External Interrupt 1
u8 EXTI_u8Int1Init(u8 ExtInt_SenseControl)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <EXTI_u8Int1Init+0x6>
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <EXTI_u8Int1Init+0x8>
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    1c14:	19 82       	std	Y+1, r1	; 0x01

	//Enable external interrupt 1
	SET_BIT(GICR,GICR_INT1);
    1c16:	ab e5       	ldi	r26, 0x5B	; 91
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	eb e5       	ldi	r30, 0x5B	; 91
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	80 68       	ori	r24, 0x80	; 128
    1c22:	8c 93       	st	X, r24

	switch(ExtInt_SenseControl)
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	3c 83       	std	Y+4, r19	; 0x04
    1c2c:	2b 83       	std	Y+3, r18	; 0x03
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	31 f0       	breq	.+12     	; 0x1c42 <EXTI_u8Int1Init+0x3c>
    1c36:	2b 81       	ldd	r18, Y+3	; 0x03
    1c38:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3a:	21 30       	cpi	r18, 0x01	; 1
    1c3c:	31 05       	cpc	r19, r1
    1c3e:	81 f0       	breq	.+32     	; 0x1c60 <EXTI_u8Int1Init+0x5a>
    1c40:	1e c0       	rjmp	.+60     	; 0x1c7e <EXTI_u8Int1Init+0x78>
	{
	case EXTI_FALLING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC11);
    1c42:	a5 e5       	ldi	r26, 0x55	; 85
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e5 e5       	ldi	r30, 0x55	; 85
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	88 60       	ori	r24, 0x08	; 8
    1c4e:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC10);
    1c50:	a5 e5       	ldi	r26, 0x55	; 85
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e5 e5       	ldi	r30, 0x55	; 85
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	8b 7f       	andi	r24, 0xFB	; 251
    1c5c:	8c 93       	st	X, r24
    1c5e:	11 c0       	rjmp	.+34     	; 0x1c82 <EXTI_u8Int1Init+0x7c>
		break;
	case EXTI_RISING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC10);
    1c60:	a5 e5       	ldi	r26, 0x55	; 85
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e5 e5       	ldi	r30, 0x55	; 85
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	84 60       	ori	r24, 0x04	; 4
    1c6c:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC11);
    1c6e:	a5 e5       	ldi	r26, 0x55	; 85
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e5 e5       	ldi	r30, 0x55	; 85
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	88 60       	ori	r24, 0x08	; 8
    1c7a:	8c 93       	st	X, r24
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <EXTI_u8Int1Init+0x7c>
		break;
	default:
		Local_u8ErrorState=1;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <INT1_voidCallBack>:

//set user function to be executed on ISR
void INT1_voidCallBack(void(*func_Ptr)(void))
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <INT1_voidCallBack+0x6>
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	89 83       	std	Y+1, r24	; 0x01
	User_Func1=func_Ptr;
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca4:	90 93 db 00 	sts	0x00DB, r25
    1ca8:	80 93 da 00 	sts	0x00DA, r24
}
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <EXTI_u8Int2Init>:

// initializaing the External Interrupt 2
u8 EXTI_u8Int2Init(u8 ExtInt_SenseControl)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <EXTI_u8Int2Init+0x6>
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <EXTI_u8Int2Init+0x8>
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
    1cc4:	19 82       	std	Y+1, r1	; 0x01

	//Enable external interrupt 2
	SET_BIT(GICR,GICR_INT2);
    1cc6:	ab e5       	ldi	r26, 0x5B	; 91
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	eb e5       	ldi	r30, 0x5B	; 91
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	80 62       	ori	r24, 0x20	; 32
    1cd2:	8c 93       	st	X, r24

	switch(ExtInt_SenseControl)
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	3c 83       	std	Y+4, r19	; 0x04
    1cdc:	2b 83       	std	Y+3, r18	; 0x03
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	31 f0       	breq	.+12     	; 0x1cf2 <EXTI_u8Int2Init+0x3c>
    1ce6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cea:	21 30       	cpi	r18, 0x01	; 1
    1cec:	31 05       	cpc	r19, r1
    1cee:	49 f0       	breq	.+18     	; 0x1d02 <EXTI_u8Int2Init+0x4c>
    1cf0:	10 c0       	rjmp	.+32     	; 0x1d12 <EXTI_u8Int2Init+0x5c>
	{
	case EXTI_FALLING_EDGE:
		CLR_BIT(MCUSCR,MCUSCR_ISC2);
    1cf2:	a4 e5       	ldi	r26, 0x54	; 84
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e4 e5       	ldi	r30, 0x54	; 84
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8f 7b       	andi	r24, 0xBF	; 191
    1cfe:	8c 93       	st	X, r24
    1d00:	0a c0       	rjmp	.+20     	; 0x1d16 <EXTI_u8Int2Init+0x60>
		break;
	case EXTI_RISING_EDGE:
		SET_BIT(MCUSCR,MCUSCR_ISC2);
    1d02:	a4 e5       	ldi	r26, 0x54	; 84
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e4 e5       	ldi	r30, 0x54	; 84
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	80 64       	ori	r24, 0x40	; 64
    1d0e:	8c 93       	st	X, r24
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <EXTI_u8Int2Init+0x60>
		break;
	default:
		Local_u8ErrorState=1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <INT2_voidCallBack>:

//set user function to be executed on ISR
void INT2_voidCallBack(void(*func_Ptr)(void))
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <INT2_voidCallBack+0x6>
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
	User_Func2=func_Ptr;
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	90 93 dd 00 	sts	0x00DD, r25
    1d3c:	80 93 dc 00 	sts	0x00DC, r24
}
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
    1d52:	af e5       	ldi	r26, 0x5F	; 95
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	ef e5       	ldi	r30, 0x5F	; 95
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	80 68       	ori	r24, 0x80	; 128
    1d5e:	8c 93       	st	X, r24
}
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,SREG_I);   
    1d6e:	af e5       	ldi	r26, 0x5F	; 95
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	ef e5       	ldi	r30, 0x5F	; 95
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	8f 77       	andi	r24, 0x7F	; 127
    1d7a:	8c 93       	st	X, r24
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <KPD_u8GetPressedKey+0x6>
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <KPD_u8GetPressedKey+0x8>
    1d8a:	0f 92       	push	r0
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY,Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
    1d90:	8f ef       	ldi	r24, 0xFF	; 255
    1d92:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;
	static u8 Local_u8KPDCoulmnArr[COLUMN_NUM]={KPD_CLOUMN0_PIN,KPD_CLOUMN1_PIN,KPD_CLOUMN2_PIN,KPD_CLOUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1d94:	1a 82       	std	Y+2, r1	; 0x02
    1d96:	5e c0       	rjmp	.+188    	; 0x1e54 <KPD_u8GetPressedKey+0xd2>
	{
		/*Activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDCoulmnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	fc 01       	movw	r30, r24
    1da0:	ed 53       	subi	r30, 0x3D	; 61
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	90 81       	ld	r25, Z
    1da6:	83 e0       	ldi	r24, 0x03	; 3
    1da8:	69 2f       	mov	r22, r25
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1db0:	19 82       	std	Y+1, r1	; 0x01
    1db2:	3d c0       	rjmp	.+122    	; 0x1e2e <KPD_u8GetPressedKey+0xac>
		{
			/*Read the current row*/
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	fc 01       	movw	r30, r24
    1dbc:	e1 54       	subi	r30, 0x41	; 65
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	90 81       	ld	r25, Z
    1dc2:	9e 01       	movw	r18, r28
    1dc4:	2c 5f       	subi	r18, 0xFC	; 252
    1dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc8:	83 e0       	ldi	r24, 0x03	; 3
    1dca:	69 2f       	mov	r22, r25
    1dcc:	a9 01       	movw	r20, r18
    1dce:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <DIO_u8GetPinValue>

			/*Check if switch is pressed*/
			if(Local_u8PinState==DIO_u8PIN_LOW)
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	88 23       	and	r24, r24
    1dd6:	41 f5       	brne	.+80     	; 0x1e28 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	48 2f       	mov	r20, r24
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	ca 01       	movw	r24, r20
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	82 0f       	add	r24, r18
    1df0:	93 1f       	adc	r25, r19
    1df2:	fc 01       	movw	r30, r24
    1df4:	e9 53       	subi	r30, 0x39	; 57
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <KPD_u8GetPressedKey+0x9a>

				/*Polling (busy waiting) until the key is released*/
				while(Local_u8PinState==DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	88 2f       	mov	r24, r24
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	fc 01       	movw	r30, r24
    1e06:	e1 54       	subi	r30, 0x41	; 65
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	90 81       	ld	r25, Z
    1e0c:	9e 01       	movw	r18, r28
    1e0e:	2c 5f       	subi	r18, 0xFC	; 252
    1e10:	3f 4f       	sbci	r19, 0xFF	; 255
    1e12:	83 e0       	ldi	r24, 0x03	; 3
    1e14:	69 2f       	mov	r22, r25
    1e16:	a9 01       	movw	r20, r18
    1e18:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <DIO_u8GetPinValue>
			if(Local_u8PinState==DIO_u8PIN_LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				/*Polling (busy waiting) until the key is released*/
				while(Local_u8PinState==DIO_u8PIN_LOW)
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	88 23       	and	r24, r24
    1e20:	71 f3       	breq	.-36     	; 0x1dfe <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	8d 83       	std	Y+5, r24	; 0x05
    1e26:	1c c0       	rjmp	.+56     	; 0x1e60 <KPD_u8GetPressedKey+0xde>
	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
	{
		/*Activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDCoulmnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	8f 5f       	subi	r24, 0xFF	; 255
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	84 30       	cpi	r24, 0x04	; 4
    1e32:	08 f4       	brcc	.+2      	; 0x1e36 <KPD_u8GetPressedKey+0xb4>
    1e34:	bf cf       	rjmp	.-130    	; 0x1db4 <KPD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDCoulmnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	88 2f       	mov	r24, r24
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	ed 53       	subi	r30, 0x3D	; 61
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	90 81       	ld	r25, Z
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	69 2f       	mov	r22, r25
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;
	static u8 Local_u8KPDCoulmnArr[COLUMN_NUM]={KPD_CLOUMN0_PIN,KPD_CLOUMN1_PIN,KPD_CLOUMN2_PIN,KPD_CLOUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	8f 5f       	subi	r24, 0xFF	; 255
    1e52:	8a 83       	std	Y+2, r24	; 0x02
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	84 30       	cpi	r24, 0x04	; 4
    1e58:	08 f4       	brcc	.+2      	; 0x1e5c <KPD_u8GetPressedKey+0xda>
    1e5a:	9e cf       	rjmp	.-196    	; 0x1d98 <KPD_u8GetPressedKey+0x16>
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDCoulmnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
	}
	return Local_u8PressedKey;
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <main>:
void Stop(void);
static u32 Global_u32Counter=0;
u8 flag =0;

void main(void)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	28 97       	sbiw	r28, 0x08	; 8
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61

	PORT_voidInit();
    1e86:	0e 94 23 09 	call	0x1246	; 0x1246 <PORT_voidInit>
	CLCD_voidInit(CLCD_2Lines_5x8Fontsize,CLCD_Curser_OFF);
    1e8a:	88 e3       	ldi	r24, 0x38	; 56
    1e8c:	6c e0       	ldi	r22, 0x0C	; 12
    1e8e:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidInit>
	TIMER0_voidInit();
    1e92:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <TIMER0_voidInit>
	TIMER0_u8SetCallBack(&Delay);
    1e96:	8b e2       	ldi	r24, 0x2B	; 43
    1e98:	90 e1       	ldi	r25, 0x10	; 16
    1e9a:	0e 94 07 11 	call	0x220e	; 0x220e <TIMER0_u8SetCallBack>
	EXTI_u8Int2Init(EXTI_FALLING_EDGE);
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <EXTI_u8Int2Init>
	INT2_voidCallBack(Stop);
    1ea4:	88 eb       	ldi	r24, 0xB8	; 184
    1ea6:	90 e1       	ldi	r25, 0x10	; 16
    1ea8:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <INT2_voidCallBack>
	GIE_voidEnable();
    1eac:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <GIE_voidEnable>


	u8 Local_u8Key,Local_u8MinTens,Local_u8MinUnit,Again=0xff;
    1eb0:	8f ef       	ldi	r24, 0xFF	; 255
    1eb2:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32Time;

	while(1)
	{
		CLCD_voidSendCommand(CLCD_Clear_Display);
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
		CLCD_voidSendString("To Set The Timer Press Enter");
    1eba:	80 e6       	ldi	r24, 0x60	; 96
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	0e 94 ca 07 	call	0xf94	; 0xf94 <CLCD_voidSendString>
		do
		{
			Local_u8Key=KPD_u8GetPressedKey();
    1ec2:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <KPD_u8GetPressedKey>
    1ec6:	88 87       	std	Y+8, r24	; 0x08
		}while(Local_u8Key==0xff);
    1ec8:	88 85       	ldd	r24, Y+8	; 0x08
    1eca:	8f 3f       	cpi	r24, 0xFF	; 255
    1ecc:	d1 f3       	breq	.-12     	; 0x1ec2 <main+0x50>
		if(Local_u8Key==11)
    1ece:	88 85       	ldd	r24, Y+8	; 0x08
    1ed0:	8b 30       	cpi	r24, 0x0B	; 11
    1ed2:	81 f7       	brne	.-32     	; 0x1eb4 <main+0x42>
		{
			CLCD_voidSendCommand(CLCD_Clear_Display);
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
			CLCD_voidSendString("Enter The Time  in Min: ");
    1eda:	8d e7       	ldi	r24, 0x7D	; 125
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 ca 07 	call	0xf94	; 0xf94 <CLCD_voidSendString>
			do
			{
				Local_u8MinTens=KPD_u8GetPressedKey();
    1ee2:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <KPD_u8GetPressedKey>
    1ee6:	8f 83       	std	Y+7, r24	; 0x07
			}while(Local_u8MinTens==0xff);
    1ee8:	8f 81       	ldd	r24, Y+7	; 0x07
    1eea:	8f 3f       	cpi	r24, 0xFF	; 255
    1eec:	d1 f3       	breq	.-12     	; 0x1ee2 <main+0x70>
			CLCD_voidGoToXY(1,7);
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	67 e0       	ldi	r22, 0x07	; 7
    1ef2:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
			CLCD_voidWriteNumber(Local_u8MinTens);
    1ef6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef8:	88 2f       	mov	r24, r24
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a0 e0       	ldi	r26, 0x00	; 0
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	bc 01       	movw	r22, r24
    1f02:	cd 01       	movw	r24, r26
    1f04:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
			do
			{
				Local_u8MinUnit=KPD_u8GetPressedKey();
    1f08:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <KPD_u8GetPressedKey>
    1f0c:	8e 83       	std	Y+6, r24	; 0x06
			}while(Local_u8MinUnit==0xff);
    1f0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f10:	8f 3f       	cpi	r24, 0xFF	; 255
    1f12:	d1 f3       	breq	.-12     	; 0x1f08 <main+0x96>
			CLCD_voidGoToXY(1,8);
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	68 e0       	ldi	r22, 0x08	; 8
    1f18:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
			CLCD_voidWriteNumber(Local_u8MinUnit);
    1f1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f1e:	88 2f       	mov	r24, r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a0 e0       	ldi	r26, 0x00	; 0
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>

			do
			{
				Local_u8Key=KPD_u8GetPressedKey();
    1f2e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <KPD_u8GetPressedKey>
    1f32:	88 87       	std	Y+8, r24	; 0x08
			}while(Local_u8Key==0xff);
    1f34:	88 85       	ldd	r24, Y+8	; 0x08
    1f36:	8f 3f       	cpi	r24, 0xFF	; 255
    1f38:	d1 f3       	breq	.-12     	; 0x1f2e <main+0xbc>

			if(Local_u8Key==11)
    1f3a:	88 85       	ldd	r24, Y+8	; 0x08
    1f3c:	8b 30       	cpi	r24, 0x0B	; 11
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <main+0xd0>
    1f40:	4e c0       	rjmp	.+156    	; 0x1fde <main+0x16c>
			{
				CLCD_voidSendCommand(CLCD_Clear_Display);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
				CLCD_voidGoToXY(0,0);
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
				CLCD_voidSendString("Remaining Time  in sec:");
    1f50:	86 e9       	ldi	r24, 0x96	; 150
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	0e 94 ca 07 	call	0xf94	; 0xf94 <CLCD_voidSendString>
				Local_u32Time=(10*Local_u8MinTens+Local_u8MinUnit)*60;
    1f58:	8f 81       	ldd	r24, Y+7	; 0x07
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c 01       	movw	r18, r24
    1f60:	22 0f       	add	r18, r18
    1f62:	33 1f       	adc	r19, r19
    1f64:	c9 01       	movw	r24, r18
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	28 0f       	add	r18, r24
    1f70:	39 1f       	adc	r19, r25
    1f72:	8e 81       	ldd	r24, Y+6	; 0x06
    1f74:	88 2f       	mov	r24, r24
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	28 0f       	add	r18, r24
    1f7a:	39 1f       	adc	r19, r25
    1f7c:	8c e3       	ldi	r24, 0x3C	; 60
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	ac 01       	movw	r20, r24
    1f82:	24 9f       	mul	r18, r20
    1f84:	c0 01       	movw	r24, r0
    1f86:	25 9f       	mul	r18, r21
    1f88:	90 0d       	add	r25, r0
    1f8a:	34 9f       	mul	r19, r20
    1f8c:	90 0d       	add	r25, r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	aa 27       	eor	r26, r26
    1f92:	97 fd       	sbrc	r25, 7
    1f94:	a0 95       	com	r26
    1f96:	ba 2f       	mov	r27, r26
    1f98:	89 83       	std	Y+1, r24	; 0x01
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	ab 83       	std	Y+3, r26	; 0x03
    1f9e:	bc 83       	std	Y+4, r27	; 0x04
				Global_u32Counter=Local_u32Time;
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa4:	ab 81       	ldd	r26, Y+3	; 0x03
    1fa6:	bc 81       	ldd	r27, Y+4	; 0x04
    1fa8:	80 93 de 00 	sts	0x00DE, r24
    1fac:	90 93 df 00 	sts	0x00DF, r25
    1fb0:	a0 93 e0 00 	sts	0x00E0, r26
    1fb4:	b0 93 e1 00 	sts	0x00E1, r27
				flag=1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	80 93 e2 00 	sts	0x00E2, r24
    1fbe:	0f c0       	rjmp	.+30     	; 0x1fde <main+0x16c>
			}
			while(Global_u32Counter!=0)
			{
				DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN5,DIO_u8PIN_HIGH);
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
    1fc2:	65 e0       	ldi	r22, 0x05	; 5
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_HIGH);
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	66 e0       	ldi	r22, 0x06	; 6
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_HIGH);
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	67 e0       	ldi	r22, 0x07	; 7
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>
				CLCD_voidSendString("Remaining Time  in sec:");
				Local_u32Time=(10*Local_u8MinTens+Local_u8MinUnit)*60;
				Global_u32Counter=Local_u32Time;
				flag=1;
			}
			while(Global_u32Counter!=0)
    1fde:	80 91 de 00 	lds	r24, 0x00DE
    1fe2:	90 91 df 00 	lds	r25, 0x00DF
    1fe6:	a0 91 e0 00 	lds	r26, 0x00E0
    1fea:	b0 91 e1 00 	lds	r27, 0x00E1
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	a1 05       	cpc	r26, r1
    1ff2:	b1 05       	cpc	r27, r1
    1ff4:	29 f7       	brne	.-54     	; 0x1fc0 <main+0x14e>
			{
				DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN5,DIO_u8PIN_HIGH);
				DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_HIGH);
				DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_HIGH);
			}
			if(Global_u32Counter==0)
    1ff6:	80 91 de 00 	lds	r24, 0x00DE
    1ffa:	90 91 df 00 	lds	r25, 0x00DF
    1ffe:	a0 91 e0 00 	lds	r26, 0x00E0
    2002:	b0 91 e1 00 	lds	r27, 0x00E1
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	a1 05       	cpc	r26, r1
    200a:	b1 05       	cpc	r27, r1
    200c:	09 f0       	breq	.+2      	; 0x2010 <main+0x19e>
    200e:	52 cf       	rjmp	.-348    	; 0x1eb4 <main+0x42>
			{
				flag=0;
    2010:	10 92 e2 00 	sts	0x00E2, r1
				DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN5,DIO_u8PIN_LOW);
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	65 e0       	ldi	r22, 0x05	; 5
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_LOW);
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	66 e0       	ldi	r22, 0x06	; 6
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_LOW);
    2028:	82 e0       	ldi	r24, 0x02	; 2
    202a:	67 e0       	ldi	r22, 0x07	; 7
    202c:	40 e0       	ldi	r20, 0x00	; 0
    202e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>
				CLCD_voidSendCommand(CLCD_Clear_Display);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
				CLCD_voidSendString("Time out");
    2038:	8e ea       	ldi	r24, 0xAE	; 174
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0e 94 ca 07 	call	0xf94	; 0xf94 <CLCD_voidSendString>
    2040:	06 c0       	rjmp	.+12     	; 0x204e <main+0x1dc>
				while(Again==0xff)
				{
					do
					{
						Again=KPD_u8GetPressedKey();
    2042:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <KPD_u8GetPressedKey>
    2046:	8d 83       	std	Y+5, r24	; 0x05
					}while(Again==0xff);
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	8f 3f       	cpi	r24, 0xFF	; 255
    204c:	d1 f3       	breq	.-12     	; 0x2042 <main+0x1d0>
				DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN5,DIO_u8PIN_LOW);
				DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_LOW);
				DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_LOW);
				CLCD_voidSendCommand(CLCD_Clear_Display);
				CLCD_voidSendString("Time out");
				while(Again==0xff)
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	8f 3f       	cpi	r24, 0xFF	; 255
    2052:	b9 f3       	breq	.-18     	; 0x2042 <main+0x1d0>
    2054:	2f cf       	rjmp	.-418    	; 0x1eb4 <main+0x42>

00002056 <Delay>:
			}
		}
	}
}
void Delay(void)
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter=0;
	Local_u16Counter++;
    205e:	80 91 e3 00 	lds	r24, 0x00E3
    2062:	90 91 e4 00 	lds	r25, 0x00E4
    2066:	01 96       	adiw	r24, 0x01	; 1
    2068:	90 93 e4 00 	sts	0x00E4, r25
    206c:	80 93 e3 00 	sts	0x00E3, r24
	if(flag==0)
    2070:	80 91 e2 00 	lds	r24, 0x00E2
    2074:	88 23       	and	r24, r24
    2076:	29 f4       	brne	.+10     	; 0x2082 <Delay+0x2c>
	{
		Local_u16Counter=0;
    2078:	10 92 e4 00 	sts	0x00E4, r1
    207c:	10 92 e3 00 	sts	0x00E3, r1
    2080:	74 c0       	rjmp	.+232    	; 0x216a <Delay+0x114>
	}
	else if(Local_u16Counter==1000 && flag==1)
    2082:	80 91 e3 00 	lds	r24, 0x00E3
    2086:	90 91 e4 00 	lds	r25, 0x00E4
    208a:	23 e0       	ldi	r18, 0x03	; 3
    208c:	88 3e       	cpi	r24, 0xE8	; 232
    208e:	92 07       	cpc	r25, r18
    2090:	09 f0       	breq	.+2      	; 0x2094 <Delay+0x3e>
    2092:	6b c0       	rjmp	.+214    	; 0x216a <Delay+0x114>
    2094:	80 91 e2 00 	lds	r24, 0x00E2
    2098:	81 30       	cpi	r24, 0x01	; 1
    209a:	09 f0       	breq	.+2      	; 0x209e <Delay+0x48>
    209c:	66 c0       	rjmp	.+204    	; 0x216a <Delay+0x114>
	{
		Global_u32Counter--;
    209e:	80 91 de 00 	lds	r24, 0x00DE
    20a2:	90 91 df 00 	lds	r25, 0x00DF
    20a6:	a0 91 e0 00 	lds	r26, 0x00E0
    20aa:	b0 91 e1 00 	lds	r27, 0x00E1
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	a1 09       	sbc	r26, r1
    20b2:	b1 09       	sbc	r27, r1
    20b4:	80 93 de 00 	sts	0x00DE, r24
    20b8:	90 93 df 00 	sts	0x00DF, r25
    20bc:	a0 93 e0 00 	sts	0x00E0, r26
    20c0:	b0 93 e1 00 	sts	0x00E1, r27
		CLCD_voidGoToXY(1,7);
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	67 e0       	ldi	r22, 0x07	; 7
    20c8:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
		CLCD_voidWriteNumber(Global_u32Counter);
    20cc:	80 91 de 00 	lds	r24, 0x00DE
    20d0:	90 91 df 00 	lds	r25, 0x00DF
    20d4:	a0 91 e0 00 	lds	r26, 0x00E0
    20d8:	b0 91 e1 00 	lds	r27, 0x00E1
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
		if(Global_u32Counter==999)
    20e4:	80 91 de 00 	lds	r24, 0x00DE
    20e8:	90 91 df 00 	lds	r25, 0x00DF
    20ec:	a0 91 e0 00 	lds	r26, 0x00E0
    20f0:	b0 91 e1 00 	lds	r27, 0x00E1
    20f4:	87 3e       	cpi	r24, 0xE7	; 231
    20f6:	23 e0       	ldi	r18, 0x03	; 3
    20f8:	92 07       	cpc	r25, r18
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	a2 07       	cpc	r26, r18
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	b2 07       	cpc	r27, r18
    2102:	39 f4       	brne	.+14     	; 0x2112 <Delay+0xbc>
		{
			CLCD_voidGoToXY(1,10);
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	6a e0       	ldi	r22, 0x0A	; 10
    2108:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    210c:	80 e2       	ldi	r24, 0x20	; 32
    210e:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		}
		if(Global_u32Counter==99)
    2112:	80 91 de 00 	lds	r24, 0x00DE
    2116:	90 91 df 00 	lds	r25, 0x00DF
    211a:	a0 91 e0 00 	lds	r26, 0x00E0
    211e:	b0 91 e1 00 	lds	r27, 0x00E1
    2122:	83 36       	cpi	r24, 0x63	; 99
    2124:	91 05       	cpc	r25, r1
    2126:	a1 05       	cpc	r26, r1
    2128:	b1 05       	cpc	r27, r1
    212a:	39 f4       	brne	.+14     	; 0x213a <Delay+0xe4>
		{
			CLCD_voidGoToXY(1,9);
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	69 e0       	ldi	r22, 0x09	; 9
    2130:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    2134:	80 e2       	ldi	r24, 0x20	; 32
    2136:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		}
		if(Global_u32Counter==9)
    213a:	80 91 de 00 	lds	r24, 0x00DE
    213e:	90 91 df 00 	lds	r25, 0x00DF
    2142:	a0 91 e0 00 	lds	r26, 0x00E0
    2146:	b0 91 e1 00 	lds	r27, 0x00E1
    214a:	89 30       	cpi	r24, 0x09	; 9
    214c:	91 05       	cpc	r25, r1
    214e:	a1 05       	cpc	r26, r1
    2150:	b1 05       	cpc	r27, r1
    2152:	39 f4       	brne	.+14     	; 0x2162 <Delay+0x10c>
		{
			CLCD_voidGoToXY(1,8);
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	68 e0       	ldi	r22, 0x08	; 8
    2158:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
			CLCD_voidSendData(' ');
    215c:	80 e2       	ldi	r24, 0x20	; 32
    215e:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		}
		Local_u16Counter=0;
    2162:	10 92 e4 00 	sts	0x00E4, r1
    2166:	10 92 e3 00 	sts	0x00E3, r1
	}
}
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <Stop>:
void Stop(void)
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN5,DIO_u8PIN_LOW);
    2178:	82 e0       	ldi	r24, 0x02	; 2
    217a:	65 e0       	ldi	r22, 0x05	; 5
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_u8SetPinValue>
	if(flag==1)
    2182:	80 91 e2 00 	lds	r24, 0x00E2
    2186:	81 30       	cpi	r24, 0x01	; 1
    2188:	51 f4       	brne	.+20     	; 0x219e <Stop+0x2e>
	{
		Global_u32Counter=0;
    218a:	10 92 de 00 	sts	0x00DE, r1
    218e:	10 92 df 00 	sts	0x00DF, r1
    2192:	10 92 e0 00 	sts	0x00E0, r1
    2196:	10 92 e1 00 	sts	0x00E1, r1
		flag=0;
    219a:	10 92 e2 00 	sts	0x00E2, r1
	}
}
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <TIMER0_voidInit>:
#include "TIMER_config.h"

static void (*TIMER0_pvCallBackFunc)(void)=NULL;

void TIMER0_voidInit(void)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
	/*Choose CTC mode*/
	CLR_BIT(TCCR0,TCCR0_WGM00);
    21ac:	a3 e5       	ldi	r26, 0x53	; 83
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e3 e5       	ldi	r30, 0x53	; 83
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	8f 7b       	andi	r24, 0xBF	; 191
    21b8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    21ba:	a3 e5       	ldi	r26, 0x53	; 83
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e3 e5       	ldi	r30, 0x53	; 83
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	88 60       	ori	r24, 0x08	; 8
    21c6:	8c 93       	st	X, r24

	/*output compare match interrupt  enable */
	SET_BIT(TIMSK,TIMSK_OCIE0);
    21c8:	a9 e5       	ldi	r26, 0x59	; 89
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e9 e5       	ldi	r30, 0x59	; 89
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	82 60       	ori	r24, 0x02	; 2
    21d4:	8c 93       	st	X, r24

	/*Set compare match value to 250*/
	OCR0=250;
    21d6:	ec e5       	ldi	r30, 0x5C	; 92
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	8a ef       	ldi	r24, 0xFA	; 250
    21dc:	80 83       	st	Z, r24

	/*Prescaler: Division by 8*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    21de:	a3 e5       	ldi	r26, 0x53	; 83
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e3 e5       	ldi	r30, 0x53	; 83
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	8e 7f       	andi	r24, 0xFE	; 254
    21ea:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    21ec:	a3 e5       	ldi	r26, 0x53	; 83
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e3 e5       	ldi	r30, 0x53	; 83
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	82 60       	ori	r24, 0x02	; 2
    21f8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    21fa:	a3 e5       	ldi	r26, 0x53	; 83
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e3 e5       	ldi	r30, 0x53	; 83
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	8b 7f       	andi	r24, 0xFB	; 251
    2206:	8c 93       	st	X, r24

}
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	00 d0       	rcall	.+0      	; 0x2214 <TIMER0_u8SetCallBack+0x6>
    2214:	0f 92       	push	r0
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	9b 83       	std	Y+3, r25	; 0x03
    221c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorStatus=0;
    221e:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_pvCallBackFunc != NULL)
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	9b 81       	ldd	r25, Y+3	; 0x03
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	39 f0       	breq	.+14     	; 0x2236 <TIMER0_u8SetCallBack+0x28>
    {
    	TIMER0_pvCallBackFunc=Copy_pvCallBackFunc;
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	9b 81       	ldd	r25, Y+3	; 0x03
    222c:	90 93 e6 00 	sts	0x00E6, r25
    2230:	80 93 e5 00 	sts	0x00E5, r24
    2234:	02 c0       	rjmp	.+4      	; 0x223a <TIMER0_u8SetCallBack+0x2c>
    }
    else
    {
    	Local_u8ErrorStatus=2;
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorStatus;
    223a:	89 81       	ldd	r24, Y+1	; 0x01
}
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <__vector_10>:

void(__vector_10)(void) __attribute__((signal));
void(__vector_10)(void)
{
    2248:	1f 92       	push	r1
    224a:	0f 92       	push	r0
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	0f 92       	push	r0
    2250:	11 24       	eor	r1, r1
    2252:	2f 93       	push	r18
    2254:	3f 93       	push	r19
    2256:	4f 93       	push	r20
    2258:	5f 93       	push	r21
    225a:	6f 93       	push	r22
    225c:	7f 93       	push	r23
    225e:	8f 93       	push	r24
    2260:	9f 93       	push	r25
    2262:	af 93       	push	r26
    2264:	bf 93       	push	r27
    2266:	ef 93       	push	r30
    2268:	ff 93       	push	r31
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    2272:	80 91 e5 00 	lds	r24, 0x00E5
    2276:	90 91 e6 00 	lds	r25, 0x00E6
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	29 f0       	breq	.+10     	; 0x2288 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    227e:	e0 91 e5 00 	lds	r30, 0x00E5
    2282:	f0 91 e6 00 	lds	r31, 0x00E6
    2286:	09 95       	icall
	}
}
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	ff 91       	pop	r31
    228e:	ef 91       	pop	r30
    2290:	bf 91       	pop	r27
    2292:	af 91       	pop	r26
    2294:	9f 91       	pop	r25
    2296:	8f 91       	pop	r24
    2298:	7f 91       	pop	r23
    229a:	6f 91       	pop	r22
    229c:	5f 91       	pop	r21
    229e:	4f 91       	pop	r20
    22a0:	3f 91       	pop	r19
    22a2:	2f 91       	pop	r18
    22a4:	0f 90       	pop	r0
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	0f 90       	pop	r0
    22aa:	1f 90       	pop	r1
    22ac:	18 95       	reti

000022ae <__udivmodsi4>:
    22ae:	a1 e2       	ldi	r26, 0x21	; 33
    22b0:	1a 2e       	mov	r1, r26
    22b2:	aa 1b       	sub	r26, r26
    22b4:	bb 1b       	sub	r27, r27
    22b6:	fd 01       	movw	r30, r26
    22b8:	0d c0       	rjmp	.+26     	; 0x22d4 <__udivmodsi4_ep>

000022ba <__udivmodsi4_loop>:
    22ba:	aa 1f       	adc	r26, r26
    22bc:	bb 1f       	adc	r27, r27
    22be:	ee 1f       	adc	r30, r30
    22c0:	ff 1f       	adc	r31, r31
    22c2:	a2 17       	cp	r26, r18
    22c4:	b3 07       	cpc	r27, r19
    22c6:	e4 07       	cpc	r30, r20
    22c8:	f5 07       	cpc	r31, r21
    22ca:	20 f0       	brcs	.+8      	; 0x22d4 <__udivmodsi4_ep>
    22cc:	a2 1b       	sub	r26, r18
    22ce:	b3 0b       	sbc	r27, r19
    22d0:	e4 0b       	sbc	r30, r20
    22d2:	f5 0b       	sbc	r31, r21

000022d4 <__udivmodsi4_ep>:
    22d4:	66 1f       	adc	r22, r22
    22d6:	77 1f       	adc	r23, r23
    22d8:	88 1f       	adc	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	1a 94       	dec	r1
    22de:	69 f7       	brne	.-38     	; 0x22ba <__udivmodsi4_loop>
    22e0:	60 95       	com	r22
    22e2:	70 95       	com	r23
    22e4:	80 95       	com	r24
    22e6:	90 95       	com	r25
    22e8:	9b 01       	movw	r18, r22
    22ea:	ac 01       	movw	r20, r24
    22ec:	bd 01       	movw	r22, r26
    22ee:	cf 01       	movw	r24, r30
    22f0:	08 95       	ret

000022f2 <__prologue_saves__>:
    22f2:	2f 92       	push	r2
    22f4:	3f 92       	push	r3
    22f6:	4f 92       	push	r4
    22f8:	5f 92       	push	r5
    22fa:	6f 92       	push	r6
    22fc:	7f 92       	push	r7
    22fe:	8f 92       	push	r8
    2300:	9f 92       	push	r9
    2302:	af 92       	push	r10
    2304:	bf 92       	push	r11
    2306:	cf 92       	push	r12
    2308:	df 92       	push	r13
    230a:	ef 92       	push	r14
    230c:	ff 92       	push	r15
    230e:	0f 93       	push	r16
    2310:	1f 93       	push	r17
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	ca 1b       	sub	r28, r26
    231c:	db 0b       	sbc	r29, r27
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	09 94       	ijmp

0000232a <__epilogue_restores__>:
    232a:	2a 88       	ldd	r2, Y+18	; 0x12
    232c:	39 88       	ldd	r3, Y+17	; 0x11
    232e:	48 88       	ldd	r4, Y+16	; 0x10
    2330:	5f 84       	ldd	r5, Y+15	; 0x0f
    2332:	6e 84       	ldd	r6, Y+14	; 0x0e
    2334:	7d 84       	ldd	r7, Y+13	; 0x0d
    2336:	8c 84       	ldd	r8, Y+12	; 0x0c
    2338:	9b 84       	ldd	r9, Y+11	; 0x0b
    233a:	aa 84       	ldd	r10, Y+10	; 0x0a
    233c:	b9 84       	ldd	r11, Y+9	; 0x09
    233e:	c8 84       	ldd	r12, Y+8	; 0x08
    2340:	df 80       	ldd	r13, Y+7	; 0x07
    2342:	ee 80       	ldd	r14, Y+6	; 0x06
    2344:	fd 80       	ldd	r15, Y+5	; 0x05
    2346:	0c 81       	ldd	r16, Y+4	; 0x04
    2348:	1b 81       	ldd	r17, Y+3	; 0x03
    234a:	aa 81       	ldd	r26, Y+2	; 0x02
    234c:	b9 81       	ldd	r27, Y+1	; 0x01
    234e:	ce 0f       	add	r28, r30
    2350:	d1 1d       	adc	r29, r1
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	ed 01       	movw	r28, r26
    235e:	08 95       	ret

00002360 <_exit>:
    2360:	f8 94       	cli

00002362 <__stop_program>:
    2362:	ff cf       	rjmp	.-2      	; 0x2362 <__stop_program>
