
FanProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002baa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002baa  00002c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080007a  0080007a  00002c58  2**0
                  ALLOC
  3 .stab         00002160  00000000  00000000  00002c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bed  00000000  00000000  00004db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000059a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000789e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008789  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009538  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009925  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a0f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 60 14 	call	0x28c0	; 0x28c0 <main>
      8a:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
#endif

u8 ADC_u8BusyState=0;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*AVCC as reference voltage*/
#if(VREF==0)
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);
#elif(VREF==1)
	SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
#elif(PS==3)
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
	CLR_BIT(ADCSRA,ADCSRA_ADPS1);
	CLR_BIT(ADCSRA,ADCSRA_ADPS0);
#elif(PS==4)
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     b6a:	a6 e2       	ldi	r26, 0x26	; 38
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e6 e2       	ldi	r30, 0x26	; 38
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	84 60       	ori	r24, 0x04	; 4
     b76:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADCSRA_ADPS1);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8d 7f       	andi	r24, 0xFD	; 253
     b84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
#endif
	/*Enable peripheral */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u16*Copy_pu8Reading)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	28 97       	sbiw	r28, 0x08	; 8
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	8e 83       	std	Y+6, r24	; 0x06
     bbe:	78 87       	std	Y+8, r23	; 0x08
     bc0:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     bc2:	1a 82       	std	Y+2, r1	; 0x02
     bc4:	1b 82       	std	Y+3, r1	; 0x03
     bc6:	1c 82       	std	Y+4, r1	; 0x04
     bc8:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=0;
     bca:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==0)
     bcc:	80 91 7e 00 	lds	r24, 0x007E
     bd0:	88 23       	and	r24, r24
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <ADC_u8StartConversionSynch+0x2e>
     bd4:	74 c0       	rjmp	.+232    	; 0xcbe <ADC_u8StartConversionSynch+0x116>
	{
		/*ADC is now busy*/
		ADC_u8BusyState=1;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 7e 00 	sts	0x007E, r24

		/*Clear the MUX bits in ADMUX register*/
		ADMUX &= MUXMask;
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 7e       	andi	r24, 0xE0	; 224
     be8:	8c 93       	st	X, r24

		/*Set the required channel into the MUX bits*/
		ADMUX |= Copy_u8Channel;
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	90 81       	ld	r25, Z
     bf4:	8e 81       	ldd	r24, Y+6	; 0x06
     bf6:	89 2b       	or	r24, r25
     bf8:	8c 93       	st	X, r24

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     bfa:	a6 e2       	ldi	r26, 0x26	; 38
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e6 e2       	ldi	r30, 0x26	; 38
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 64       	ori	r24, 0x40	; 64
     c06:	8c 93       	st	X, r24
     c08:	0b c0       	rjmp	.+22     	; 0xc20 <ADC_u8StartConversionSynch+0x78>

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while( ((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter<ADC_u32TIMEOUT) )
		{
			Local_u32Counter++;
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	9b 81       	ldd	r25, Y+3	; 0x03
     c0e:	ac 81       	ldd	r26, Y+4	; 0x04
     c10:	bd 81       	ldd	r27, Y+5	; 0x05
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	a1 1d       	adc	r26, r1
     c16:	b1 1d       	adc	r27, r1
     c18:	8a 83       	std	Y+2, r24	; 0x02
     c1a:	9b 83       	std	Y+3, r25	; 0x03
     c1c:	ac 83       	std	Y+4, r26	; 0x04
     c1e:	bd 83       	std	Y+5, r27	; 0x05

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while( ((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter<ADC_u32TIMEOUT) )
     c20:	e6 e2       	ldi	r30, 0x26	; 38
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	82 95       	swap	r24
     c28:	8f 70       	andi	r24, 0x0F	; 15
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	81 70       	andi	r24, 0x01	; 1
     c30:	90 70       	andi	r25, 0x00	; 0
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	61 f4       	brne	.+24     	; 0xc4e <ADC_u8StartConversionSynch+0xa6>
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	9b 81       	ldd	r25, Y+3	; 0x03
     c3a:	ac 81       	ldd	r26, Y+4	; 0x04
     c3c:	bd 81       	ldd	r27, Y+5	; 0x05
     c3e:	80 35       	cpi	r24, 0x50	; 80
     c40:	23 ec       	ldi	r18, 0xC3	; 195
     c42:	92 07       	cpc	r25, r18
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	a2 07       	cpc	r26, r18
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	b2 07       	cpc	r27, r18
     c4c:	f0 f2       	brcs	.-68     	; 0xc0a <ADC_u8StartConversionSynch+0x62>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter==ADC_u32TIMEOUT)
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	9b 81       	ldd	r25, Y+3	; 0x03
     c52:	ac 81       	ldd	r26, Y+4	; 0x04
     c54:	bd 81       	ldd	r27, Y+5	; 0x05
     c56:	80 35       	cpi	r24, 0x50	; 80
     c58:	23 ec       	ldi	r18, 0xC3	; 195
     c5a:	92 07       	cpc	r25, r18
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	a2 07       	cpc	r26, r18
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	b2 07       	cpc	r27, r18
     c64:	19 f4       	brne	.+6      	; 0xc6c <ADC_u8StartConversionSynch+0xc4>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=1;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	2b c0       	rjmp	.+86     	; 0xcc2 <ADC_u8StartConversionSynch+0x11a>
		else
		{
			/*Loop is broken because flag is raised*/

			/*Clear the conversion clear flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     c6c:	a6 e2       	ldi	r26, 0x26	; 38
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e6 e2       	ldi	r30, 0x26	; 38
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	80 61       	ori	r24, 0x10	; 16
     c78:	8c 93       	st	X, r24
#if(Resolution==0)
			/*Return the reading*/
			*Copy_pu8Reading=ADCH;
#elif(Resolution==1)
			adcVal=0;
     c7a:	10 92 80 00 	sts	0x0080, r1
     c7e:	10 92 7f 00 	sts	0x007F, r1
			adcVal = ADCL + (ADCH << 8); //Get the values of the two ADC registers
     c82:	e4 e2       	ldi	r30, 0x24	; 36
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	e5 e2       	ldi	r30, 0x25	; 37
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	88 2f       	mov	r24, r24
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	98 2f       	mov	r25, r24
     c98:	88 27       	eor	r24, r24
     c9a:	82 0f       	add	r24, r18
     c9c:	93 1f       	adc	r25, r19
     c9e:	90 93 80 00 	sts	0x0080, r25
     ca2:	80 93 7f 00 	sts	0x007F, r24
			*Copy_pu8Reading = (adcVal & _10_BIT_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
     ca6:	80 91 7f 00 	lds	r24, 0x007F
     caa:	90 91 80 00 	lds	r25, 0x0080
     cae:	93 70       	andi	r25, 0x03	; 3
     cb0:	ef 81       	ldd	r30, Y+7	; 0x07
     cb2:	f8 85       	ldd	r31, Y+8	; 0x08
     cb4:	91 83       	std	Z+1, r25	; 0x01
     cb6:	80 83       	st	Z, r24
#endif
			/*ADC is finished, return it to idle */
			ADC_u8BusyState=0;
     cb8:	10 92 7e 00 	sts	0x007E, r1
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <ADC_u8StartConversionSynch+0x11a>
		}

	}
	else
	{
		Local_u8ErrorState=1;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc4:	28 96       	adiw	r28, 0x08	; 8
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel,u16*Copy_pu8Reading,void(*Copy_pvNotificationFunc)(void))
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <ADC_u8StartConversionAsynch+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <ADC_u8StartConversionAsynch+0x8>
     cde:	00 d0       	rcall	.+0      	; 0xce0 <ADC_u8StartConversionAsynch+0xa>
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	7c 83       	std	Y+4, r23	; 0x04
     ce8:	6b 83       	std	Y+3, r22	; 0x03
     cea:	5e 83       	std	Y+6, r21	; 0x06
     cec:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=0;
     cee:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==0)
     cf0:	80 91 7e 00 	lds	r24, 0x007E
     cf4:	88 23       	and	r24, r24
     cf6:	c1 f5       	brne	.+112    	; 0xd68 <ADC_u8StartConversionAsynch+0x92>
	{
		if(Copy_pu8Reading == NULL || Copy_pvNotificationFunc == NULL)
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	21 f0       	breq	.+8      	; 0xd08 <ADC_u8StartConversionAsynch+0x32>
     d00:	8d 81       	ldd	r24, Y+5	; 0x05
     d02:	9e 81       	ldd	r25, Y+6	; 0x06
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	19 f4       	brne	.+6      	; 0xd0e <ADC_u8StartConversionAsynch+0x38>
		{
			Local_u8ErrorState=1;
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	2f c0       	rjmp	.+94     	; 0xd6c <ADC_u8StartConversionAsynch+0x96>
		}
		else
		{
			/*Make ADC busy in order not to work until being idle 0*/
			ADC_u8BusyState=1;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 93 7e 00 	sts	0x007E, r24

			/*Initialize the reading variable globally*/
			ADC_pu8Reading=Copy_pu8Reading;
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	90 93 7b 00 	sts	0x007B, r25
     d1c:	80 93 7a 00 	sts	0x007A, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc=Copy_pvNotificationFunc;
     d20:	8d 81       	ldd	r24, Y+5	; 0x05
     d22:	9e 81       	ldd	r25, Y+6	; 0x06
     d24:	90 93 7d 00 	sts	0x007D, r25
     d28:	80 93 7c 00 	sts	0x007C, r24

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &= MUXMask;
     d2c:	a7 e2       	ldi	r26, 0x27	; 39
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e7 e2       	ldi	r30, 0x27	; 39
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	80 7e       	andi	r24, 0xE0	; 224
     d38:	8c 93       	st	X, r24

			/*Set the required channel into the MUX bits*/
			ADMUX |= Copy_u8Channel;
     d3a:	a7 e2       	ldi	r26, 0x27	; 39
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e7 e2       	ldi	r30, 0x27	; 39
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	90 81       	ld	r25, Z
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	89 2b       	or	r24, r25
     d48:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d4a:	a6 e2       	ldi	r26, 0x26	; 38
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e6 e2       	ldi	r30, 0x26	; 38
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	80 64       	ori	r24, 0x40	; 64
     d56:	8c 93       	st	X, r24

			/*ADC interrupt enable */
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d58:	a6 e2       	ldi	r26, 0x26	; 38
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e6 e2       	ldi	r30, 0x26	; 38
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 60       	ori	r24, 0x08	; 8
     d64:	8c 93       	st	X, r24
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <ADC_u8StartConversionAsynch+0x96>
		}

	}
	else
	{
		Local_u8ErrorState=1;
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d6e:	26 96       	adiw	r28, 0x06	; 6
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <ADC_u8ReadInput>:


void ADC_u8ReadInput(u16*Copy_pu8Reading)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <ADC_u8ReadInput+0x6>
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	9a 83       	std	Y+2, r25	; 0x02
     d8c:	89 83       	std	Y+1, r24	; 0x01
#if(Resolution==0)
			/*Return the reading*/
			*Copy_pu8Reading=ADCH;
#elif(Resolution==1)
			adcVal=0;
     d8e:	10 92 80 00 	sts	0x0080, r1
     d92:	10 92 7f 00 	sts	0x007F, r1
			adcVal = ADCL + (ADCH << 8); //Get the values of the two ADC registers
     d96:	e4 e2       	ldi	r30, 0x24	; 36
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	e5 e2       	ldi	r30, 0x25	; 37
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	98 2f       	mov	r25, r24
     dac:	88 27       	eor	r24, r24
     dae:	82 0f       	add	r24, r18
     db0:	93 1f       	adc	r25, r19
     db2:	90 93 80 00 	sts	0x0080, r25
     db6:	80 93 7f 00 	sts	0x007F, r24
			*Copy_pu8Reading = (adcVal & _10_BIT_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
     dba:	80 91 7f 00 	lds	r24, 0x007F
     dbe:	90 91 80 00 	lds	r25, 0x0080
     dc2:	93 70       	andi	r25, 0x03	; 3
     dc4:	e9 81       	ldd	r30, Y+1	; 0x01
     dc6:	fa 81       	ldd	r31, Y+2	; 0x02
     dc8:	91 83       	std	Z+1, r25	; 0x01
     dca:	80 83       	st	Z, r24
#endif

}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <__vector_16>:


ISR(__vector_16)
{
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
#if(Resolution==0)
	/*Read ADC result*/
	*ADC_pu8Reading=ADCH;
#elif(Resolution==1)
	adcVal=0;
     e00:	10 92 80 00 	sts	0x0080, r1
     e04:	10 92 7f 00 	sts	0x007F, r1
	adcVal = ADCL + (ADCH << 8); //Get the values of the two ADC registers
     e08:	e4 e2       	ldi	r30, 0x24	; 36
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	e5 e2       	ldi	r30, 0x25	; 37
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	98 2f       	mov	r25, r24
     e1e:	88 27       	eor	r24, r24
     e20:	82 0f       	add	r24, r18
     e22:	93 1f       	adc	r25, r19
     e24:	90 93 80 00 	sts	0x0080, r25
     e28:	80 93 7f 00 	sts	0x007F, r24
	*ADC_pu8Reading = (adcVal & _10_BIT_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
     e2c:	e0 91 7a 00 	lds	r30, 0x007A
     e30:	f0 91 7b 00 	lds	r31, 0x007B
     e34:	80 91 7f 00 	lds	r24, 0x007F
     e38:	90 91 80 00 	lds	r25, 0x0080
     e3c:	93 70       	andi	r25, 0x03	; 3
     e3e:	91 83       	std	Z+1, r25	; 0x01
     e40:	80 83       	st	Z, r24
#endif
	/*Make ADC state be idle (0) because it finished */
	ADC_u8BusyState=0;
     e42:	10 92 7e 00 	sts	0x007E, r1

	/*Invoke the callback notification function*/
	(*ADC_pvCallBackNotificationFunc)();
     e46:	e0 91 7c 00 	lds	r30, 0x007C
     e4a:	f0 91 7d 00 	lds	r31, 0x007D
     e4e:	09 95       	icall

	/*Disable ADC conversion complete interrupt*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     e50:	a6 e2       	ldi	r26, 0x26	; 38
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e6 e2       	ldi	r30, 0x26	; 38
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	87 7f       	andi	r24, 0xF7	; 247
     e5c:	8c 93       	st	X, r24
}
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	bf 91       	pop	r27
     e68:	af 91       	pop	r26
     e6a:	9f 91       	pop	r25
     e6c:	8f 91       	pop	r24
     e6e:	7f 91       	pop	r23
     e70:	6f 91       	pop	r22
     e72:	5f 91       	pop	r21
     e74:	4f 91       	pop	r20
     e76:	3f 91       	pop	r19
     e78:	2f 91       	pop	r18
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	6d 97       	sbiw	r28, 0x1d	; 29
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	8d 8f       	std	Y+29, r24	; 0x1d


	/*Set RS pin to low for command*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
#ifdef _FOUR_BIT

	/*Send The first Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Command,7)==1)
     eae:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb0:	88 1f       	adc	r24, r24
     eb2:	88 27       	eor	r24, r24
     eb4:	88 1f       	adc	r24, r24
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	31 f4       	brne	.+12     	; 0xec6 <CLCD_voidSendCommand+0x42>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	67 e0       	ldi	r22, 0x07	; 7
     ebe:	41 e0       	ldi	r20, 0x01	; 1
     ec0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
     ec4:	05 c0       	rjmp	.+10     	; 0xed0 <CLCD_voidSendCommand+0x4c>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	67 e0       	ldi	r22, 0x07	; 7
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,6)==1)
     ed0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ed2:	82 95       	swap	r24
     ed4:	86 95       	lsr	r24
     ed6:	86 95       	lsr	r24
     ed8:	83 70       	andi	r24, 0x03	; 3
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	81 70       	andi	r24, 0x01	; 1
     ee0:	90 70       	andi	r25, 0x00	; 0
     ee2:	88 23       	and	r24, r24
     ee4:	31 f0       	breq	.+12     	; 0xef2 <CLCD_voidSendCommand+0x6e>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	66 e0       	ldi	r22, 0x06	; 6
     eea:	41 e0       	ldi	r20, 0x01	; 1
     eec:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
     ef0:	05 c0       	rjmp	.+10     	; 0xefc <CLCD_voidSendCommand+0x78>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	66 e0       	ldi	r22, 0x06	; 6
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,5)==1)
     efc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     efe:	82 95       	swap	r24
     f00:	86 95       	lsr	r24
     f02:	87 70       	andi	r24, 0x07	; 7
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	81 70       	andi	r24, 0x01	; 1
     f0a:	90 70       	andi	r25, 0x00	; 0
     f0c:	88 23       	and	r24, r24
     f0e:	31 f0       	breq	.+12     	; 0xf1c <CLCD_voidSendCommand+0x98>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	65 e0       	ldi	r22, 0x05	; 5
     f14:	41 e0       	ldi	r20, 0x01	; 1
     f16:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
     f1a:	05 c0       	rjmp	.+10     	; 0xf26 <CLCD_voidSendCommand+0xa2>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	65 e0       	ldi	r22, 0x05	; 5
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,4)==1)
     f26:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f28:	82 95       	swap	r24
     f2a:	8f 70       	andi	r24, 0x0F	; 15
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	81 70       	andi	r24, 0x01	; 1
     f32:	90 70       	andi	r25, 0x00	; 0
     f34:	88 23       	and	r24, r24
     f36:	31 f0       	breq	.+12     	; 0xf44 <CLCD_voidSendCommand+0xc0>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	64 e0       	ldi	r22, 0x04	; 4
     f3c:	41 e0       	ldi	r20, 0x01	; 1
     f3e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
     f42:	05 c0       	rjmp	.+10     	; 0xf4e <CLCD_voidSendCommand+0xca>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	64 e0       	ldi	r22, 0x04	; 4
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	62 e0       	ldi	r22, 0x02	; 2
     f52:	41 e0       	ldi	r20, 0x01	; 1
     f54:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	a0 e0       	ldi	r26, 0x00	; 0
     f5e:	b0 e4       	ldi	r27, 0x40	; 64
     f60:	89 8f       	std	Y+25, r24	; 0x19
     f62:	9a 8f       	std	Y+26, r25	; 0x1a
     f64:	ab 8f       	std	Y+27, r26	; 0x1b
     f66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f68:	69 8d       	ldd	r22, Y+25	; 0x19
     f6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4a ef       	ldi	r20, 0xFA	; 250
     f76:	54 e4       	ldi	r21, 0x44	; 68
     f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	8d 8b       	std	Y+21, r24	; 0x15
     f82:	9e 8b       	std	Y+22, r25	; 0x16
     f84:	af 8b       	std	Y+23, r26	; 0x17
     f86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f88:	6d 89       	ldd	r22, Y+21	; 0x15
     f8a:	7e 89       	ldd	r23, Y+22	; 0x16
     f8c:	8f 89       	ldd	r24, Y+23	; 0x17
     f8e:	98 8d       	ldd	r25, Y+24	; 0x18
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e8       	ldi	r20, 0x80	; 128
     f96:	5f e3       	ldi	r21, 0x3F	; 63
     f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f9c:	88 23       	and	r24, r24
     f9e:	2c f4       	brge	.+10     	; 0xfaa <CLCD_voidSendCommand+0x126>
		__ticks = 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	9c 8b       	std	Y+20, r25	; 0x14
     fa6:	8b 8b       	std	Y+19, r24	; 0x13
     fa8:	3f c0       	rjmp	.+126    	; 0x1028 <CLCD_voidSendCommand+0x1a4>
	else if (__tmp > 65535)
     faa:	6d 89       	ldd	r22, Y+21	; 0x15
     fac:	7e 89       	ldd	r23, Y+22	; 0x16
     fae:	8f 89       	ldd	r24, Y+23	; 0x17
     fb0:	98 8d       	ldd	r25, Y+24	; 0x18
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	3f ef       	ldi	r19, 0xFF	; 255
     fb6:	4f e7       	ldi	r20, 0x7F	; 127
     fb8:	57 e4       	ldi	r21, 0x47	; 71
     fba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fbe:	18 16       	cp	r1, r24
     fc0:	4c f5       	brge	.+82     	; 0x1014 <CLCD_voidSendCommand+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc2:	69 8d       	ldd	r22, Y+25	; 0x19
     fc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 e2       	ldi	r20, 0x20	; 32
     fd0:	51 e4       	ldi	r21, 0x41	; 65
     fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	bc 01       	movw	r22, r24
     fdc:	cd 01       	movw	r24, r26
     fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	9c 8b       	std	Y+20, r25	; 0x14
     fe8:	8b 8b       	std	Y+19, r24	; 0x13
     fea:	0f c0       	rjmp	.+30     	; 0x100a <CLCD_voidSendCommand+0x186>
     fec:	88 ec       	ldi	r24, 0xC8	; 200
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9a 8b       	std	Y+18, r25	; 0x12
     ff2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ff4:	89 89       	ldd	r24, Y+17	; 0x11
     ff6:	9a 89       	ldd	r25, Y+18	; 0x12
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <CLCD_voidSendCommand+0x174>
     ffc:	9a 8b       	std	Y+18, r25	; 0x12
     ffe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1000:	8b 89       	ldd	r24, Y+19	; 0x13
    1002:	9c 89       	ldd	r25, Y+20	; 0x14
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	9c 8b       	std	Y+20, r25	; 0x14
    1008:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100a:	8b 89       	ldd	r24, Y+19	; 0x13
    100c:	9c 89       	ldd	r25, Y+20	; 0x14
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	69 f7       	brne	.-38     	; 0xfec <CLCD_voidSendCommand+0x168>
    1012:	14 c0       	rjmp	.+40     	; 0x103c <CLCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1014:	6d 89       	ldd	r22, Y+21	; 0x15
    1016:	7e 89       	ldd	r23, Y+22	; 0x16
    1018:	8f 89       	ldd	r24, Y+23	; 0x17
    101a:	98 8d       	ldd	r25, Y+24	; 0x18
    101c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	9c 8b       	std	Y+20, r25	; 0x14
    1026:	8b 8b       	std	Y+19, r24	; 0x13
    1028:	8b 89       	ldd	r24, Y+19	; 0x13
    102a:	9c 89       	ldd	r25, Y+20	; 0x14
    102c:	98 8b       	std	Y+16, r25	; 0x10
    102e:	8f 87       	std	Y+15, r24	; 0x0f
    1030:	8f 85       	ldd	r24, Y+15	; 0x0f
    1032:	98 89       	ldd	r25, Y+16	; 0x10
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <CLCD_voidSendCommand+0x1b0>
    1038:	98 8b       	std	Y+16, r25	; 0x10
    103a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	62 e0       	ldi	r22, 0x02	; 2
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

	/*Send The Second Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Command,3)==1)
    1046:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1048:	86 95       	lsr	r24
    104a:	86 95       	lsr	r24
    104c:	86 95       	lsr	r24
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	81 70       	andi	r24, 0x01	; 1
    1054:	90 70       	andi	r25, 0x00	; 0
    1056:	88 23       	and	r24, r24
    1058:	31 f0       	breq	.+12     	; 0x1066 <CLCD_voidSendCommand+0x1e2>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	67 e0       	ldi	r22, 0x07	; 7
    105e:	41 e0       	ldi	r20, 0x01	; 1
    1060:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <CLCD_voidSendCommand+0x1ec>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	67 e0       	ldi	r22, 0x07	; 7
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,2)==1)
    1070:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1072:	86 95       	lsr	r24
    1074:	86 95       	lsr	r24
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	81 70       	andi	r24, 0x01	; 1
    107c:	90 70       	andi	r25, 0x00	; 0
    107e:	88 23       	and	r24, r24
    1080:	31 f0       	breq	.+12     	; 0x108e <CLCD_voidSendCommand+0x20a>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	66 e0       	ldi	r22, 0x06	; 6
    1086:	41 e0       	ldi	r20, 0x01	; 1
    1088:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <CLCD_voidSendCommand+0x214>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	66 e0       	ldi	r22, 0x06	; 6
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,1)==1)
    1098:	8d 8d       	ldd	r24, Y+29	; 0x1d
    109a:	86 95       	lsr	r24
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	81 70       	andi	r24, 0x01	; 1
    10a2:	90 70       	andi	r25, 0x00	; 0
    10a4:	88 23       	and	r24, r24
    10a6:	31 f0       	breq	.+12     	; 0x10b4 <CLCD_voidSendCommand+0x230>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	65 e0       	ldi	r22, 0x05	; 5
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    10b2:	05 c0       	rjmp	.+10     	; 0x10be <CLCD_voidSendCommand+0x23a>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	65 e0       	ldi	r22, 0x05	; 5
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,0)==1)
    10be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	81 70       	andi	r24, 0x01	; 1
    10c6:	90 70       	andi	r25, 0x00	; 0
    10c8:	88 23       	and	r24, r24
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <CLCD_voidSendCommand+0x254>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	64 e0       	ldi	r22, 0x04	; 4
    10d0:	41 e0       	ldi	r20, 0x01	; 1
    10d2:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <CLCD_voidSendCommand+0x25e>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	64 e0       	ldi	r22, 0x04	; 4
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	62 e0       	ldi	r22, 0x02	; 2
    10e6:	41 e0       	ldi	r20, 0x01	; 1
    10e8:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a0 e0       	ldi	r26, 0x00	; 0
    10f2:	b0 e4       	ldi	r27, 0x40	; 64
    10f4:	8b 87       	std	Y+11, r24	; 0x0b
    10f6:	9c 87       	std	Y+12, r25	; 0x0c
    10f8:	ad 87       	std	Y+13, r26	; 0x0d
    10fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1100:	8d 85       	ldd	r24, Y+13	; 0x0d
    1102:	9e 85       	ldd	r25, Y+14	; 0x0e
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	4a ef       	ldi	r20, 0xFA	; 250
    110a:	54 e4       	ldi	r21, 0x44	; 68
    110c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	8f 83       	std	Y+7, r24	; 0x07
    1116:	98 87       	std	Y+8, r25	; 0x08
    1118:	a9 87       	std	Y+9, r26	; 0x09
    111a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    111c:	6f 81       	ldd	r22, Y+7	; 0x07
    111e:	78 85       	ldd	r23, Y+8	; 0x08
    1120:	89 85       	ldd	r24, Y+9	; 0x09
    1122:	9a 85       	ldd	r25, Y+10	; 0x0a
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e8       	ldi	r20, 0x80	; 128
    112a:	5f e3       	ldi	r21, 0x3F	; 63
    112c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1130:	88 23       	and	r24, r24
    1132:	2c f4       	brge	.+10     	; 0x113e <CLCD_voidSendCommand+0x2ba>
		__ticks = 1;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	9e 83       	std	Y+6, r25	; 0x06
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	3f c0       	rjmp	.+126    	; 0x11bc <CLCD_voidSendCommand+0x338>
	else if (__tmp > 65535)
    113e:	6f 81       	ldd	r22, Y+7	; 0x07
    1140:	78 85       	ldd	r23, Y+8	; 0x08
    1142:	89 85       	ldd	r24, Y+9	; 0x09
    1144:	9a 85       	ldd	r25, Y+10	; 0x0a
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	3f ef       	ldi	r19, 0xFF	; 255
    114a:	4f e7       	ldi	r20, 0x7F	; 127
    114c:	57 e4       	ldi	r21, 0x47	; 71
    114e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1152:	18 16       	cp	r1, r24
    1154:	4c f5       	brge	.+82     	; 0x11a8 <CLCD_voidSendCommand+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1156:	6b 85       	ldd	r22, Y+11	; 0x0b
    1158:	7c 85       	ldd	r23, Y+12	; 0x0c
    115a:	8d 85       	ldd	r24, Y+13	; 0x0d
    115c:	9e 85       	ldd	r25, Y+14	; 0x0e
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e2       	ldi	r20, 0x20	; 32
    1164:	51 e4       	ldi	r21, 0x41	; 65
    1166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	bc 01       	movw	r22, r24
    1170:	cd 01       	movw	r24, r26
    1172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	9e 83       	std	Y+6, r25	; 0x06
    117c:	8d 83       	std	Y+5, r24	; 0x05
    117e:	0f c0       	rjmp	.+30     	; 0x119e <CLCD_voidSendCommand+0x31a>
    1180:	88 ec       	ldi	r24, 0xC8	; 200
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	9c 83       	std	Y+4, r25	; 0x04
    1186:	8b 83       	std	Y+3, r24	; 0x03
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	f1 f7       	brne	.-4      	; 0x118c <CLCD_voidSendCommand+0x308>
    1190:	9c 83       	std	Y+4, r25	; 0x04
    1192:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	9e 83       	std	Y+6, r25	; 0x06
    119c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	9e 81       	ldd	r25, Y+6	; 0x06
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	69 f7       	brne	.-38     	; 0x1180 <CLCD_voidSendCommand+0x2fc>
    11a6:	14 c0       	rjmp	.+40     	; 0x11d0 <CLCD_voidSendCommand+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a8:	6f 81       	ldd	r22, Y+7	; 0x07
    11aa:	78 85       	ldd	r23, Y+8	; 0x08
    11ac:	89 85       	ldd	r24, Y+9	; 0x09
    11ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	9e 83       	std	Y+6, r25	; 0x06
    11ba:	8d 83       	std	Y+5, r24	; 0x05
    11bc:	8d 81       	ldd	r24, Y+5	; 0x05
    11be:	9e 81       	ldd	r25, Y+6	; 0x06
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <CLCD_voidSendCommand+0x344>
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	62 e0       	ldi	r22, 0x02	; 2
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

	#endif


}
    11da:	6d 96       	adiw	r28, 0x1d	; 29
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	6d 97       	sbiw	r28, 0x1d	; 29
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set RS pin to High for Data*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	41 e0       	ldi	r20, 0x01	; 1
    1208:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
	#ifdef _FOUR_BIT

	/*Send The first Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Data,7)==1)
    1216:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1218:	88 1f       	adc	r24, r24
    121a:	88 27       	eor	r24, r24
    121c:	88 1f       	adc	r24, r24
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	31 f4       	brne	.+12     	; 0x122e <CLCD_voidSendData+0x42>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	67 e0       	ldi	r22, 0x07	; 7
    1226:	41 e0       	ldi	r20, 0x01	; 1
    1228:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    122c:	05 c0       	rjmp	.+10     	; 0x1238 <CLCD_voidSendData+0x4c>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	67 e0       	ldi	r22, 0x07	; 7
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,6)==1)
    1238:	8d 8d       	ldd	r24, Y+29	; 0x1d
    123a:	82 95       	swap	r24
    123c:	86 95       	lsr	r24
    123e:	86 95       	lsr	r24
    1240:	83 70       	andi	r24, 0x03	; 3
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	81 70       	andi	r24, 0x01	; 1
    1248:	90 70       	andi	r25, 0x00	; 0
    124a:	88 23       	and	r24, r24
    124c:	31 f0       	breq	.+12     	; 0x125a <CLCD_voidSendData+0x6e>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	66 e0       	ldi	r22, 0x06	; 6
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    1258:	05 c0       	rjmp	.+10     	; 0x1264 <CLCD_voidSendData+0x78>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	66 e0       	ldi	r22, 0x06	; 6
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,5)==1)
    1264:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1266:	82 95       	swap	r24
    1268:	86 95       	lsr	r24
    126a:	87 70       	andi	r24, 0x07	; 7
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	81 70       	andi	r24, 0x01	; 1
    1272:	90 70       	andi	r25, 0x00	; 0
    1274:	88 23       	and	r24, r24
    1276:	31 f0       	breq	.+12     	; 0x1284 <CLCD_voidSendData+0x98>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	65 e0       	ldi	r22, 0x05	; 5
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    1282:	05 c0       	rjmp	.+10     	; 0x128e <CLCD_voidSendData+0xa2>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	65 e0       	ldi	r22, 0x05	; 5
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,4)==1)
    128e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1290:	82 95       	swap	r24
    1292:	8f 70       	andi	r24, 0x0F	; 15
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	81 70       	andi	r24, 0x01	; 1
    129a:	90 70       	andi	r25, 0x00	; 0
    129c:	88 23       	and	r24, r24
    129e:	31 f0       	breq	.+12     	; 0x12ac <CLCD_voidSendData+0xc0>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	64 e0       	ldi	r22, 0x04	; 4
    12a4:	41 e0       	ldi	r20, 0x01	; 1
    12a6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <CLCD_voidSendData+0xca>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	64 e0       	ldi	r22, 0x04	; 4
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	62 e0       	ldi	r22, 0x02	; 2
    12ba:	41 e0       	ldi	r20, 0x01	; 1
    12bc:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a0 e0       	ldi	r26, 0x00	; 0
    12c6:	b0 e4       	ldi	r27, 0x40	; 64
    12c8:	89 8f       	std	Y+25, r24	; 0x19
    12ca:	9a 8f       	std	Y+26, r25	; 0x1a
    12cc:	ab 8f       	std	Y+27, r26	; 0x1b
    12ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d0:	69 8d       	ldd	r22, Y+25	; 0x19
    12d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	4a ef       	ldi	r20, 0xFA	; 250
    12de:	54 e4       	ldi	r21, 0x44	; 68
    12e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	8d 8b       	std	Y+21, r24	; 0x15
    12ea:	9e 8b       	std	Y+22, r25	; 0x16
    12ec:	af 8b       	std	Y+23, r26	; 0x17
    12ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12f0:	6d 89       	ldd	r22, Y+21	; 0x15
    12f2:	7e 89       	ldd	r23, Y+22	; 0x16
    12f4:	8f 89       	ldd	r24, Y+23	; 0x17
    12f6:	98 8d       	ldd	r25, Y+24	; 0x18
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e8       	ldi	r20, 0x80	; 128
    12fe:	5f e3       	ldi	r21, 0x3F	; 63
    1300:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1304:	88 23       	and	r24, r24
    1306:	2c f4       	brge	.+10     	; 0x1312 <CLCD_voidSendData+0x126>
		__ticks = 1;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9c 8b       	std	Y+20, r25	; 0x14
    130e:	8b 8b       	std	Y+19, r24	; 0x13
    1310:	3f c0       	rjmp	.+126    	; 0x1390 <CLCD_voidSendData+0x1a4>
	else if (__tmp > 65535)
    1312:	6d 89       	ldd	r22, Y+21	; 0x15
    1314:	7e 89       	ldd	r23, Y+22	; 0x16
    1316:	8f 89       	ldd	r24, Y+23	; 0x17
    1318:	98 8d       	ldd	r25, Y+24	; 0x18
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	3f ef       	ldi	r19, 0xFF	; 255
    131e:	4f e7       	ldi	r20, 0x7F	; 127
    1320:	57 e4       	ldi	r21, 0x47	; 71
    1322:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1326:	18 16       	cp	r1, r24
    1328:	4c f5       	brge	.+82     	; 0x137c <CLCD_voidSendData+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132a:	69 8d       	ldd	r22, Y+25	; 0x19
    132c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    132e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1330:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e2       	ldi	r20, 0x20	; 32
    1338:	51 e4       	ldi	r21, 0x41	; 65
    133a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	bc 01       	movw	r22, r24
    1344:	cd 01       	movw	r24, r26
    1346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	9c 8b       	std	Y+20, r25	; 0x14
    1350:	8b 8b       	std	Y+19, r24	; 0x13
    1352:	0f c0       	rjmp	.+30     	; 0x1372 <CLCD_voidSendData+0x186>
    1354:	88 ec       	ldi	r24, 0xC8	; 200
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	9a 8b       	std	Y+18, r25	; 0x12
    135a:	89 8b       	std	Y+17, r24	; 0x11
    135c:	89 89       	ldd	r24, Y+17	; 0x11
    135e:	9a 89       	ldd	r25, Y+18	; 0x12
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <CLCD_voidSendData+0x174>
    1364:	9a 8b       	std	Y+18, r25	; 0x12
    1366:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1368:	8b 89       	ldd	r24, Y+19	; 0x13
    136a:	9c 89       	ldd	r25, Y+20	; 0x14
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	9c 8b       	std	Y+20, r25	; 0x14
    1370:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1372:	8b 89       	ldd	r24, Y+19	; 0x13
    1374:	9c 89       	ldd	r25, Y+20	; 0x14
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	69 f7       	brne	.-38     	; 0x1354 <CLCD_voidSendData+0x168>
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <CLCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137c:	6d 89       	ldd	r22, Y+21	; 0x15
    137e:	7e 89       	ldd	r23, Y+22	; 0x16
    1380:	8f 89       	ldd	r24, Y+23	; 0x17
    1382:	98 8d       	ldd	r25, Y+24	; 0x18
    1384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	9c 8b       	std	Y+20, r25	; 0x14
    138e:	8b 8b       	std	Y+19, r24	; 0x13
    1390:	8b 89       	ldd	r24, Y+19	; 0x13
    1392:	9c 89       	ldd	r25, Y+20	; 0x14
    1394:	98 8b       	std	Y+16, r25	; 0x10
    1396:	8f 87       	std	Y+15, r24	; 0x0f
    1398:	8f 85       	ldd	r24, Y+15	; 0x0f
    139a:	98 89       	ldd	r25, Y+16	; 0x10
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <CLCD_voidSendData+0x1b0>
    13a0:	98 8b       	std	Y+16, r25	; 0x10
    13a2:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	62 e0       	ldi	r22, 0x02	; 2
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

	/*Send The Second Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Data,3)==1)
    13ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b0:	86 95       	lsr	r24
    13b2:	86 95       	lsr	r24
    13b4:	86 95       	lsr	r24
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	81 70       	andi	r24, 0x01	; 1
    13bc:	90 70       	andi	r25, 0x00	; 0
    13be:	88 23       	and	r24, r24
    13c0:	31 f0       	breq	.+12     	; 0x13ce <CLCD_voidSendData+0x1e2>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	67 e0       	ldi	r22, 0x07	; 7
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    13cc:	05 c0       	rjmp	.+10     	; 0x13d8 <CLCD_voidSendData+0x1ec>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	67 e0       	ldi	r22, 0x07	; 7
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,2)==1)
    13d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13da:	86 95       	lsr	r24
    13dc:	86 95       	lsr	r24
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	90 70       	andi	r25, 0x00	; 0
    13e6:	88 23       	and	r24, r24
    13e8:	31 f0       	breq	.+12     	; 0x13f6 <CLCD_voidSendData+0x20a>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	66 e0       	ldi	r22, 0x06	; 6
    13ee:	41 e0       	ldi	r20, 0x01	; 1
    13f0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    13f4:	05 c0       	rjmp	.+10     	; 0x1400 <CLCD_voidSendData+0x214>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	66 e0       	ldi	r22, 0x06	; 6
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,1)==1)
    1400:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1402:	86 95       	lsr	r24
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	81 70       	andi	r24, 0x01	; 1
    140a:	90 70       	andi	r25, 0x00	; 0
    140c:	88 23       	and	r24, r24
    140e:	31 f0       	breq	.+12     	; 0x141c <CLCD_voidSendData+0x230>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	65 e0       	ldi	r22, 0x05	; 5
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <CLCD_voidSendData+0x23a>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	65 e0       	ldi	r22, 0x05	; 5
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,0)==1)
    1426:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	81 70       	andi	r24, 0x01	; 1
    142e:	90 70       	andi	r25, 0x00	; 0
    1430:	88 23       	and	r24, r24
    1432:	31 f0       	breq	.+12     	; 0x1440 <CLCD_voidSendData+0x254>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	64 e0       	ldi	r22, 0x04	; 4
    1438:	41 e0       	ldi	r20, 0x01	; 1
    143a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    143e:	05 c0       	rjmp	.+10     	; 0x144a <CLCD_voidSendData+0x25e>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	64 e0       	ldi	r22, 0x04	; 4
    1444:	40 e0       	ldi	r20, 0x00	; 0
    1446:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    144a:	82 e0       	ldi	r24, 0x02	; 2
    144c:	62 e0       	ldi	r22, 0x02	; 2
    144e:	41 e0       	ldi	r20, 0x01	; 1
    1450:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	a0 e0       	ldi	r26, 0x00	; 0
    145a:	b0 e4       	ldi	r27, 0x40	; 64
    145c:	8b 87       	std	Y+11, r24	; 0x0b
    145e:	9c 87       	std	Y+12, r25	; 0x0c
    1460:	ad 87       	std	Y+13, r26	; 0x0d
    1462:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1464:	6b 85       	ldd	r22, Y+11	; 0x0b
    1466:	7c 85       	ldd	r23, Y+12	; 0x0c
    1468:	8d 85       	ldd	r24, Y+13	; 0x0d
    146a:	9e 85       	ldd	r25, Y+14	; 0x0e
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	4a ef       	ldi	r20, 0xFA	; 250
    1472:	54 e4       	ldi	r21, 0x44	; 68
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	8f 83       	std	Y+7, r24	; 0x07
    147e:	98 87       	std	Y+8, r25	; 0x08
    1480:	a9 87       	std	Y+9, r26	; 0x09
    1482:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1484:	6f 81       	ldd	r22, Y+7	; 0x07
    1486:	78 85       	ldd	r23, Y+8	; 0x08
    1488:	89 85       	ldd	r24, Y+9	; 0x09
    148a:	9a 85       	ldd	r25, Y+10	; 0x0a
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e8       	ldi	r20, 0x80	; 128
    1492:	5f e3       	ldi	r21, 0x3F	; 63
    1494:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1498:	88 23       	and	r24, r24
    149a:	2c f4       	brge	.+10     	; 0x14a6 <CLCD_voidSendData+0x2ba>
		__ticks = 1;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	3f c0       	rjmp	.+126    	; 0x1524 <CLCD_voidSendData+0x338>
	else if (__tmp > 65535)
    14a6:	6f 81       	ldd	r22, Y+7	; 0x07
    14a8:	78 85       	ldd	r23, Y+8	; 0x08
    14aa:	89 85       	ldd	r24, Y+9	; 0x09
    14ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	3f ef       	ldi	r19, 0xFF	; 255
    14b2:	4f e7       	ldi	r20, 0x7F	; 127
    14b4:	57 e4       	ldi	r21, 0x47	; 71
    14b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ba:	18 16       	cp	r1, r24
    14bc:	4c f5       	brge	.+82     	; 0x1510 <CLCD_voidSendData+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14be:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e2       	ldi	r20, 0x20	; 32
    14cc:	51 e4       	ldi	r21, 0x41	; 65
    14ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	bc 01       	movw	r22, r24
    14d8:	cd 01       	movw	r24, r26
    14da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	9e 83       	std	Y+6, r25	; 0x06
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	0f c0       	rjmp	.+30     	; 0x1506 <CLCD_voidSendData+0x31a>
    14e8:	88 ec       	ldi	r24, 0xC8	; 200
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	8b 83       	std	Y+3, r24	; 0x03
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <CLCD_voidSendData+0x308>
    14f8:	9c 83       	std	Y+4, r25	; 0x04
    14fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	9e 83       	std	Y+6, r25	; 0x06
    1504:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	69 f7       	brne	.-38     	; 0x14e8 <CLCD_voidSendData+0x2fc>
    150e:	14 c0       	rjmp	.+40     	; 0x1538 <CLCD_voidSendData+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1510:	6f 81       	ldd	r22, Y+7	; 0x07
    1512:	78 85       	ldd	r23, Y+8	; 0x08
    1514:	89 85       	ldd	r24, Y+9	; 0x09
    1516:	9a 85       	ldd	r25, Y+10	; 0x0a
    1518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <CLCD_voidSendData+0x344>
    1534:	9a 83       	std	Y+2, r25	; 0x02
    1536:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	62 e0       	ldi	r22, 0x02	; 2
    153c:	40 e0       	ldi	r20, 0x00	; 0
    153e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

	#endif

}
    1542:	6d 96       	adiw	r28, 0x1d	; 29
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <CLCD_voidInit>:

void CLCD_voidInit(u8 Copy_u8Function,u8 Copy_u8Display)
{
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	c8 56       	subi	r28, 0x68	; 104
    1562:	d0 40       	sbci	r29, 0x00	; 0
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	fe 01       	movw	r30, r28
    1570:	ed 59       	subi	r30, 0x9D	; 157
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	80 83       	st	Z, r24
    1576:	fe 01       	movw	r30, r28
    1578:	ec 59       	subi	r30, 0x9C	; 156
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	60 83       	st	Z, r22
#endif

	#ifdef _FOUR_BIT

	/*Initialize LCD pins direction*/
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_OUTPUT);
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	67 e0       	ldi	r22, 0x07	; 7
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 14 11 	call	0x2228	; 0x2228 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_OUTPUT);
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	66 e0       	ldi	r22, 0x06	; 6
    158c:	41 e0       	ldi	r20, 0x01	; 1
    158e:	0e 94 14 11 	call	0x2228	; 0x2228 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_OUTPUT);
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	65 e0       	ldi	r22, 0x05	; 5
    1596:	41 e0       	ldi	r20, 0x01	; 1
    1598:	0e 94 14 11 	call	0x2228	; 0x2228 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_OUTPUT);
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	64 e0       	ldi	r22, 0x04	; 4
    15a0:	41 e0       	ldi	r20, 0x01	; 1
    15a2:	0e 94 14 11 	call	0x2228	; 0x2228 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	41 e0       	ldi	r20, 0x01	; 1
    15ac:	0e 94 14 11 	call	0x2228	; 0x2228 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	41 e0       	ldi	r20, 0x01	; 1
    15b6:	0e 94 14 11 	call	0x2228	; 0x2228 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	62 e0       	ldi	r22, 0x02	; 2
    15be:	41 e0       	ldi	r20, 0x01	; 1
    15c0:	0e 94 14 11 	call	0x2228	; 0x2228 <DIO_u8SetPinDirection>
    15c4:	fe 01       	movw	r30, r28
    15c6:	e1 5a       	subi	r30, 0xA1	; 161
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a0 e2       	ldi	r26, 0x20	; 32
    15d0:	b2 e4       	ldi	r27, 0x42	; 66
    15d2:	80 83       	st	Z, r24
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	a2 83       	std	Z+2, r26	; 0x02
    15d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15da:	8e 01       	movw	r16, r28
    15dc:	05 5a       	subi	r16, 0xA5	; 165
    15de:	1f 4f       	sbci	r17, 0xFF	; 255
    15e0:	fe 01       	movw	r30, r28
    15e2:	e1 5a       	subi	r30, 0xA1	; 161
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	60 81       	ld	r22, Z
    15e8:	71 81       	ldd	r23, Z+1	; 0x01
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	4a ef       	ldi	r20, 0xFA	; 250
    15f4:	54 e4       	ldi	r21, 0x44	; 68
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	f8 01       	movw	r30, r16
    1600:	80 83       	st	Z, r24
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	a2 83       	std	Z+2, r26	; 0x02
    1606:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1608:	fe 01       	movw	r30, r28
    160a:	e5 5a       	subi	r30, 0xA5	; 165
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	60 81       	ld	r22, Z
    1610:	71 81       	ldd	r23, Z+1	; 0x01
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e8       	ldi	r20, 0x80	; 128
    161c:	5f e3       	ldi	r21, 0x3F	; 63
    161e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1622:	88 23       	and	r24, r24
    1624:	44 f4       	brge	.+16     	; 0x1636 <CLCD_voidInit+0xe2>
		__ticks = 1;
    1626:	fe 01       	movw	r30, r28
    1628:	e7 5a       	subi	r30, 0xA7	; 167
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	80 83       	st	Z, r24
    1634:	64 c0       	rjmp	.+200    	; 0x16fe <CLCD_voidInit+0x1aa>
	else if (__tmp > 65535)
    1636:	fe 01       	movw	r30, r28
    1638:	e5 5a       	subi	r30, 0xA5	; 165
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	60 81       	ld	r22, Z
    163e:	71 81       	ldd	r23, Z+1	; 0x01
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	93 81       	ldd	r25, Z+3	; 0x03
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	3f ef       	ldi	r19, 0xFF	; 255
    1648:	4f e7       	ldi	r20, 0x7F	; 127
    164a:	57 e4       	ldi	r21, 0x47	; 71
    164c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1650:	18 16       	cp	r1, r24
    1652:	0c f0       	brlt	.+2      	; 0x1656 <CLCD_voidInit+0x102>
    1654:	43 c0       	rjmp	.+134    	; 0x16dc <CLCD_voidInit+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1656:	fe 01       	movw	r30, r28
    1658:	e1 5a       	subi	r30, 0xA1	; 161
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e2       	ldi	r20, 0x20	; 32
    166a:	51 e4       	ldi	r21, 0x41	; 65
    166c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	8e 01       	movw	r16, r28
    1676:	07 5a       	subi	r16, 0xA7	; 167
    1678:	1f 4f       	sbci	r17, 0xFF	; 255
    167a:	bc 01       	movw	r22, r24
    167c:	cd 01       	movw	r24, r26
    167e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	f8 01       	movw	r30, r16
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24
    168c:	1f c0       	rjmp	.+62     	; 0x16cc <CLCD_voidInit+0x178>
    168e:	fe 01       	movw	r30, r28
    1690:	e9 5a       	subi	r30, 0xA9	; 169
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	88 ec       	ldi	r24, 0xC8	; 200
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	80 83       	st	Z, r24
    169c:	fe 01       	movw	r30, r28
    169e:	e9 5a       	subi	r30, 0xA9	; 169
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	80 81       	ld	r24, Z
    16a4:	91 81       	ldd	r25, Z+1	; 0x01
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <CLCD_voidInit+0x152>
    16aa:	fe 01       	movw	r30, r28
    16ac:	e9 5a       	subi	r30, 0xA9	; 169
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b4:	de 01       	movw	r26, r28
    16b6:	a7 5a       	subi	r26, 0xA7	; 167
    16b8:	bf 4f       	sbci	r27, 0xFF	; 255
    16ba:	fe 01       	movw	r30, r28
    16bc:	e7 5a       	subi	r30, 0xA7	; 167
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 81       	ld	r24, Z
    16c2:	91 81       	ldd	r25, Z+1	; 0x01
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	11 96       	adiw	r26, 0x01	; 1
    16c8:	9c 93       	st	X, r25
    16ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16cc:	fe 01       	movw	r30, r28
    16ce:	e7 5a       	subi	r30, 0xA7	; 167
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	d1 f6       	brne	.-76     	; 0x168e <CLCD_voidInit+0x13a>
    16da:	27 c0       	rjmp	.+78     	; 0x172a <CLCD_voidInit+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16dc:	8e 01       	movw	r16, r28
    16de:	07 5a       	subi	r16, 0xA7	; 167
    16e0:	1f 4f       	sbci	r17, 0xFF	; 255
    16e2:	fe 01       	movw	r30, r28
    16e4:	e5 5a       	subi	r30, 0xA5	; 165
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	60 81       	ld	r22, Z
    16ea:	71 81       	ldd	r23, Z+1	; 0x01
    16ec:	82 81       	ldd	r24, Z+2	; 0x02
    16ee:	93 81       	ldd	r25, Z+3	; 0x03
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	f8 01       	movw	r30, r16
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	80 83       	st	Z, r24
    16fe:	de 01       	movw	r26, r28
    1700:	ab 5a       	subi	r26, 0xAB	; 171
    1702:	bf 4f       	sbci	r27, 0xFF	; 255
    1704:	fe 01       	movw	r30, r28
    1706:	e7 5a       	subi	r30, 0xA7	; 167
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	80 81       	ld	r24, Z
    170c:	91 81       	ldd	r25, Z+1	; 0x01
    170e:	8d 93       	st	X+, r24
    1710:	9c 93       	st	X, r25
    1712:	fe 01       	movw	r30, r28
    1714:	eb 5a       	subi	r30, 0xAB	; 171
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	80 81       	ld	r24, Z
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <CLCD_voidInit+0x1c8>
    1720:	fe 01       	movw	r30, r28
    1722:	eb 5a       	subi	r30, 0xAB	; 171
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	80 83       	st	Z, r24

	/*Wait for more than 30 ms*/
	_delay_ms(40);

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    172a:	82 e0       	ldi	r24, 0x02	; 2
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	61 e0       	ldi	r22, 0x01	; 1
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

	/*Set command to data pins*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	67 e0       	ldi	r22, 0x07	; 7
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	66 e0       	ldi	r22, 0x06	; 6
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	65 e0       	ldi	r22, 0x05	; 5
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	64 e0       	ldi	r22, 0x04	; 4
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	62 e0       	ldi	r22, 0x02	; 2
    176a:	41 e0       	ldi	r20, 0x01	; 1
    176c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    1770:	fe 01       	movw	r30, r28
    1772:	ef 5a       	subi	r30, 0xAF	; 175
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a0 e0       	ldi	r26, 0x00	; 0
    177c:	b0 e4       	ldi	r27, 0x40	; 64
    177e:	80 83       	st	Z, r24
    1780:	91 83       	std	Z+1, r25	; 0x01
    1782:	a2 83       	std	Z+2, r26	; 0x02
    1784:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1786:	8e 01       	movw	r16, r28
    1788:	03 5b       	subi	r16, 0xB3	; 179
    178a:	1f 4f       	sbci	r17, 0xFF	; 255
    178c:	fe 01       	movw	r30, r28
    178e:	ef 5a       	subi	r30, 0xAF	; 175
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	82 81       	ldd	r24, Z+2	; 0x02
    1798:	93 81       	ldd	r25, Z+3	; 0x03
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4a ef       	ldi	r20, 0xFA	; 250
    17a0:	54 e4       	ldi	r21, 0x44	; 68
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	f8 01       	movw	r30, r16
    17ac:	80 83       	st	Z, r24
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	a2 83       	std	Z+2, r26	; 0x02
    17b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b4:	fe 01       	movw	r30, r28
    17b6:	e3 5b       	subi	r30, 0xB3	; 179
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f e3       	ldi	r21, 0x3F	; 63
    17ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ce:	88 23       	and	r24, r24
    17d0:	44 f4       	brge	.+16     	; 0x17e2 <CLCD_voidInit+0x28e>
		__ticks = 1;
    17d2:	fe 01       	movw	r30, r28
    17d4:	e5 5b       	subi	r30, 0xB5	; 181
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	80 83       	st	Z, r24
    17e0:	64 c0       	rjmp	.+200    	; 0x18aa <CLCD_voidInit+0x356>
	else if (__tmp > 65535)
    17e2:	fe 01       	movw	r30, r28
    17e4:	e3 5b       	subi	r30, 0xB3	; 179
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	3f ef       	ldi	r19, 0xFF	; 255
    17f4:	4f e7       	ldi	r20, 0x7F	; 127
    17f6:	57 e4       	ldi	r21, 0x47	; 71
    17f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17fc:	18 16       	cp	r1, r24
    17fe:	0c f0       	brlt	.+2      	; 0x1802 <CLCD_voidInit+0x2ae>
    1800:	43 c0       	rjmp	.+134    	; 0x1888 <CLCD_voidInit+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1802:	fe 01       	movw	r30, r28
    1804:	ef 5a       	subi	r30, 0xAF	; 175
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e2       	ldi	r20, 0x20	; 32
    1816:	51 e4       	ldi	r21, 0x41	; 65
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8e 01       	movw	r16, r28
    1822:	05 5b       	subi	r16, 0xB5	; 181
    1824:	1f 4f       	sbci	r17, 0xFF	; 255
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	f8 01       	movw	r30, r16
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	80 83       	st	Z, r24
    1838:	1f c0       	rjmp	.+62     	; 0x1878 <CLCD_voidInit+0x324>
    183a:	fe 01       	movw	r30, r28
    183c:	e7 5b       	subi	r30, 0xB7	; 183
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	88 ec       	ldi	r24, 0xC8	; 200
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	80 83       	st	Z, r24
    1848:	fe 01       	movw	r30, r28
    184a:	e7 5b       	subi	r30, 0xB7	; 183
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	80 81       	ld	r24, Z
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <CLCD_voidInit+0x2fe>
    1856:	fe 01       	movw	r30, r28
    1858:	e7 5b       	subi	r30, 0xB7	; 183
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	91 83       	std	Z+1, r25	; 0x01
    185e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1860:	de 01       	movw	r26, r28
    1862:	a5 5b       	subi	r26, 0xB5	; 181
    1864:	bf 4f       	sbci	r27, 0xFF	; 255
    1866:	fe 01       	movw	r30, r28
    1868:	e5 5b       	subi	r30, 0xB5	; 181
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 81       	ld	r24, Z
    186e:	91 81       	ldd	r25, Z+1	; 0x01
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	11 96       	adiw	r26, 0x01	; 1
    1874:	9c 93       	st	X, r25
    1876:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1878:	fe 01       	movw	r30, r28
    187a:	e5 5b       	subi	r30, 0xB5	; 181
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	80 81       	ld	r24, Z
    1880:	91 81       	ldd	r25, Z+1	; 0x01
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	d1 f6       	brne	.-76     	; 0x183a <CLCD_voidInit+0x2e6>
    1886:	27 c0       	rjmp	.+78     	; 0x18d6 <CLCD_voidInit+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1888:	8e 01       	movw	r16, r28
    188a:	05 5b       	subi	r16, 0xB5	; 181
    188c:	1f 4f       	sbci	r17, 0xFF	; 255
    188e:	fe 01       	movw	r30, r28
    1890:	e3 5b       	subi	r30, 0xB3	; 179
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	60 81       	ld	r22, Z
    1896:	71 81       	ldd	r23, Z+1	; 0x01
    1898:	82 81       	ldd	r24, Z+2	; 0x02
    189a:	93 81       	ldd	r25, Z+3	; 0x03
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	f8 01       	movw	r30, r16
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	80 83       	st	Z, r24
    18aa:	de 01       	movw	r26, r28
    18ac:	a9 5b       	subi	r26, 0xB9	; 185
    18ae:	bf 4f       	sbci	r27, 0xFF	; 255
    18b0:	fe 01       	movw	r30, r28
    18b2:	e5 5b       	subi	r30, 0xB5	; 181
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	8d 93       	st	X+, r24
    18bc:	9c 93       	st	X, r25
    18be:	fe 01       	movw	r30, r28
    18c0:	e9 5b       	subi	r30, 0xB9	; 185
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 81       	ld	r24, Z
    18c6:	91 81       	ldd	r25, Z+1	; 0x01
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <CLCD_voidInit+0x374>
    18cc:	fe 01       	movw	r30, r28
    18ce:	e9 5b       	subi	r30, 0xB9	; 185
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	62 e0       	ldi	r22, 0x02	; 2
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

	/*Set command to data pins*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	67 e0       	ldi	r22, 0x07	; 7
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	66 e0       	ldi	r22, 0x06	; 6
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	65 e0       	ldi	r22, 0x05	; 5
    18f8:	41 e0       	ldi	r20, 0x01	; 1
    18fa:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	64 e0       	ldi	r22, 0x04	; 4
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1908:	82 e0       	ldi	r24, 0x02	; 2
    190a:	62 e0       	ldi	r22, 0x02	; 2
    190c:	41 e0       	ldi	r20, 0x01	; 1
    190e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    1912:	fe 01       	movw	r30, r28
    1914:	ed 5b       	subi	r30, 0xBD	; 189
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a0 e0       	ldi	r26, 0x00	; 0
    191e:	b0 e4       	ldi	r27, 0x40	; 64
    1920:	80 83       	st	Z, r24
    1922:	91 83       	std	Z+1, r25	; 0x01
    1924:	a2 83       	std	Z+2, r26	; 0x02
    1926:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1928:	8e 01       	movw	r16, r28
    192a:	01 5c       	subi	r16, 0xC1	; 193
    192c:	1f 4f       	sbci	r17, 0xFF	; 255
    192e:	fe 01       	movw	r30, r28
    1930:	ed 5b       	subi	r30, 0xBD	; 189
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4a ef       	ldi	r20, 0xFA	; 250
    1942:	54 e4       	ldi	r21, 0x44	; 68
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	f8 01       	movw	r30, r16
    194e:	80 83       	st	Z, r24
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	a2 83       	std	Z+2, r26	; 0x02
    1954:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1956:	fe 01       	movw	r30, r28
    1958:	ff 96       	adiw	r30, 0x3f	; 63
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e8       	ldi	r20, 0x80	; 128
    1968:	5f e3       	ldi	r21, 0x3F	; 63
    196a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    196e:	88 23       	and	r24, r24
    1970:	2c f4       	brge	.+10     	; 0x197c <CLCD_voidInit+0x428>
		__ticks = 1;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9e af       	std	Y+62, r25	; 0x3e
    1978:	8d af       	std	Y+61, r24	; 0x3d
    197a:	46 c0       	rjmp	.+140    	; 0x1a08 <CLCD_voidInit+0x4b4>
	else if (__tmp > 65535)
    197c:	fe 01       	movw	r30, r28
    197e:	ff 96       	adiw	r30, 0x3f	; 63
    1980:	60 81       	ld	r22, Z
    1982:	71 81       	ldd	r23, Z+1	; 0x01
    1984:	82 81       	ldd	r24, Z+2	; 0x02
    1986:	93 81       	ldd	r25, Z+3	; 0x03
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	3f ef       	ldi	r19, 0xFF	; 255
    198c:	4f e7       	ldi	r20, 0x7F	; 127
    198e:	57 e4       	ldi	r21, 0x47	; 71
    1990:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1994:	18 16       	cp	r1, r24
    1996:	64 f5       	brge	.+88     	; 0x19f0 <CLCD_voidInit+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1998:	fe 01       	movw	r30, r28
    199a:	ed 5b       	subi	r30, 0xBD	; 189
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	60 81       	ld	r22, Z
    19a0:	71 81       	ldd	r23, Z+1	; 0x01
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	93 81       	ldd	r25, Z+3	; 0x03
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e2       	ldi	r20, 0x20	; 32
    19ac:	51 e4       	ldi	r21, 0x41	; 65
    19ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9e af       	std	Y+62, r25	; 0x3e
    19c4:	8d af       	std	Y+61, r24	; 0x3d
    19c6:	0f c0       	rjmp	.+30     	; 0x19e6 <CLCD_voidInit+0x492>
    19c8:	88 ec       	ldi	r24, 0xC8	; 200
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	9c af       	std	Y+60, r25	; 0x3c
    19ce:	8b af       	std	Y+59, r24	; 0x3b
    19d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    19d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <CLCD_voidInit+0x480>
    19d8:	9c af       	std	Y+60, r25	; 0x3c
    19da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    19de:	9e ad       	ldd	r25, Y+62	; 0x3e
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	9e af       	std	Y+62, r25	; 0x3e
    19e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    19e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	69 f7       	brne	.-38     	; 0x19c8 <CLCD_voidInit+0x474>
    19ee:	16 c0       	rjmp	.+44     	; 0x1a1c <CLCD_voidInit+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f0:	fe 01       	movw	r30, r28
    19f2:	ff 96       	adiw	r30, 0x3f	; 63
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e af       	std	Y+62, r25	; 0x3e
    1a06:	8d af       	std	Y+61, r24	; 0x3d
    1a08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a0c:	9a af       	std	Y+58, r25	; 0x3a
    1a0e:	89 af       	std	Y+57, r24	; 0x39
    1a10:	89 ad       	ldd	r24, Y+57	; 0x39
    1a12:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <CLCD_voidInit+0x4c0>
    1a18:	9a af       	std	Y+58, r25	; 0x3a
    1a1a:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	62 e0       	ldi	r22, 0x02	; 2
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

	switch(Copy_u8Function)
    1a26:	fe 01       	movw	r30, r28
    1a28:	ed 59       	subi	r30, 0x9D	; 157
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	80 81       	ld	r24, Z
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	a9 96       	adiw	r28, 0x29	; 41
    1a34:	3f af       	std	Y+63, r19	; 0x3f
    1a36:	2e af       	std	Y+62, r18	; 0x3e
    1a38:	a9 97       	sbiw	r28, 0x29	; 41
    1a3a:	a9 96       	adiw	r28, 0x29	; 41
    1a3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a40:	a9 97       	sbiw	r28, 0x29	; 41
    1a42:	84 33       	cpi	r24, 0x34	; 52
    1a44:	91 05       	cpc	r25, r1
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <CLCD_voidInit+0x4f6>
    1a48:	b5 c1       	rjmp	.+874    	; 0x1db4 <CLCD_voidInit+0x860>
    1a4a:	a9 96       	adiw	r28, 0x29	; 41
    1a4c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a4e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a50:	a9 97       	sbiw	r28, 0x29	; 41
    1a52:	e5 33       	cpi	r30, 0x35	; 53
    1a54:	f1 05       	cpc	r31, r1
    1a56:	4c f4       	brge	.+18     	; 0x1a6a <CLCD_voidInit+0x516>
    1a58:	a9 96       	adiw	r28, 0x29	; 41
    1a5a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a5c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a5e:	a9 97       	sbiw	r28, 0x29	; 41
    1a60:	20 33       	cpi	r18, 0x30	; 48
    1a62:	31 05       	cpc	r19, r1
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <CLCD_voidInit+0x514>
    1a66:	1f c1       	rjmp	.+574    	; 0x1ca6 <CLCD_voidInit+0x752>
    1a68:	2b c2       	rjmp	.+1110   	; 0x1ec0 <CLCD_voidInit+0x96c>
    1a6a:	a9 96       	adiw	r28, 0x29	; 41
    1a6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a70:	a9 97       	sbiw	r28, 0x29	; 41
    1a72:	88 33       	cpi	r24, 0x38	; 56
    1a74:	91 05       	cpc	r25, r1
    1a76:	49 f0       	breq	.+18     	; 0x1a8a <CLCD_voidInit+0x536>
    1a78:	a9 96       	adiw	r28, 0x29	; 41
    1a7a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a7c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a7e:	a9 97       	sbiw	r28, 0x29	; 41
    1a80:	ec 33       	cpi	r30, 0x3C	; 60
    1a82:	f1 05       	cpc	r31, r1
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <CLCD_voidInit+0x534>
    1a86:	88 c0       	rjmp	.+272    	; 0x1b98 <CLCD_voidInit+0x644>
    1a88:	1b c2       	rjmp	.+1078   	; 0x1ec0 <CLCD_voidInit+0x96c>
    {
		case CLCD_2Lines_5x8Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	67 e0       	ldi	r22, 0x07	; 7
    1a8e:	41 e0       	ldi	r20, 0x01	; 1
    1a90:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	66 e0       	ldi	r22, 0x06	; 6
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1a9e:	82 e0       	ldi	r24, 0x02	; 2
    1aa0:	62 e0       	ldi	r22, 0x02	; 2
    1aa2:	41 e0       	ldi	r20, 0x01	; 1
    1aa4:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	b0 e4       	ldi	r27, 0x40	; 64
    1ab0:	8d ab       	std	Y+53, r24	; 0x35
    1ab2:	9e ab       	std	Y+54, r25	; 0x36
    1ab4:	af ab       	std	Y+55, r26	; 0x37
    1ab6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aba:	7e a9       	ldd	r23, Y+54	; 0x36
    1abc:	8f a9       	ldd	r24, Y+55	; 0x37
    1abe:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	4a ef       	ldi	r20, 0xFA	; 250
    1ac6:	54 e4       	ldi	r21, 0x44	; 68
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	89 ab       	std	Y+49, r24	; 0x31
    1ad2:	9a ab       	std	Y+50, r25	; 0x32
    1ad4:	ab ab       	std	Y+51, r26	; 0x33
    1ad6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ad8:	69 a9       	ldd	r22, Y+49	; 0x31
    1ada:	7a a9       	ldd	r23, Y+50	; 0x32
    1adc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ade:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e8       	ldi	r20, 0x80	; 128
    1ae6:	5f e3       	ldi	r21, 0x3F	; 63
    1ae8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aec:	88 23       	and	r24, r24
    1aee:	2c f4       	brge	.+10     	; 0x1afa <CLCD_voidInit+0x5a6>
		__ticks = 1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	98 ab       	std	Y+48, r25	; 0x30
    1af6:	8f a7       	std	Y+47, r24	; 0x2f
    1af8:	3f c0       	rjmp	.+126    	; 0x1b78 <CLCD_voidInit+0x624>
	else if (__tmp > 65535)
    1afa:	69 a9       	ldd	r22, Y+49	; 0x31
    1afc:	7a a9       	ldd	r23, Y+50	; 0x32
    1afe:	8b a9       	ldd	r24, Y+51	; 0x33
    1b00:	9c a9       	ldd	r25, Y+52	; 0x34
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	3f ef       	ldi	r19, 0xFF	; 255
    1b06:	4f e7       	ldi	r20, 0x7F	; 127
    1b08:	57 e4       	ldi	r21, 0x47	; 71
    1b0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0e:	18 16       	cp	r1, r24
    1b10:	4c f5       	brge	.+82     	; 0x1b64 <CLCD_voidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b12:	6d a9       	ldd	r22, Y+53	; 0x35
    1b14:	7e a9       	ldd	r23, Y+54	; 0x36
    1b16:	8f a9       	ldd	r24, Y+55	; 0x37
    1b18:	98 ad       	ldd	r25, Y+56	; 0x38
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e2       	ldi	r20, 0x20	; 32
    1b20:	51 e4       	ldi	r21, 0x41	; 65
    1b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	cd 01       	movw	r24, r26
    1b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	98 ab       	std	Y+48, r25	; 0x30
    1b38:	8f a7       	std	Y+47, r24	; 0x2f
    1b3a:	0f c0       	rjmp	.+30     	; 0x1b5a <CLCD_voidInit+0x606>
    1b3c:	88 ec       	ldi	r24, 0xC8	; 200
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	9e a7       	std	Y+46, r25	; 0x2e
    1b42:	8d a7       	std	Y+45, r24	; 0x2d
    1b44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b46:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <CLCD_voidInit+0x5f4>
    1b4c:	9e a7       	std	Y+46, r25	; 0x2e
    1b4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b52:	98 a9       	ldd	r25, Y+48	; 0x30
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	98 ab       	std	Y+48, r25	; 0x30
    1b58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	69 f7       	brne	.-38     	; 0x1b3c <CLCD_voidInit+0x5e8>
    1b62:	14 c0       	rjmp	.+40     	; 0x1b8c <CLCD_voidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b64:	69 a9       	ldd	r22, Y+49	; 0x31
    1b66:	7a a9       	ldd	r23, Y+50	; 0x32
    1b68:	8b a9       	ldd	r24, Y+51	; 0x33
    1b6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	98 ab       	std	Y+48, r25	; 0x30
    1b76:	8f a7       	std	Y+47, r24	; 0x2f
    1b78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b7c:	9c a7       	std	Y+44, r25	; 0x2c
    1b7e:	8b a7       	std	Y+43, r24	; 0x2b
    1b80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <CLCD_voidInit+0x630>
    1b88:	9c a7       	std	Y+44, r25	; 0x2c
    1b8a:	8b a7       	std	Y+43, r24	; 0x2b
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1b8c:	82 e0       	ldi	r24, 0x02	; 2
    1b8e:	62 e0       	ldi	r22, 0x02	; 2
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    1b96:	94 c1       	rjmp	.+808    	; 0x1ec0 <CLCD_voidInit+0x96c>
            break;
        case CLCD_2Lines_5x11Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	67 e0       	ldi	r22, 0x07	; 7
    1b9c:	41 e0       	ldi	r20, 0x01	; 1
    1b9e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	66 e0       	ldi	r22, 0x06	; 6
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	62 e0       	ldi	r22, 0x02	; 2
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	a0 e0       	ldi	r26, 0x00	; 0
    1bbc:	b0 e4       	ldi	r27, 0x40	; 64
    1bbe:	8f a3       	std	Y+39, r24	; 0x27
    1bc0:	98 a7       	std	Y+40, r25	; 0x28
    1bc2:	a9 a7       	std	Y+41, r26	; 0x29
    1bc4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc6:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bca:	89 a5       	ldd	r24, Y+41	; 0x29
    1bcc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	4a ef       	ldi	r20, 0xFA	; 250
    1bd4:	54 e4       	ldi	r21, 0x44	; 68
    1bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	8b a3       	std	Y+35, r24	; 0x23
    1be0:	9c a3       	std	Y+36, r25	; 0x24
    1be2:	ad a3       	std	Y+37, r26	; 0x25
    1be4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1be6:	6b a1       	ldd	r22, Y+35	; 0x23
    1be8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bea:	8d a1       	ldd	r24, Y+37	; 0x25
    1bec:	9e a1       	ldd	r25, Y+38	; 0x26
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e8       	ldi	r20, 0x80	; 128
    1bf4:	5f e3       	ldi	r21, 0x3F	; 63
    1bf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfa:	88 23       	and	r24, r24
    1bfc:	2c f4       	brge	.+10     	; 0x1c08 <CLCD_voidInit+0x6b4>
		__ticks = 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	9a a3       	std	Y+34, r25	; 0x22
    1c04:	89 a3       	std	Y+33, r24	; 0x21
    1c06:	3f c0       	rjmp	.+126    	; 0x1c86 <CLCD_voidInit+0x732>
	else if (__tmp > 65535)
    1c08:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	3f ef       	ldi	r19, 0xFF	; 255
    1c14:	4f e7       	ldi	r20, 0x7F	; 127
    1c16:	57 e4       	ldi	r21, 0x47	; 71
    1c18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1c:	18 16       	cp	r1, r24
    1c1e:	4c f5       	brge	.+82     	; 0x1c72 <CLCD_voidInit+0x71e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c20:	6f a1       	ldd	r22, Y+39	; 0x27
    1c22:	78 a5       	ldd	r23, Y+40	; 0x28
    1c24:	89 a5       	ldd	r24, Y+41	; 0x29
    1c26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e2       	ldi	r20, 0x20	; 32
    1c2e:	51 e4       	ldi	r21, 0x41	; 65
    1c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	bc 01       	movw	r22, r24
    1c3a:	cd 01       	movw	r24, r26
    1c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9a a3       	std	Y+34, r25	; 0x22
    1c46:	89 a3       	std	Y+33, r24	; 0x21
    1c48:	0f c0       	rjmp	.+30     	; 0x1c68 <CLCD_voidInit+0x714>
    1c4a:	88 ec       	ldi	r24, 0xC8	; 200
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	98 a3       	std	Y+32, r25	; 0x20
    1c50:	8f 8f       	std	Y+31, r24	; 0x1f
    1c52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c54:	98 a1       	ldd	r25, Y+32	; 0x20
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <CLCD_voidInit+0x702>
    1c5a:	98 a3       	std	Y+32, r25	; 0x20
    1c5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c60:	9a a1       	ldd	r25, Y+34	; 0x22
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	9a a3       	std	Y+34, r25	; 0x22
    1c66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c68:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	69 f7       	brne	.-38     	; 0x1c4a <CLCD_voidInit+0x6f6>
    1c70:	14 c0       	rjmp	.+40     	; 0x1c9a <CLCD_voidInit+0x746>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c72:	6b a1       	ldd	r22, Y+35	; 0x23
    1c74:	7c a1       	ldd	r23, Y+36	; 0x24
    1c76:	8d a1       	ldd	r24, Y+37	; 0x25
    1c78:	9e a1       	ldd	r25, Y+38	; 0x26
    1c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9a a3       	std	Y+34, r25	; 0x22
    1c84:	89 a3       	std	Y+33, r24	; 0x21
    1c86:	89 a1       	ldd	r24, Y+33	; 0x21
    1c88:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <CLCD_voidInit+0x73e>
    1c96:	9e 8f       	std	Y+30, r25	; 0x1e
    1c98:	8d 8f       	std	Y+29, r24	; 0x1d
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1c9a:	82 e0       	ldi	r24, 0x02	; 2
    1c9c:	62 e0       	ldi	r22, 0x02	; 2
    1c9e:	40 e0       	ldi	r20, 0x00	; 0
    1ca0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    1ca4:	0d c1       	rjmp	.+538    	; 0x1ec0 <CLCD_voidInit+0x96c>
            break;
        case CLCD_1Lines_5x8Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	67 e0       	ldi	r22, 0x07	; 7
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	66 e0       	ldi	r22, 0x06	; 6
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	62 e0       	ldi	r22, 0x02	; 2
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a0 e0       	ldi	r26, 0x00	; 0
    1cca:	b0 e4       	ldi	r27, 0x40	; 64
    1ccc:	89 8f       	std	Y+25, r24	; 0x19
    1cce:	9a 8f       	std	Y+26, r25	; 0x1a
    1cd0:	ab 8f       	std	Y+27, r26	; 0x1b
    1cd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	4a ef       	ldi	r20, 0xFA	; 250
    1ce2:	54 e4       	ldi	r21, 0x44	; 68
    1ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	8d 8b       	std	Y+21, r24	; 0x15
    1cee:	9e 8b       	std	Y+22, r25	; 0x16
    1cf0:	af 8b       	std	Y+23, r26	; 0x17
    1cf2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e8       	ldi	r20, 0x80	; 128
    1d02:	5f e3       	ldi	r21, 0x3F	; 63
    1d04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d08:	88 23       	and	r24, r24
    1d0a:	2c f4       	brge	.+10     	; 0x1d16 <CLCD_voidInit+0x7c2>
		__ticks = 1;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9c 8b       	std	Y+20, r25	; 0x14
    1d12:	8b 8b       	std	Y+19, r24	; 0x13
    1d14:	3f c0       	rjmp	.+126    	; 0x1d94 <CLCD_voidInit+0x840>
	else if (__tmp > 65535)
    1d16:	6d 89       	ldd	r22, Y+21	; 0x15
    1d18:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	3f ef       	ldi	r19, 0xFF	; 255
    1d22:	4f e7       	ldi	r20, 0x7F	; 127
    1d24:	57 e4       	ldi	r21, 0x47	; 71
    1d26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2a:	18 16       	cp	r1, r24
    1d2c:	4c f5       	brge	.+82     	; 0x1d80 <CLCD_voidInit+0x82c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e2       	ldi	r20, 0x20	; 32
    1d3c:	51 e4       	ldi	r21, 0x41	; 65
    1d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	9c 8b       	std	Y+20, r25	; 0x14
    1d54:	8b 8b       	std	Y+19, r24	; 0x13
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <CLCD_voidInit+0x822>
    1d58:	88 ec       	ldi	r24, 0xC8	; 200
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9a 8b       	std	Y+18, r25	; 0x12
    1d5e:	89 8b       	std	Y+17, r24	; 0x11
    1d60:	89 89       	ldd	r24, Y+17	; 0x11
    1d62:	9a 89       	ldd	r25, Y+18	; 0x12
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <CLCD_voidInit+0x810>
    1d68:	9a 8b       	std	Y+18, r25	; 0x12
    1d6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	9c 8b       	std	Y+20, r25	; 0x14
    1d74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d76:	8b 89       	ldd	r24, Y+19	; 0x13
    1d78:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	69 f7       	brne	.-38     	; 0x1d58 <CLCD_voidInit+0x804>
    1d7e:	14 c0       	rjmp	.+40     	; 0x1da8 <CLCD_voidInit+0x854>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d80:	6d 89       	ldd	r22, Y+21	; 0x15
    1d82:	7e 89       	ldd	r23, Y+22	; 0x16
    1d84:	8f 89       	ldd	r24, Y+23	; 0x17
    1d86:	98 8d       	ldd	r25, Y+24	; 0x18
    1d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9c 8b       	std	Y+20, r25	; 0x14
    1d92:	8b 8b       	std	Y+19, r24	; 0x13
    1d94:	8b 89       	ldd	r24, Y+19	; 0x13
    1d96:	9c 89       	ldd	r25, Y+20	; 0x14
    1d98:	98 8b       	std	Y+16, r25	; 0x10
    1d9a:	8f 87       	std	Y+15, r24	; 0x0f
    1d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9e:	98 89       	ldd	r25, Y+16	; 0x10
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <CLCD_voidInit+0x84c>
    1da4:	98 8b       	std	Y+16, r25	; 0x10
    1da6:	8f 87       	std	Y+15, r24	; 0x0f
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	62 e0       	ldi	r22, 0x02	; 2
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    1db2:	86 c0       	rjmp	.+268    	; 0x1ec0 <CLCD_voidInit+0x96c>
            break;
        case CLCD_1Lines_5x11Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	67 e0       	ldi	r22, 0x07	; 7
    1db8:	40 e0       	ldi	r20, 0x00	; 0
    1dba:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	66 e0       	ldi	r22, 0x06	; 6
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	62 e0       	ldi	r22, 0x02	; 2
    1dcc:	41 e0       	ldi	r20, 0x01	; 1
    1dce:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e0       	ldi	r26, 0x00	; 0
    1dd8:	b0 e4       	ldi	r27, 0x40	; 64
    1dda:	8b 87       	std	Y+11, r24	; 0x0b
    1ddc:	9c 87       	std	Y+12, r25	; 0x0c
    1dde:	ad 87       	std	Y+13, r26	; 0x0d
    1de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4a ef       	ldi	r20, 0xFA	; 250
    1df0:	54 e4       	ldi	r21, 0x44	; 68
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8f 83       	std	Y+7, r24	; 0x07
    1dfc:	98 87       	std	Y+8, r25	; 0x08
    1dfe:	a9 87       	std	Y+9, r26	; 0x09
    1e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <CLCD_voidInit+0x8d0>
		__ticks = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	3f c0       	rjmp	.+126    	; 0x1ea2 <CLCD_voidInit+0x94e>
	else if (__tmp > 65535)
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	4c f5       	brge	.+82     	; 0x1e8e <CLCD_voidInit+0x93a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	51 e4       	ldi	r21, 0x41	; 65
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <CLCD_voidInit+0x930>
    1e66:	88 ec       	ldi	r24, 0xC8	; 200
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9c 83       	std	Y+4, r25	; 0x04
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <CLCD_voidInit+0x91e>
    1e76:	9c 83       	std	Y+4, r25	; 0x04
    1e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	69 f7       	brne	.-38     	; 0x1e66 <CLCD_voidInit+0x912>
    1e8c:	14 c0       	rjmp	.+40     	; 0x1eb6 <CLCD_voidInit+0x962>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <CLCD_voidInit+0x95a>
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1eb6:	82 e0       	ldi	r24, 0x02	; 2
    1eb8:	62 e0       	ldi	r22, 0x02	; 2
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DIO_u8SetPinValue>
            break;

    }

	/*Display on off control: display enable, disable/enable cursor, no/ blink cursor*/
	switch(Copy_u8Display)
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	ec 59       	subi	r30, 0x9C	; 156
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	a7 96       	adiw	r28, 0x27	; 39
    1ece:	3f af       	std	Y+63, r19	; 0x3f
    1ed0:	2e af       	std	Y+62, r18	; 0x3e
    1ed2:	a7 97       	sbiw	r28, 0x27	; 39
    1ed4:	a7 96       	adiw	r28, 0x27	; 39
    1ed6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ed8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eda:	a7 97       	sbiw	r28, 0x27	; 39
    1edc:	8e 30       	cpi	r24, 0x0E	; 14
    1ede:	91 05       	cpc	r25, r1
    1ee0:	91 f0       	breq	.+36     	; 0x1f06 <CLCD_voidInit+0x9b2>
    1ee2:	a7 96       	adiw	r28, 0x27	; 39
    1ee4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ee6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ee8:	a7 97       	sbiw	r28, 0x27	; 39
    1eea:	ef 30       	cpi	r30, 0x0F	; 15
    1eec:	f1 05       	cpc	r31, r1
    1eee:	79 f0       	breq	.+30     	; 0x1f0e <CLCD_voidInit+0x9ba>
    1ef0:	a7 96       	adiw	r28, 0x27	; 39
    1ef2:	2e ad       	ldd	r18, Y+62	; 0x3e
    1ef4:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ef6:	a7 97       	sbiw	r28, 0x27	; 39
    1ef8:	2c 30       	cpi	r18, 0x0C	; 12
    1efa:	31 05       	cpc	r19, r1
    1efc:	59 f4       	brne	.+22     	; 0x1f14 <CLCD_voidInit+0x9c0>
    {

        case CLCD_Curser_OFF:
            CLCD_voidSendCommand(CLCD_Curser_OFF);
    1efe:	8c e0       	ldi	r24, 0x0C	; 12
    1f00:	0e 94 42 07 	call	0xe84	; 0xe84 <CLCD_voidSendCommand>
    1f04:	07 c0       	rjmp	.+14     	; 0x1f14 <CLCD_voidInit+0x9c0>
            break;
        case CLCD_Curser_ON_NoBlinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_NoBlinking);
    1f06:	8e e0       	ldi	r24, 0x0E	; 14
    1f08:	0e 94 42 07 	call	0xe84	; 0xe84 <CLCD_voidSendCommand>
    1f0c:	03 c0       	rjmp	.+6      	; 0x1f14 <CLCD_voidInit+0x9c0>
            break;
        case CLCD_Curser_ON_Blinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_Blinking);
    1f0e:	8f e0       	ldi	r24, 0x0F	; 15
    1f10:	0e 94 42 07 	call	0xe84	; 0xe84 <CLCD_voidSendCommand>
            break;

    }

	/*Clear display*/
	CLCD_voidSendCommand(1);
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	0e 94 42 07 	call	0xe84	; 0xe84 <CLCD_voidSendCommand>

	#endif


}
    1f1a:	c8 59       	subi	r28, 0x98	; 152
    1f1c:	df 4f       	sbci	r29, 0xFF	; 255
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	08 95       	ret

00001f32 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <CLCD_voidSendString+0x6>
    1f38:	0f 92       	push	r0
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	9b 83       	std	Y+3, r25	; 0x03
    1f40:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    1f42:	19 82       	std	Y+1, r1	; 0x01
    1f44:	15 c0       	rjmp	.+42     	; 0x1f70 <CLCD_voidSendString+0x3e>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f50:	fc 01       	movw	r30, r24
    1f52:	e2 0f       	add	r30, r18
    1f54:	f3 1f       	adc	r31, r19
    1f56:	80 81       	ld	r24, Z
    1f58:	0e 94 f6 08 	call	0x11ec	; 0x11ec <CLCD_voidSendData>
		Local_u8Counter++;
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u8Counter==16)
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	80 31       	cpi	r24, 0x10	; 16
    1f66:	21 f4       	brne	.+8      	; 0x1f70 <CLCD_voidSendString+0x3e>
			CLCD_voidGoToXY(1,0);
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <CLCD_voidGoToXY>
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	e2 0f       	add	r30, r18
    1f7e:	f3 1f       	adc	r31, r19
    1f80:	80 81       	ld	r24, Z
    1f82:	88 23       	and	r24, r24
    1f84:	01 f7       	brne	.-64     	; 0x1f46 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
		if(Local_u8Counter==16)
			CLCD_voidGoToXY(1,0);
	}
}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <CLCD_voidGoToXY+0x6>
    1f98:	0f 92       	push	r0
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	8a 83       	std	Y+2, r24	; 0x02
    1fa0:	6b 83       	std	Y+3, r22	; 0x03
	/*Calculating the Address of the DDRAM by the coordinates X and Y*/
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	88 23       	and	r24, r24
    1fa6:	19 f4       	brne	.+6      	; 0x1fae <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at the first line*/
		Local_u8Address=Copy_u8YPos;
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	06 c0       	rjmp	.+12     	; 0x1fba <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	81 30       	cpi	r24, 0x01	; 1
    1fb2:	19 f4       	brne	.+6      	; 0x1fba <CLCD_voidGoToXY+0x28>
	{
		/*Location is at the second line*/
		Local_u8Address=Copy_u8YPos+0x40;
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	80 5c       	subi	r24, 0xC0	; 192
    1fb8:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Send the DDRAM Address to point on the location on the screen you want to write on it with setting bit 7*/
	CLCD_voidSendCommand(Local_u8Address+128);
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	80 58       	subi	r24, 0x80	; 128
    1fbe:	0e 94 42 07 	call	0xe84	; 0xe84 <CLCD_voidSendCommand>
}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8arr,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	27 97       	sbiw	r28, 0x07	; 7
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
    1fe6:	6d 83       	std	Y+5, r22	; 0x05
    1fe8:	4e 83       	std	Y+6, r20	; 0x06
    1fea:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Counter,Local_u8CGRAM_Address;

	/*Calculating the Address of the CGRAM whose block is 8 bytes*/
	Local_u8CGRAM_Address=Copy_u8PatternNumber*8;
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	88 0f       	add	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	89 83       	std	Y+1, r24	; 0x01

	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	80 5c       	subi	r24, 0xC0	; 192
    2004:	0e 94 42 07 	call	0xe84	; 0xe84 <CLCD_voidSendCommand>

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    2008:	1a 82       	std	Y+2, r1	; 0x02
    200a:	0e c0       	rjmp	.+28     	; 0x2028 <CLCD_voidWriteSpecialCharacter+0x5a>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	9c 81       	ldd	r25, Y+4	; 0x04
    2016:	fc 01       	movw	r30, r24
    2018:	e2 0f       	add	r30, r18
    201a:	f3 1f       	adc	r31, r19
    201c:	80 81       	ld	r24, Z
    201e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <CLCD_voidSendData>
	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	8f 5f       	subi	r24, 0xFF	; 255
    2026:	8a 83       	std	Y+2, r24	; 0x02
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	88 30       	cpi	r24, 0x08	; 8
    202c:	78 f3       	brcs	.-34     	; 0x200c <CLCD_voidWriteSpecialCharacter+0x3e>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
		}

	/*go back to the DDRAM to display the pattern in the selected position*/
		CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    202e:	8e 81       	ldd	r24, Y+6	; 0x06
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <CLCD_voidGoToXY>

	/*The DDRAM accessing the CGRAM by block to Displaying the pattern*/
		CLCD_voidSendData(Copy_u8PatternNumber);
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	0e 94 f6 08 	call	0x11ec	; 0x11ec <CLCD_voidSendData>
}
    203c:	27 96       	adiw	r28, 0x07	; 7
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
    204e:	0f 93       	push	r16
    2050:	1f 93       	push	r17
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	6b 97       	sbiw	r28, 0x1b	; 27
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	6c 8b       	std	Y+20, r22	; 0x14
    2068:	7d 8b       	std	Y+21, r23	; 0x15
    206a:	8e 8b       	std	Y+22, r24	; 0x16
    206c:	9f 8b       	std	Y+23, r25	; 0x17
	/*define local counter and local itrator and temp variable for the swapping*/
	u8 i,temp;
	u8 Local_u8Counter,arr[16]={48};
    206e:	80 e1       	ldi	r24, 0x10	; 16
    2070:	fe 01       	movw	r30, r28
    2072:	34 96       	adiw	r30, 0x04	; 4
    2074:	df 01       	movw	r26, r30
    2076:	28 2f       	mov	r18, r24
    2078:	1d 92       	st	X+, r1
    207a:	2a 95       	dec	r18
    207c:	e9 f7       	brne	.-6      	; 0x2078 <CLCD_voidWriteNumber+0x2a>
    207e:	80 e3       	ldi	r24, 0x30	; 48
    2080:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8Counter=0;
    2082:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u32Number==0)
    2084:	8c 89       	ldd	r24, Y+20	; 0x14
    2086:	9d 89       	ldd	r25, Y+21	; 0x15
    2088:	ae 89       	ldd	r26, Y+22	; 0x16
    208a:	bf 89       	ldd	r27, Y+23	; 0x17
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	a1 05       	cpc	r26, r1
    2090:	b1 05       	cpc	r27, r1
    2092:	91 f5       	brne	.+100    	; 0x20f8 <CLCD_voidWriteNumber+0xaa>
		CLCD_voidSendData('0');
    2094:	80 e3       	ldi	r24, 0x30	; 48
    2096:	0e 94 f6 08 	call	0x11ec	; 0x11ec <CLCD_voidSendData>
    209a:	99 c0       	rjmp	.+306    	; 0x21ce <CLCD_voidWriteNumber+0x180>
	else{
	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	08 2f       	mov	r16, r24
    20a0:	10 e0       	ldi	r17, 0x00	; 0
    20a2:	8c 89       	ldd	r24, Y+20	; 0x14
    20a4:	9d 89       	ldd	r25, Y+21	; 0x15
    20a6:	ae 89       	ldd	r26, Y+22	; 0x16
    20a8:	bf 89       	ldd	r27, Y+23	; 0x17
    20aa:	2a e0       	ldi	r18, 0x0A	; 10
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	50 e0       	ldi	r21, 0x00	; 0
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__udivmodsi4>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	28 2f       	mov	r18, r24
    20c0:	20 5d       	subi	r18, 0xD0	; 208
    20c2:	ce 01       	movw	r24, r28
    20c4:	04 96       	adiw	r24, 0x04	; 4
    20c6:	fc 01       	movw	r30, r24
    20c8:	e0 0f       	add	r30, r16
    20ca:	f1 1f       	adc	r31, r17
    20cc:	20 83       	st	Z, r18
		Copy_u32Number/=10;
    20ce:	8c 89       	ldd	r24, Y+20	; 0x14
    20d0:	9d 89       	ldd	r25, Y+21	; 0x15
    20d2:	ae 89       	ldd	r26, Y+22	; 0x16
    20d4:	bf 89       	ldd	r27, Y+23	; 0x17
    20d6:	2a e0       	ldi	r18, 0x0A	; 10
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	50 e0       	ldi	r21, 0x00	; 0
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__udivmodsi4>
    20e6:	da 01       	movw	r26, r20
    20e8:	c9 01       	movw	r24, r18
    20ea:	8c 8b       	std	Y+20, r24	; 0x14
    20ec:	9d 8b       	std	Y+21, r25	; 0x15
    20ee:	ae 8b       	std	Y+22, r26	; 0x16
    20f0:	bf 8b       	std	Y+23, r27	; 0x17
		Local_u8Counter++;
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	8f 5f       	subi	r24, 0xFF	; 255
    20f6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u32Number==0)
		CLCD_voidSendData('0');
	else{
	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
    20f8:	8c 89       	ldd	r24, Y+20	; 0x14
    20fa:	9d 89       	ldd	r25, Y+21	; 0x15
    20fc:	ae 89       	ldd	r26, Y+22	; 0x16
    20fe:	bf 89       	ldd	r27, Y+23	; 0x17
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	a1 05       	cpc	r26, r1
    2104:	b1 05       	cpc	r27, r1
    2106:	51 f6       	brne	.-108    	; 0x209c <CLCD_voidWriteNumber+0x4e>
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
		Copy_u32Number/=10;
		Local_u8Counter++;
	}
	arr[Local_u8Counter]='\0';
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	ce 01       	movw	r24, r28
    2110:	04 96       	adiw	r24, 0x04	; 4
    2112:	fc 01       	movw	r30, r24
    2114:	e2 0f       	add	r30, r18
    2116:	f3 1f       	adc	r31, r19
    2118:	10 82       	st	Z, r1

	/*Loop to reverse the array*/
	Local_u8Counter--;
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	81 50       	subi	r24, 0x01	; 1
    211e:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    2120:	1b 82       	std	Y+3, r1	; 0x03
    2122:	33 c0       	rjmp	.+102    	; 0x218a <CLCD_voidWriteNumber+0x13c>
	{
		temp=arr[i];
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	ce 01       	movw	r24, r28
    212c:	04 96       	adiw	r24, 0x04	; 4
    212e:	fc 01       	movw	r30, r24
    2130:	e2 0f       	add	r30, r18
    2132:	f3 1f       	adc	r31, r19
    2134:	80 81       	ld	r24, Z
    2136:	8a 83       	std	Y+2, r24	; 0x02
		arr[i]=arr[Local_u8Counter-i];
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	48 2f       	mov	r20, r24
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	28 1b       	sub	r18, r24
    214c:	39 0b       	sbc	r19, r25
    214e:	ce 01       	movw	r24, r28
    2150:	04 96       	adiw	r24, 0x04	; 4
    2152:	fc 01       	movw	r30, r24
    2154:	e2 0f       	add	r30, r18
    2156:	f3 1f       	adc	r31, r19
    2158:	20 81       	ld	r18, Z
    215a:	ce 01       	movw	r24, r28
    215c:	04 96       	adiw	r24, 0x04	; 4
    215e:	fc 01       	movw	r30, r24
    2160:	e4 0f       	add	r30, r20
    2162:	f5 1f       	adc	r31, r21
    2164:	20 83       	st	Z, r18
		arr[Local_u8Counter-i]=temp;
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	28 1b       	sub	r18, r24
    2174:	39 0b       	sbc	r19, r25
    2176:	ce 01       	movw	r24, r28
    2178:	04 96       	adiw	r24, 0x04	; 4
    217a:	fc 01       	movw	r30, r24
    217c:	e2 0f       	add	r30, r18
    217e:	f3 1f       	adc	r31, r19
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	80 83       	st	Z, r24
	}
	arr[Local_u8Counter]='\0';

	/*Loop to reverse the array*/
	Local_u8Counter--;
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
    2186:	8f 5f       	subi	r24, 0xFF	; 255
    2188:	8b 83       	std	Y+3, r24	; 0x03
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	a8 2f       	mov	r26, r24
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	b9 8f       	std	Y+25, r27	; 0x19
    2192:	a8 8f       	std	Y+24, r26	; 0x18
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	01 96       	adiw	r24, 0x01	; 1
    219c:	9b 8f       	std	Y+27, r25	; 0x1b
    219e:	8a 8f       	std	Y+26, r24	; 0x1a
    21a0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    21a2:	3b 8d       	ldd	r19, Y+27	; 0x1b
    21a4:	33 23       	and	r19, r19
    21a6:	2c f4       	brge	.+10     	; 0x21b2 <CLCD_voidWriteNumber+0x164>
    21a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21ac:	01 96       	adiw	r24, 0x01	; 1
    21ae:	9b 8f       	std	Y+27, r25	; 0x1b
    21b0:	8a 8f       	std	Y+26, r24	; 0x1a
    21b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21b6:	95 95       	asr	r25
    21b8:	87 95       	ror	r24
    21ba:	a8 8d       	ldd	r26, Y+24	; 0x18
    21bc:	b9 8d       	ldd	r27, Y+25	; 0x19
    21be:	a8 17       	cp	r26, r24
    21c0:	b9 07       	cpc	r27, r25
    21c2:	0c f4       	brge	.+2      	; 0x21c6 <CLCD_voidWriteNumber+0x178>
    21c4:	af cf       	rjmp	.-162    	; 0x2124 <CLCD_voidWriteNumber+0xd6>
		arr[i]=arr[Local_u8Counter-i];
		arr[Local_u8Counter-i]=temp;
	}

	/*displaying the array on the screen*/
	CLCD_voidSendString(arr);
    21c6:	ce 01       	movw	r24, r28
    21c8:	04 96       	adiw	r24, 0x04	; 4
    21ca:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <CLCD_voidSendString>
	}
}
    21ce:	6b 96       	adiw	r28, 0x1b	; 27
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	1f 91       	pop	r17
    21e0:	0f 91       	pop	r16
    21e2:	08 95       	ret

000021e4 <PORT_voidInit>:




void PORT_voidInit(void)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
	/*SET THE PORT Direction*/
	DDRA=PORTA_DIR;
    21ec:	ea e3       	ldi	r30, 0x3A	; 58
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 ef       	ldi	r24, 0xF0	; 240
    21f2:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    21f4:	e7 e3       	ldi	r30, 0x37	; 55
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	8f ef       	ldi	r24, 0xFF	; 255
    21fa:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    21fc:	e4 e3       	ldi	r30, 0x34	; 52
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	87 e0       	ldi	r24, 0x07	; 7
    2202:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    2204:	e1 e3       	ldi	r30, 0x31	; 49
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	10 82       	st	Z, r1

	/*SET THE PORT Value*/
	PORTA=PORTA_INT;
    220a:	eb e3       	ldi	r30, 0x3B	; 59
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	10 82       	st	Z, r1
	PORTB=PORTB_INT;
    2210:	e8 e3       	ldi	r30, 0x38	; 56
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	10 82       	st	Z, r1
	PORTC=PORTC_INT;
    2216:	e5 e3       	ldi	r30, 0x35	; 53
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	10 82       	st	Z, r1
	PORTD=PORTD_INT;
    221c:	e2 e3       	ldi	r30, 0x32	; 50
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	10 82       	st	Z, r1
}
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	28 97       	sbiw	r28, 0x08	; 8
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	8a 83       	std	Y+2, r24	; 0x02
    223e:	6b 83       	std	Y+3, r22	; 0x03
    2240:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2242:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	88 30       	cpi	r24, 0x08	; 8
    2248:	08 f0       	brcs	.+2      	; 0x224c <DIO_u8SetPinDirection+0x24>
    224a:	f4 c0       	rjmp	.+488    	; 0x2434 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    224c:	8c 81       	ldd	r24, Y+4	; 0x04
    224e:	88 23       	and	r24, r24
    2250:	09 f0       	breq	.+2      	; 0x2254 <DIO_u8SetPinDirection+0x2c>
    2252:	77 c0       	rjmp	.+238    	; 0x2342 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	38 87       	std	Y+8, r19	; 0x08
    225c:	2f 83       	std	Y+7, r18	; 0x07
    225e:	8f 81       	ldd	r24, Y+7	; 0x07
    2260:	98 85       	ldd	r25, Y+8	; 0x08
    2262:	81 30       	cpi	r24, 0x01	; 1
    2264:	91 05       	cpc	r25, r1
    2266:	59 f1       	breq	.+86     	; 0x22be <DIO_u8SetPinDirection+0x96>
    2268:	2f 81       	ldd	r18, Y+7	; 0x07
    226a:	38 85       	ldd	r19, Y+8	; 0x08
    226c:	22 30       	cpi	r18, 0x02	; 2
    226e:	31 05       	cpc	r19, r1
    2270:	2c f4       	brge	.+10     	; 0x227c <DIO_u8SetPinDirection+0x54>
    2272:	8f 81       	ldd	r24, Y+7	; 0x07
    2274:	98 85       	ldd	r25, Y+8	; 0x08
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	69 f0       	breq	.+26     	; 0x2294 <DIO_u8SetPinDirection+0x6c>
    227a:	60 c0       	rjmp	.+192    	; 0x233c <DIO_u8SetPinDirection+0x114>
    227c:	2f 81       	ldd	r18, Y+7	; 0x07
    227e:	38 85       	ldd	r19, Y+8	; 0x08
    2280:	22 30       	cpi	r18, 0x02	; 2
    2282:	31 05       	cpc	r19, r1
    2284:	89 f1       	breq	.+98     	; 0x22e8 <DIO_u8SetPinDirection+0xc0>
    2286:	8f 81       	ldd	r24, Y+7	; 0x07
    2288:	98 85       	ldd	r25, Y+8	; 0x08
    228a:	83 30       	cpi	r24, 0x03	; 3
    228c:	91 05       	cpc	r25, r1
    228e:	09 f4       	brne	.+2      	; 0x2292 <DIO_u8SetPinDirection+0x6a>
    2290:	40 c0       	rjmp	.+128    	; 0x2312 <DIO_u8SetPinDirection+0xea>
    2292:	54 c0       	rjmp	.+168    	; 0x233c <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
    2294:	aa e3       	ldi	r26, 0x3A	; 58
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	ea e3       	ldi	r30, 0x3A	; 58
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	48 2f       	mov	r20, r24
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	02 2e       	mov	r0, r18
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <DIO_u8SetPinDirection+0x8a>
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	0a 94       	dec	r0
    22b4:	e2 f7       	brpl	.-8      	; 0x22ae <DIO_u8SetPinDirection+0x86>
    22b6:	80 95       	com	r24
    22b8:	84 23       	and	r24, r20
    22ba:	8c 93       	st	X, r24
    22bc:	bd c0       	rjmp	.+378    	; 0x2438 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
    22be:	a7 e3       	ldi	r26, 0x37	; 55
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e7 e3       	ldi	r30, 0x37	; 55
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	48 2f       	mov	r20, r24
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	02 2e       	mov	r0, r18
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <DIO_u8SetPinDirection+0xb4>
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	0a 94       	dec	r0
    22de:	e2 f7       	brpl	.-8      	; 0x22d8 <DIO_u8SetPinDirection+0xb0>
    22e0:	80 95       	com	r24
    22e2:	84 23       	and	r24, r20
    22e4:	8c 93       	st	X, r24
    22e6:	a8 c0       	rjmp	.+336    	; 0x2438 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
    22e8:	a4 e3       	ldi	r26, 0x34	; 52
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e4 e3       	ldi	r30, 0x34	; 52
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	48 2f       	mov	r20, r24
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	28 2f       	mov	r18, r24
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	02 2e       	mov	r0, r18
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <DIO_u8SetPinDirection+0xde>
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	0a 94       	dec	r0
    2308:	e2 f7       	brpl	.-8      	; 0x2302 <DIO_u8SetPinDirection+0xda>
    230a:	80 95       	com	r24
    230c:	84 23       	and	r24, r20
    230e:	8c 93       	st	X, r24
    2310:	93 c0       	rjmp	.+294    	; 0x2438 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
    2312:	a1 e3       	ldi	r26, 0x31	; 49
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e1 e3       	ldi	r30, 0x31	; 49
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	48 2f       	mov	r20, r24
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	02 2e       	mov	r0, r18
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <DIO_u8SetPinDirection+0x108>
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	0a 94       	dec	r0
    2332:	e2 f7       	brpl	.-8      	; 0x232c <DIO_u8SetPinDirection+0x104>
    2334:	80 95       	com	r24
    2336:	84 23       	and	r24, r20
    2338:	8c 93       	st	X, r24
    233a:	7e c0       	rjmp	.+252    	; 0x2438 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	7b c0       	rjmp	.+246    	; 0x2438 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    2342:	8c 81       	ldd	r24, Y+4	; 0x04
    2344:	81 30       	cpi	r24, 0x01	; 1
    2346:	09 f0       	breq	.+2      	; 0x234a <DIO_u8SetPinDirection+0x122>
    2348:	72 c0       	rjmp	.+228    	; 0x242e <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	3e 83       	std	Y+6, r19	; 0x06
    2352:	2d 83       	std	Y+5, r18	; 0x05
    2354:	8d 81       	ldd	r24, Y+5	; 0x05
    2356:	9e 81       	ldd	r25, Y+6	; 0x06
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	91 05       	cpc	r25, r1
    235c:	49 f1       	breq	.+82     	; 0x23b0 <DIO_u8SetPinDirection+0x188>
    235e:	2d 81       	ldd	r18, Y+5	; 0x05
    2360:	3e 81       	ldd	r19, Y+6	; 0x06
    2362:	22 30       	cpi	r18, 0x02	; 2
    2364:	31 05       	cpc	r19, r1
    2366:	2c f4       	brge	.+10     	; 0x2372 <DIO_u8SetPinDirection+0x14a>
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	9e 81       	ldd	r25, Y+6	; 0x06
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	61 f0       	breq	.+24     	; 0x2388 <DIO_u8SetPinDirection+0x160>
    2370:	5b c0       	rjmp	.+182    	; 0x2428 <DIO_u8SetPinDirection+0x200>
    2372:	2d 81       	ldd	r18, Y+5	; 0x05
    2374:	3e 81       	ldd	r19, Y+6	; 0x06
    2376:	22 30       	cpi	r18, 0x02	; 2
    2378:	31 05       	cpc	r19, r1
    237a:	71 f1       	breq	.+92     	; 0x23d8 <DIO_u8SetPinDirection+0x1b0>
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	9e 81       	ldd	r25, Y+6	; 0x06
    2380:	83 30       	cpi	r24, 0x03	; 3
    2382:	91 05       	cpc	r25, r1
    2384:	e9 f1       	breq	.+122    	; 0x2400 <DIO_u8SetPinDirection+0x1d8>
    2386:	50 c0       	rjmp	.+160    	; 0x2428 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
    2388:	aa e3       	ldi	r26, 0x3A	; 58
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	ea e3       	ldi	r30, 0x3A	; 58
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	48 2f       	mov	r20, r24
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	02 2e       	mov	r0, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <DIO_u8SetPinDirection+0x17e>
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	0a 94       	dec	r0
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <DIO_u8SetPinDirection+0x17a>
    23aa:	84 2b       	or	r24, r20
    23ac:	8c 93       	st	X, r24
    23ae:	44 c0       	rjmp	.+136    	; 0x2438 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
    23b0:	a7 e3       	ldi	r26, 0x37	; 55
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	e7 e3       	ldi	r30, 0x37	; 55
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	48 2f       	mov	r20, r24
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	28 2f       	mov	r18, r24
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	02 2e       	mov	r0, r18
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <DIO_u8SetPinDirection+0x1a6>
    23ca:	88 0f       	add	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	0a 94       	dec	r0
    23d0:	e2 f7       	brpl	.-8      	; 0x23ca <DIO_u8SetPinDirection+0x1a2>
    23d2:	84 2b       	or	r24, r20
    23d4:	8c 93       	st	X, r24
    23d6:	30 c0       	rjmp	.+96     	; 0x2438 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
    23d8:	a4 e3       	ldi	r26, 0x34	; 52
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e4 e3       	ldi	r30, 0x34	; 52
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	48 2f       	mov	r20, r24
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	02 2e       	mov	r0, r18
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <DIO_u8SetPinDirection+0x1ce>
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	0a 94       	dec	r0
    23f8:	e2 f7       	brpl	.-8      	; 0x23f2 <DIO_u8SetPinDirection+0x1ca>
    23fa:	84 2b       	or	r24, r20
    23fc:	8c 93       	st	X, r24
    23fe:	1c c0       	rjmp	.+56     	; 0x2438 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
    2400:	a1 e3       	ldi	r26, 0x31	; 49
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e1 e3       	ldi	r30, 0x31	; 49
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	48 2f       	mov	r20, r24
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	02 2e       	mov	r0, r18
    2418:	02 c0       	rjmp	.+4      	; 0x241e <DIO_u8SetPinDirection+0x1f6>
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	0a 94       	dec	r0
    2420:	e2 f7       	brpl	.-8      	; 0x241a <DIO_u8SetPinDirection+0x1f2>
    2422:	84 2b       	or	r24, r20
    2424:	8c 93       	st	X, r24
    2426:	08 c0       	rjmp	.+16     	; 0x2438 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	05 c0       	rjmp	.+10     	; 0x2438 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2438:	89 81       	ldd	r24, Y+1	; 0x01
}
    243a:	28 96       	adiw	r28, 0x08	; 8
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <DIO_u8SetPortDirection+0x6>
    2452:	00 d0       	rcall	.+0      	; 0x2454 <DIO_u8SetPortDirection+0x8>
    2454:	0f 92       	push	r0
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	8a 83       	std	Y+2, r24	; 0x02
    245c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    245e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	3d 83       	std	Y+5, r19	; 0x05
    2468:	2c 83       	std	Y+4, r18	; 0x04
    246a:	8c 81       	ldd	r24, Y+4	; 0x04
    246c:	9d 81       	ldd	r25, Y+5	; 0x05
    246e:	81 30       	cpi	r24, 0x01	; 1
    2470:	91 05       	cpc	r25, r1
    2472:	d1 f0       	breq	.+52     	; 0x24a8 <DIO_u8SetPortDirection+0x5c>
    2474:	2c 81       	ldd	r18, Y+4	; 0x04
    2476:	3d 81       	ldd	r19, Y+5	; 0x05
    2478:	22 30       	cpi	r18, 0x02	; 2
    247a:	31 05       	cpc	r19, r1
    247c:	2c f4       	brge	.+10     	; 0x2488 <DIO_u8SetPortDirection+0x3c>
    247e:	8c 81       	ldd	r24, Y+4	; 0x04
    2480:	9d 81       	ldd	r25, Y+5	; 0x05
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	61 f0       	breq	.+24     	; 0x249e <DIO_u8SetPortDirection+0x52>
    2486:	1f c0       	rjmp	.+62     	; 0x24c6 <DIO_u8SetPortDirection+0x7a>
    2488:	2c 81       	ldd	r18, Y+4	; 0x04
    248a:	3d 81       	ldd	r19, Y+5	; 0x05
    248c:	22 30       	cpi	r18, 0x02	; 2
    248e:	31 05       	cpc	r19, r1
    2490:	81 f0       	breq	.+32     	; 0x24b2 <DIO_u8SetPortDirection+0x66>
    2492:	8c 81       	ldd	r24, Y+4	; 0x04
    2494:	9d 81       	ldd	r25, Y+5	; 0x05
    2496:	83 30       	cpi	r24, 0x03	; 3
    2498:	91 05       	cpc	r25, r1
    249a:	81 f0       	breq	.+32     	; 0x24bc <DIO_u8SetPortDirection+0x70>
    249c:	14 c0       	rjmp	.+40     	; 0x24c6 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
    249e:	ea e3       	ldi	r30, 0x3A	; 58
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	80 83       	st	Z, r24
    24a6:	11 c0       	rjmp	.+34     	; 0x24ca <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
    24a8:	e7 e3       	ldi	r30, 0x37	; 55
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	80 83       	st	Z, r24
    24b0:	0c c0       	rjmp	.+24     	; 0x24ca <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
    24b2:	e4 e3       	ldi	r30, 0x34	; 52
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	80 83       	st	Z, r24
    24ba:	07 c0       	rjmp	.+14     	; 0x24ca <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
    24bc:	e1 e3       	ldi	r30, 0x31	; 49
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	80 83       	st	Z, r24
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	28 97       	sbiw	r28, 0x08	; 8
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	8a 83       	std	Y+2, r24	; 0x02
    24f2:	6b 83       	std	Y+3, r22	; 0x03
    24f4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    24f6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	88 30       	cpi	r24, 0x08	; 8
    24fc:	08 f0       	brcs	.+2      	; 0x2500 <DIO_u8SetPinValue+0x24>
    24fe:	f4 c0       	rjmp	.+488    	; 0x26e8 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    2500:	8c 81       	ldd	r24, Y+4	; 0x04
    2502:	88 23       	and	r24, r24
    2504:	09 f0       	breq	.+2      	; 0x2508 <DIO_u8SetPinValue+0x2c>
    2506:	77 c0       	rjmp	.+238    	; 0x25f6 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	38 87       	std	Y+8, r19	; 0x08
    2510:	2f 83       	std	Y+7, r18	; 0x07
    2512:	8f 81       	ldd	r24, Y+7	; 0x07
    2514:	98 85       	ldd	r25, Y+8	; 0x08
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	91 05       	cpc	r25, r1
    251a:	59 f1       	breq	.+86     	; 0x2572 <DIO_u8SetPinValue+0x96>
    251c:	2f 81       	ldd	r18, Y+7	; 0x07
    251e:	38 85       	ldd	r19, Y+8	; 0x08
    2520:	22 30       	cpi	r18, 0x02	; 2
    2522:	31 05       	cpc	r19, r1
    2524:	2c f4       	brge	.+10     	; 0x2530 <DIO_u8SetPinValue+0x54>
    2526:	8f 81       	ldd	r24, Y+7	; 0x07
    2528:	98 85       	ldd	r25, Y+8	; 0x08
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	69 f0       	breq	.+26     	; 0x2548 <DIO_u8SetPinValue+0x6c>
    252e:	60 c0       	rjmp	.+192    	; 0x25f0 <DIO_u8SetPinValue+0x114>
    2530:	2f 81       	ldd	r18, Y+7	; 0x07
    2532:	38 85       	ldd	r19, Y+8	; 0x08
    2534:	22 30       	cpi	r18, 0x02	; 2
    2536:	31 05       	cpc	r19, r1
    2538:	89 f1       	breq	.+98     	; 0x259c <DIO_u8SetPinValue+0xc0>
    253a:	8f 81       	ldd	r24, Y+7	; 0x07
    253c:	98 85       	ldd	r25, Y+8	; 0x08
    253e:	83 30       	cpi	r24, 0x03	; 3
    2540:	91 05       	cpc	r25, r1
    2542:	09 f4       	brne	.+2      	; 0x2546 <DIO_u8SetPinValue+0x6a>
    2544:	40 c0       	rjmp	.+128    	; 0x25c6 <DIO_u8SetPinValue+0xea>
    2546:	54 c0       	rjmp	.+168    	; 0x25f0 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
    2548:	ab e3       	ldi	r26, 0x3B	; 59
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	eb e3       	ldi	r30, 0x3B	; 59
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	48 2f       	mov	r20, r24
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	02 2e       	mov	r0, r18
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <DIO_u8SetPinValue+0x8a>
    2562:	88 0f       	add	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	0a 94       	dec	r0
    2568:	e2 f7       	brpl	.-8      	; 0x2562 <DIO_u8SetPinValue+0x86>
    256a:	80 95       	com	r24
    256c:	84 23       	and	r24, r20
    256e:	8c 93       	st	X, r24
    2570:	bd c0       	rjmp	.+378    	; 0x26ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
    2572:	a8 e3       	ldi	r26, 0x38	; 56
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	e8 e3       	ldi	r30, 0x38	; 56
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	48 2f       	mov	r20, r24
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	02 2e       	mov	r0, r18
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <DIO_u8SetPinValue+0xb4>
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	0a 94       	dec	r0
    2592:	e2 f7       	brpl	.-8      	; 0x258c <DIO_u8SetPinValue+0xb0>
    2594:	80 95       	com	r24
    2596:	84 23       	and	r24, r20
    2598:	8c 93       	st	X, r24
    259a:	a8 c0       	rjmp	.+336    	; 0x26ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
    259c:	a5 e3       	ldi	r26, 0x35	; 53
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e5 e3       	ldi	r30, 0x35	; 53
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	48 2f       	mov	r20, r24
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	02 2e       	mov	r0, r18
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <DIO_u8SetPinValue+0xde>
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	0a 94       	dec	r0
    25bc:	e2 f7       	brpl	.-8      	; 0x25b6 <DIO_u8SetPinValue+0xda>
    25be:	80 95       	com	r24
    25c0:	84 23       	and	r24, r20
    25c2:	8c 93       	st	X, r24
    25c4:	93 c0       	rjmp	.+294    	; 0x26ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
    25c6:	a2 e3       	ldi	r26, 0x32	; 50
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	e2 e3       	ldi	r30, 0x32	; 50
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	48 2f       	mov	r20, r24
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	02 2e       	mov	r0, r18
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <DIO_u8SetPinValue+0x108>
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	0a 94       	dec	r0
    25e6:	e2 f7       	brpl	.-8      	; 0x25e0 <DIO_u8SetPinValue+0x104>
    25e8:	80 95       	com	r24
    25ea:	84 23       	and	r24, r20
    25ec:	8c 93       	st	X, r24
    25ee:	7e c0       	rjmp	.+252    	; 0x26ec <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	7b c0       	rjmp	.+246    	; 0x26ec <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    25f6:	8c 81       	ldd	r24, Y+4	; 0x04
    25f8:	81 30       	cpi	r24, 0x01	; 1
    25fa:	09 f0       	breq	.+2      	; 0x25fe <DIO_u8SetPinValue+0x122>
    25fc:	72 c0       	rjmp	.+228    	; 0x26e2 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	28 2f       	mov	r18, r24
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	3e 83       	std	Y+6, r19	; 0x06
    2606:	2d 83       	std	Y+5, r18	; 0x05
    2608:	8d 81       	ldd	r24, Y+5	; 0x05
    260a:	9e 81       	ldd	r25, Y+6	; 0x06
    260c:	81 30       	cpi	r24, 0x01	; 1
    260e:	91 05       	cpc	r25, r1
    2610:	49 f1       	breq	.+82     	; 0x2664 <DIO_u8SetPinValue+0x188>
    2612:	2d 81       	ldd	r18, Y+5	; 0x05
    2614:	3e 81       	ldd	r19, Y+6	; 0x06
    2616:	22 30       	cpi	r18, 0x02	; 2
    2618:	31 05       	cpc	r19, r1
    261a:	2c f4       	brge	.+10     	; 0x2626 <DIO_u8SetPinValue+0x14a>
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	9e 81       	ldd	r25, Y+6	; 0x06
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	61 f0       	breq	.+24     	; 0x263c <DIO_u8SetPinValue+0x160>
    2624:	5b c0       	rjmp	.+182    	; 0x26dc <DIO_u8SetPinValue+0x200>
    2626:	2d 81       	ldd	r18, Y+5	; 0x05
    2628:	3e 81       	ldd	r19, Y+6	; 0x06
    262a:	22 30       	cpi	r18, 0x02	; 2
    262c:	31 05       	cpc	r19, r1
    262e:	71 f1       	breq	.+92     	; 0x268c <DIO_u8SetPinValue+0x1b0>
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	83 30       	cpi	r24, 0x03	; 3
    2636:	91 05       	cpc	r25, r1
    2638:	e9 f1       	breq	.+122    	; 0x26b4 <DIO_u8SetPinValue+0x1d8>
    263a:	50 c0       	rjmp	.+160    	; 0x26dc <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
    263c:	ab e3       	ldi	r26, 0x3B	; 59
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	eb e3       	ldi	r30, 0x3B	; 59
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	48 2f       	mov	r20, r24
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	28 2f       	mov	r18, r24
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	02 2e       	mov	r0, r18
    2654:	02 c0       	rjmp	.+4      	; 0x265a <DIO_u8SetPinValue+0x17e>
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	0a 94       	dec	r0
    265c:	e2 f7       	brpl	.-8      	; 0x2656 <DIO_u8SetPinValue+0x17a>
    265e:	84 2b       	or	r24, r20
    2660:	8c 93       	st	X, r24
    2662:	44 c0       	rjmp	.+136    	; 0x26ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
    2664:	a8 e3       	ldi	r26, 0x38	; 56
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e8 e3       	ldi	r30, 0x38	; 56
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	48 2f       	mov	r20, r24
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	02 2e       	mov	r0, r18
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <DIO_u8SetPinValue+0x1a6>
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	0a 94       	dec	r0
    2684:	e2 f7       	brpl	.-8      	; 0x267e <DIO_u8SetPinValue+0x1a2>
    2686:	84 2b       	or	r24, r20
    2688:	8c 93       	st	X, r24
    268a:	30 c0       	rjmp	.+96     	; 0x26ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
    268c:	a5 e3       	ldi	r26, 0x35	; 53
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	e5 e3       	ldi	r30, 0x35	; 53
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	48 2f       	mov	r20, r24
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	02 2e       	mov	r0, r18
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <DIO_u8SetPinValue+0x1ce>
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	0a 94       	dec	r0
    26ac:	e2 f7       	brpl	.-8      	; 0x26a6 <DIO_u8SetPinValue+0x1ca>
    26ae:	84 2b       	or	r24, r20
    26b0:	8c 93       	st	X, r24
    26b2:	1c c0       	rjmp	.+56     	; 0x26ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
    26b4:	a2 e3       	ldi	r26, 0x32	; 50
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	e2 e3       	ldi	r30, 0x32	; 50
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	48 2f       	mov	r20, r24
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	02 2e       	mov	r0, r18
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <DIO_u8SetPinValue+0x1f6>
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	0a 94       	dec	r0
    26d4:	e2 f7       	brpl	.-8      	; 0x26ce <DIO_u8SetPinValue+0x1f2>
    26d6:	84 2b       	or	r24, r20
    26d8:	8c 93       	st	X, r24
    26da:	08 c0       	rjmp	.+16     	; 0x26ec <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	05 c0       	rjmp	.+10     	; 0x26ec <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ee:	28 96       	adiw	r28, 0x08	; 8
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	00 d0       	rcall	.+0      	; 0x2706 <DIO_u8SetPortValue+0x6>
    2706:	00 d0       	rcall	.+0      	; 0x2708 <DIO_u8SetPortValue+0x8>
    2708:	0f 92       	push	r0
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	8a 83       	std	Y+2, r24	; 0x02
    2710:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2712:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	3d 83       	std	Y+5, r19	; 0x05
    271c:	2c 83       	std	Y+4, r18	; 0x04
    271e:	8c 81       	ldd	r24, Y+4	; 0x04
    2720:	9d 81       	ldd	r25, Y+5	; 0x05
    2722:	81 30       	cpi	r24, 0x01	; 1
    2724:	91 05       	cpc	r25, r1
    2726:	d1 f0       	breq	.+52     	; 0x275c <DIO_u8SetPortValue+0x5c>
    2728:	2c 81       	ldd	r18, Y+4	; 0x04
    272a:	3d 81       	ldd	r19, Y+5	; 0x05
    272c:	22 30       	cpi	r18, 0x02	; 2
    272e:	31 05       	cpc	r19, r1
    2730:	2c f4       	brge	.+10     	; 0x273c <DIO_u8SetPortValue+0x3c>
    2732:	8c 81       	ldd	r24, Y+4	; 0x04
    2734:	9d 81       	ldd	r25, Y+5	; 0x05
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	61 f0       	breq	.+24     	; 0x2752 <DIO_u8SetPortValue+0x52>
    273a:	1f c0       	rjmp	.+62     	; 0x277a <DIO_u8SetPortValue+0x7a>
    273c:	2c 81       	ldd	r18, Y+4	; 0x04
    273e:	3d 81       	ldd	r19, Y+5	; 0x05
    2740:	22 30       	cpi	r18, 0x02	; 2
    2742:	31 05       	cpc	r19, r1
    2744:	81 f0       	breq	.+32     	; 0x2766 <DIO_u8SetPortValue+0x66>
    2746:	8c 81       	ldd	r24, Y+4	; 0x04
    2748:	9d 81       	ldd	r25, Y+5	; 0x05
    274a:	83 30       	cpi	r24, 0x03	; 3
    274c:	91 05       	cpc	r25, r1
    274e:	81 f0       	breq	.+32     	; 0x2770 <DIO_u8SetPortValue+0x70>
    2750:	14 c0       	rjmp	.+40     	; 0x277a <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value;break;
    2752:	eb e3       	ldi	r30, 0x3B	; 59
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	80 83       	st	Z, r24
    275a:	11 c0       	rjmp	.+34     	; 0x277e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value;break;
    275c:	e8 e3       	ldi	r30, 0x38	; 56
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	80 83       	st	Z, r24
    2764:	0c c0       	rjmp	.+24     	; 0x277e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value;break;
    2766:	e5 e3       	ldi	r30, 0x35	; 53
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	80 83       	st	Z, r24
    276e:	07 c0       	rjmp	.+14     	; 0x277e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value;break;
    2770:	e2 e3       	ldi	r30, 0x32	; 50
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	80 83       	st	Z, r24
    2778:	02 c0       	rjmp	.+4      	; 0x277e <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    277e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	08 95       	ret

00002790 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	27 97       	sbiw	r28, 0x07	; 7
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	8a 83       	std	Y+2, r24	; 0x02
    27a6:	6b 83       	std	Y+3, r22	; 0x03
    27a8:	5d 83       	std	Y+5, r21	; 0x05
    27aa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    27ac:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=0) && (Copy_u8Pin<=DIO_u8PIN7))
    27ae:	8c 81       	ldd	r24, Y+4	; 0x04
    27b0:	9d 81       	ldd	r25, Y+5	; 0x05
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	09 f4       	brne	.+2      	; 0x27b8 <DIO_u8GetPinValue+0x28>
    27b6:	78 c0       	rjmp	.+240    	; 0x28a8 <DIO_u8GetPinValue+0x118>
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	88 30       	cpi	r24, 0x08	; 8
    27bc:	08 f0       	brcs	.+2      	; 0x27c0 <DIO_u8GetPinValue+0x30>
    27be:	74 c0       	rjmp	.+232    	; 0x28a8 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    27c0:	8a 81       	ldd	r24, Y+2	; 0x02
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	3f 83       	std	Y+7, r19	; 0x07
    27c8:	2e 83       	std	Y+6, r18	; 0x06
    27ca:	4e 81       	ldd	r20, Y+6	; 0x06
    27cc:	5f 81       	ldd	r21, Y+7	; 0x07
    27ce:	41 30       	cpi	r20, 0x01	; 1
    27d0:	51 05       	cpc	r21, r1
    27d2:	59 f1       	breq	.+86     	; 0x282a <DIO_u8GetPinValue+0x9a>
    27d4:	8e 81       	ldd	r24, Y+6	; 0x06
    27d6:	9f 81       	ldd	r25, Y+7	; 0x07
    27d8:	82 30       	cpi	r24, 0x02	; 2
    27da:	91 05       	cpc	r25, r1
    27dc:	34 f4       	brge	.+12     	; 0x27ea <DIO_u8GetPinValue+0x5a>
    27de:	2e 81       	ldd	r18, Y+6	; 0x06
    27e0:	3f 81       	ldd	r19, Y+7	; 0x07
    27e2:	21 15       	cp	r18, r1
    27e4:	31 05       	cpc	r19, r1
    27e6:	69 f0       	breq	.+26     	; 0x2802 <DIO_u8GetPinValue+0x72>
    27e8:	5c c0       	rjmp	.+184    	; 0x28a2 <DIO_u8GetPinValue+0x112>
    27ea:	4e 81       	ldd	r20, Y+6	; 0x06
    27ec:	5f 81       	ldd	r21, Y+7	; 0x07
    27ee:	42 30       	cpi	r20, 0x02	; 2
    27f0:	51 05       	cpc	r21, r1
    27f2:	79 f1       	breq	.+94     	; 0x2852 <DIO_u8GetPinValue+0xc2>
    27f4:	8e 81       	ldd	r24, Y+6	; 0x06
    27f6:	9f 81       	ldd	r25, Y+7	; 0x07
    27f8:	83 30       	cpi	r24, 0x03	; 3
    27fa:	91 05       	cpc	r25, r1
    27fc:	09 f4       	brne	.+2      	; 0x2800 <DIO_u8GetPinValue+0x70>
    27fe:	3d c0       	rjmp	.+122    	; 0x287a <DIO_u8GetPinValue+0xea>
    2800:	50 c0       	rjmp	.+160    	; 0x28a2 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    2802:	e9 e3       	ldi	r30, 0x39	; 57
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	88 2f       	mov	r24, r24
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	a9 01       	movw	r20, r18
    2814:	02 c0       	rjmp	.+4      	; 0x281a <DIO_u8GetPinValue+0x8a>
    2816:	55 95       	asr	r21
    2818:	47 95       	ror	r20
    281a:	8a 95       	dec	r24
    281c:	e2 f7       	brpl	.-8      	; 0x2816 <DIO_u8GetPinValue+0x86>
    281e:	ca 01       	movw	r24, r20
    2820:	81 70       	andi	r24, 0x01	; 1
    2822:	ec 81       	ldd	r30, Y+4	; 0x04
    2824:	fd 81       	ldd	r31, Y+5	; 0x05
    2826:	80 83       	st	Z, r24
    2828:	41 c0       	rjmp	.+130    	; 0x28ac <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    282a:	e6 e3       	ldi	r30, 0x36	; 54
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	8b 81       	ldd	r24, Y+3	; 0x03
    2836:	88 2f       	mov	r24, r24
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a9 01       	movw	r20, r18
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <DIO_u8GetPinValue+0xb2>
    283e:	55 95       	asr	r21
    2840:	47 95       	ror	r20
    2842:	8a 95       	dec	r24
    2844:	e2 f7       	brpl	.-8      	; 0x283e <DIO_u8GetPinValue+0xae>
    2846:	ca 01       	movw	r24, r20
    2848:	81 70       	andi	r24, 0x01	; 1
    284a:	ec 81       	ldd	r30, Y+4	; 0x04
    284c:	fd 81       	ldd	r31, Y+5	; 0x05
    284e:	80 83       	st	Z, r24
    2850:	2d c0       	rjmp	.+90     	; 0x28ac <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    2852:	e3 e3       	ldi	r30, 0x33	; 51
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	28 2f       	mov	r18, r24
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	88 2f       	mov	r24, r24
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	a9 01       	movw	r20, r18
    2864:	02 c0       	rjmp	.+4      	; 0x286a <DIO_u8GetPinValue+0xda>
    2866:	55 95       	asr	r21
    2868:	47 95       	ror	r20
    286a:	8a 95       	dec	r24
    286c:	e2 f7       	brpl	.-8      	; 0x2866 <DIO_u8GetPinValue+0xd6>
    286e:	ca 01       	movw	r24, r20
    2870:	81 70       	andi	r24, 0x01	; 1
    2872:	ec 81       	ldd	r30, Y+4	; 0x04
    2874:	fd 81       	ldd	r31, Y+5	; 0x05
    2876:	80 83       	st	Z, r24
    2878:	19 c0       	rjmp	.+50     	; 0x28ac <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    287a:	e0 e3       	ldi	r30, 0x30	; 48
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	88 2f       	mov	r24, r24
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	a9 01       	movw	r20, r18
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <DIO_u8GetPinValue+0x102>
    288e:	55 95       	asr	r21
    2890:	47 95       	ror	r20
    2892:	8a 95       	dec	r24
    2894:	e2 f7       	brpl	.-8      	; 0x288e <DIO_u8GetPinValue+0xfe>
    2896:	ca 01       	movw	r24, r20
    2898:	81 70       	andi	r24, 0x01	; 1
    289a:	ec 81       	ldd	r30, Y+4	; 0x04
    289c:	fd 81       	ldd	r31, Y+5	; 0x05
    289e:	80 83       	st	Z, r24
    28a0:	05 c0       	rjmp	.+10     	; 0x28ac <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState=1;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	02 c0       	rjmp	.+4      	; 0x28ac <DIO_u8GetPinValue+0x11c>
			}
		}
	else
	{
		Local_u8ErrorState=1;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_u8ErrorState;
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ae:	27 96       	adiw	r28, 0x07	; 7
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <main>:
#include "CLCD_interface.h"

#define CeilDot			0b11011111

void main (void)
{
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	63 97       	sbiw	r28, 0x13	; 19
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
	u16 Local_u8ADCReading=0;
    28d4:	1b 8a       	std	Y+19, r1	; 0x13
    28d6:	1a 8a       	std	Y+18, r1	; 0x12
	u16 MiliVolt;
	u8 Temp;

	/*Port Initialization*/
	PORT_voidInit();
    28d8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <PORT_voidInit>

	/*ADC Initialization*/
	ADC_voidInit();
    28dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>

	/*Writing on the LCD*/
	CLCD_voidInit(CLCD_2Lines_5x8Fontsize,CLCD_Curser_OFF);
    28e0:	88 e3       	ldi	r24, 0x38	; 56
    28e2:	6c e0       	ldi	r22, 0x0C	; 12
    28e4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <CLCD_voidInit>
	CLCD_voidSendString("Temperature=00 C");
    28e8:	80 e6       	ldi	r24, 0x60	; 96
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <CLCD_voidSendString>
	CLCD_voidGoToXY(0,14);
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	6e e0       	ldi	r22, 0x0E	; 14
    28f4:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <CLCD_voidGoToXY>
	CLCD_voidSendData(CeilDot);
    28f8:	8f ed       	ldi	r24, 0xDF	; 223
    28fa:	0e 94 f6 08 	call	0x11ec	; 0x11ec <CLCD_voidSendData>
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	a6 e9       	ldi	r26, 0x96	; 150
    2904:	b3 e4       	ldi	r27, 0x43	; 67
    2906:	8b 87       	std	Y+11, r24	; 0x0b
    2908:	9c 87       	std	Y+12, r25	; 0x0c
    290a:	ad 87       	std	Y+13, r26	; 0x0d
    290c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2910:	7c 85       	ldd	r23, Y+12	; 0x0c
    2912:	8d 85       	ldd	r24, Y+13	; 0x0d
    2914:	9e 85       	ldd	r25, Y+14	; 0x0e
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	4a ef       	ldi	r20, 0xFA	; 250
    291c:	54 e4       	ldi	r21, 0x44	; 68
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	8f 83       	std	Y+7, r24	; 0x07
    2928:	98 87       	std	Y+8, r25	; 0x08
    292a:	a9 87       	std	Y+9, r26	; 0x09
    292c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    292e:	6f 81       	ldd	r22, Y+7	; 0x07
    2930:	78 85       	ldd	r23, Y+8	; 0x08
    2932:	89 85       	ldd	r24, Y+9	; 0x09
    2934:	9a 85       	ldd	r25, Y+10	; 0x0a
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e8       	ldi	r20, 0x80	; 128
    293c:	5f e3       	ldi	r21, 0x3F	; 63
    293e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2942:	88 23       	and	r24, r24
    2944:	2c f4       	brge	.+10     	; 0x2950 <main+0x90>
		__ticks = 1;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	9e 83       	std	Y+6, r25	; 0x06
    294c:	8d 83       	std	Y+5, r24	; 0x05
    294e:	3f c0       	rjmp	.+126    	; 0x29ce <main+0x10e>
	else if (__tmp > 65535)
    2950:	6f 81       	ldd	r22, Y+7	; 0x07
    2952:	78 85       	ldd	r23, Y+8	; 0x08
    2954:	89 85       	ldd	r24, Y+9	; 0x09
    2956:	9a 85       	ldd	r25, Y+10	; 0x0a
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	3f ef       	ldi	r19, 0xFF	; 255
    295c:	4f e7       	ldi	r20, 0x7F	; 127
    295e:	57 e4       	ldi	r21, 0x47	; 71
    2960:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2964:	18 16       	cp	r1, r24
    2966:	4c f5       	brge	.+82     	; 0x29ba <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2968:	6b 85       	ldd	r22, Y+11	; 0x0b
    296a:	7c 85       	ldd	r23, Y+12	; 0x0c
    296c:	8d 85       	ldd	r24, Y+13	; 0x0d
    296e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e2       	ldi	r20, 0x20	; 32
    2976:	51 e4       	ldi	r21, 0x41	; 65
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9e 83       	std	Y+6, r25	; 0x06
    298e:	8d 83       	std	Y+5, r24	; 0x05
    2990:	0f c0       	rjmp	.+30     	; 0x29b0 <main+0xf0>
    2992:	88 ec       	ldi	r24, 0xC8	; 200
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9c 83       	std	Y+4, r25	; 0x04
    2998:	8b 83       	std	Y+3, r24	; 0x03
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	9c 81       	ldd	r25, Y+4	; 0x04
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <main+0xde>
    29a2:	9c 83       	std	Y+4, r25	; 0x04
    29a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a6:	8d 81       	ldd	r24, Y+5	; 0x05
    29a8:	9e 81       	ldd	r25, Y+6	; 0x06
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	9e 83       	std	Y+6, r25	; 0x06
    29ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	69 f7       	brne	.-38     	; 0x2992 <main+0xd2>
    29b8:	14 c0       	rjmp	.+40     	; 0x29e2 <main+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ba:	6f 81       	ldd	r22, Y+7	; 0x07
    29bc:	78 85       	ldd	r23, Y+8	; 0x08
    29be:	89 85       	ldd	r24, Y+9	; 0x09
    29c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	9e 83       	std	Y+6, r25	; 0x06
    29cc:	8d 83       	std	Y+5, r24	; 0x05
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
    29d0:	9e 81       	ldd	r25, Y+6	; 0x06
    29d2:	9a 83       	std	Y+2, r25	; 0x02
    29d4:	89 83       	std	Y+1, r24	; 0x01
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	9a 81       	ldd	r25, Y+2	; 0x02
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <main+0x11a>
    29de:	9a 83       	std	Y+2, r25	; 0x02
    29e0:	89 83       	std	Y+1, r24	; 0x01
	{
		/*Delay to take the LM35 right voltage*/
		_delay_ms(300);

		/*Starting conversion and pulling the reading and storing it*/
		ADC_u8StartConversionSynch(1,&Local_u8ADCReading);
    29e2:	9e 01       	movw	r18, r28
    29e4:	2e 5e       	subi	r18, 0xEE	; 238
    29e6:	3f 4f       	sbci	r19, 0xFF	; 255
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	b9 01       	movw	r22, r18
    29ec:	0e 94 d4 05 	call	0xba8	; 0xba8 <ADC_u8StartConversionSynch>

		/*Calculating the input voltage in milivolt*/
		MiliVolt=((u32)Local_u8ADCReading*5000UL)/1024UL;
    29f0:	8a 89       	ldd	r24, Y+18	; 0x12
    29f2:	9b 89       	ldd	r25, Y+19	; 0x13
    29f4:	cc 01       	movw	r24, r24
    29f6:	a0 e0       	ldi	r26, 0x00	; 0
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	28 e8       	ldi	r18, 0x88	; 136
    29fc:	33 e1       	ldi	r19, 0x13	; 19
    29fe:	40 e0       	ldi	r20, 0x00	; 0
    2a00:	50 e0       	ldi	r21, 0x00	; 0
    2a02:	bc 01       	movw	r22, r24
    2a04:	cd 01       	movw	r24, r26
    2a06:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__mulsi3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	07 2e       	mov	r0, r23
    2a10:	7a e0       	ldi	r23, 0x0A	; 10
    2a12:	b6 95       	lsr	r27
    2a14:	a7 95       	ror	r26
    2a16:	97 95       	ror	r25
    2a18:	87 95       	ror	r24
    2a1a:	7a 95       	dec	r23
    2a1c:	d1 f7       	brne	.-12     	; 0x2a12 <main+0x152>
    2a1e:	70 2d       	mov	r23, r0
    2a20:	99 8b       	std	Y+17, r25	; 0x11
    2a22:	88 8b       	std	Y+16, r24	; 0x10

		/*Calculating the temperature value corresponding to the input volt 10milivolt=1C */
		Temp=MiliVolt/10;
    2a24:	88 89       	ldd	r24, Y+16	; 0x10
    2a26:	99 89       	ldd	r25, Y+17	; 0x11
    2a28:	2a e0       	ldi	r18, 0x0A	; 10
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	b9 01       	movw	r22, r18
    2a2e:	0e 94 66 15 	call	0x2acc	; 0x2acc <__udivmodhi4>
    2a32:	cb 01       	movw	r24, r22
    2a34:	8f 87       	std	Y+15, r24	; 0x0f

		/*Go to the temperature position to write the value*/
		CLCD_voidGoToXY(0,12);
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	6c e0       	ldi	r22, 0x0C	; 12
    2a3a:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <CLCD_voidGoToXY>
		CLCD_voidWriteNumber(Temp);
    2a3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a40:	88 2f       	mov	r24, r24
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	a0 e0       	ldi	r26, 0x00	; 0
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 27 10 	call	0x204e	; 0x204e <CLCD_voidWriteNumber>

		/*Check the temperature to determine the fan speed*/
		if(Temp>=10 && Temp<25)
    2a50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a52:	8a 30       	cpi	r24, 0x0A	; 10
    2a54:	40 f0       	brcs	.+16     	; 0x2a66 <main+0x1a6>
    2a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a58:	89 31       	cpi	r24, 0x19	; 25
    2a5a:	28 f4       	brcc	.+10     	; 0x2a66 <main+0x1a6>
		{
			/*Fan low speed*/
			DIO_u8SetPortValue(DIO_u8PORTB,85);
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	65 e5       	ldi	r22, 0x55	; 85
    2a60:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_u8SetPortValue>
    2a64:	4c cf       	rjmp	.-360    	; 0x28fe <main+0x3e>
		}
		else if(Temp>=25 && Temp<30)
    2a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a68:	89 31       	cpi	r24, 0x19	; 25
    2a6a:	40 f0       	brcs	.+16     	; 0x2a7c <main+0x1bc>
    2a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a6e:	8e 31       	cpi	r24, 0x1E	; 30
    2a70:	28 f4       	brcc	.+10     	; 0x2a7c <main+0x1bc>
		{
			/*Fan medium speed*/
			DIO_u8SetPortValue(DIO_u8PORTB,170);
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	6a ea       	ldi	r22, 0xAA	; 170
    2a76:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_u8SetPortValue>
    2a7a:	41 cf       	rjmp	.-382    	; 0x28fe <main+0x3e>
		}
		else if(Temp>=30)
    2a7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a7e:	8e 31       	cpi	r24, 0x1E	; 30
    2a80:	08 f4       	brcc	.+2      	; 0x2a84 <main+0x1c4>
    2a82:	3d cf       	rjmp	.-390    	; 0x28fe <main+0x3e>
		{
			/*Fan High speed*/
			DIO_u8SetPortValue(DIO_u8PORTB,255);
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	6f ef       	ldi	r22, 0xFF	; 255
    2a88:	0e 94 80 13 	call	0x2700	; 0x2700 <DIO_u8SetPortValue>
    2a8c:	38 cf       	rjmp	.-400    	; 0x28fe <main+0x3e>

00002a8e <__mulsi3>:
    2a8e:	62 9f       	mul	r22, r18
    2a90:	d0 01       	movw	r26, r0
    2a92:	73 9f       	mul	r23, r19
    2a94:	f0 01       	movw	r30, r0
    2a96:	82 9f       	mul	r24, r18
    2a98:	e0 0d       	add	r30, r0
    2a9a:	f1 1d       	adc	r31, r1
    2a9c:	64 9f       	mul	r22, r20
    2a9e:	e0 0d       	add	r30, r0
    2aa0:	f1 1d       	adc	r31, r1
    2aa2:	92 9f       	mul	r25, r18
    2aa4:	f0 0d       	add	r31, r0
    2aa6:	83 9f       	mul	r24, r19
    2aa8:	f0 0d       	add	r31, r0
    2aaa:	74 9f       	mul	r23, r20
    2aac:	f0 0d       	add	r31, r0
    2aae:	65 9f       	mul	r22, r21
    2ab0:	f0 0d       	add	r31, r0
    2ab2:	99 27       	eor	r25, r25
    2ab4:	72 9f       	mul	r23, r18
    2ab6:	b0 0d       	add	r27, r0
    2ab8:	e1 1d       	adc	r30, r1
    2aba:	f9 1f       	adc	r31, r25
    2abc:	63 9f       	mul	r22, r19
    2abe:	b0 0d       	add	r27, r0
    2ac0:	e1 1d       	adc	r30, r1
    2ac2:	f9 1f       	adc	r31, r25
    2ac4:	bd 01       	movw	r22, r26
    2ac6:	cf 01       	movw	r24, r30
    2ac8:	11 24       	eor	r1, r1
    2aca:	08 95       	ret

00002acc <__udivmodhi4>:
    2acc:	aa 1b       	sub	r26, r26
    2ace:	bb 1b       	sub	r27, r27
    2ad0:	51 e1       	ldi	r21, 0x11	; 17
    2ad2:	07 c0       	rjmp	.+14     	; 0x2ae2 <__udivmodhi4_ep>

00002ad4 <__udivmodhi4_loop>:
    2ad4:	aa 1f       	adc	r26, r26
    2ad6:	bb 1f       	adc	r27, r27
    2ad8:	a6 17       	cp	r26, r22
    2ada:	b7 07       	cpc	r27, r23
    2adc:	10 f0       	brcs	.+4      	; 0x2ae2 <__udivmodhi4_ep>
    2ade:	a6 1b       	sub	r26, r22
    2ae0:	b7 0b       	sbc	r27, r23

00002ae2 <__udivmodhi4_ep>:
    2ae2:	88 1f       	adc	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	5a 95       	dec	r21
    2ae8:	a9 f7       	brne	.-22     	; 0x2ad4 <__udivmodhi4_loop>
    2aea:	80 95       	com	r24
    2aec:	90 95       	com	r25
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	08 95       	ret

00002af4 <__udivmodsi4>:
    2af4:	a1 e2       	ldi	r26, 0x21	; 33
    2af6:	1a 2e       	mov	r1, r26
    2af8:	aa 1b       	sub	r26, r26
    2afa:	bb 1b       	sub	r27, r27
    2afc:	fd 01       	movw	r30, r26
    2afe:	0d c0       	rjmp	.+26     	; 0x2b1a <__udivmodsi4_ep>

00002b00 <__udivmodsi4_loop>:
    2b00:	aa 1f       	adc	r26, r26
    2b02:	bb 1f       	adc	r27, r27
    2b04:	ee 1f       	adc	r30, r30
    2b06:	ff 1f       	adc	r31, r31
    2b08:	a2 17       	cp	r26, r18
    2b0a:	b3 07       	cpc	r27, r19
    2b0c:	e4 07       	cpc	r30, r20
    2b0e:	f5 07       	cpc	r31, r21
    2b10:	20 f0       	brcs	.+8      	; 0x2b1a <__udivmodsi4_ep>
    2b12:	a2 1b       	sub	r26, r18
    2b14:	b3 0b       	sbc	r27, r19
    2b16:	e4 0b       	sbc	r30, r20
    2b18:	f5 0b       	sbc	r31, r21

00002b1a <__udivmodsi4_ep>:
    2b1a:	66 1f       	adc	r22, r22
    2b1c:	77 1f       	adc	r23, r23
    2b1e:	88 1f       	adc	r24, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	1a 94       	dec	r1
    2b24:	69 f7       	brne	.-38     	; 0x2b00 <__udivmodsi4_loop>
    2b26:	60 95       	com	r22
    2b28:	70 95       	com	r23
    2b2a:	80 95       	com	r24
    2b2c:	90 95       	com	r25
    2b2e:	9b 01       	movw	r18, r22
    2b30:	ac 01       	movw	r20, r24
    2b32:	bd 01       	movw	r22, r26
    2b34:	cf 01       	movw	r24, r30
    2b36:	08 95       	ret

00002b38 <__prologue_saves__>:
    2b38:	2f 92       	push	r2
    2b3a:	3f 92       	push	r3
    2b3c:	4f 92       	push	r4
    2b3e:	5f 92       	push	r5
    2b40:	6f 92       	push	r6
    2b42:	7f 92       	push	r7
    2b44:	8f 92       	push	r8
    2b46:	9f 92       	push	r9
    2b48:	af 92       	push	r10
    2b4a:	bf 92       	push	r11
    2b4c:	cf 92       	push	r12
    2b4e:	df 92       	push	r13
    2b50:	ef 92       	push	r14
    2b52:	ff 92       	push	r15
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	ca 1b       	sub	r28, r26
    2b62:	db 0b       	sbc	r29, r27
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	09 94       	ijmp

00002b70 <__epilogue_restores__>:
    2b70:	2a 88       	ldd	r2, Y+18	; 0x12
    2b72:	39 88       	ldd	r3, Y+17	; 0x11
    2b74:	48 88       	ldd	r4, Y+16	; 0x10
    2b76:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b78:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b80:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b82:	b9 84       	ldd	r11, Y+9	; 0x09
    2b84:	c8 84       	ldd	r12, Y+8	; 0x08
    2b86:	df 80       	ldd	r13, Y+7	; 0x07
    2b88:	ee 80       	ldd	r14, Y+6	; 0x06
    2b8a:	fd 80       	ldd	r15, Y+5	; 0x05
    2b8c:	0c 81       	ldd	r16, Y+4	; 0x04
    2b8e:	1b 81       	ldd	r17, Y+3	; 0x03
    2b90:	aa 81       	ldd	r26, Y+2	; 0x02
    2b92:	b9 81       	ldd	r27, Y+1	; 0x01
    2b94:	ce 0f       	add	r28, r30
    2b96:	d1 1d       	adc	r29, r1
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	ed 01       	movw	r28, r26
    2ba4:	08 95       	ret

00002ba6 <_exit>:
    2ba6:	f8 94       	cli

00002ba8 <__stop_program>:
    2ba8:	ff cf       	rjmp	.-2      	; 0x2ba8 <__stop_program>
