
ADC_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000029d8  00002a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800078  00800078  00002a84  2**0
                  ALLOC
  3 .stab         000021b4  00000000  00000000  00002a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c21  00000000  00000000  00004c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005859  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005999  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007752  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000863d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000093ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000954c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000097d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009fa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 40 14 	call	0x2880	; 0x2880 <main>
      8a:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 14 	jmp	0x29be	; 0x29be <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
#endif

u8 ADC_u8BusyState=0;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*AVCC as reference voltage*/
#if(VREF==0)
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);
#elif(VREF==1)
	SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS1);
#endif

	/*Activate Left adjust result*/
#if(Resolution==0)
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
#elif(PS==3)
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
	CLR_BIT(ADCSRA,ADCSRA_ADPS1);
	CLR_BIT(ADCSRA,ADCSRA_ADPS0);
#elif(PS==4)
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADCSRA_ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8d 7f       	andi	r24, 0xFD	; 253
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
#endif
	/*Enable peripheral */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u16*Copy_pu8Reading)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	28 97       	sbiw	r28, 0x08	; 8
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	8e 83       	std	Y+6, r24	; 0x06
     bcc:	78 87       	std	Y+8, r23	; 0x08
     bce:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     bd0:	1a 82       	std	Y+2, r1	; 0x02
     bd2:	1b 82       	std	Y+3, r1	; 0x03
     bd4:	1c 82       	std	Y+4, r1	; 0x04
     bd6:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=0;
     bd8:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==0)
     bda:	80 91 7c 00 	lds	r24, 0x007C
     bde:	88 23       	and	r24, r24
     be0:	09 f0       	breq	.+2      	; 0xbe4 <ADC_u8StartConversionSynch+0x2e>
     be2:	5e c0       	rjmp	.+188    	; 0xca0 <ADC_u8StartConversionSynch+0xea>
	{
		/*ADC is now busy*/
		ADC_u8BusyState=1;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 7c 00 	sts	0x007C, r24

		/*Clear the MUX bits in ADMUX register*/
		ADMUX &= MUXMask;
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	80 7e       	andi	r24, 0xE0	; 224
     bf6:	8c 93       	st	X, r24

		/*Set the required channel into the MUX bits*/
		ADMUX |= Copy_u8Channel;
     bf8:	a7 e2       	ldi	r26, 0x27	; 39
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e7 e2       	ldi	r30, 0x27	; 39
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	90 81       	ld	r25, Z
     c02:	8e 81       	ldd	r24, Y+6	; 0x06
     c04:	89 2b       	or	r24, r25
     c06:	8c 93       	st	X, r24

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     c08:	a6 e2       	ldi	r26, 0x26	; 38
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e6 e2       	ldi	r30, 0x26	; 38
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 64       	ori	r24, 0x40	; 64
     c14:	8c 93       	st	X, r24
     c16:	0b c0       	rjmp	.+22     	; 0xc2e <ADC_u8StartConversionSynch+0x78>

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while( ((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter<ADC_u32TIMEOUT) )
		{
			Local_u32Counter++;
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	9b 81       	ldd	r25, Y+3	; 0x03
     c1c:	ac 81       	ldd	r26, Y+4	; 0x04
     c1e:	bd 81       	ldd	r27, Y+5	; 0x05
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	a1 1d       	adc	r26, r1
     c24:	b1 1d       	adc	r27, r1
     c26:	8a 83       	std	Y+2, r24	; 0x02
     c28:	9b 83       	std	Y+3, r25	; 0x03
     c2a:	ac 83       	std	Y+4, r26	; 0x04
     c2c:	bd 83       	std	Y+5, r27	; 0x05

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while( ((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter<ADC_u32TIMEOUT) )
     c2e:	e6 e2       	ldi	r30, 0x26	; 38
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	82 95       	swap	r24
     c36:	8f 70       	andi	r24, 0x0F	; 15
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	81 70       	andi	r24, 0x01	; 1
     c3e:	90 70       	andi	r25, 0x00	; 0
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	61 f4       	brne	.+24     	; 0xc5c <ADC_u8StartConversionSynch+0xa6>
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	9b 81       	ldd	r25, Y+3	; 0x03
     c48:	ac 81       	ldd	r26, Y+4	; 0x04
     c4a:	bd 81       	ldd	r27, Y+5	; 0x05
     c4c:	80 35       	cpi	r24, 0x50	; 80
     c4e:	23 ec       	ldi	r18, 0xC3	; 195
     c50:	92 07       	cpc	r25, r18
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	a2 07       	cpc	r26, r18
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	b2 07       	cpc	r27, r18
     c5a:	f0 f2       	brcs	.-68     	; 0xc18 <ADC_u8StartConversionSynch+0x62>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter==ADC_u32TIMEOUT)
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	ac 81       	ldd	r26, Y+4	; 0x04
     c62:	bd 81       	ldd	r27, Y+5	; 0x05
     c64:	80 35       	cpi	r24, 0x50	; 80
     c66:	23 ec       	ldi	r18, 0xC3	; 195
     c68:	92 07       	cpc	r25, r18
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	a2 07       	cpc	r26, r18
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	b2 07       	cpc	r27, r18
     c72:	19 f4       	brne	.+6      	; 0xc7a <ADC_u8StartConversionSynch+0xc4>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=1;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	15 c0       	rjmp	.+42     	; 0xca4 <ADC_u8StartConversionSynch+0xee>
		else
		{
			/*Loop is broken because flag is raised*/

			/*Clear the conversion clear flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     c7a:	a6 e2       	ldi	r26, 0x26	; 38
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e6 e2       	ldi	r30, 0x26	; 38
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	80 61       	ori	r24, 0x10	; 16
     c86:	8c 93       	st	X, r24
#if(Resolution==0)
			/*Return the reading*/
			*Copy_pu8Reading=ADCH;
     c88:	e5 e2       	ldi	r30, 0x25	; 37
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	ef 81       	ldd	r30, Y+7	; 0x07
     c94:	f8 85       	ldd	r31, Y+8	; 0x08
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
			adcVal=0;
			adcVal = ADCL + (ADCH << 8); //Get the values of the two ADC registers
			*Copy_pu8Reading = (adcVal & _10_BIT_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
#endif
			/*ADC is finished, return it to idle */
			ADC_u8BusyState=0;
     c9a:	10 92 7c 00 	sts	0x007C, r1
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <ADC_u8StartConversionSynch+0xee>
		}

	}
	else
	{
		Local_u8ErrorState=1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ca6:	28 96       	adiw	r28, 0x08	; 8
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel,u16*Copy_pu8Reading,void(*Copy_pvNotificationFunc)(void))
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <ADC_u8StartConversionAsynch+0x6>
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <ADC_u8StartConversionAsynch+0x8>
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <ADC_u8StartConversionAsynch+0xa>
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	8a 83       	std	Y+2, r24	; 0x02
     cc8:	7c 83       	std	Y+4, r23	; 0x04
     cca:	6b 83       	std	Y+3, r22	; 0x03
     ccc:	5e 83       	std	Y+6, r21	; 0x06
     cce:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=0;
     cd0:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==0)
     cd2:	80 91 7c 00 	lds	r24, 0x007C
     cd6:	88 23       	and	r24, r24
     cd8:	c1 f5       	brne	.+112    	; 0xd4a <ADC_u8StartConversionAsynch+0x92>
	{
		if(Copy_pu8Reading == NULL || Copy_pvNotificationFunc == NULL)
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	9c 81       	ldd	r25, Y+4	; 0x04
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	21 f0       	breq	.+8      	; 0xcea <ADC_u8StartConversionAsynch+0x32>
     ce2:	8d 81       	ldd	r24, Y+5	; 0x05
     ce4:	9e 81       	ldd	r25, Y+6	; 0x06
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	19 f4       	brne	.+6      	; 0xcf0 <ADC_u8StartConversionAsynch+0x38>
		{
			Local_u8ErrorState=1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	2f c0       	rjmp	.+94     	; 0xd4e <ADC_u8StartConversionAsynch+0x96>
		}
		else
		{
			/*Make ADC busy in order not to work until being idle 0*/
			ADC_u8BusyState=1;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	80 93 7c 00 	sts	0x007C, r24

			/*Initialize the reading variable globally*/
			ADC_pu8Reading=Copy_pu8Reading;
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	90 93 79 00 	sts	0x0079, r25
     cfe:	80 93 78 00 	sts	0x0078, r24

			/*Initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc=Copy_pvNotificationFunc;
     d02:	8d 81       	ldd	r24, Y+5	; 0x05
     d04:	9e 81       	ldd	r25, Y+6	; 0x06
     d06:	90 93 7b 00 	sts	0x007B, r25
     d0a:	80 93 7a 00 	sts	0x007A, r24

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &= MUXMask;
     d0e:	a7 e2       	ldi	r26, 0x27	; 39
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e7 e2       	ldi	r30, 0x27	; 39
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 7e       	andi	r24, 0xE0	; 224
     d1a:	8c 93       	st	X, r24

			/*Set the required channel into the MUX bits*/
			ADMUX |= Copy_u8Channel;
     d1c:	a7 e2       	ldi	r26, 0x27	; 39
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e7 e2       	ldi	r30, 0x27	; 39
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	90 81       	ld	r25, Z
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	89 2b       	or	r24, r25
     d2a:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d2c:	a6 e2       	ldi	r26, 0x26	; 38
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e6 e2       	ldi	r30, 0x26	; 38
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	80 64       	ori	r24, 0x40	; 64
     d38:	8c 93       	st	X, r24

			/*ADC interrupt enable */
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d3a:	a6 e2       	ldi	r26, 0x26	; 38
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e6 e2       	ldi	r30, 0x26	; 38
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	88 60       	ori	r24, 0x08	; 8
     d46:	8c 93       	st	X, r24
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <ADC_u8StartConversionAsynch+0x96>
		}

	}
	else
	{
		Local_u8ErrorState=1;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d50:	26 96       	adiw	r28, 0x06	; 6
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <ADC_u8ReadInput>:


void ADC_u8ReadInput(u16*Copy_pu8Reading)
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	00 d0       	rcall	.+0      	; 0xd68 <ADC_u8ReadInput+0x6>
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	89 83       	std	Y+1, r24	; 0x01
#if(Resolution==0)
			/*Return the reading*/
			*Copy_pu8Reading=ADCH;
     d70:	e5 e2       	ldi	r30, 0x25	; 37
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	e9 81       	ldd	r30, Y+1	; 0x01
     d7c:	fa 81       	ldd	r31, Y+2	; 0x02
     d7e:	91 83       	std	Z+1, r25	; 0x01
     d80:	80 83       	st	Z, r24
			adcVal=0;
			adcVal = ADCL + (ADCH << 8); //Get the values of the two ADC registers
			*Copy_pu8Reading = (adcVal & _10_BIT_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
#endif

}
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <__vector_16>:


ISR(__vector_16)
{
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	4f 93       	push	r20
     d9c:	5f 93       	push	r21
     d9e:	6f 93       	push	r22
     da0:	7f 93       	push	r23
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
     daa:	ef 93       	push	r30
     dac:	ff 93       	push	r31
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
#if(Resolution==0)
	/*Read ADC result*/
	*ADC_pu8Reading=ADCH;
     db6:	a0 91 78 00 	lds	r26, 0x0078
     dba:	b0 91 79 00 	lds	r27, 0x0079
     dbe:	e5 e2       	ldi	r30, 0x25	; 37
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	88 2f       	mov	r24, r24
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	8d 93       	st	X+, r24
     dca:	9c 93       	st	X, r25
	adcVal=0;
	adcVal = ADCL + (ADCH << 8); //Get the values of the two ADC registers
	*ADC_pu8Reading = (adcVal & _10_BIT_MASK); //Mask higher bits in ADCH and read only the 10 bits for the ADC
#endif
	/*Make ADC state be idle (0) because it finished */
	ADC_u8BusyState=0;
     dcc:	10 92 7c 00 	sts	0x007C, r1

	/*Invoke the callback notification function*/
	(*ADC_pvCallBackNotificationFunc)();
     dd0:	e0 91 7a 00 	lds	r30, 0x007A
     dd4:	f0 91 7b 00 	lds	r31, 0x007B
     dd8:	09 95       	icall

	/*Disable ADC conversion complete interrupt*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     dda:	a6 e2       	ldi	r26, 0x26	; 38
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e6 e2       	ldi	r30, 0x26	; 38
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	87 7f       	andi	r24, 0xF7	; 247
     de6:	8c 93       	st	X, r24
}
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	7f 91       	pop	r23
     dfa:	6f 91       	pop	r22
     dfc:	5f 91       	pop	r21
     dfe:	4f 91       	pop	r20
     e00:	3f 91       	pop	r19
     e02:	2f 91       	pop	r18
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	0f 90       	pop	r0
     e0a:	1f 90       	pop	r1
     e0c:	18 95       	reti

00000e0e <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	6d 97       	sbiw	r28, 0x1d	; 29
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	8d 8f       	std	Y+29, r24	; 0x1d


	/*Set RS pin to low for command*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
#ifdef _FOUR_BIT

	/*Send The first Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Command,7)==1)
     e38:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e3a:	88 1f       	adc	r24, r24
     e3c:	88 27       	eor	r24, r24
     e3e:	88 1f       	adc	r24, r24
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	31 f4       	brne	.+12     	; 0xe50 <CLCD_voidSendCommand+0x42>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	67 e0       	ldi	r22, 0x07	; 7
     e48:	41 e0       	ldi	r20, 0x01	; 1
     e4a:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <CLCD_voidSendCommand+0x4c>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	67 e0       	ldi	r22, 0x07	; 7
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,6)==1)
     e5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e5c:	82 95       	swap	r24
     e5e:	86 95       	lsr	r24
     e60:	86 95       	lsr	r24
     e62:	83 70       	andi	r24, 0x03	; 3
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	81 70       	andi	r24, 0x01	; 1
     e6a:	90 70       	andi	r25, 0x00	; 0
     e6c:	88 23       	and	r24, r24
     e6e:	31 f0       	breq	.+12     	; 0xe7c <CLCD_voidSendCommand+0x6e>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	66 e0       	ldi	r22, 0x06	; 6
     e74:	41 e0       	ldi	r20, 0x01	; 1
     e76:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
     e7a:	05 c0       	rjmp	.+10     	; 0xe86 <CLCD_voidSendCommand+0x78>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	66 e0       	ldi	r22, 0x06	; 6
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,5)==1)
     e86:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e88:	82 95       	swap	r24
     e8a:	86 95       	lsr	r24
     e8c:	87 70       	andi	r24, 0x07	; 7
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	81 70       	andi	r24, 0x01	; 1
     e94:	90 70       	andi	r25, 0x00	; 0
     e96:	88 23       	and	r24, r24
     e98:	31 f0       	breq	.+12     	; 0xea6 <CLCD_voidSendCommand+0x98>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	65 e0       	ldi	r22, 0x05	; 5
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
     ea4:	05 c0       	rjmp	.+10     	; 0xeb0 <CLCD_voidSendCommand+0xa2>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	65 e0       	ldi	r22, 0x05	; 5
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,4)==1)
     eb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb2:	82 95       	swap	r24
     eb4:	8f 70       	andi	r24, 0x0F	; 15
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	81 70       	andi	r24, 0x01	; 1
     ebc:	90 70       	andi	r25, 0x00	; 0
     ebe:	88 23       	and	r24, r24
     ec0:	31 f0       	breq	.+12     	; 0xece <CLCD_voidSendCommand+0xc0>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	64 e0       	ldi	r22, 0x04	; 4
     ec6:	41 e0       	ldi	r20, 0x01	; 1
     ec8:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
     ecc:	05 c0       	rjmp	.+10     	; 0xed8 <CLCD_voidSendCommand+0xca>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	64 e0       	ldi	r22, 0x04	; 4
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	62 e0       	ldi	r22, 0x02	; 2
     edc:	41 e0       	ldi	r20, 0x01	; 1
     ede:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	a0 e0       	ldi	r26, 0x00	; 0
     ee8:	b0 e4       	ldi	r27, 0x40	; 64
     eea:	89 8f       	std	Y+25, r24	; 0x19
     eec:	9a 8f       	std	Y+26, r25	; 0x1a
     eee:	ab 8f       	std	Y+27, r26	; 0x1b
     ef0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef2:	69 8d       	ldd	r22, Y+25	; 0x19
     ef4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ef6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ef8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	4a ef       	ldi	r20, 0xFA	; 250
     f00:	54 e4       	ldi	r21, 0x44	; 68
     f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	8d 8b       	std	Y+21, r24	; 0x15
     f0c:	9e 8b       	std	Y+22, r25	; 0x16
     f0e:	af 8b       	std	Y+23, r26	; 0x17
     f10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f12:	6d 89       	ldd	r22, Y+21	; 0x15
     f14:	7e 89       	ldd	r23, Y+22	; 0x16
     f16:	8f 89       	ldd	r24, Y+23	; 0x17
     f18:	98 8d       	ldd	r25, Y+24	; 0x18
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e8       	ldi	r20, 0x80	; 128
     f20:	5f e3       	ldi	r21, 0x3F	; 63
     f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f26:	88 23       	and	r24, r24
     f28:	2c f4       	brge	.+10     	; 0xf34 <CLCD_voidSendCommand+0x126>
		__ticks = 1;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	9c 8b       	std	Y+20, r25	; 0x14
     f30:	8b 8b       	std	Y+19, r24	; 0x13
     f32:	3f c0       	rjmp	.+126    	; 0xfb2 <CLCD_voidSendCommand+0x1a4>
	else if (__tmp > 65535)
     f34:	6d 89       	ldd	r22, Y+21	; 0x15
     f36:	7e 89       	ldd	r23, Y+22	; 0x16
     f38:	8f 89       	ldd	r24, Y+23	; 0x17
     f3a:	98 8d       	ldd	r25, Y+24	; 0x18
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	3f ef       	ldi	r19, 0xFF	; 255
     f40:	4f e7       	ldi	r20, 0x7F	; 127
     f42:	57 e4       	ldi	r21, 0x47	; 71
     f44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f48:	18 16       	cp	r1, r24
     f4a:	4c f5       	brge	.+82     	; 0xf9e <CLCD_voidSendCommand+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4c:	69 8d       	ldd	r22, Y+25	; 0x19
     f4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f50:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f52:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e2       	ldi	r20, 0x20	; 32
     f5a:	51 e4       	ldi	r21, 0x41	; 65
     f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	9c 8b       	std	Y+20, r25	; 0x14
     f72:	8b 8b       	std	Y+19, r24	; 0x13
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <CLCD_voidSendCommand+0x186>
     f76:	88 ec       	ldi	r24, 0xC8	; 200
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9a 8b       	std	Y+18, r25	; 0x12
     f7c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f7e:	89 89       	ldd	r24, Y+17	; 0x11
     f80:	9a 89       	ldd	r25, Y+18	; 0x12
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <CLCD_voidSendCommand+0x174>
     f86:	9a 8b       	std	Y+18, r25	; 0x12
     f88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8a:	8b 89       	ldd	r24, Y+19	; 0x13
     f8c:	9c 89       	ldd	r25, Y+20	; 0x14
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	9c 8b       	std	Y+20, r25	; 0x14
     f92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f94:	8b 89       	ldd	r24, Y+19	; 0x13
     f96:	9c 89       	ldd	r25, Y+20	; 0x14
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	69 f7       	brne	.-38     	; 0xf76 <CLCD_voidSendCommand+0x168>
     f9c:	14 c0       	rjmp	.+40     	; 0xfc6 <CLCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9e:	6d 89       	ldd	r22, Y+21	; 0x15
     fa0:	7e 89       	ldd	r23, Y+22	; 0x16
     fa2:	8f 89       	ldd	r24, Y+23	; 0x17
     fa4:	98 8d       	ldd	r25, Y+24	; 0x18
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9c 8b       	std	Y+20, r25	; 0x14
     fb0:	8b 8b       	std	Y+19, r24	; 0x13
     fb2:	8b 89       	ldd	r24, Y+19	; 0x13
     fb4:	9c 89       	ldd	r25, Y+20	; 0x14
     fb6:	98 8b       	std	Y+16, r25	; 0x10
     fb8:	8f 87       	std	Y+15, r24	; 0x0f
     fba:	8f 85       	ldd	r24, Y+15	; 0x0f
     fbc:	98 89       	ldd	r25, Y+16	; 0x10
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <CLCD_voidSendCommand+0x1b0>
     fc2:	98 8b       	std	Y+16, r25	; 0x10
     fc4:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     fc6:	82 e0       	ldi	r24, 0x02	; 2
     fc8:	62 e0       	ldi	r22, 0x02	; 2
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

	/*Send The Second Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Command,3)==1)
     fd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fd2:	86 95       	lsr	r24
     fd4:	86 95       	lsr	r24
     fd6:	86 95       	lsr	r24
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	90 70       	andi	r25, 0x00	; 0
     fe0:	88 23       	and	r24, r24
     fe2:	31 f0       	breq	.+12     	; 0xff0 <CLCD_voidSendCommand+0x1e2>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	67 e0       	ldi	r22, 0x07	; 7
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
     fee:	05 c0       	rjmp	.+10     	; 0xffa <CLCD_voidSendCommand+0x1ec>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	67 e0       	ldi	r22, 0x07	; 7
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,2)==1)
     ffa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ffc:	86 95       	lsr	r24
     ffe:	86 95       	lsr	r24
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	88 23       	and	r24, r24
    100a:	31 f0       	breq	.+12     	; 0x1018 <CLCD_voidSendCommand+0x20a>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	66 e0       	ldi	r22, 0x06	; 6
    1010:	41 e0       	ldi	r20, 0x01	; 1
    1012:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <CLCD_voidSendCommand+0x214>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	66 e0       	ldi	r22, 0x06	; 6
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,1)==1)
    1022:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1024:	86 95       	lsr	r24
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	81 70       	andi	r24, 0x01	; 1
    102c:	90 70       	andi	r25, 0x00	; 0
    102e:	88 23       	and	r24, r24
    1030:	31 f0       	breq	.+12     	; 0x103e <CLCD_voidSendCommand+0x230>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	65 e0       	ldi	r22, 0x05	; 5
    1036:	41 e0       	ldi	r20, 0x01	; 1
    1038:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <CLCD_voidSendCommand+0x23a>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	65 e0       	ldi	r22, 0x05	; 5
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,0)==1)
    1048:	8d 8d       	ldd	r24, Y+29	; 0x1d
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	81 70       	andi	r24, 0x01	; 1
    1050:	90 70       	andi	r25, 0x00	; 0
    1052:	88 23       	and	r24, r24
    1054:	31 f0       	breq	.+12     	; 0x1062 <CLCD_voidSendCommand+0x254>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	64 e0       	ldi	r22, 0x04	; 4
    105a:	41 e0       	ldi	r20, 0x01	; 1
    105c:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    1060:	05 c0       	rjmp	.+10     	; 0x106c <CLCD_voidSendCommand+0x25e>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	64 e0       	ldi	r22, 0x04	; 4
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	62 e0       	ldi	r22, 0x02	; 2
    1070:	41 e0       	ldi	r20, 0x01	; 1
    1072:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a0 e0       	ldi	r26, 0x00	; 0
    107c:	b0 e4       	ldi	r27, 0x40	; 64
    107e:	8b 87       	std	Y+11, r24	; 0x0b
    1080:	9c 87       	std	Y+12, r25	; 0x0c
    1082:	ad 87       	std	Y+13, r26	; 0x0d
    1084:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1086:	6b 85       	ldd	r22, Y+11	; 0x0b
    1088:	7c 85       	ldd	r23, Y+12	; 0x0c
    108a:	8d 85       	ldd	r24, Y+13	; 0x0d
    108c:	9e 85       	ldd	r25, Y+14	; 0x0e
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	4a ef       	ldi	r20, 0xFA	; 250
    1094:	54 e4       	ldi	r21, 0x44	; 68
    1096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	8f 83       	std	Y+7, r24	; 0x07
    10a0:	98 87       	std	Y+8, r25	; 0x08
    10a2:	a9 87       	std	Y+9, r26	; 0x09
    10a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10a6:	6f 81       	ldd	r22, Y+7	; 0x07
    10a8:	78 85       	ldd	r23, Y+8	; 0x08
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e8       	ldi	r20, 0x80	; 128
    10b4:	5f e3       	ldi	r21, 0x3F	; 63
    10b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ba:	88 23       	and	r24, r24
    10bc:	2c f4       	brge	.+10     	; 0x10c8 <CLCD_voidSendCommand+0x2ba>
		__ticks = 1;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	9e 83       	std	Y+6, r25	; 0x06
    10c4:	8d 83       	std	Y+5, r24	; 0x05
    10c6:	3f c0       	rjmp	.+126    	; 0x1146 <CLCD_voidSendCommand+0x338>
	else if (__tmp > 65535)
    10c8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ca:	78 85       	ldd	r23, Y+8	; 0x08
    10cc:	89 85       	ldd	r24, Y+9	; 0x09
    10ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	3f ef       	ldi	r19, 0xFF	; 255
    10d4:	4f e7       	ldi	r20, 0x7F	; 127
    10d6:	57 e4       	ldi	r21, 0x47	; 71
    10d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10dc:	18 16       	cp	r1, r24
    10de:	4c f5       	brge	.+82     	; 0x1132 <CLCD_voidSendCommand+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e2       	ldi	r20, 0x20	; 32
    10ee:	51 e4       	ldi	r21, 0x41	; 65
    10f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	bc 01       	movw	r22, r24
    10fa:	cd 01       	movw	r24, r26
    10fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
    1108:	0f c0       	rjmp	.+30     	; 0x1128 <CLCD_voidSendCommand+0x31a>
    110a:	88 ec       	ldi	r24, 0xC8	; 200
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	9c 83       	std	Y+4, r25	; 0x04
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <CLCD_voidSendCommand+0x308>
    111a:	9c 83       	std	Y+4, r25	; 0x04
    111c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111e:	8d 81       	ldd	r24, Y+5	; 0x05
    1120:	9e 81       	ldd	r25, Y+6	; 0x06
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	9e 83       	std	Y+6, r25	; 0x06
    1126:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1128:	8d 81       	ldd	r24, Y+5	; 0x05
    112a:	9e 81       	ldd	r25, Y+6	; 0x06
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	69 f7       	brne	.-38     	; 0x110a <CLCD_voidSendCommand+0x2fc>
    1130:	14 c0       	rjmp	.+40     	; 0x115a <CLCD_voidSendCommand+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1132:	6f 81       	ldd	r22, Y+7	; 0x07
    1134:	78 85       	ldd	r23, Y+8	; 0x08
    1136:	89 85       	ldd	r24, Y+9	; 0x09
    1138:	9a 85       	ldd	r25, Y+10	; 0x0a
    113a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <CLCD_voidSendCommand+0x344>
    1156:	9a 83       	std	Y+2, r25	; 0x02
    1158:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	62 e0       	ldi	r22, 0x02	; 2
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

	#endif


}
    1164:	6d 96       	adiw	r28, 0x1d	; 29
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	6d 97       	sbiw	r28, 0x1d	; 29
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set RS pin to High for Data*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	41 e0       	ldi	r20, 0x01	; 1
    1192:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
	#ifdef _FOUR_BIT

	/*Send The first Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Data,7)==1)
    11a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a2:	88 1f       	adc	r24, r24
    11a4:	88 27       	eor	r24, r24
    11a6:	88 1f       	adc	r24, r24
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	31 f4       	brne	.+12     	; 0x11b8 <CLCD_voidSendData+0x42>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	67 e0       	ldi	r22, 0x07	; 7
    11b0:	41 e0       	ldi	r20, 0x01	; 1
    11b2:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <CLCD_voidSendData+0x4c>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	67 e0       	ldi	r22, 0x07	; 7
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,6)==1)
    11c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11c4:	82 95       	swap	r24
    11c6:	86 95       	lsr	r24
    11c8:	86 95       	lsr	r24
    11ca:	83 70       	andi	r24, 0x03	; 3
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	81 70       	andi	r24, 0x01	; 1
    11d2:	90 70       	andi	r25, 0x00	; 0
    11d4:	88 23       	and	r24, r24
    11d6:	31 f0       	breq	.+12     	; 0x11e4 <CLCD_voidSendData+0x6e>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	66 e0       	ldi	r22, 0x06	; 6
    11dc:	41 e0       	ldi	r20, 0x01	; 1
    11de:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <CLCD_voidSendData+0x78>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	66 e0       	ldi	r22, 0x06	; 6
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,5)==1)
    11ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11f0:	82 95       	swap	r24
    11f2:	86 95       	lsr	r24
    11f4:	87 70       	andi	r24, 0x07	; 7
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	81 70       	andi	r24, 0x01	; 1
    11fc:	90 70       	andi	r25, 0x00	; 0
    11fe:	88 23       	and	r24, r24
    1200:	31 f0       	breq	.+12     	; 0x120e <CLCD_voidSendData+0x98>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	65 e0       	ldi	r22, 0x05	; 5
    1206:	41 e0       	ldi	r20, 0x01	; 1
    1208:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    120c:	05 c0       	rjmp	.+10     	; 0x1218 <CLCD_voidSendData+0xa2>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	65 e0       	ldi	r22, 0x05	; 5
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,4)==1)
    1218:	8d 8d       	ldd	r24, Y+29	; 0x1d
    121a:	82 95       	swap	r24
    121c:	8f 70       	andi	r24, 0x0F	; 15
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	81 70       	andi	r24, 0x01	; 1
    1224:	90 70       	andi	r25, 0x00	; 0
    1226:	88 23       	and	r24, r24
    1228:	31 f0       	breq	.+12     	; 0x1236 <CLCD_voidSendData+0xc0>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	64 e0       	ldi	r22, 0x04	; 4
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <CLCD_voidSendData+0xca>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	64 e0       	ldi	r22, 0x04	; 4
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	62 e0       	ldi	r22, 0x02	; 2
    1244:	41 e0       	ldi	r20, 0x01	; 1
    1246:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a0 e0       	ldi	r26, 0x00	; 0
    1250:	b0 e4       	ldi	r27, 0x40	; 64
    1252:	89 8f       	std	Y+25, r24	; 0x19
    1254:	9a 8f       	std	Y+26, r25	; 0x1a
    1256:	ab 8f       	std	Y+27, r26	; 0x1b
    1258:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125a:	69 8d       	ldd	r22, Y+25	; 0x19
    125c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    125e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1260:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	4a ef       	ldi	r20, 0xFA	; 250
    1268:	54 e4       	ldi	r21, 0x44	; 68
    126a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	8d 8b       	std	Y+21, r24	; 0x15
    1274:	9e 8b       	std	Y+22, r25	; 0x16
    1276:	af 8b       	std	Y+23, r26	; 0x17
    1278:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    127a:	6d 89       	ldd	r22, Y+21	; 0x15
    127c:	7e 89       	ldd	r23, Y+22	; 0x16
    127e:	8f 89       	ldd	r24, Y+23	; 0x17
    1280:	98 8d       	ldd	r25, Y+24	; 0x18
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e8       	ldi	r20, 0x80	; 128
    1288:	5f e3       	ldi	r21, 0x3F	; 63
    128a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    128e:	88 23       	and	r24, r24
    1290:	2c f4       	brge	.+10     	; 0x129c <CLCD_voidSendData+0x126>
		__ticks = 1;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	9c 8b       	std	Y+20, r25	; 0x14
    1298:	8b 8b       	std	Y+19, r24	; 0x13
    129a:	3f c0       	rjmp	.+126    	; 0x131a <CLCD_voidSendData+0x1a4>
	else if (__tmp > 65535)
    129c:	6d 89       	ldd	r22, Y+21	; 0x15
    129e:	7e 89       	ldd	r23, Y+22	; 0x16
    12a0:	8f 89       	ldd	r24, Y+23	; 0x17
    12a2:	98 8d       	ldd	r25, Y+24	; 0x18
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	3f ef       	ldi	r19, 0xFF	; 255
    12a8:	4f e7       	ldi	r20, 0x7F	; 127
    12aa:	57 e4       	ldi	r21, 0x47	; 71
    12ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b0:	18 16       	cp	r1, r24
    12b2:	4c f5       	brge	.+82     	; 0x1306 <CLCD_voidSendData+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b4:	69 8d       	ldd	r22, Y+25	; 0x19
    12b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e2       	ldi	r20, 0x20	; 32
    12c2:	51 e4       	ldi	r21, 0x41	; 65
    12c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	9c 8b       	std	Y+20, r25	; 0x14
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	0f c0       	rjmp	.+30     	; 0x12fc <CLCD_voidSendData+0x186>
    12de:	88 ec       	ldi	r24, 0xC8	; 200
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9a 8b       	std	Y+18, r25	; 0x12
    12e4:	89 8b       	std	Y+17, r24	; 0x11
    12e6:	89 89       	ldd	r24, Y+17	; 0x11
    12e8:	9a 89       	ldd	r25, Y+18	; 0x12
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <CLCD_voidSendData+0x174>
    12ee:	9a 8b       	std	Y+18, r25	; 0x12
    12f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f2:	8b 89       	ldd	r24, Y+19	; 0x13
    12f4:	9c 89       	ldd	r25, Y+20	; 0x14
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	9c 8b       	std	Y+20, r25	; 0x14
    12fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fc:	8b 89       	ldd	r24, Y+19	; 0x13
    12fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	69 f7       	brne	.-38     	; 0x12de <CLCD_voidSendData+0x168>
    1304:	14 c0       	rjmp	.+40     	; 0x132e <CLCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1306:	6d 89       	ldd	r22, Y+21	; 0x15
    1308:	7e 89       	ldd	r23, Y+22	; 0x16
    130a:	8f 89       	ldd	r24, Y+23	; 0x17
    130c:	98 8d       	ldd	r25, Y+24	; 0x18
    130e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	9c 8b       	std	Y+20, r25	; 0x14
    1318:	8b 8b       	std	Y+19, r24	; 0x13
    131a:	8b 89       	ldd	r24, Y+19	; 0x13
    131c:	9c 89       	ldd	r25, Y+20	; 0x14
    131e:	98 8b       	std	Y+16, r25	; 0x10
    1320:	8f 87       	std	Y+15, r24	; 0x0f
    1322:	8f 85       	ldd	r24, Y+15	; 0x0f
    1324:	98 89       	ldd	r25, Y+16	; 0x10
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <CLCD_voidSendData+0x1b0>
    132a:	98 8b       	std	Y+16, r25	; 0x10
    132c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    132e:	82 e0       	ldi	r24, 0x02	; 2
    1330:	62 e0       	ldi	r22, 0x02	; 2
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

	/*Send The Second Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Data,3)==1)
    1338:	8d 8d       	ldd	r24, Y+29	; 0x1d
    133a:	86 95       	lsr	r24
    133c:	86 95       	lsr	r24
    133e:	86 95       	lsr	r24
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	81 70       	andi	r24, 0x01	; 1
    1346:	90 70       	andi	r25, 0x00	; 0
    1348:	88 23       	and	r24, r24
    134a:	31 f0       	breq	.+12     	; 0x1358 <CLCD_voidSendData+0x1e2>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	67 e0       	ldi	r22, 0x07	; 7
    1350:	41 e0       	ldi	r20, 0x01	; 1
    1352:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    1356:	05 c0       	rjmp	.+10     	; 0x1362 <CLCD_voidSendData+0x1ec>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	67 e0       	ldi	r22, 0x07	; 7
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,2)==1)
    1362:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1364:	86 95       	lsr	r24
    1366:	86 95       	lsr	r24
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	81 70       	andi	r24, 0x01	; 1
    136e:	90 70       	andi	r25, 0x00	; 0
    1370:	88 23       	and	r24, r24
    1372:	31 f0       	breq	.+12     	; 0x1380 <CLCD_voidSendData+0x20a>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	66 e0       	ldi	r22, 0x06	; 6
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    137e:	05 c0       	rjmp	.+10     	; 0x138a <CLCD_voidSendData+0x214>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	66 e0       	ldi	r22, 0x06	; 6
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,1)==1)
    138a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    138c:	86 95       	lsr	r24
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	81 70       	andi	r24, 0x01	; 1
    1394:	90 70       	andi	r25, 0x00	; 0
    1396:	88 23       	and	r24, r24
    1398:	31 f0       	breq	.+12     	; 0x13a6 <CLCD_voidSendData+0x230>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	65 e0       	ldi	r22, 0x05	; 5
    139e:	41 e0       	ldi	r20, 0x01	; 1
    13a0:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <CLCD_voidSendData+0x23a>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	65 e0       	ldi	r22, 0x05	; 5
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,0)==1)
    13b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	81 70       	andi	r24, 0x01	; 1
    13b8:	90 70       	andi	r25, 0x00	; 0
    13ba:	88 23       	and	r24, r24
    13bc:	31 f0       	breq	.+12     	; 0x13ca <CLCD_voidSendData+0x254>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	64 e0       	ldi	r22, 0x04	; 4
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    13c8:	05 c0       	rjmp	.+10     	; 0x13d4 <CLCD_voidSendData+0x25e>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	64 e0       	ldi	r22, 0x04	; 4
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	62 e0       	ldi	r22, 0x02	; 2
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    13da:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a0 e0       	ldi	r26, 0x00	; 0
    13e4:	b0 e4       	ldi	r27, 0x40	; 64
    13e6:	8b 87       	std	Y+11, r24	; 0x0b
    13e8:	9c 87       	std	Y+12, r25	; 0x0c
    13ea:	ad 87       	std	Y+13, r26	; 0x0d
    13ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	4a ef       	ldi	r20, 0xFA	; 250
    13fc:	54 e4       	ldi	r21, 0x44	; 68
    13fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	8f 83       	std	Y+7, r24	; 0x07
    1408:	98 87       	std	Y+8, r25	; 0x08
    140a:	a9 87       	std	Y+9, r26	; 0x09
    140c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    140e:	6f 81       	ldd	r22, Y+7	; 0x07
    1410:	78 85       	ldd	r23, Y+8	; 0x08
    1412:	89 85       	ldd	r24, Y+9	; 0x09
    1414:	9a 85       	ldd	r25, Y+10	; 0x0a
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e8       	ldi	r20, 0x80	; 128
    141c:	5f e3       	ldi	r21, 0x3F	; 63
    141e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1422:	88 23       	and	r24, r24
    1424:	2c f4       	brge	.+10     	; 0x1430 <CLCD_voidSendData+0x2ba>
		__ticks = 1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	9e 83       	std	Y+6, r25	; 0x06
    142c:	8d 83       	std	Y+5, r24	; 0x05
    142e:	3f c0       	rjmp	.+126    	; 0x14ae <CLCD_voidSendData+0x338>
	else if (__tmp > 65535)
    1430:	6f 81       	ldd	r22, Y+7	; 0x07
    1432:	78 85       	ldd	r23, Y+8	; 0x08
    1434:	89 85       	ldd	r24, Y+9	; 0x09
    1436:	9a 85       	ldd	r25, Y+10	; 0x0a
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	3f ef       	ldi	r19, 0xFF	; 255
    143c:	4f e7       	ldi	r20, 0x7F	; 127
    143e:	57 e4       	ldi	r21, 0x47	; 71
    1440:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1444:	18 16       	cp	r1, r24
    1446:	4c f5       	brge	.+82     	; 0x149a <CLCD_voidSendData+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1448:	6b 85       	ldd	r22, Y+11	; 0x0b
    144a:	7c 85       	ldd	r23, Y+12	; 0x0c
    144c:	8d 85       	ldd	r24, Y+13	; 0x0d
    144e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e2       	ldi	r20, 0x20	; 32
    1456:	51 e4       	ldi	r21, 0x41	; 65
    1458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9e 83       	std	Y+6, r25	; 0x06
    146e:	8d 83       	std	Y+5, r24	; 0x05
    1470:	0f c0       	rjmp	.+30     	; 0x1490 <CLCD_voidSendData+0x31a>
    1472:	88 ec       	ldi	r24, 0xC8	; 200
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9c 83       	std	Y+4, r25	; 0x04
    1478:	8b 83       	std	Y+3, r24	; 0x03
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <CLCD_voidSendData+0x308>
    1482:	9c 83       	std	Y+4, r25	; 0x04
    1484:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	9e 81       	ldd	r25, Y+6	; 0x06
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	9e 81       	ldd	r25, Y+6	; 0x06
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	69 f7       	brne	.-38     	; 0x1472 <CLCD_voidSendData+0x2fc>
    1498:	14 c0       	rjmp	.+40     	; 0x14c2 <CLCD_voidSendData+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149a:	6f 81       	ldd	r22, Y+7	; 0x07
    149c:	78 85       	ldd	r23, Y+8	; 0x08
    149e:	89 85       	ldd	r24, Y+9	; 0x09
    14a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9e 83       	std	Y+6, r25	; 0x06
    14ac:	8d 83       	std	Y+5, r24	; 0x05
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	9e 81       	ldd	r25, Y+6	; 0x06
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <CLCD_voidSendData+0x344>
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    14c2:	82 e0       	ldi	r24, 0x02	; 2
    14c4:	62 e0       	ldi	r22, 0x02	; 2
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

	#endif

}
    14cc:	6d 96       	adiw	r28, 0x1d	; 29
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <CLCD_voidInit>:

void CLCD_voidInit(u8 Copy_u8Function,u8 Copy_u8Display)
{
    14de:	0f 93       	push	r16
    14e0:	1f 93       	push	r17
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	c8 56       	subi	r28, 0x68	; 104
    14ec:	d0 40       	sbci	r29, 0x00	; 0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	fe 01       	movw	r30, r28
    14fa:	ed 59       	subi	r30, 0x9D	; 157
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 83       	st	Z, r24
    1500:	fe 01       	movw	r30, r28
    1502:	ec 59       	subi	r30, 0x9C	; 156
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	60 83       	st	Z, r22
#endif

	#ifdef _FOUR_BIT

	/*Initialize LCD pins direction*/
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_OUTPUT);
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	67 e0       	ldi	r22, 0x07	; 7
    150c:	41 e0       	ldi	r20, 0x01	; 1
    150e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_OUTPUT);
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	66 e0       	ldi	r22, 0x06	; 6
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_OUTPUT);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	65 e0       	ldi	r22, 0x05	; 5
    1520:	41 e0       	ldi	r20, 0x01	; 1
    1522:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_OUTPUT);
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	64 e0       	ldi	r22, 0x04	; 4
    152a:	41 e0       	ldi	r20, 0x01	; 1
    152c:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
    1530:	82 e0       	ldi	r24, 0x02	; 2
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
    153a:	82 e0       	ldi	r24, 0x02	; 2
    153c:	61 e0       	ldi	r22, 0x01	; 1
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
    1544:	82 e0       	ldi	r24, 0x02	; 2
    1546:	62 e0       	ldi	r22, 0x02	; 2
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <DIO_u8SetPinDirection>
    154e:	fe 01       	movw	r30, r28
    1550:	e1 5a       	subi	r30, 0xA1	; 161
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	a0 e2       	ldi	r26, 0x20	; 32
    155a:	b2 e4       	ldi	r27, 0x42	; 66
    155c:	80 83       	st	Z, r24
    155e:	91 83       	std	Z+1, r25	; 0x01
    1560:	a2 83       	std	Z+2, r26	; 0x02
    1562:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1564:	8e 01       	movw	r16, r28
    1566:	05 5a       	subi	r16, 0xA5	; 165
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	fe 01       	movw	r30, r28
    156c:	e1 5a       	subi	r30, 0xA1	; 161
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	60 81       	ld	r22, Z
    1572:	71 81       	ldd	r23, Z+1	; 0x01
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	4a ef       	ldi	r20, 0xFA	; 250
    157e:	54 e4       	ldi	r21, 0x44	; 68
    1580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	f8 01       	movw	r30, r16
    158a:	80 83       	st	Z, r24
    158c:	91 83       	std	Z+1, r25	; 0x01
    158e:	a2 83       	std	Z+2, r26	; 0x02
    1590:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1592:	fe 01       	movw	r30, r28
    1594:	e5 5a       	subi	r30, 0xA5	; 165
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	60 81       	ld	r22, Z
    159a:	71 81       	ldd	r23, Z+1	; 0x01
    159c:	82 81       	ldd	r24, Z+2	; 0x02
    159e:	93 81       	ldd	r25, Z+3	; 0x03
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e8       	ldi	r20, 0x80	; 128
    15a6:	5f e3       	ldi	r21, 0x3F	; 63
    15a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ac:	88 23       	and	r24, r24
    15ae:	44 f4       	brge	.+16     	; 0x15c0 <CLCD_voidInit+0xe2>
		__ticks = 1;
    15b0:	fe 01       	movw	r30, r28
    15b2:	e7 5a       	subi	r30, 0xA7	; 167
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
    15be:	64 c0       	rjmp	.+200    	; 0x1688 <CLCD_voidInit+0x1aa>
	else if (__tmp > 65535)
    15c0:	fe 01       	movw	r30, r28
    15c2:	e5 5a       	subi	r30, 0xA5	; 165
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	60 81       	ld	r22, Z
    15c8:	71 81       	ldd	r23, Z+1	; 0x01
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	57 e4       	ldi	r21, 0x47	; 71
    15d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15da:	18 16       	cp	r1, r24
    15dc:	0c f0       	brlt	.+2      	; 0x15e0 <CLCD_voidInit+0x102>
    15de:	43 c0       	rjmp	.+134    	; 0x1666 <CLCD_voidInit+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e0:	fe 01       	movw	r30, r28
    15e2:	e1 5a       	subi	r30, 0xA1	; 161
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	60 81       	ld	r22, Z
    15e8:	71 81       	ldd	r23, Z+1	; 0x01
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	51 e4       	ldi	r21, 0x41	; 65
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	8e 01       	movw	r16, r28
    1600:	07 5a       	subi	r16, 0xA7	; 167
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	f8 01       	movw	r30, r16
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
    1616:	1f c0       	rjmp	.+62     	; 0x1656 <CLCD_voidInit+0x178>
    1618:	fe 01       	movw	r30, r28
    161a:	e9 5a       	subi	r30, 0xA9	; 169
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	88 ec       	ldi	r24, 0xC8	; 200
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	91 83       	std	Z+1, r25	; 0x01
    1624:	80 83       	st	Z, r24
    1626:	fe 01       	movw	r30, r28
    1628:	e9 5a       	subi	r30, 0xA9	; 169
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <CLCD_voidInit+0x152>
    1634:	fe 01       	movw	r30, r28
    1636:	e9 5a       	subi	r30, 0xA9	; 169
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163e:	de 01       	movw	r26, r28
    1640:	a7 5a       	subi	r26, 0xA7	; 167
    1642:	bf 4f       	sbci	r27, 0xFF	; 255
    1644:	fe 01       	movw	r30, r28
    1646:	e7 5a       	subi	r30, 0xA7	; 167
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	11 96       	adiw	r26, 0x01	; 1
    1652:	9c 93       	st	X, r25
    1654:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1656:	fe 01       	movw	r30, r28
    1658:	e7 5a       	subi	r30, 0xA7	; 167
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	d1 f6       	brne	.-76     	; 0x1618 <CLCD_voidInit+0x13a>
    1664:	27 c0       	rjmp	.+78     	; 0x16b4 <CLCD_voidInit+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1666:	8e 01       	movw	r16, r28
    1668:	07 5a       	subi	r16, 0xA7	; 167
    166a:	1f 4f       	sbci	r17, 0xFF	; 255
    166c:	fe 01       	movw	r30, r28
    166e:	e5 5a       	subi	r30, 0xA5	; 165
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	60 81       	ld	r22, Z
    1674:	71 81       	ldd	r23, Z+1	; 0x01
    1676:	82 81       	ldd	r24, Z+2	; 0x02
    1678:	93 81       	ldd	r25, Z+3	; 0x03
    167a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	f8 01       	movw	r30, r16
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	80 83       	st	Z, r24
    1688:	de 01       	movw	r26, r28
    168a:	ab 5a       	subi	r26, 0xAB	; 171
    168c:	bf 4f       	sbci	r27, 0xFF	; 255
    168e:	fe 01       	movw	r30, r28
    1690:	e7 5a       	subi	r30, 0xA7	; 167
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	8d 93       	st	X+, r24
    169a:	9c 93       	st	X, r25
    169c:	fe 01       	movw	r30, r28
    169e:	eb 5a       	subi	r30, 0xAB	; 171
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	80 81       	ld	r24, Z
    16a4:	91 81       	ldd	r25, Z+1	; 0x01
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <CLCD_voidInit+0x1c8>
    16aa:	fe 01       	movw	r30, r28
    16ac:	eb 5a       	subi	r30, 0xAB	; 171
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	80 83       	st	Z, r24

	/*Wait for more than 30 ms*/
	_delay_ms(40);

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    16b4:	82 e0       	ldi	r24, 0x02	; 2
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	61 e0       	ldi	r22, 0x01	; 1
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

	/*Set command to data pins*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	67 e0       	ldi	r22, 0x07	; 7
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	66 e0       	ldi	r22, 0x06	; 6
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	65 e0       	ldi	r22, 0x05	; 5
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	64 e0       	ldi	r22, 0x04	; 4
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	62 e0       	ldi	r22, 0x02	; 2
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    16fa:	fe 01       	movw	r30, r28
    16fc:	ef 5a       	subi	r30, 0xAF	; 175
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	a0 e0       	ldi	r26, 0x00	; 0
    1706:	b0 e4       	ldi	r27, 0x40	; 64
    1708:	80 83       	st	Z, r24
    170a:	91 83       	std	Z+1, r25	; 0x01
    170c:	a2 83       	std	Z+2, r26	; 0x02
    170e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1710:	8e 01       	movw	r16, r28
    1712:	03 5b       	subi	r16, 0xB3	; 179
    1714:	1f 4f       	sbci	r17, 0xFF	; 255
    1716:	fe 01       	movw	r30, r28
    1718:	ef 5a       	subi	r30, 0xAF	; 175
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	60 81       	ld	r22, Z
    171e:	71 81       	ldd	r23, Z+1	; 0x01
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	93 81       	ldd	r25, Z+3	; 0x03
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	4a ef       	ldi	r20, 0xFA	; 250
    172a:	54 e4       	ldi	r21, 0x44	; 68
    172c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	f8 01       	movw	r30, r16
    1736:	80 83       	st	Z, r24
    1738:	91 83       	std	Z+1, r25	; 0x01
    173a:	a2 83       	std	Z+2, r26	; 0x02
    173c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    173e:	fe 01       	movw	r30, r28
    1740:	e3 5b       	subi	r30, 0xB3	; 179
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	60 81       	ld	r22, Z
    1746:	71 81       	ldd	r23, Z+1	; 0x01
    1748:	82 81       	ldd	r24, Z+2	; 0x02
    174a:	93 81       	ldd	r25, Z+3	; 0x03
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5f e3       	ldi	r21, 0x3F	; 63
    1754:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1758:	88 23       	and	r24, r24
    175a:	44 f4       	brge	.+16     	; 0x176c <CLCD_voidInit+0x28e>
		__ticks = 1;
    175c:	fe 01       	movw	r30, r28
    175e:	e5 5b       	subi	r30, 0xB5	; 181
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	80 83       	st	Z, r24
    176a:	64 c0       	rjmp	.+200    	; 0x1834 <CLCD_voidInit+0x356>
	else if (__tmp > 65535)
    176c:	fe 01       	movw	r30, r28
    176e:	e3 5b       	subi	r30, 0xB3	; 179
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	3f ef       	ldi	r19, 0xFF	; 255
    177e:	4f e7       	ldi	r20, 0x7F	; 127
    1780:	57 e4       	ldi	r21, 0x47	; 71
    1782:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1786:	18 16       	cp	r1, r24
    1788:	0c f0       	brlt	.+2      	; 0x178c <CLCD_voidInit+0x2ae>
    178a:	43 c0       	rjmp	.+134    	; 0x1812 <CLCD_voidInit+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178c:	fe 01       	movw	r30, r28
    178e:	ef 5a       	subi	r30, 0xAF	; 175
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	82 81       	ldd	r24, Z+2	; 0x02
    1798:	93 81       	ldd	r25, Z+3	; 0x03
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e2       	ldi	r20, 0x20	; 32
    17a0:	51 e4       	ldi	r21, 0x41	; 65
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	8e 01       	movw	r16, r28
    17ac:	05 5b       	subi	r16, 0xB5	; 181
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	f8 01       	movw	r30, r16
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
    17c2:	1f c0       	rjmp	.+62     	; 0x1802 <CLCD_voidInit+0x324>
    17c4:	fe 01       	movw	r30, r28
    17c6:	e7 5b       	subi	r30, 0xB7	; 183
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	88 ec       	ldi	r24, 0xC8	; 200
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24
    17d2:	fe 01       	movw	r30, r28
    17d4:	e7 5b       	subi	r30, 0xB7	; 183
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	80 81       	ld	r24, Z
    17da:	91 81       	ldd	r25, Z+1	; 0x01
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <CLCD_voidInit+0x2fe>
    17e0:	fe 01       	movw	r30, r28
    17e2:	e7 5b       	subi	r30, 0xB7	; 183
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	91 83       	std	Z+1, r25	; 0x01
    17e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ea:	de 01       	movw	r26, r28
    17ec:	a5 5b       	subi	r26, 0xB5	; 181
    17ee:	bf 4f       	sbci	r27, 0xFF	; 255
    17f0:	fe 01       	movw	r30, r28
    17f2:	e5 5b       	subi	r30, 0xB5	; 181
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	80 81       	ld	r24, Z
    17f8:	91 81       	ldd	r25, Z+1	; 0x01
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	11 96       	adiw	r26, 0x01	; 1
    17fe:	9c 93       	st	X, r25
    1800:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1802:	fe 01       	movw	r30, r28
    1804:	e5 5b       	subi	r30, 0xB5	; 181
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	d1 f6       	brne	.-76     	; 0x17c4 <CLCD_voidInit+0x2e6>
    1810:	27 c0       	rjmp	.+78     	; 0x1860 <CLCD_voidInit+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1812:	8e 01       	movw	r16, r28
    1814:	05 5b       	subi	r16, 0xB5	; 181
    1816:	1f 4f       	sbci	r17, 0xFF	; 255
    1818:	fe 01       	movw	r30, r28
    181a:	e3 5b       	subi	r30, 0xB3	; 179
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	93 81       	ldd	r25, Z+3	; 0x03
    1826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	f8 01       	movw	r30, r16
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	80 83       	st	Z, r24
    1834:	de 01       	movw	r26, r28
    1836:	a9 5b       	subi	r26, 0xB9	; 185
    1838:	bf 4f       	sbci	r27, 0xFF	; 255
    183a:	fe 01       	movw	r30, r28
    183c:	e5 5b       	subi	r30, 0xB5	; 181
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	8d 93       	st	X+, r24
    1846:	9c 93       	st	X, r25
    1848:	fe 01       	movw	r30, r28
    184a:	e9 5b       	subi	r30, 0xB9	; 185
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	80 81       	ld	r24, Z
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <CLCD_voidInit+0x374>
    1856:	fe 01       	movw	r30, r28
    1858:	e9 5b       	subi	r30, 0xB9	; 185
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	91 83       	std	Z+1, r25	; 0x01
    185e:	80 83       	st	Z, r24
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1860:	82 e0       	ldi	r24, 0x02	; 2
    1862:	62 e0       	ldi	r22, 0x02	; 2
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

	/*Set command to data pins*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	67 e0       	ldi	r22, 0x07	; 7
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	66 e0       	ldi	r22, 0x06	; 6
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	65 e0       	ldi	r22, 0x05	; 5
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	64 e0       	ldi	r22, 0x04	; 4
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	62 e0       	ldi	r22, 0x02	; 2
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    189c:	fe 01       	movw	r30, r28
    189e:	ed 5b       	subi	r30, 0xBD	; 189
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a0 e0       	ldi	r26, 0x00	; 0
    18a8:	b0 e4       	ldi	r27, 0x40	; 64
    18aa:	80 83       	st	Z, r24
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	a2 83       	std	Z+2, r26	; 0x02
    18b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b2:	8e 01       	movw	r16, r28
    18b4:	01 5c       	subi	r16, 0xC1	; 193
    18b6:	1f 4f       	sbci	r17, 0xFF	; 255
    18b8:	fe 01       	movw	r30, r28
    18ba:	ed 5b       	subi	r30, 0xBD	; 189
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	60 81       	ld	r22, Z
    18c0:	71 81       	ldd	r23, Z+1	; 0x01
    18c2:	82 81       	ldd	r24, Z+2	; 0x02
    18c4:	93 81       	ldd	r25, Z+3	; 0x03
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a ef       	ldi	r20, 0xFA	; 250
    18cc:	54 e4       	ldi	r21, 0x44	; 68
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	f8 01       	movw	r30, r16
    18d8:	80 83       	st	Z, r24
    18da:	91 83       	std	Z+1, r25	; 0x01
    18dc:	a2 83       	std	Z+2, r26	; 0x02
    18de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18e0:	fe 01       	movw	r30, r28
    18e2:	ff 96       	adiw	r30, 0x3f	; 63
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e8       	ldi	r20, 0x80	; 128
    18f2:	5f e3       	ldi	r21, 0x3F	; 63
    18f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18f8:	88 23       	and	r24, r24
    18fa:	2c f4       	brge	.+10     	; 0x1906 <CLCD_voidInit+0x428>
		__ticks = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9e af       	std	Y+62, r25	; 0x3e
    1902:	8d af       	std	Y+61, r24	; 0x3d
    1904:	46 c0       	rjmp	.+140    	; 0x1992 <CLCD_voidInit+0x4b4>
	else if (__tmp > 65535)
    1906:	fe 01       	movw	r30, r28
    1908:	ff 96       	adiw	r30, 0x3f	; 63
    190a:	60 81       	ld	r22, Z
    190c:	71 81       	ldd	r23, Z+1	; 0x01
    190e:	82 81       	ldd	r24, Z+2	; 0x02
    1910:	93 81       	ldd	r25, Z+3	; 0x03
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	57 e4       	ldi	r21, 0x47	; 71
    191a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	64 f5       	brge	.+88     	; 0x197a <CLCD_voidInit+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1922:	fe 01       	movw	r30, r28
    1924:	ed 5b       	subi	r30, 0xBD	; 189
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	60 81       	ld	r22, Z
    192a:	71 81       	ldd	r23, Z+1	; 0x01
    192c:	82 81       	ldd	r24, Z+2	; 0x02
    192e:	93 81       	ldd	r25, Z+3	; 0x03
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e2       	ldi	r20, 0x20	; 32
    1936:	51 e4       	ldi	r21, 0x41	; 65
    1938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	bc 01       	movw	r22, r24
    1942:	cd 01       	movw	r24, r26
    1944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	9e af       	std	Y+62, r25	; 0x3e
    194e:	8d af       	std	Y+61, r24	; 0x3d
    1950:	0f c0       	rjmp	.+30     	; 0x1970 <CLCD_voidInit+0x492>
    1952:	88 ec       	ldi	r24, 0xC8	; 200
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	9c af       	std	Y+60, r25	; 0x3c
    1958:	8b af       	std	Y+59, r24	; 0x3b
    195a:	8b ad       	ldd	r24, Y+59	; 0x3b
    195c:	9c ad       	ldd	r25, Y+60	; 0x3c
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <CLCD_voidInit+0x480>
    1962:	9c af       	std	Y+60, r25	; 0x3c
    1964:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1966:	8d ad       	ldd	r24, Y+61	; 0x3d
    1968:	9e ad       	ldd	r25, Y+62	; 0x3e
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	9e af       	std	Y+62, r25	; 0x3e
    196e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1970:	8d ad       	ldd	r24, Y+61	; 0x3d
    1972:	9e ad       	ldd	r25, Y+62	; 0x3e
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	69 f7       	brne	.-38     	; 0x1952 <CLCD_voidInit+0x474>
    1978:	16 c0       	rjmp	.+44     	; 0x19a6 <CLCD_voidInit+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197a:	fe 01       	movw	r30, r28
    197c:	ff 96       	adiw	r30, 0x3f	; 63
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9e af       	std	Y+62, r25	; 0x3e
    1990:	8d af       	std	Y+61, r24	; 0x3d
    1992:	8d ad       	ldd	r24, Y+61	; 0x3d
    1994:	9e ad       	ldd	r25, Y+62	; 0x3e
    1996:	9a af       	std	Y+58, r25	; 0x3a
    1998:	89 af       	std	Y+57, r24	; 0x39
    199a:	89 ad       	ldd	r24, Y+57	; 0x39
    199c:	9a ad       	ldd	r25, Y+58	; 0x3a
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <CLCD_voidInit+0x4c0>
    19a2:	9a af       	std	Y+58, r25	; 0x3a
    19a4:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    19a6:	82 e0       	ldi	r24, 0x02	; 2
    19a8:	62 e0       	ldi	r22, 0x02	; 2
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

	switch(Copy_u8Function)
    19b0:	fe 01       	movw	r30, r28
    19b2:	ed 59       	subi	r30, 0x9D	; 157
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	a9 96       	adiw	r28, 0x29	; 41
    19be:	3f af       	std	Y+63, r19	; 0x3f
    19c0:	2e af       	std	Y+62, r18	; 0x3e
    19c2:	a9 97       	sbiw	r28, 0x29	; 41
    19c4:	a9 96       	adiw	r28, 0x29	; 41
    19c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    19c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    19ca:	a9 97       	sbiw	r28, 0x29	; 41
    19cc:	84 33       	cpi	r24, 0x34	; 52
    19ce:	91 05       	cpc	r25, r1
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <CLCD_voidInit+0x4f6>
    19d2:	b5 c1       	rjmp	.+874    	; 0x1d3e <CLCD_voidInit+0x860>
    19d4:	a9 96       	adiw	r28, 0x29	; 41
    19d6:	ee ad       	ldd	r30, Y+62	; 0x3e
    19d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    19da:	a9 97       	sbiw	r28, 0x29	; 41
    19dc:	e5 33       	cpi	r30, 0x35	; 53
    19de:	f1 05       	cpc	r31, r1
    19e0:	4c f4       	brge	.+18     	; 0x19f4 <CLCD_voidInit+0x516>
    19e2:	a9 96       	adiw	r28, 0x29	; 41
    19e4:	2e ad       	ldd	r18, Y+62	; 0x3e
    19e6:	3f ad       	ldd	r19, Y+63	; 0x3f
    19e8:	a9 97       	sbiw	r28, 0x29	; 41
    19ea:	20 33       	cpi	r18, 0x30	; 48
    19ec:	31 05       	cpc	r19, r1
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <CLCD_voidInit+0x514>
    19f0:	1f c1       	rjmp	.+574    	; 0x1c30 <CLCD_voidInit+0x752>
    19f2:	2b c2       	rjmp	.+1110   	; 0x1e4a <CLCD_voidInit+0x96c>
    19f4:	a9 96       	adiw	r28, 0x29	; 41
    19f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    19f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    19fa:	a9 97       	sbiw	r28, 0x29	; 41
    19fc:	88 33       	cpi	r24, 0x38	; 56
    19fe:	91 05       	cpc	r25, r1
    1a00:	49 f0       	breq	.+18     	; 0x1a14 <CLCD_voidInit+0x536>
    1a02:	a9 96       	adiw	r28, 0x29	; 41
    1a04:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a06:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a08:	a9 97       	sbiw	r28, 0x29	; 41
    1a0a:	ec 33       	cpi	r30, 0x3C	; 60
    1a0c:	f1 05       	cpc	r31, r1
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <CLCD_voidInit+0x534>
    1a10:	88 c0       	rjmp	.+272    	; 0x1b22 <CLCD_voidInit+0x644>
    1a12:	1b c2       	rjmp	.+1078   	; 0x1e4a <CLCD_voidInit+0x96c>
    {
		case CLCD_2Lines_5x8Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	67 e0       	ldi	r22, 0x07	; 7
    1a18:	41 e0       	ldi	r20, 0x01	; 1
    1a1a:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	66 e0       	ldi	r22, 0x06	; 6
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	62 e0       	ldi	r22, 0x02	; 2
    1a2c:	41 e0       	ldi	r20, 0x01	; 1
    1a2e:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a0 e0       	ldi	r26, 0x00	; 0
    1a38:	b0 e4       	ldi	r27, 0x40	; 64
    1a3a:	8d ab       	std	Y+53, r24	; 0x35
    1a3c:	9e ab       	std	Y+54, r25	; 0x36
    1a3e:	af ab       	std	Y+55, r26	; 0x37
    1a40:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a42:	6d a9       	ldd	r22, Y+53	; 0x35
    1a44:	7e a9       	ldd	r23, Y+54	; 0x36
    1a46:	8f a9       	ldd	r24, Y+55	; 0x37
    1a48:	98 ad       	ldd	r25, Y+56	; 0x38
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4a ef       	ldi	r20, 0xFA	; 250
    1a50:	54 e4       	ldi	r21, 0x44	; 68
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	89 ab       	std	Y+49, r24	; 0x31
    1a5c:	9a ab       	std	Y+50, r25	; 0x32
    1a5e:	ab ab       	std	Y+51, r26	; 0x33
    1a60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a62:	69 a9       	ldd	r22, Y+49	; 0x31
    1a64:	7a a9       	ldd	r23, Y+50	; 0x32
    1a66:	8b a9       	ldd	r24, Y+51	; 0x33
    1a68:	9c a9       	ldd	r25, Y+52	; 0x34
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	2c f4       	brge	.+10     	; 0x1a84 <CLCD_voidInit+0x5a6>
		__ticks = 1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	98 ab       	std	Y+48, r25	; 0x30
    1a80:	8f a7       	std	Y+47, r24	; 0x2f
    1a82:	3f c0       	rjmp	.+126    	; 0x1b02 <CLCD_voidInit+0x624>
	else if (__tmp > 65535)
    1a84:	69 a9       	ldd	r22, Y+49	; 0x31
    1a86:	7a a9       	ldd	r23, Y+50	; 0x32
    1a88:	8b a9       	ldd	r24, Y+51	; 0x33
    1a8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	4c f5       	brge	.+82     	; 0x1aee <CLCD_voidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a9e:	7e a9       	ldd	r23, Y+54	; 0x36
    1aa0:	8f a9       	ldd	r24, Y+55	; 0x37
    1aa2:	98 ad       	ldd	r25, Y+56	; 0x38
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e2       	ldi	r20, 0x20	; 32
    1aaa:	51 e4       	ldi	r21, 0x41	; 65
    1aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	98 ab       	std	Y+48, r25	; 0x30
    1ac2:	8f a7       	std	Y+47, r24	; 0x2f
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <CLCD_voidInit+0x606>
    1ac6:	88 ec       	ldi	r24, 0xC8	; 200
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9e a7       	std	Y+46, r25	; 0x2e
    1acc:	8d a7       	std	Y+45, r24	; 0x2d
    1ace:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ad0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <CLCD_voidInit+0x5f4>
    1ad6:	9e a7       	std	Y+46, r25	; 0x2e
    1ad8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ada:	8f a5       	ldd	r24, Y+47	; 0x2f
    1adc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	98 ab       	std	Y+48, r25	; 0x30
    1ae2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	69 f7       	brne	.-38     	; 0x1ac6 <CLCD_voidInit+0x5e8>
    1aec:	14 c0       	rjmp	.+40     	; 0x1b16 <CLCD_voidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aee:	69 a9       	ldd	r22, Y+49	; 0x31
    1af0:	7a a9       	ldd	r23, Y+50	; 0x32
    1af2:	8b a9       	ldd	r24, Y+51	; 0x33
    1af4:	9c a9       	ldd	r25, Y+52	; 0x34
    1af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	98 ab       	std	Y+48, r25	; 0x30
    1b00:	8f a7       	std	Y+47, r24	; 0x2f
    1b02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b04:	98 a9       	ldd	r25, Y+48	; 0x30
    1b06:	9c a7       	std	Y+44, r25	; 0x2c
    1b08:	8b a7       	std	Y+43, r24	; 0x2b
    1b0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <CLCD_voidInit+0x630>
    1b12:	9c a7       	std	Y+44, r25	; 0x2c
    1b14:	8b a7       	std	Y+43, r24	; 0x2b
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	62 e0       	ldi	r22, 0x02	; 2
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    1b20:	94 c1       	rjmp	.+808    	; 0x1e4a <CLCD_voidInit+0x96c>
            break;
        case CLCD_2Lines_5x11Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	67 e0       	ldi	r22, 0x07	; 7
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	66 e0       	ldi	r22, 0x06	; 6
    1b30:	41 e0       	ldi	r20, 0x01	; 1
    1b32:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	62 e0       	ldi	r22, 0x02	; 2
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 e0       	ldi	r26, 0x00	; 0
    1b46:	b0 e4       	ldi	r27, 0x40	; 64
    1b48:	8f a3       	std	Y+39, r24	; 0x27
    1b4a:	98 a7       	std	Y+40, r25	; 0x28
    1b4c:	a9 a7       	std	Y+41, r26	; 0x29
    1b4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b50:	6f a1       	ldd	r22, Y+39	; 0x27
    1b52:	78 a5       	ldd	r23, Y+40	; 0x28
    1b54:	89 a5       	ldd	r24, Y+41	; 0x29
    1b56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4a ef       	ldi	r20, 0xFA	; 250
    1b5e:	54 e4       	ldi	r21, 0x44	; 68
    1b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	8b a3       	std	Y+35, r24	; 0x23
    1b6a:	9c a3       	std	Y+36, r25	; 0x24
    1b6c:	ad a3       	std	Y+37, r26	; 0x25
    1b6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b70:	6b a1       	ldd	r22, Y+35	; 0x23
    1b72:	7c a1       	ldd	r23, Y+36	; 0x24
    1b74:	8d a1       	ldd	r24, Y+37	; 0x25
    1b76:	9e a1       	ldd	r25, Y+38	; 0x26
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <CLCD_voidInit+0x6b4>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9a a3       	std	Y+34, r25	; 0x22
    1b8e:	89 a3       	std	Y+33, r24	; 0x21
    1b90:	3f c0       	rjmp	.+126    	; 0x1c10 <CLCD_voidInit+0x732>
	else if (__tmp > 65535)
    1b92:	6b a1       	ldd	r22, Y+35	; 0x23
    1b94:	7c a1       	ldd	r23, Y+36	; 0x24
    1b96:	8d a1       	ldd	r24, Y+37	; 0x25
    1b98:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	3f ef       	ldi	r19, 0xFF	; 255
    1b9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ba0:	57 e4       	ldi	r21, 0x47	; 71
    1ba2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	4c f5       	brge	.+82     	; 0x1bfc <CLCD_voidInit+0x71e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1baa:	6f a1       	ldd	r22, Y+39	; 0x27
    1bac:	78 a5       	ldd	r23, Y+40	; 0x28
    1bae:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	51 e4       	ldi	r21, 0x41	; 65
    1bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9a a3       	std	Y+34, r25	; 0x22
    1bd0:	89 a3       	std	Y+33, r24	; 0x21
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <CLCD_voidInit+0x714>
    1bd4:	88 ec       	ldi	r24, 0xC8	; 200
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	98 a3       	std	Y+32, r25	; 0x20
    1bda:	8f 8f       	std	Y+31, r24	; 0x1f
    1bdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bde:	98 a1       	ldd	r25, Y+32	; 0x20
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <CLCD_voidInit+0x702>
    1be4:	98 a3       	std	Y+32, r25	; 0x20
    1be6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bea:	9a a1       	ldd	r25, Y+34	; 0x22
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	9a a3       	std	Y+34, r25	; 0x22
    1bf0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	69 f7       	brne	.-38     	; 0x1bd4 <CLCD_voidInit+0x6f6>
    1bfa:	14 c0       	rjmp	.+40     	; 0x1c24 <CLCD_voidInit+0x746>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfe:	7c a1       	ldd	r23, Y+36	; 0x24
    1c00:	8d a1       	ldd	r24, Y+37	; 0x25
    1c02:	9e a1       	ldd	r25, Y+38	; 0x26
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9a a3       	std	Y+34, r25	; 0x22
    1c0e:	89 a3       	std	Y+33, r24	; 0x21
    1c10:	89 a1       	ldd	r24, Y+33	; 0x21
    1c12:	9a a1       	ldd	r25, Y+34	; 0x22
    1c14:	9e 8f       	std	Y+30, r25	; 0x1e
    1c16:	8d 8f       	std	Y+29, r24	; 0x1d
    1c18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <CLCD_voidInit+0x73e>
    1c20:	9e 8f       	std	Y+30, r25	; 0x1e
    1c22:	8d 8f       	std	Y+29, r24	; 0x1d
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	62 e0       	ldi	r22, 0x02	; 2
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    1c2e:	0d c1       	rjmp	.+538    	; 0x1e4a <CLCD_voidInit+0x96c>
            break;
        case CLCD_1Lines_5x8Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	67 e0       	ldi	r22, 0x07	; 7
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	66 e0       	ldi	r22, 0x06	; 6
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	62 e0       	ldi	r22, 0x02	; 2
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	a0 e0       	ldi	r26, 0x00	; 0
    1c54:	b0 e4       	ldi	r27, 0x40	; 64
    1c56:	89 8f       	std	Y+25, r24	; 0x19
    1c58:	9a 8f       	std	Y+26, r25	; 0x1a
    1c5a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	4a ef       	ldi	r20, 0xFA	; 250
    1c6c:	54 e4       	ldi	r21, 0x44	; 68
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	8d 8b       	std	Y+21, r24	; 0x15
    1c78:	9e 8b       	std	Y+22, r25	; 0x16
    1c7a:	af 8b       	std	Y+23, r26	; 0x17
    1c7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c80:	7e 89       	ldd	r23, Y+22	; 0x16
    1c82:	8f 89       	ldd	r24, Y+23	; 0x17
    1c84:	98 8d       	ldd	r25, Y+24	; 0x18
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e8       	ldi	r20, 0x80	; 128
    1c8c:	5f e3       	ldi	r21, 0x3F	; 63
    1c8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c92:	88 23       	and	r24, r24
    1c94:	2c f4       	brge	.+10     	; 0x1ca0 <CLCD_voidInit+0x7c2>
		__ticks = 1;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	9c 8b       	std	Y+20, r25	; 0x14
    1c9c:	8b 8b       	std	Y+19, r24	; 0x13
    1c9e:	3f c0       	rjmp	.+126    	; 0x1d1e <CLCD_voidInit+0x840>
	else if (__tmp > 65535)
    1ca0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	3f ef       	ldi	r19, 0xFF	; 255
    1cac:	4f e7       	ldi	r20, 0x7F	; 127
    1cae:	57 e4       	ldi	r21, 0x47	; 71
    1cb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb4:	18 16       	cp	r1, r24
    1cb6:	4c f5       	brge	.+82     	; 0x1d0a <CLCD_voidInit+0x82c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e2       	ldi	r20, 0x20	; 32
    1cc6:	51 e4       	ldi	r21, 0x41	; 65
    1cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	bc 01       	movw	r22, r24
    1cd2:	cd 01       	movw	r24, r26
    1cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9c 8b       	std	Y+20, r25	; 0x14
    1cde:	8b 8b       	std	Y+19, r24	; 0x13
    1ce0:	0f c0       	rjmp	.+30     	; 0x1d00 <CLCD_voidInit+0x822>
    1ce2:	88 ec       	ldi	r24, 0xC8	; 200
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	9a 8b       	std	Y+18, r25	; 0x12
    1ce8:	89 8b       	std	Y+17, r24	; 0x11
    1cea:	89 89       	ldd	r24, Y+17	; 0x11
    1cec:	9a 89       	ldd	r25, Y+18	; 0x12
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <CLCD_voidInit+0x810>
    1cf2:	9a 8b       	std	Y+18, r25	; 0x12
    1cf4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	9c 8b       	std	Y+20, r25	; 0x14
    1cfe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d00:	8b 89       	ldd	r24, Y+19	; 0x13
    1d02:	9c 89       	ldd	r25, Y+20	; 0x14
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	69 f7       	brne	.-38     	; 0x1ce2 <CLCD_voidInit+0x804>
    1d08:	14 c0       	rjmp	.+40     	; 0x1d32 <CLCD_voidInit+0x854>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d10:	98 8d       	ldd	r25, Y+24	; 0x18
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9c 8b       	std	Y+20, r25	; 0x14
    1d1c:	8b 8b       	std	Y+19, r24	; 0x13
    1d1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d20:	9c 89       	ldd	r25, Y+20	; 0x14
    1d22:	98 8b       	std	Y+16, r25	; 0x10
    1d24:	8f 87       	std	Y+15, r24	; 0x0f
    1d26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d28:	98 89       	ldd	r25, Y+16	; 0x10
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <CLCD_voidInit+0x84c>
    1d2e:	98 8b       	std	Y+16, r25	; 0x10
    1d30:	8f 87       	std	Y+15, r24	; 0x0f
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	62 e0       	ldi	r22, 0x02	; 2
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    1d3c:	86 c0       	rjmp	.+268    	; 0x1e4a <CLCD_voidInit+0x96c>
            break;
        case CLCD_1Lines_5x11Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	67 e0       	ldi	r22, 0x07	; 7
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	66 e0       	ldi	r22, 0x06	; 6
    1d4c:	41 e0       	ldi	r20, 0x01	; 1
    1d4e:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1d52:	82 e0       	ldi	r24, 0x02	; 2
    1d54:	62 e0       	ldi	r22, 0x02	; 2
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 e0       	ldi	r26, 0x00	; 0
    1d62:	b0 e4       	ldi	r27, 0x40	; 64
    1d64:	8b 87       	std	Y+11, r24	; 0x0b
    1d66:	9c 87       	std	Y+12, r25	; 0x0c
    1d68:	ad 87       	std	Y+13, r26	; 0x0d
    1d6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a ef       	ldi	r20, 0xFA	; 250
    1d7a:	54 e4       	ldi	r21, 0x44	; 68
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	8f 83       	std	Y+7, r24	; 0x07
    1d86:	98 87       	std	Y+8, r25	; 0x08
    1d88:	a9 87       	std	Y+9, r26	; 0x09
    1d8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	2c f4       	brge	.+10     	; 0x1dae <CLCD_voidInit+0x8d0>
		__ticks = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9e 83       	std	Y+6, r25	; 0x06
    1daa:	8d 83       	std	Y+5, r24	; 0x05
    1dac:	3f c0       	rjmp	.+126    	; 0x1e2c <CLCD_voidInit+0x94e>
	else if (__tmp > 65535)
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	3f ef       	ldi	r19, 0xFF	; 255
    1dba:	4f e7       	ldi	r20, 0x7F	; 127
    1dbc:	57 e4       	ldi	r21, 0x47	; 71
    1dbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	4c f5       	brge	.+82     	; 0x1e18 <CLCD_voidInit+0x93a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e2       	ldi	r20, 0x20	; 32
    1dd4:	51 e4       	ldi	r21, 0x41	; 65
    1dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	9e 83       	std	Y+6, r25	; 0x06
    1dec:	8d 83       	std	Y+5, r24	; 0x05
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <CLCD_voidInit+0x930>
    1df0:	88 ec       	ldi	r24, 0xC8	; 200
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9c 83       	std	Y+4, r25	; 0x04
    1df6:	8b 83       	std	Y+3, r24	; 0x03
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <CLCD_voidInit+0x91e>
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	9e 81       	ldd	r25, Y+6	; 0x06
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e10:	9e 81       	ldd	r25, Y+6	; 0x06
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	69 f7       	brne	.-38     	; 0x1df0 <CLCD_voidInit+0x912>
    1e16:	14 c0       	rjmp	.+40     	; 0x1e40 <CLCD_voidInit+0x962>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e18:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1a:	78 85       	ldd	r23, Y+8	; 0x08
    1e1c:	89 85       	ldd	r24, Y+9	; 0x09
    1e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8d 83       	std	Y+5, r24	; 0x05
    1e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	9a 81       	ldd	r25, Y+2	; 0x02
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <CLCD_voidInit+0x95a>
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	62 e0       	ldi	r22, 0x02	; 2
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
            break;

    }

	/*Display on off control: display enable, disable/enable cursor, no/ blink cursor*/
	switch(Copy_u8Display)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ec 59       	subi	r30, 0x9C	; 156
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 81       	ld	r24, Z
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	a7 96       	adiw	r28, 0x27	; 39
    1e58:	3f af       	std	Y+63, r19	; 0x3f
    1e5a:	2e af       	std	Y+62, r18	; 0x3e
    1e5c:	a7 97       	sbiw	r28, 0x27	; 39
    1e5e:	a7 96       	adiw	r28, 0x27	; 39
    1e60:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e62:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e64:	a7 97       	sbiw	r28, 0x27	; 39
    1e66:	8e 30       	cpi	r24, 0x0E	; 14
    1e68:	91 05       	cpc	r25, r1
    1e6a:	91 f0       	breq	.+36     	; 0x1e90 <CLCD_voidInit+0x9b2>
    1e6c:	a7 96       	adiw	r28, 0x27	; 39
    1e6e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e70:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e72:	a7 97       	sbiw	r28, 0x27	; 39
    1e74:	ef 30       	cpi	r30, 0x0F	; 15
    1e76:	f1 05       	cpc	r31, r1
    1e78:	79 f0       	breq	.+30     	; 0x1e98 <CLCD_voidInit+0x9ba>
    1e7a:	a7 96       	adiw	r28, 0x27	; 39
    1e7c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1e7e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1e80:	a7 97       	sbiw	r28, 0x27	; 39
    1e82:	2c 30       	cpi	r18, 0x0C	; 12
    1e84:	31 05       	cpc	r19, r1
    1e86:	59 f4       	brne	.+22     	; 0x1e9e <CLCD_voidInit+0x9c0>
    {

        case CLCD_Curser_OFF:
            CLCD_voidSendCommand(CLCD_Curser_OFF);
    1e88:	8c e0       	ldi	r24, 0x0C	; 12
    1e8a:	0e 94 07 07 	call	0xe0e	; 0xe0e <CLCD_voidSendCommand>
    1e8e:	07 c0       	rjmp	.+14     	; 0x1e9e <CLCD_voidInit+0x9c0>
            break;
        case CLCD_Curser_ON_NoBlinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_NoBlinking);
    1e90:	8e e0       	ldi	r24, 0x0E	; 14
    1e92:	0e 94 07 07 	call	0xe0e	; 0xe0e <CLCD_voidSendCommand>
    1e96:	03 c0       	rjmp	.+6      	; 0x1e9e <CLCD_voidInit+0x9c0>
            break;
        case CLCD_Curser_ON_Blinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_Blinking);
    1e98:	8f e0       	ldi	r24, 0x0F	; 15
    1e9a:	0e 94 07 07 	call	0xe0e	; 0xe0e <CLCD_voidSendCommand>
            break;

    }

	/*Clear display*/
	CLCD_voidSendCommand(1);
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	0e 94 07 07 	call	0xe0e	; 0xe0e <CLCD_voidSendCommand>

	#endif


}
    1ea4:	c8 59       	subi	r28, 0x98	; 152
    1ea6:	df 4f       	sbci	r29, 0xFF	; 255
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	08 95       	ret

00001ebc <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <CLCD_voidSendString+0x6>
    1ec2:	0f 92       	push	r0
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	9b 83       	std	Y+3, r25	; 0x03
    1eca:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    1ecc:	19 82       	std	Y+1, r1	; 0x01
    1ece:	15 c0       	rjmp	.+42     	; 0x1efa <CLCD_voidSendString+0x3e>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eda:	fc 01       	movw	r30, r24
    1edc:	e2 0f       	add	r30, r18
    1ede:	f3 1f       	adc	r31, r19
    1ee0:	80 81       	ld	r24, Z
    1ee2:	0e 94 bb 08 	call	0x1176	; 0x1176 <CLCD_voidSendData>
		Local_u8Counter++;
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	8f 5f       	subi	r24, 0xFF	; 255
    1eea:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u8Counter==16)
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	80 31       	cpi	r24, 0x10	; 16
    1ef0:	21 f4       	brne	.+8      	; 0x1efa <CLCD_voidSendString+0x3e>
			CLCD_voidGoToXY(1,0);
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <CLCD_voidGoToXY>
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	9b 81       	ldd	r25, Y+3	; 0x03
    1f04:	fc 01       	movw	r30, r24
    1f06:	e2 0f       	add	r30, r18
    1f08:	f3 1f       	adc	r31, r19
    1f0a:	80 81       	ld	r24, Z
    1f0c:	88 23       	and	r24, r24
    1f0e:	01 f7       	brne	.-64     	; 0x1ed0 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
		if(Local_u8Counter==16)
			CLCD_voidGoToXY(1,0);
	}
}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <CLCD_voidGoToXY+0x6>
    1f22:	0f 92       	push	r0
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	8a 83       	std	Y+2, r24	; 0x02
    1f2a:	6b 83       	std	Y+3, r22	; 0x03
	/*Calculating the Address of the DDRAM by the coordinates X and Y*/
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	88 23       	and	r24, r24
    1f30:	19 f4       	brne	.+6      	; 0x1f38 <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at the first line*/
		Local_u8Address=Copy_u8YPos;
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	06 c0       	rjmp	.+12     	; 0x1f44 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	19 f4       	brne	.+6      	; 0x1f44 <CLCD_voidGoToXY+0x28>
	{
		/*Location is at the second line*/
		Local_u8Address=Copy_u8YPos+0x40;
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	80 5c       	subi	r24, 0xC0	; 192
    1f42:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Send the DDRAM Address to point on the location on the screen you want to write on it with setting bit 7*/
	CLCD_voidSendCommand(Local_u8Address+128);
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	80 58       	subi	r24, 0x80	; 128
    1f48:	0e 94 07 07 	call	0xe0e	; 0xe0e <CLCD_voidSendCommand>
}
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8arr,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	27 97       	sbiw	r28, 0x07	; 7
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	9c 83       	std	Y+4, r25	; 0x04
    1f6e:	8b 83       	std	Y+3, r24	; 0x03
    1f70:	6d 83       	std	Y+5, r22	; 0x05
    1f72:	4e 83       	std	Y+6, r20	; 0x06
    1f74:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Counter,Local_u8CGRAM_Address;

	/*Calculating the Address of the CGRAM whose block is 8 bytes*/
	Local_u8CGRAM_Address=Copy_u8PatternNumber*8;
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	89 83       	std	Y+1, r24	; 0x01

	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	80 5c       	subi	r24, 0xC0	; 192
    1f8e:	0e 94 07 07 	call	0xe0e	; 0xe0e <CLCD_voidSendCommand>

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1f92:	1a 82       	std	Y+2, r1	; 0x02
    1f94:	0e c0       	rjmp	.+28     	; 0x1fb2 <CLCD_voidWriteSpecialCharacter+0x5a>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	e2 0f       	add	r30, r18
    1fa4:	f3 1f       	adc	r31, r19
    1fa6:	80 81       	ld	r24, Z
    1fa8:	0e 94 bb 08 	call	0x1176	; 0x1176 <CLCD_voidSendData>
	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	8f 5f       	subi	r24, 0xFF	; 255
    1fb0:	8a 83       	std	Y+2, r24	; 0x02
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	88 30       	cpi	r24, 0x08	; 8
    1fb6:	78 f3       	brcs	.-34     	; 0x1f96 <CLCD_voidWriteSpecialCharacter+0x3e>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
		}

	/*go back to the DDRAM to display the pattern in the selected position*/
		CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fba:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbc:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <CLCD_voidGoToXY>

	/*The DDRAM accessing the CGRAM by block to Displaying the pattern*/
		CLCD_voidSendData(Copy_u8PatternNumber);
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	0e 94 bb 08 	call	0x1176	; 0x1176 <CLCD_voidSendData>
}
    1fc6:	27 96       	adiw	r28, 0x07	; 7
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	6b 97       	sbiw	r28, 0x1b	; 27
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	6c 8b       	std	Y+20, r22	; 0x14
    1ff2:	7d 8b       	std	Y+21, r23	; 0x15
    1ff4:	8e 8b       	std	Y+22, r24	; 0x16
    1ff6:	9f 8b       	std	Y+23, r25	; 0x17
	/*define local counter and local itrator and temp variable for the swapping*/
	u8 i,temp;
	u8 Local_u8Counter,arr[16]={48};
    1ff8:	80 e1       	ldi	r24, 0x10	; 16
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	34 96       	adiw	r30, 0x04	; 4
    1ffe:	df 01       	movw	r26, r30
    2000:	28 2f       	mov	r18, r24
    2002:	1d 92       	st	X+, r1
    2004:	2a 95       	dec	r18
    2006:	e9 f7       	brne	.-6      	; 0x2002 <CLCD_voidWriteNumber+0x2a>
    2008:	80 e3       	ldi	r24, 0x30	; 48
    200a:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8Counter=0;
    200c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u32Number==0)
    200e:	8c 89       	ldd	r24, Y+20	; 0x14
    2010:	9d 89       	ldd	r25, Y+21	; 0x15
    2012:	ae 89       	ldd	r26, Y+22	; 0x16
    2014:	bf 89       	ldd	r27, Y+23	; 0x17
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	a1 05       	cpc	r26, r1
    201a:	b1 05       	cpc	r27, r1
    201c:	91 f5       	brne	.+100    	; 0x2082 <CLCD_voidWriteNumber+0xaa>
		CLCD_voidSendData('0');
    201e:	80 e3       	ldi	r24, 0x30	; 48
    2020:	0e 94 bb 08 	call	0x1176	; 0x1176 <CLCD_voidSendData>
    2024:	99 c0       	rjmp	.+306    	; 0x2158 <CLCD_voidWriteNumber+0x180>
	else{
	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	08 2f       	mov	r16, r24
    202a:	10 e0       	ldi	r17, 0x00	; 0
    202c:	8c 89       	ldd	r24, Y+20	; 0x14
    202e:	9d 89       	ldd	r25, Y+21	; 0x15
    2030:	ae 89       	ldd	r26, Y+22	; 0x16
    2032:	bf 89       	ldd	r27, Y+23	; 0x17
    2034:	2a e0       	ldi	r18, 0x0A	; 10
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e0       	ldi	r20, 0x00	; 0
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 91 14 	call	0x2922	; 0x2922 <__udivmodsi4>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	28 2f       	mov	r18, r24
    204a:	20 5d       	subi	r18, 0xD0	; 208
    204c:	ce 01       	movw	r24, r28
    204e:	04 96       	adiw	r24, 0x04	; 4
    2050:	fc 01       	movw	r30, r24
    2052:	e0 0f       	add	r30, r16
    2054:	f1 1f       	adc	r31, r17
    2056:	20 83       	st	Z, r18
		Copy_u32Number/=10;
    2058:	8c 89       	ldd	r24, Y+20	; 0x14
    205a:	9d 89       	ldd	r25, Y+21	; 0x15
    205c:	ae 89       	ldd	r26, Y+22	; 0x16
    205e:	bf 89       	ldd	r27, Y+23	; 0x17
    2060:	2a e0       	ldi	r18, 0x0A	; 10
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 91 14 	call	0x2922	; 0x2922 <__udivmodsi4>
    2070:	da 01       	movw	r26, r20
    2072:	c9 01       	movw	r24, r18
    2074:	8c 8b       	std	Y+20, r24	; 0x14
    2076:	9d 8b       	std	Y+21, r25	; 0x15
    2078:	ae 8b       	std	Y+22, r26	; 0x16
    207a:	bf 8b       	std	Y+23, r27	; 0x17
		Local_u8Counter++;
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u32Number==0)
		CLCD_voidSendData('0');
	else{
	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
    2082:	8c 89       	ldd	r24, Y+20	; 0x14
    2084:	9d 89       	ldd	r25, Y+21	; 0x15
    2086:	ae 89       	ldd	r26, Y+22	; 0x16
    2088:	bf 89       	ldd	r27, Y+23	; 0x17
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	a1 05       	cpc	r26, r1
    208e:	b1 05       	cpc	r27, r1
    2090:	51 f6       	brne	.-108    	; 0x2026 <CLCD_voidWriteNumber+0x4e>
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
		Copy_u32Number/=10;
		Local_u8Counter++;
	}
	arr[Local_u8Counter]='\0';
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	ce 01       	movw	r24, r28
    209a:	04 96       	adiw	r24, 0x04	; 4
    209c:	fc 01       	movw	r30, r24
    209e:	e2 0f       	add	r30, r18
    20a0:	f3 1f       	adc	r31, r19
    20a2:	10 82       	st	Z, r1

	/*Loop to reverse the array*/
	Local_u8Counter--;
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	81 50       	subi	r24, 0x01	; 1
    20a8:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    20aa:	1b 82       	std	Y+3, r1	; 0x03
    20ac:	33 c0       	rjmp	.+102    	; 0x2114 <CLCD_voidWriteNumber+0x13c>
	{
		temp=arr[i];
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	ce 01       	movw	r24, r28
    20b6:	04 96       	adiw	r24, 0x04	; 4
    20b8:	fc 01       	movw	r30, r24
    20ba:	e2 0f       	add	r30, r18
    20bc:	f3 1f       	adc	r31, r19
    20be:	80 81       	ld	r24, Z
    20c0:	8a 83       	std	Y+2, r24	; 0x02
		arr[i]=arr[Local_u8Counter-i];
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	48 2f       	mov	r20, r24
    20c6:	50 e0       	ldi	r21, 0x00	; 0
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	28 1b       	sub	r18, r24
    20d6:	39 0b       	sbc	r19, r25
    20d8:	ce 01       	movw	r24, r28
    20da:	04 96       	adiw	r24, 0x04	; 4
    20dc:	fc 01       	movw	r30, r24
    20de:	e2 0f       	add	r30, r18
    20e0:	f3 1f       	adc	r31, r19
    20e2:	20 81       	ld	r18, Z
    20e4:	ce 01       	movw	r24, r28
    20e6:	04 96       	adiw	r24, 0x04	; 4
    20e8:	fc 01       	movw	r30, r24
    20ea:	e4 0f       	add	r30, r20
    20ec:	f5 1f       	adc	r31, r21
    20ee:	20 83       	st	Z, r18
		arr[Local_u8Counter-i]=temp;
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	88 2f       	mov	r24, r24
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	28 1b       	sub	r18, r24
    20fe:	39 0b       	sbc	r19, r25
    2100:	ce 01       	movw	r24, r28
    2102:	04 96       	adiw	r24, 0x04	; 4
    2104:	fc 01       	movw	r30, r24
    2106:	e2 0f       	add	r30, r18
    2108:	f3 1f       	adc	r31, r19
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	80 83       	st	Z, r24
	}
	arr[Local_u8Counter]='\0';

	/*Loop to reverse the array*/
	Local_u8Counter--;
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	8f 5f       	subi	r24, 0xFF	; 255
    2112:	8b 83       	std	Y+3, r24	; 0x03
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	a8 2f       	mov	r26, r24
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	b9 8f       	std	Y+25, r27	; 0x19
    211c:	a8 8f       	std	Y+24, r26	; 0x18
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	9b 8f       	std	Y+27, r25	; 0x1b
    2128:	8a 8f       	std	Y+26, r24	; 0x1a
    212a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    212c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    212e:	33 23       	and	r19, r19
    2130:	2c f4       	brge	.+10     	; 0x213c <CLCD_voidWriteNumber+0x164>
    2132:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2134:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	9b 8f       	std	Y+27, r25	; 0x1b
    213a:	8a 8f       	std	Y+26, r24	; 0x1a
    213c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    213e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2140:	95 95       	asr	r25
    2142:	87 95       	ror	r24
    2144:	a8 8d       	ldd	r26, Y+24	; 0x18
    2146:	b9 8d       	ldd	r27, Y+25	; 0x19
    2148:	a8 17       	cp	r26, r24
    214a:	b9 07       	cpc	r27, r25
    214c:	0c f4       	brge	.+2      	; 0x2150 <CLCD_voidWriteNumber+0x178>
    214e:	af cf       	rjmp	.-162    	; 0x20ae <CLCD_voidWriteNumber+0xd6>
		arr[i]=arr[Local_u8Counter-i];
		arr[Local_u8Counter-i]=temp;
	}

	/*displaying the array on the screen*/
	CLCD_voidSendString(arr);
    2150:	ce 01       	movw	r24, r28
    2152:	04 96       	adiw	r24, 0x04	; 4
    2154:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <CLCD_voidSendString>
	}
}
    2158:	6b 96       	adiw	r28, 0x1b	; 27
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	1f 91       	pop	r17
    216a:	0f 91       	pop	r16
    216c:	08 95       	ret

0000216e <PORT_voidInit>:




void PORT_voidInit(void)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
	/*SET THE PORT Direction*/
	DDRA=PORTA_DIR;
    2176:	ea e3       	ldi	r30, 0x3A	; 58
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
    217c:	e7 e3       	ldi	r30, 0x37	; 55
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	8f ef       	ldi	r24, 0xFF	; 255
    2182:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    2184:	e4 e3       	ldi	r30, 0x34	; 52
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
    218a:	e1 e3       	ldi	r30, 0x31	; 49
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	83 e0       	ldi	r24, 0x03	; 3
    2190:	80 83       	st	Z, r24

	/*SET THE PORT Value*/
	PORTA=PORTA_INT;
    2192:	eb e3       	ldi	r30, 0x3B	; 59
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	10 82       	st	Z, r1
	PORTB=PORTB_INT;
    2198:	e8 e3       	ldi	r30, 0x38	; 56
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	10 82       	st	Z, r1
	PORTC=PORTC_INT;
    219e:	e5 e3       	ldi	r30, 0x35	; 53
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	10 82       	st	Z, r1
	PORTD=PORTD_INT;
    21a4:	e2 e3       	ldi	r30, 0x32	; 50
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	10 82       	st	Z, r1
}
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	28 97       	sbiw	r28, 0x08	; 8
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	8a 83       	std	Y+2, r24	; 0x02
    21c6:	6b 83       	std	Y+3, r22	; 0x03
    21c8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    21ca:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	88 30       	cpi	r24, 0x08	; 8
    21d0:	08 f0       	brcs	.+2      	; 0x21d4 <DIO_u8SetPinDirection+0x24>
    21d2:	f4 c0       	rjmp	.+488    	; 0x23bc <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    21d4:	8c 81       	ldd	r24, Y+4	; 0x04
    21d6:	88 23       	and	r24, r24
    21d8:	09 f0       	breq	.+2      	; 0x21dc <DIO_u8SetPinDirection+0x2c>
    21da:	77 c0       	rjmp	.+238    	; 0x22ca <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	38 87       	std	Y+8, r19	; 0x08
    21e4:	2f 83       	std	Y+7, r18	; 0x07
    21e6:	8f 81       	ldd	r24, Y+7	; 0x07
    21e8:	98 85       	ldd	r25, Y+8	; 0x08
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	91 05       	cpc	r25, r1
    21ee:	59 f1       	breq	.+86     	; 0x2246 <DIO_u8SetPinDirection+0x96>
    21f0:	2f 81       	ldd	r18, Y+7	; 0x07
    21f2:	38 85       	ldd	r19, Y+8	; 0x08
    21f4:	22 30       	cpi	r18, 0x02	; 2
    21f6:	31 05       	cpc	r19, r1
    21f8:	2c f4       	brge	.+10     	; 0x2204 <DIO_u8SetPinDirection+0x54>
    21fa:	8f 81       	ldd	r24, Y+7	; 0x07
    21fc:	98 85       	ldd	r25, Y+8	; 0x08
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f0       	breq	.+26     	; 0x221c <DIO_u8SetPinDirection+0x6c>
    2202:	60 c0       	rjmp	.+192    	; 0x22c4 <DIO_u8SetPinDirection+0x114>
    2204:	2f 81       	ldd	r18, Y+7	; 0x07
    2206:	38 85       	ldd	r19, Y+8	; 0x08
    2208:	22 30       	cpi	r18, 0x02	; 2
    220a:	31 05       	cpc	r19, r1
    220c:	89 f1       	breq	.+98     	; 0x2270 <DIO_u8SetPinDirection+0xc0>
    220e:	8f 81       	ldd	r24, Y+7	; 0x07
    2210:	98 85       	ldd	r25, Y+8	; 0x08
    2212:	83 30       	cpi	r24, 0x03	; 3
    2214:	91 05       	cpc	r25, r1
    2216:	09 f4       	brne	.+2      	; 0x221a <DIO_u8SetPinDirection+0x6a>
    2218:	40 c0       	rjmp	.+128    	; 0x229a <DIO_u8SetPinDirection+0xea>
    221a:	54 c0       	rjmp	.+168    	; 0x22c4 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
    221c:	aa e3       	ldi	r26, 0x3A	; 58
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	ea e3       	ldi	r30, 0x3A	; 58
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	48 2f       	mov	r20, r24
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	02 2e       	mov	r0, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <DIO_u8SetPinDirection+0x8a>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <DIO_u8SetPinDirection+0x86>
    223e:	80 95       	com	r24
    2240:	84 23       	and	r24, r20
    2242:	8c 93       	st	X, r24
    2244:	bd c0       	rjmp	.+378    	; 0x23c0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
    2246:	a7 e3       	ldi	r26, 0x37	; 55
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e7 e3       	ldi	r30, 0x37	; 55
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	48 2f       	mov	r20, r24
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	02 2e       	mov	r0, r18
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <DIO_u8SetPinDirection+0xb4>
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	0a 94       	dec	r0
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <DIO_u8SetPinDirection+0xb0>
    2268:	80 95       	com	r24
    226a:	84 23       	and	r24, r20
    226c:	8c 93       	st	X, r24
    226e:	a8 c0       	rjmp	.+336    	; 0x23c0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
    2270:	a4 e3       	ldi	r26, 0x34	; 52
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e4 e3       	ldi	r30, 0x34	; 52
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	48 2f       	mov	r20, r24
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	02 2e       	mov	r0, r18
    2288:	02 c0       	rjmp	.+4      	; 0x228e <DIO_u8SetPinDirection+0xde>
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	0a 94       	dec	r0
    2290:	e2 f7       	brpl	.-8      	; 0x228a <DIO_u8SetPinDirection+0xda>
    2292:	80 95       	com	r24
    2294:	84 23       	and	r24, r20
    2296:	8c 93       	st	X, r24
    2298:	93 c0       	rjmp	.+294    	; 0x23c0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
    229a:	a1 e3       	ldi	r26, 0x31	; 49
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e1 e3       	ldi	r30, 0x31	; 49
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	48 2f       	mov	r20, r24
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	02 2e       	mov	r0, r18
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <DIO_u8SetPinDirection+0x108>
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	0a 94       	dec	r0
    22ba:	e2 f7       	brpl	.-8      	; 0x22b4 <DIO_u8SetPinDirection+0x104>
    22bc:	80 95       	com	r24
    22be:	84 23       	and	r24, r20
    22c0:	8c 93       	st	X, r24
    22c2:	7e c0       	rjmp	.+252    	; 0x23c0 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	7b c0       	rjmp	.+246    	; 0x23c0 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    22ca:	8c 81       	ldd	r24, Y+4	; 0x04
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <DIO_u8SetPinDirection+0x122>
    22d0:	72 c0       	rjmp	.+228    	; 0x23b6 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	3e 83       	std	Y+6, r19	; 0x06
    22da:	2d 83       	std	Y+5, r18	; 0x05
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	9e 81       	ldd	r25, Y+6	; 0x06
    22e0:	81 30       	cpi	r24, 0x01	; 1
    22e2:	91 05       	cpc	r25, r1
    22e4:	49 f1       	breq	.+82     	; 0x2338 <DIO_u8SetPinDirection+0x188>
    22e6:	2d 81       	ldd	r18, Y+5	; 0x05
    22e8:	3e 81       	ldd	r19, Y+6	; 0x06
    22ea:	22 30       	cpi	r18, 0x02	; 2
    22ec:	31 05       	cpc	r19, r1
    22ee:	2c f4       	brge	.+10     	; 0x22fa <DIO_u8SetPinDirection+0x14a>
    22f0:	8d 81       	ldd	r24, Y+5	; 0x05
    22f2:	9e 81       	ldd	r25, Y+6	; 0x06
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	61 f0       	breq	.+24     	; 0x2310 <DIO_u8SetPinDirection+0x160>
    22f8:	5b c0       	rjmp	.+182    	; 0x23b0 <DIO_u8SetPinDirection+0x200>
    22fa:	2d 81       	ldd	r18, Y+5	; 0x05
    22fc:	3e 81       	ldd	r19, Y+6	; 0x06
    22fe:	22 30       	cpi	r18, 0x02	; 2
    2300:	31 05       	cpc	r19, r1
    2302:	71 f1       	breq	.+92     	; 0x2360 <DIO_u8SetPinDirection+0x1b0>
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	83 30       	cpi	r24, 0x03	; 3
    230a:	91 05       	cpc	r25, r1
    230c:	e9 f1       	breq	.+122    	; 0x2388 <DIO_u8SetPinDirection+0x1d8>
    230e:	50 c0       	rjmp	.+160    	; 0x23b0 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
    2310:	aa e3       	ldi	r26, 0x3A	; 58
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	ea e3       	ldi	r30, 0x3A	; 58
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	48 2f       	mov	r20, r24
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	02 2e       	mov	r0, r18
    2328:	02 c0       	rjmp	.+4      	; 0x232e <DIO_u8SetPinDirection+0x17e>
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	0a 94       	dec	r0
    2330:	e2 f7       	brpl	.-8      	; 0x232a <DIO_u8SetPinDirection+0x17a>
    2332:	84 2b       	or	r24, r20
    2334:	8c 93       	st	X, r24
    2336:	44 c0       	rjmp	.+136    	; 0x23c0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
    2338:	a7 e3       	ldi	r26, 0x37	; 55
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e7 e3       	ldi	r30, 0x37	; 55
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	48 2f       	mov	r20, r24
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	02 2e       	mov	r0, r18
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <DIO_u8SetPinDirection+0x1a6>
    2352:	88 0f       	add	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	0a 94       	dec	r0
    2358:	e2 f7       	brpl	.-8      	; 0x2352 <DIO_u8SetPinDirection+0x1a2>
    235a:	84 2b       	or	r24, r20
    235c:	8c 93       	st	X, r24
    235e:	30 c0       	rjmp	.+96     	; 0x23c0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
    2360:	a4 e3       	ldi	r26, 0x34	; 52
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e4 e3       	ldi	r30, 0x34	; 52
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	48 2f       	mov	r20, r24
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	02 2e       	mov	r0, r18
    2378:	02 c0       	rjmp	.+4      	; 0x237e <DIO_u8SetPinDirection+0x1ce>
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	0a 94       	dec	r0
    2380:	e2 f7       	brpl	.-8      	; 0x237a <DIO_u8SetPinDirection+0x1ca>
    2382:	84 2b       	or	r24, r20
    2384:	8c 93       	st	X, r24
    2386:	1c c0       	rjmp	.+56     	; 0x23c0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
    2388:	a1 e3       	ldi	r26, 0x31	; 49
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	e1 e3       	ldi	r30, 0x31	; 49
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	48 2f       	mov	r20, r24
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	02 2e       	mov	r0, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <DIO_u8SetPinDirection+0x1f6>
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	0a 94       	dec	r0
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <DIO_u8SetPinDirection+0x1f2>
    23aa:	84 2b       	or	r24, r20
    23ac:	8c 93       	st	X, r24
    23ae:	08 c0       	rjmp	.+16     	; 0x23c0 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	05 c0       	rjmp	.+10     	; 0x23c0 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23c2:	28 96       	adiw	r28, 0x08	; 8
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	00 d0       	rcall	.+0      	; 0x23da <DIO_u8SetPortDirection+0x6>
    23da:	00 d0       	rcall	.+0      	; 0x23dc <DIO_u8SetPortDirection+0x8>
    23dc:	0f 92       	push	r0
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	8a 83       	std	Y+2, r24	; 0x02
    23e4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    23e6:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	3d 83       	std	Y+5, r19	; 0x05
    23f0:	2c 83       	std	Y+4, r18	; 0x04
    23f2:	8c 81       	ldd	r24, Y+4	; 0x04
    23f4:	9d 81       	ldd	r25, Y+5	; 0x05
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	91 05       	cpc	r25, r1
    23fa:	d1 f0       	breq	.+52     	; 0x2430 <DIO_u8SetPortDirection+0x5c>
    23fc:	2c 81       	ldd	r18, Y+4	; 0x04
    23fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2400:	22 30       	cpi	r18, 0x02	; 2
    2402:	31 05       	cpc	r19, r1
    2404:	2c f4       	brge	.+10     	; 0x2410 <DIO_u8SetPortDirection+0x3c>
    2406:	8c 81       	ldd	r24, Y+4	; 0x04
    2408:	9d 81       	ldd	r25, Y+5	; 0x05
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	61 f0       	breq	.+24     	; 0x2426 <DIO_u8SetPortDirection+0x52>
    240e:	1f c0       	rjmp	.+62     	; 0x244e <DIO_u8SetPortDirection+0x7a>
    2410:	2c 81       	ldd	r18, Y+4	; 0x04
    2412:	3d 81       	ldd	r19, Y+5	; 0x05
    2414:	22 30       	cpi	r18, 0x02	; 2
    2416:	31 05       	cpc	r19, r1
    2418:	81 f0       	breq	.+32     	; 0x243a <DIO_u8SetPortDirection+0x66>
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	9d 81       	ldd	r25, Y+5	; 0x05
    241e:	83 30       	cpi	r24, 0x03	; 3
    2420:	91 05       	cpc	r25, r1
    2422:	81 f0       	breq	.+32     	; 0x2444 <DIO_u8SetPortDirection+0x70>
    2424:	14 c0       	rjmp	.+40     	; 0x244e <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
    2426:	ea e3       	ldi	r30, 0x3A	; 58
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	80 83       	st	Z, r24
    242e:	11 c0       	rjmp	.+34     	; 0x2452 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
    2430:	e7 e3       	ldi	r30, 0x37	; 55
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	80 83       	st	Z, r24
    2438:	0c c0       	rjmp	.+24     	; 0x2452 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
    243a:	e4 e3       	ldi	r30, 0x34	; 52
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	80 83       	st	Z, r24
    2442:	07 c0       	rjmp	.+14     	; 0x2452 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
    2444:	e1 e3       	ldi	r30, 0x31	; 49
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	80 83       	st	Z, r24
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2452:	89 81       	ldd	r24, Y+1	; 0x01
}
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	28 97       	sbiw	r28, 0x08	; 8
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	8a 83       	std	Y+2, r24	; 0x02
    247a:	6b 83       	std	Y+3, r22	; 0x03
    247c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    247e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	88 30       	cpi	r24, 0x08	; 8
    2484:	08 f0       	brcs	.+2      	; 0x2488 <DIO_u8SetPinValue+0x24>
    2486:	f4 c0       	rjmp	.+488    	; 0x2670 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
    248a:	88 23       	and	r24, r24
    248c:	09 f0       	breq	.+2      	; 0x2490 <DIO_u8SetPinValue+0x2c>
    248e:	77 c0       	rjmp	.+238    	; 0x257e <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	38 87       	std	Y+8, r19	; 0x08
    2498:	2f 83       	std	Y+7, r18	; 0x07
    249a:	8f 81       	ldd	r24, Y+7	; 0x07
    249c:	98 85       	ldd	r25, Y+8	; 0x08
    249e:	81 30       	cpi	r24, 0x01	; 1
    24a0:	91 05       	cpc	r25, r1
    24a2:	59 f1       	breq	.+86     	; 0x24fa <DIO_u8SetPinValue+0x96>
    24a4:	2f 81       	ldd	r18, Y+7	; 0x07
    24a6:	38 85       	ldd	r19, Y+8	; 0x08
    24a8:	22 30       	cpi	r18, 0x02	; 2
    24aa:	31 05       	cpc	r19, r1
    24ac:	2c f4       	brge	.+10     	; 0x24b8 <DIO_u8SetPinValue+0x54>
    24ae:	8f 81       	ldd	r24, Y+7	; 0x07
    24b0:	98 85       	ldd	r25, Y+8	; 0x08
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	69 f0       	breq	.+26     	; 0x24d0 <DIO_u8SetPinValue+0x6c>
    24b6:	60 c0       	rjmp	.+192    	; 0x2578 <DIO_u8SetPinValue+0x114>
    24b8:	2f 81       	ldd	r18, Y+7	; 0x07
    24ba:	38 85       	ldd	r19, Y+8	; 0x08
    24bc:	22 30       	cpi	r18, 0x02	; 2
    24be:	31 05       	cpc	r19, r1
    24c0:	89 f1       	breq	.+98     	; 0x2524 <DIO_u8SetPinValue+0xc0>
    24c2:	8f 81       	ldd	r24, Y+7	; 0x07
    24c4:	98 85       	ldd	r25, Y+8	; 0x08
    24c6:	83 30       	cpi	r24, 0x03	; 3
    24c8:	91 05       	cpc	r25, r1
    24ca:	09 f4       	brne	.+2      	; 0x24ce <DIO_u8SetPinValue+0x6a>
    24cc:	40 c0       	rjmp	.+128    	; 0x254e <DIO_u8SetPinValue+0xea>
    24ce:	54 c0       	rjmp	.+168    	; 0x2578 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
    24d0:	ab e3       	ldi	r26, 0x3B	; 59
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	eb e3       	ldi	r30, 0x3B	; 59
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	48 2f       	mov	r20, r24
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	02 2e       	mov	r0, r18
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <DIO_u8SetPinValue+0x8a>
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	0a 94       	dec	r0
    24f0:	e2 f7       	brpl	.-8      	; 0x24ea <DIO_u8SetPinValue+0x86>
    24f2:	80 95       	com	r24
    24f4:	84 23       	and	r24, r20
    24f6:	8c 93       	st	X, r24
    24f8:	bd c0       	rjmp	.+378    	; 0x2674 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
    24fa:	a8 e3       	ldi	r26, 0x38	; 56
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e8 e3       	ldi	r30, 0x38	; 56
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	48 2f       	mov	r20, r24
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	28 2f       	mov	r18, r24
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	02 2e       	mov	r0, r18
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <DIO_u8SetPinValue+0xb4>
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	0a 94       	dec	r0
    251a:	e2 f7       	brpl	.-8      	; 0x2514 <DIO_u8SetPinValue+0xb0>
    251c:	80 95       	com	r24
    251e:	84 23       	and	r24, r20
    2520:	8c 93       	st	X, r24
    2522:	a8 c0       	rjmp	.+336    	; 0x2674 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
    2524:	a5 e3       	ldi	r26, 0x35	; 53
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e5 e3       	ldi	r30, 0x35	; 53
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	48 2f       	mov	r20, r24
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	02 2e       	mov	r0, r18
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <DIO_u8SetPinValue+0xde>
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	0a 94       	dec	r0
    2544:	e2 f7       	brpl	.-8      	; 0x253e <DIO_u8SetPinValue+0xda>
    2546:	80 95       	com	r24
    2548:	84 23       	and	r24, r20
    254a:	8c 93       	st	X, r24
    254c:	93 c0       	rjmp	.+294    	; 0x2674 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
    254e:	a2 e3       	ldi	r26, 0x32	; 50
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	e2 e3       	ldi	r30, 0x32	; 50
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	48 2f       	mov	r20, r24
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	28 2f       	mov	r18, r24
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	02 2e       	mov	r0, r18
    2566:	02 c0       	rjmp	.+4      	; 0x256c <DIO_u8SetPinValue+0x108>
    2568:	88 0f       	add	r24, r24
    256a:	99 1f       	adc	r25, r25
    256c:	0a 94       	dec	r0
    256e:	e2 f7       	brpl	.-8      	; 0x2568 <DIO_u8SetPinValue+0x104>
    2570:	80 95       	com	r24
    2572:	84 23       	and	r24, r20
    2574:	8c 93       	st	X, r24
    2576:	7e c0       	rjmp	.+252    	; 0x2674 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	7b c0       	rjmp	.+246    	; 0x2674 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    257e:	8c 81       	ldd	r24, Y+4	; 0x04
    2580:	81 30       	cpi	r24, 0x01	; 1
    2582:	09 f0       	breq	.+2      	; 0x2586 <DIO_u8SetPinValue+0x122>
    2584:	72 c0       	rjmp	.+228    	; 0x266a <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	3e 83       	std	Y+6, r19	; 0x06
    258e:	2d 83       	std	Y+5, r18	; 0x05
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
    2592:	9e 81       	ldd	r25, Y+6	; 0x06
    2594:	81 30       	cpi	r24, 0x01	; 1
    2596:	91 05       	cpc	r25, r1
    2598:	49 f1       	breq	.+82     	; 0x25ec <DIO_u8SetPinValue+0x188>
    259a:	2d 81       	ldd	r18, Y+5	; 0x05
    259c:	3e 81       	ldd	r19, Y+6	; 0x06
    259e:	22 30       	cpi	r18, 0x02	; 2
    25a0:	31 05       	cpc	r19, r1
    25a2:	2c f4       	brge	.+10     	; 0x25ae <DIO_u8SetPinValue+0x14a>
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	9e 81       	ldd	r25, Y+6	; 0x06
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	61 f0       	breq	.+24     	; 0x25c4 <DIO_u8SetPinValue+0x160>
    25ac:	5b c0       	rjmp	.+182    	; 0x2664 <DIO_u8SetPinValue+0x200>
    25ae:	2d 81       	ldd	r18, Y+5	; 0x05
    25b0:	3e 81       	ldd	r19, Y+6	; 0x06
    25b2:	22 30       	cpi	r18, 0x02	; 2
    25b4:	31 05       	cpc	r19, r1
    25b6:	71 f1       	breq	.+92     	; 0x2614 <DIO_u8SetPinValue+0x1b0>
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	83 30       	cpi	r24, 0x03	; 3
    25be:	91 05       	cpc	r25, r1
    25c0:	e9 f1       	breq	.+122    	; 0x263c <DIO_u8SetPinValue+0x1d8>
    25c2:	50 c0       	rjmp	.+160    	; 0x2664 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
    25c4:	ab e3       	ldi	r26, 0x3B	; 59
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	eb e3       	ldi	r30, 0x3B	; 59
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	48 2f       	mov	r20, r24
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	02 2e       	mov	r0, r18
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <DIO_u8SetPinValue+0x17e>
    25de:	88 0f       	add	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	0a 94       	dec	r0
    25e4:	e2 f7       	brpl	.-8      	; 0x25de <DIO_u8SetPinValue+0x17a>
    25e6:	84 2b       	or	r24, r20
    25e8:	8c 93       	st	X, r24
    25ea:	44 c0       	rjmp	.+136    	; 0x2674 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
    25ec:	a8 e3       	ldi	r26, 0x38	; 56
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e8 e3       	ldi	r30, 0x38	; 56
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	48 2f       	mov	r20, r24
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	28 2f       	mov	r18, r24
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	02 2e       	mov	r0, r18
    2604:	02 c0       	rjmp	.+4      	; 0x260a <DIO_u8SetPinValue+0x1a6>
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	0a 94       	dec	r0
    260c:	e2 f7       	brpl	.-8      	; 0x2606 <DIO_u8SetPinValue+0x1a2>
    260e:	84 2b       	or	r24, r20
    2610:	8c 93       	st	X, r24
    2612:	30 c0       	rjmp	.+96     	; 0x2674 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
    2614:	a5 e3       	ldi	r26, 0x35	; 53
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	e5 e3       	ldi	r30, 0x35	; 53
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	48 2f       	mov	r20, r24
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	28 2f       	mov	r18, r24
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	02 2e       	mov	r0, r18
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <DIO_u8SetPinValue+0x1ce>
    262e:	88 0f       	add	r24, r24
    2630:	99 1f       	adc	r25, r25
    2632:	0a 94       	dec	r0
    2634:	e2 f7       	brpl	.-8      	; 0x262e <DIO_u8SetPinValue+0x1ca>
    2636:	84 2b       	or	r24, r20
    2638:	8c 93       	st	X, r24
    263a:	1c c0       	rjmp	.+56     	; 0x2674 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
    263c:	a2 e3       	ldi	r26, 0x32	; 50
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	e2 e3       	ldi	r30, 0x32	; 50
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	48 2f       	mov	r20, r24
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	28 2f       	mov	r18, r24
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	02 2e       	mov	r0, r18
    2654:	02 c0       	rjmp	.+4      	; 0x265a <DIO_u8SetPinValue+0x1f6>
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	0a 94       	dec	r0
    265c:	e2 f7       	brpl	.-8      	; 0x2656 <DIO_u8SetPinValue+0x1f2>
    265e:	84 2b       	or	r24, r20
    2660:	8c 93       	st	X, r24
    2662:	08 c0       	rjmp	.+16     	; 0x2674 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	05 c0       	rjmp	.+10     	; 0x2674 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2674:	89 81       	ldd	r24, Y+1	; 0x01
}
    2676:	28 96       	adiw	r28, 0x08	; 8
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	00 d0       	rcall	.+0      	; 0x268e <DIO_u8SetPortValue+0x6>
    268e:	00 d0       	rcall	.+0      	; 0x2690 <DIO_u8SetPortValue+0x8>
    2690:	0f 92       	push	r0
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	8a 83       	std	Y+2, r24	; 0x02
    2698:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    269a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	3d 83       	std	Y+5, r19	; 0x05
    26a4:	2c 83       	std	Y+4, r18	; 0x04
    26a6:	8c 81       	ldd	r24, Y+4	; 0x04
    26a8:	9d 81       	ldd	r25, Y+5	; 0x05
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	91 05       	cpc	r25, r1
    26ae:	d1 f0       	breq	.+52     	; 0x26e4 <DIO_u8SetPortValue+0x5c>
    26b0:	2c 81       	ldd	r18, Y+4	; 0x04
    26b2:	3d 81       	ldd	r19, Y+5	; 0x05
    26b4:	22 30       	cpi	r18, 0x02	; 2
    26b6:	31 05       	cpc	r19, r1
    26b8:	2c f4       	brge	.+10     	; 0x26c4 <DIO_u8SetPortValue+0x3c>
    26ba:	8c 81       	ldd	r24, Y+4	; 0x04
    26bc:	9d 81       	ldd	r25, Y+5	; 0x05
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	61 f0       	breq	.+24     	; 0x26da <DIO_u8SetPortValue+0x52>
    26c2:	1f c0       	rjmp	.+62     	; 0x2702 <DIO_u8SetPortValue+0x7a>
    26c4:	2c 81       	ldd	r18, Y+4	; 0x04
    26c6:	3d 81       	ldd	r19, Y+5	; 0x05
    26c8:	22 30       	cpi	r18, 0x02	; 2
    26ca:	31 05       	cpc	r19, r1
    26cc:	81 f0       	breq	.+32     	; 0x26ee <DIO_u8SetPortValue+0x66>
    26ce:	8c 81       	ldd	r24, Y+4	; 0x04
    26d0:	9d 81       	ldd	r25, Y+5	; 0x05
    26d2:	83 30       	cpi	r24, 0x03	; 3
    26d4:	91 05       	cpc	r25, r1
    26d6:	81 f0       	breq	.+32     	; 0x26f8 <DIO_u8SetPortValue+0x70>
    26d8:	14 c0       	rjmp	.+40     	; 0x2702 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value;break;
    26da:	eb e3       	ldi	r30, 0x3B	; 59
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	80 83       	st	Z, r24
    26e2:	11 c0       	rjmp	.+34     	; 0x2706 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value;break;
    26e4:	e8 e3       	ldi	r30, 0x38	; 56
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	80 83       	st	Z, r24
    26ec:	0c c0       	rjmp	.+24     	; 0x2706 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value;break;
    26ee:	e5 e3       	ldi	r30, 0x35	; 53
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	80 83       	st	Z, r24
    26f6:	07 c0       	rjmp	.+14     	; 0x2706 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value;break;
    26f8:	e2 e3       	ldi	r30, 0x32	; 50
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	80 83       	st	Z, r24
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2706:	89 81       	ldd	r24, Y+1	; 0x01
}
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	27 97       	sbiw	r28, 0x07	; 7
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	8a 83       	std	Y+2, r24	; 0x02
    272e:	6b 83       	std	Y+3, r22	; 0x03
    2730:	5d 83       	std	Y+5, r21	; 0x05
    2732:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2734:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=0) && (Copy_u8Pin<=DIO_u8PIN7))
    2736:	8c 81       	ldd	r24, Y+4	; 0x04
    2738:	9d 81       	ldd	r25, Y+5	; 0x05
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	09 f4       	brne	.+2      	; 0x2740 <DIO_u8GetPinValue+0x28>
    273e:	78 c0       	rjmp	.+240    	; 0x2830 <DIO_u8GetPinValue+0x118>
    2740:	8b 81       	ldd	r24, Y+3	; 0x03
    2742:	88 30       	cpi	r24, 0x08	; 8
    2744:	08 f0       	brcs	.+2      	; 0x2748 <DIO_u8GetPinValue+0x30>
    2746:	74 c0       	rjmp	.+232    	; 0x2830 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	28 2f       	mov	r18, r24
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	3f 83       	std	Y+7, r19	; 0x07
    2750:	2e 83       	std	Y+6, r18	; 0x06
    2752:	4e 81       	ldd	r20, Y+6	; 0x06
    2754:	5f 81       	ldd	r21, Y+7	; 0x07
    2756:	41 30       	cpi	r20, 0x01	; 1
    2758:	51 05       	cpc	r21, r1
    275a:	59 f1       	breq	.+86     	; 0x27b2 <DIO_u8GetPinValue+0x9a>
    275c:	8e 81       	ldd	r24, Y+6	; 0x06
    275e:	9f 81       	ldd	r25, Y+7	; 0x07
    2760:	82 30       	cpi	r24, 0x02	; 2
    2762:	91 05       	cpc	r25, r1
    2764:	34 f4       	brge	.+12     	; 0x2772 <DIO_u8GetPinValue+0x5a>
    2766:	2e 81       	ldd	r18, Y+6	; 0x06
    2768:	3f 81       	ldd	r19, Y+7	; 0x07
    276a:	21 15       	cp	r18, r1
    276c:	31 05       	cpc	r19, r1
    276e:	69 f0       	breq	.+26     	; 0x278a <DIO_u8GetPinValue+0x72>
    2770:	5c c0       	rjmp	.+184    	; 0x282a <DIO_u8GetPinValue+0x112>
    2772:	4e 81       	ldd	r20, Y+6	; 0x06
    2774:	5f 81       	ldd	r21, Y+7	; 0x07
    2776:	42 30       	cpi	r20, 0x02	; 2
    2778:	51 05       	cpc	r21, r1
    277a:	79 f1       	breq	.+94     	; 0x27da <DIO_u8GetPinValue+0xc2>
    277c:	8e 81       	ldd	r24, Y+6	; 0x06
    277e:	9f 81       	ldd	r25, Y+7	; 0x07
    2780:	83 30       	cpi	r24, 0x03	; 3
    2782:	91 05       	cpc	r25, r1
    2784:	09 f4       	brne	.+2      	; 0x2788 <DIO_u8GetPinValue+0x70>
    2786:	3d c0       	rjmp	.+122    	; 0x2802 <DIO_u8GetPinValue+0xea>
    2788:	50 c0       	rjmp	.+160    	; 0x282a <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    278a:	e9 e3       	ldi	r30, 0x39	; 57
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	88 2f       	mov	r24, r24
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	a9 01       	movw	r20, r18
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <DIO_u8GetPinValue+0x8a>
    279e:	55 95       	asr	r21
    27a0:	47 95       	ror	r20
    27a2:	8a 95       	dec	r24
    27a4:	e2 f7       	brpl	.-8      	; 0x279e <DIO_u8GetPinValue+0x86>
    27a6:	ca 01       	movw	r24, r20
    27a8:	81 70       	andi	r24, 0x01	; 1
    27aa:	ec 81       	ldd	r30, Y+4	; 0x04
    27ac:	fd 81       	ldd	r31, Y+5	; 0x05
    27ae:	80 83       	st	Z, r24
    27b0:	41 c0       	rjmp	.+130    	; 0x2834 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    27b2:	e6 e3       	ldi	r30, 0x36	; 54
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	28 2f       	mov	r18, r24
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	a9 01       	movw	r20, r18
    27c4:	02 c0       	rjmp	.+4      	; 0x27ca <DIO_u8GetPinValue+0xb2>
    27c6:	55 95       	asr	r21
    27c8:	47 95       	ror	r20
    27ca:	8a 95       	dec	r24
    27cc:	e2 f7       	brpl	.-8      	; 0x27c6 <DIO_u8GetPinValue+0xae>
    27ce:	ca 01       	movw	r24, r20
    27d0:	81 70       	andi	r24, 0x01	; 1
    27d2:	ec 81       	ldd	r30, Y+4	; 0x04
    27d4:	fd 81       	ldd	r31, Y+5	; 0x05
    27d6:	80 83       	st	Z, r24
    27d8:	2d c0       	rjmp	.+90     	; 0x2834 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    27da:	e3 e3       	ldi	r30, 0x33	; 51
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	88 2f       	mov	r24, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	a9 01       	movw	r20, r18
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <DIO_u8GetPinValue+0xda>
    27ee:	55 95       	asr	r21
    27f0:	47 95       	ror	r20
    27f2:	8a 95       	dec	r24
    27f4:	e2 f7       	brpl	.-8      	; 0x27ee <DIO_u8GetPinValue+0xd6>
    27f6:	ca 01       	movw	r24, r20
    27f8:	81 70       	andi	r24, 0x01	; 1
    27fa:	ec 81       	ldd	r30, Y+4	; 0x04
    27fc:	fd 81       	ldd	r31, Y+5	; 0x05
    27fe:	80 83       	st	Z, r24
    2800:	19 c0       	rjmp	.+50     	; 0x2834 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    2802:	e0 e3       	ldi	r30, 0x30	; 48
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	88 2f       	mov	r24, r24
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	a9 01       	movw	r20, r18
    2814:	02 c0       	rjmp	.+4      	; 0x281a <DIO_u8GetPinValue+0x102>
    2816:	55 95       	asr	r21
    2818:	47 95       	ror	r20
    281a:	8a 95       	dec	r24
    281c:	e2 f7       	brpl	.-8      	; 0x2816 <DIO_u8GetPinValue+0xfe>
    281e:	ca 01       	movw	r24, r20
    2820:	81 70       	andi	r24, 0x01	; 1
    2822:	ec 81       	ldd	r30, Y+4	; 0x04
    2824:	fd 81       	ldd	r31, Y+5	; 0x05
    2826:	80 83       	st	Z, r24
    2828:	05 c0       	rjmp	.+10     	; 0x2834 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState=1;
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <DIO_u8GetPinValue+0x11c>
			}
		}
	else
	{
		Local_u8ErrorState=1;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_u8ErrorState;
    2834:	89 81       	ldd	r24, Y+1	; 0x01
}
    2836:	27 96       	adiw	r28, 0x07	; 7
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	de bf       	out	0x3e, r29	; 62
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret

00002848 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
    2850:	af e5       	ldi	r26, 0x5F	; 95
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	ef e5       	ldi	r30, 0x5F	; 95
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	80 68       	ori	r24, 0x80	; 128
    285c:	8c 93       	st	X, r24
}
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,SREG_I);   
    286c:	af e5       	ldi	r26, 0x5F	; 95
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	ef e5       	ldi	r30, 0x5F	; 95
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	8f 77       	andi	r24, 0x7F	; 127
    2878:	8c 93       	st	X, r24
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <main>:
#include "CLCD_interface.h"



void main (void)
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	00 d0       	rcall	.+0      	; 0x2886 <main+0x6>
    2886:	00 d0       	rcall	.+0      	; 0x2888 <main+0x8>
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
	u16 App_u8ADCReading=0 ;
    288c:	1c 82       	std	Y+4, r1	; 0x04
    288e:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_counter=0;
    2890:	1a 82       	std	Y+2, r1	; 0x02
	u8 flag=0;
    2892:	19 82       	std	Y+1, r1	; 0x01

	PORT_voidInit();
    2894:	0e 94 b7 10 	call	0x216e	; 0x216e <PORT_voidInit>

	CLCD_voidInit(CLCD_2Lines_5x11Fontsize,CLCD_Curser_OFF);
    2898:	8c e3       	ldi	r24, 0x3C	; 60
    289a:	6c e0       	ldi	r22, 0x0C	; 12
    289c:	0e 94 6f 0a 	call	0x14de	; 0x14de <CLCD_voidInit>

	ADC_voidInit();
    28a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>

	CLCD_voidSendString("Total Car no =0");
    28a4:	80 e6       	ldi	r24, 0x60	; 96
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <CLCD_voidSendString>

	while(1)
	{

		ADC_u8StartConversionSynch(0,&App_u8ADCReading);
    28ac:	9e 01       	movw	r18, r28
    28ae:	2d 5f       	subi	r18, 0xFD	; 253
    28b0:	3f 4f       	sbci	r19, 0xFF	; 255
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	b9 01       	movw	r22, r18
    28b6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
		if(App_u8ADCReading==255&&flag==0)
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	9c 81       	ldd	r25, Y+4	; 0x04
    28be:	8f 3f       	cpi	r24, 0xFF	; 255
    28c0:	91 05       	cpc	r25, r1
    28c2:	f9 f4       	brne	.+62     	; 0x2902 <main+0x82>
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	88 23       	and	r24, r24
    28c8:	e1 f4       	brne	.+56     	; 0x2902 <main+0x82>
		{
			Local_counter++;
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	8f 5f       	subi	r24, 0xFF	; 255
    28ce:	8a 83       	std	Y+2, r24	; 0x02
			CLCD_voidGoToXY(0,14);
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	6e e0       	ldi	r22, 0x0E	; 14
    28d4:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <CLCD_voidGoToXY>
			CLCD_voidWriteNumber(Local_counter);
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a0 e0       	ldi	r26, 0x00	; 0
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <CLCD_voidWriteNumber>
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_HIGH);
    28ea:	83 e0       	ldi	r24, 0x03	; 3
    28ec:	61 e0       	ldi	r22, 0x01	; 1
    28ee:	41 e0       	ldi	r20, 0x01	; 1
    28f0:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_HIGH);
    28f4:	83 e0       	ldi	r24, 0x03	; 3
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	41 e0       	ldi	r20, 0x01	; 1
    28fa:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
			flag=1;
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	89 83       	std	Y+1, r24	; 0x01
		}

		if(App_u8ADCReading==0)
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	9c 81       	ldd	r25, Y+4	; 0x04
    2906:	00 97       	sbiw	r24, 0x00	; 0
    2908:	89 f6       	brne	.-94     	; 0x28ac <main+0x2c>
		{
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_LOW);
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	61 e0       	ldi	r22, 0x01	; 1
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_LOW);
    2914:	83 e0       	ldi	r24, 0x03	; 3
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	0e 94 32 12 	call	0x2464	; 0x2464 <DIO_u8SetPinValue>
			flag=0;
    291e:	19 82       	std	Y+1, r1	; 0x01
    2920:	c5 cf       	rjmp	.-118    	; 0x28ac <main+0x2c>

00002922 <__udivmodsi4>:
    2922:	a1 e2       	ldi	r26, 0x21	; 33
    2924:	1a 2e       	mov	r1, r26
    2926:	aa 1b       	sub	r26, r26
    2928:	bb 1b       	sub	r27, r27
    292a:	fd 01       	movw	r30, r26
    292c:	0d c0       	rjmp	.+26     	; 0x2948 <__udivmodsi4_ep>

0000292e <__udivmodsi4_loop>:
    292e:	aa 1f       	adc	r26, r26
    2930:	bb 1f       	adc	r27, r27
    2932:	ee 1f       	adc	r30, r30
    2934:	ff 1f       	adc	r31, r31
    2936:	a2 17       	cp	r26, r18
    2938:	b3 07       	cpc	r27, r19
    293a:	e4 07       	cpc	r30, r20
    293c:	f5 07       	cpc	r31, r21
    293e:	20 f0       	brcs	.+8      	; 0x2948 <__udivmodsi4_ep>
    2940:	a2 1b       	sub	r26, r18
    2942:	b3 0b       	sbc	r27, r19
    2944:	e4 0b       	sbc	r30, r20
    2946:	f5 0b       	sbc	r31, r21

00002948 <__udivmodsi4_ep>:
    2948:	66 1f       	adc	r22, r22
    294a:	77 1f       	adc	r23, r23
    294c:	88 1f       	adc	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	1a 94       	dec	r1
    2952:	69 f7       	brne	.-38     	; 0x292e <__udivmodsi4_loop>
    2954:	60 95       	com	r22
    2956:	70 95       	com	r23
    2958:	80 95       	com	r24
    295a:	90 95       	com	r25
    295c:	9b 01       	movw	r18, r22
    295e:	ac 01       	movw	r20, r24
    2960:	bd 01       	movw	r22, r26
    2962:	cf 01       	movw	r24, r30
    2964:	08 95       	ret

00002966 <__prologue_saves__>:
    2966:	2f 92       	push	r2
    2968:	3f 92       	push	r3
    296a:	4f 92       	push	r4
    296c:	5f 92       	push	r5
    296e:	6f 92       	push	r6
    2970:	7f 92       	push	r7
    2972:	8f 92       	push	r8
    2974:	9f 92       	push	r9
    2976:	af 92       	push	r10
    2978:	bf 92       	push	r11
    297a:	cf 92       	push	r12
    297c:	df 92       	push	r13
    297e:	ef 92       	push	r14
    2980:	ff 92       	push	r15
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	ca 1b       	sub	r28, r26
    2990:	db 0b       	sbc	r29, r27
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	09 94       	ijmp

0000299e <__epilogue_restores__>:
    299e:	2a 88       	ldd	r2, Y+18	; 0x12
    29a0:	39 88       	ldd	r3, Y+17	; 0x11
    29a2:	48 88       	ldd	r4, Y+16	; 0x10
    29a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    29a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    29a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    29aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    29ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    29ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    29b0:	b9 84       	ldd	r11, Y+9	; 0x09
    29b2:	c8 84       	ldd	r12, Y+8	; 0x08
    29b4:	df 80       	ldd	r13, Y+7	; 0x07
    29b6:	ee 80       	ldd	r14, Y+6	; 0x06
    29b8:	fd 80       	ldd	r15, Y+5	; 0x05
    29ba:	0c 81       	ldd	r16, Y+4	; 0x04
    29bc:	1b 81       	ldd	r17, Y+3	; 0x03
    29be:	aa 81       	ldd	r26, Y+2	; 0x02
    29c0:	b9 81       	ldd	r27, Y+1	; 0x01
    29c2:	ce 0f       	add	r28, r30
    29c4:	d1 1d       	adc	r29, r1
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	ed 01       	movw	r28, r26
    29d2:	08 95       	ret

000029d4 <_exit>:
    29d4:	f8 94       	cli

000029d6 <__stop_program>:
    29d6:	ff cf       	rjmp	.-2      	; 0x29d6 <__stop_program>
