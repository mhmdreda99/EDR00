
KPD_LCD_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e98  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00002e98  00002f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001fb0  00000000  00000000  00002f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bfe  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000079df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000088ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000097d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009a65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a233  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <main>
      7a:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2f 97       	sbiw	r28, 0x0f	; 15
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8f 87       	std	Y+15, r24	; 0x0f


	/*Set RS pin to low for command*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	0e 94 95 0a 	call	0x152a	; 0x152a <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	0e 94 95 0a 	call	0x152a	; 0x152a <DIO_u8SetPinValue>

	#ifdef  _EIGHT_BIT

    /*Set command to data pins*/
    DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	6f 85       	ldd	r22, Y+15	; 0x0f
     b64:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPortValue>
    
    /*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	62 e0       	ldi	r22, 0x02	; 2
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 95 0a 	call	0x152a	; 0x152a <DIO_u8SetPinValue>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e4       	ldi	r27, 0x40	; 64
     b7a:	8b 87       	std	Y+11, r24	; 0x0b
     b7c:	9c 87       	std	Y+12, r25	; 0x0c
     b7e:	ad 87       	std	Y+13, r26	; 0x0d
     b80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b82:	6b 85       	ldd	r22, Y+11	; 0x0b
     b84:	7c 85       	ldd	r23, Y+12	; 0x0c
     b86:	8d 85       	ldd	r24, Y+13	; 0x0d
     b88:	9e 85       	ldd	r25, Y+14	; 0x0e
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	8f 83       	std	Y+7, r24	; 0x07
     b9c:	98 87       	std	Y+8, r25	; 0x08
     b9e:	a9 87       	std	Y+9, r26	; 0x09
     ba0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba2:	6f 81       	ldd	r22, Y+7	; 0x07
     ba4:	78 85       	ldd	r23, Y+8	; 0x08
     ba6:	89 85       	ldd	r24, Y+9	; 0x09
     ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bb6:	88 23       	and	r24, r24
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9e 83       	std	Y+6, r25	; 0x06
     bc0:	8d 83       	std	Y+5, r24	; 0x05
     bc2:	3f c0       	rjmp	.+126    	; 0xc42 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bc4:	6f 81       	ldd	r22, Y+7	; 0x07
     bc6:	78 85       	ldd	r23, Y+8	; 0x08
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	3f ef       	ldi	r19, 0xFF	; 255
     bd0:	4f e7       	ldi	r20, 0x7F	; 127
     bd2:	57 e4       	ldi	r21, 0x47	; 71
     bd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd8:	18 16       	cp	r1, r24
     bda:	4c f5       	brge	.+82     	; 0xc2e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bde:	7c 85       	ldd	r23, Y+12	; 0x0c
     be0:	8d 85       	ldd	r24, Y+13	; 0x0d
     be2:	9e 85       	ldd	r25, Y+14	; 0x0e
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <CLCD_voidSendCommand+0xee>
     c06:	88 ec       	ldi	r24, 0xC8	; 200
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <CLCD_voidSendCommand+0xdc>
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8d 81       	ldd	r24, Y+5	; 0x05
     c1c:	9e 81       	ldd	r25, Y+6	; 0x06
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <CLCD_voidSendCommand+0xd0>
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	6f 81       	ldd	r22, Y+7	; 0x07
     c30:	78 85       	ldd	r23, Y+8	; 0x08
     c32:	89 85       	ldd	r24, Y+9	; 0x09
     c34:	9a 85       	ldd	r25, Y+10	; 0x0a
     c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <CLCD_voidSendCommand+0x118>
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	62 e0       	ldi	r22, 0x02	; 2
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	0e 94 95 0a 	call	0x152a	; 0x152a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

	#endif


}
     c60:	2f 96       	adiw	r28, 0x0f	; 15
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	2f 97       	sbiw	r28, 0x0f	; 15
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to High for Data*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	0e 94 95 0a 	call	0x152a	; 0x152a <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	0e 94 95 0a 	call	0x152a	; 0x152a <DIO_u8SetPinValue>

	#ifdef _EIGHT_BIT

    /*Set command to data pins*/
    DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	6f 85       	ldd	r22, Y+15	; 0x0f
     ca0:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_u8SetPortValue>

    /*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	62 e0       	ldi	r22, 0x02	; 2
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	0e 94 95 0a 	call	0x152a	; 0x152a <DIO_u8SetPinValue>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b0 e4       	ldi	r27, 0x40	; 64
     cb6:	8b 87       	std	Y+11, r24	; 0x0b
     cb8:	9c 87       	std	Y+12, r25	; 0x0c
     cba:	ad 87       	std	Y+13, r26	; 0x0d
     cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a ef       	ldi	r20, 0xFA	; 250
     ccc:	54 e4       	ldi	r21, 0x44	; 68
     cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	8f 83       	std	Y+7, r24	; 0x07
     cd8:	98 87       	std	Y+8, r25	; 0x08
     cda:	a9 87       	std	Y+9, r26	; 0x09
     cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cf2:	88 23       	and	r24, r24
     cf4:	2c f4       	brge	.+10     	; 0xd00 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9e 83       	std	Y+6, r25	; 0x06
     cfc:	8d 83       	std	Y+5, r24	; 0x05
     cfe:	3f c0       	rjmp	.+126    	; 0xd7e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d00:	6f 81       	ldd	r22, Y+7	; 0x07
     d02:	78 85       	ldd	r23, Y+8	; 0x08
     d04:	89 85       	ldd	r24, Y+9	; 0x09
     d06:	9a 85       	ldd	r25, Y+10	; 0x0a
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d14:	18 16       	cp	r1, r24
     d16:	4c f5       	brge	.+82     	; 0xd6a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d18:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
     d40:	0f c0       	rjmp	.+30     	; 0xd60 <CLCD_voidSendData+0xee>
     d42:	88 ec       	ldi	r24, 0xC8	; 200
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8b 83       	std	Y+3, r24	; 0x03
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <CLCD_voidSendData+0xdc>
     d52:	9c 83       	std	Y+4, r25	; 0x04
     d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	69 f7       	brne	.-38     	; 0xd42 <CLCD_voidSendData+0xd0>
     d68:	14 c0       	rjmp	.+40     	; 0xd92 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6a:	6f 81       	ldd	r22, Y+7	; 0x07
     d6c:	78 85       	ldd	r23, Y+8	; 0x08
     d6e:	89 85       	ldd	r24, Y+9	; 0x09
     d70:	9a 85       	ldd	r25, Y+10	; 0x0a
     d72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <CLCD_voidSendData+0x118>
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	62 e0       	ldi	r22, 0x02	; 2
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	0e 94 95 0a 	call	0x152a	; 0x152a <DIO_u8SetPinValue>
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

	#endif

}
     d9c:	2f 96       	adiw	r28, 0x0f	; 15
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <CLCD_voidInit>:

void CLCD_voidInit(u8 Copy_u8Function,u8 Copy_u8Display)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	64 97       	sbiw	r28, 0x14	; 20
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	8f 87       	std	Y+15, r24	; 0x0f
     dc4:	68 8b       	std	Y+16, r22	; 0x10
	#ifdef _EIGHT_BIT

	/*Initialize LCD pins direction*/
	DIO_u8SetPortDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	6f ef       	ldi	r22, 0xFF	; 255
     dca:	0e 94 4d 0a 	call	0x149a	; 0x149a <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	41 e0       	ldi	r20, 0x01	; 1
     dd4:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	62 e0       	ldi	r22, 0x02	; 2
     de6:	41 e0       	ldi	r20, 0x01	; 1
     de8:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_u8SetPinDirection>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e2       	ldi	r26, 0x20	; 32
     df2:	b2 e4       	ldi	r27, 0x42	; 66
     df4:	8b 87       	std	Y+11, r24	; 0x0b
     df6:	9c 87       	std	Y+12, r25	; 0x0c
     df8:	ad 87       	std	Y+13, r26	; 0x0d
     dfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     e00:	8d 85       	ldd	r24, Y+13	; 0x0d
     e02:	9e 85       	ldd	r25, Y+14	; 0x0e
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	4a ef       	ldi	r20, 0xFA	; 250
     e0a:	54 e4       	ldi	r21, 0x44	; 68
     e0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	8f 83       	std	Y+7, r24	; 0x07
     e16:	98 87       	std	Y+8, r25	; 0x08
     e18:	a9 87       	std	Y+9, r26	; 0x09
     e1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e1c:	6f 81       	ldd	r22, Y+7	; 0x07
     e1e:	78 85       	ldd	r23, Y+8	; 0x08
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e8       	ldi	r20, 0x80	; 128
     e2a:	5f e3       	ldi	r21, 0x3F	; 63
     e2c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e30:	88 23       	and	r24, r24
     e32:	2c f4       	brge	.+10     	; 0xe3e <CLCD_voidInit+0x90>
		__ticks = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9e 83       	std	Y+6, r25	; 0x06
     e3a:	8d 83       	std	Y+5, r24	; 0x05
     e3c:	3f c0       	rjmp	.+126    	; 0xebc <CLCD_voidInit+0x10e>
	else if (__tmp > 65535)
     e3e:	6f 81       	ldd	r22, Y+7	; 0x07
     e40:	78 85       	ldd	r23, Y+8	; 0x08
     e42:	89 85       	ldd	r24, Y+9	; 0x09
     e44:	9a 85       	ldd	r25, Y+10	; 0x0a
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	3f ef       	ldi	r19, 0xFF	; 255
     e4a:	4f e7       	ldi	r20, 0x7F	; 127
     e4c:	57 e4       	ldi	r21, 0x47	; 71
     e4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e52:	18 16       	cp	r1, r24
     e54:	4c f5       	brge	.+82     	; 0xea8 <CLCD_voidInit+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e56:	6b 85       	ldd	r22, Y+11	; 0x0b
     e58:	7c 85       	ldd	r23, Y+12	; 0x0c
     e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e2       	ldi	r20, 0x20	; 32
     e64:	51 e4       	ldi	r21, 0x41	; 65
     e66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9e 83       	std	Y+6, r25	; 0x06
     e7c:	8d 83       	std	Y+5, r24	; 0x05
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <CLCD_voidInit+0xf0>
     e80:	88 ec       	ldi	r24, 0xC8	; 200
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9c 83       	std	Y+4, r25	; 0x04
     e86:	8b 83       	std	Y+3, r24	; 0x03
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	9c 81       	ldd	r25, Y+4	; 0x04
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <CLCD_voidInit+0xde>
     e90:	9c 83       	std	Y+4, r25	; 0x04
     e92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	9e 83       	std	Y+6, r25	; 0x06
     e9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f7       	brne	.-38     	; 0xe80 <CLCD_voidInit+0xd2>
     ea6:	14 c0       	rjmp	.+40     	; 0xed0 <CLCD_voidInit+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea8:	6f 81       	ldd	r22, Y+7	; 0x07
     eaa:	78 85       	ldd	r23, Y+8	; 0x08
     eac:	89 85       	ldd	r24, Y+9	; 0x09
     eae:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	9e 83       	std	Y+6, r25	; 0x06
     eba:	8d 83       	std	Y+5, r24	; 0x05
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	9a 83       	std	Y+2, r25	; 0x02
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <CLCD_voidInit+0x11a>
     ecc:	9a 83       	std	Y+2, r25	; 0x02
     ece:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set command: Choose lines, Choose Font size*/
	switch(Copy_u8Function)
     ed0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3c 8b       	std	Y+20, r19	; 0x14
     ed8:	2b 8b       	std	Y+19, r18	; 0x13
     eda:	8b 89       	ldd	r24, Y+19	; 0x13
     edc:	9c 89       	ldd	r25, Y+20	; 0x14
     ede:	84 33       	cpi	r24, 0x34	; 52
     ee0:	91 05       	cpc	r25, r1
     ee2:	11 f1       	breq	.+68     	; 0xf28 <CLCD_voidInit+0x17a>
     ee4:	2b 89       	ldd	r18, Y+19	; 0x13
     ee6:	3c 89       	ldd	r19, Y+20	; 0x14
     ee8:	25 33       	cpi	r18, 0x35	; 53
     eea:	31 05       	cpc	r19, r1
     eec:	34 f4       	brge	.+12     	; 0xefa <CLCD_voidInit+0x14c>
     eee:	8b 89       	ldd	r24, Y+19	; 0x13
     ef0:	9c 89       	ldd	r25, Y+20	; 0x14
     ef2:	80 33       	cpi	r24, 0x30	; 48
     ef4:	91 05       	cpc	r25, r1
     ef6:	a1 f0       	breq	.+40     	; 0xf20 <CLCD_voidInit+0x172>
     ef8:	1a c0       	rjmp	.+52     	; 0xf2e <CLCD_voidInit+0x180>
     efa:	2b 89       	ldd	r18, Y+19	; 0x13
     efc:	3c 89       	ldd	r19, Y+20	; 0x14
     efe:	28 33       	cpi	r18, 0x38	; 56
     f00:	31 05       	cpc	r19, r1
     f02:	31 f0       	breq	.+12     	; 0xf10 <CLCD_voidInit+0x162>
     f04:	8b 89       	ldd	r24, Y+19	; 0x13
     f06:	9c 89       	ldd	r25, Y+20	; 0x14
     f08:	8c 33       	cpi	r24, 0x3C	; 60
     f0a:	91 05       	cpc	r25, r1
     f0c:	29 f0       	breq	.+10     	; 0xf18 <CLCD_voidInit+0x16a>
     f0e:	0f c0       	rjmp	.+30     	; 0xf2e <CLCD_voidInit+0x180>
    {
		case CLCD_2Lines_5x8Fontsize:
            CLCD_voidSendCommand(CLCD_2Lines_5x8Fontsize);
     f10:	88 e3       	ldi	r24, 0x38	; 56
     f12:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
     f16:	0b c0       	rjmp	.+22     	; 0xf2e <CLCD_voidInit+0x180>
            break;
        case CLCD_2Lines_5x11Fontsize:
            CLCD_voidSendCommand(CLCD_2Lines_5x11Fontsize);
     f18:	8c e3       	ldi	r24, 0x3C	; 60
     f1a:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
     f1e:	07 c0       	rjmp	.+14     	; 0xf2e <CLCD_voidInit+0x180>
            break;
        case CLCD_1Lines_5x8Fontsize:
            CLCD_voidSendCommand(CLCD_1Lines_5x11Fontsize);
     f20:	84 e3       	ldi	r24, 0x34	; 52
     f22:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
     f26:	03 c0       	rjmp	.+6      	; 0xf2e <CLCD_voidInit+0x180>
            break;
        case CLCD_1Lines_5x11Fontsize:
            CLCD_voidSendCommand(CLCD_1Lines_5x11Fontsize);
     f28:	84 e3       	ldi	r24, 0x34	; 52
     f2a:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
            break;
    }

	/*Display on off control: display enable, disable/enable cursor, no/ blink cursor*/
	switch(Copy_u8Display)
     f2e:	88 89       	ldd	r24, Y+16	; 0x10
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	3a 8b       	std	Y+18, r19	; 0x12
     f36:	29 8b       	std	Y+17, r18	; 0x11
     f38:	89 89       	ldd	r24, Y+17	; 0x11
     f3a:	9a 89       	ldd	r25, Y+18	; 0x12
     f3c:	8e 30       	cpi	r24, 0x0E	; 14
     f3e:	91 05       	cpc	r25, r1
     f40:	71 f0       	breq	.+28     	; 0xf5e <CLCD_voidInit+0x1b0>
     f42:	29 89       	ldd	r18, Y+17	; 0x11
     f44:	3a 89       	ldd	r19, Y+18	; 0x12
     f46:	2f 30       	cpi	r18, 0x0F	; 15
     f48:	31 05       	cpc	r19, r1
     f4a:	69 f0       	breq	.+26     	; 0xf66 <CLCD_voidInit+0x1b8>
     f4c:	89 89       	ldd	r24, Y+17	; 0x11
     f4e:	9a 89       	ldd	r25, Y+18	; 0x12
     f50:	8c 30       	cpi	r24, 0x0C	; 12
     f52:	91 05       	cpc	r25, r1
     f54:	59 f4       	brne	.+22     	; 0xf6c <CLCD_voidInit+0x1be>
    {

        case CLCD_Curser_OFF:
            CLCD_voidSendCommand(CLCD_Curser_OFF);
     f56:	8c e0       	ldi	r24, 0x0C	; 12
     f58:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
     f5c:	07 c0       	rjmp	.+14     	; 0xf6c <CLCD_voidInit+0x1be>
            break;
        case CLCD_Curser_ON_NoBlinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_NoBlinking);
     f5e:	8e e0       	ldi	r24, 0x0E	; 14
     f60:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <CLCD_voidInit+0x1be>
            break;
        case CLCD_Curser_ON_Blinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_Blinking);
     f66:	8f e0       	ldi	r24, 0x0F	; 15
     f68:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
            break;

    }

	/*Clear display*/
	CLCD_voidSendCommand(1);
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(1);

	#endif


}
     f72:	64 96       	adiw	r28, 0x14	; 20
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <CLCD_voidSendString+0x6>
     f8a:	0f 92       	push	r0
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	9b 83       	std	Y+3, r25	; 0x03
     f92:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
     f94:	19 82       	std	Y+1, r1	; 0x01
     f96:	15 c0       	rjmp	.+42     	; 0xfc2 <CLCD_voidSendString+0x3e>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	9b 81       	ldd	r25, Y+3	; 0x03
     fa2:	fc 01       	movw	r30, r24
     fa4:	e2 0f       	add	r30, r18
     fa6:	f3 1f       	adc	r31, r19
     fa8:	80 81       	ld	r24, Z
     faa:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
		Local_u8Counter++;
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u8Counter==16)
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	80 31       	cpi	r24, 0x10	; 16
     fb8:	21 f4       	brne	.+8      	; 0xfc2 <CLCD_voidSendString+0x3e>
			CLCD_voidGoToXY(1,0);
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <CLCD_voidGoToXY>
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	fc 01       	movw	r30, r24
     fce:	e2 0f       	add	r30, r18
     fd0:	f3 1f       	adc	r31, r19
     fd2:	80 81       	ld	r24, Z
     fd4:	88 23       	and	r24, r24
     fd6:	01 f7       	brne	.-64     	; 0xf98 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
		if(Local_u8Counter==16)
			CLCD_voidGoToXY(1,0);
	}
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <CLCD_voidGoToXY+0x6>
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	8a 83       	std	Y+2, r24	; 0x02
     ff2:	6b 83       	std	Y+3, r22	; 0x03
	/*Calculating the Address of the DDRAM by the coordinates X and Y*/
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	88 23       	and	r24, r24
     ff8:	19 f4       	brne	.+6      	; 0x1000 <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at the first line*/
		Local_u8Address=Copy_u8YPos;
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	19 f4       	brne	.+6      	; 0x100c <CLCD_voidGoToXY+0x28>
	{
		/*Location is at the second line*/
		Local_u8Address=Copy_u8YPos+0x40;
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	80 5c       	subi	r24, 0xC0	; 192
    100a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Send the DDRAM Address to point on the location on the screen you want to write on it with setting bit 7*/
	CLCD_voidSendCommand(Local_u8Address+128);
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	80 58       	subi	r24, 0x80	; 128
    1010:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8arr,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	27 97       	sbiw	r28, 0x07	; 7
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
    1038:	6d 83       	std	Y+5, r22	; 0x05
    103a:	4e 83       	std	Y+6, r20	; 0x06
    103c:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Counter,Local_u8CGRAM_Address;

	/*Calculating the Address of the CGRAM whose block is 8 bytes*/
	Local_u8CGRAM_Address=Copy_u8PatternNumber*8;
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	89 83       	std	Y+1, r24	; 0x01

	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	80 5c       	subi	r24, 0xC0	; 192
    1056:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    105a:	1a 82       	std	Y+2, r1	; 0x02
    105c:	0e c0       	rjmp	.+28     	; 0x107a <CLCD_voidWriteSpecialCharacter+0x5a>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	fc 01       	movw	r30, r24
    106a:	e2 0f       	add	r30, r18
    106c:	f3 1f       	adc	r31, r19
    106e:	80 81       	ld	r24, Z
    1070:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	8f 5f       	subi	r24, 0xFF	; 255
    1078:	8a 83       	std	Y+2, r24	; 0x02
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	88 30       	cpi	r24, 0x08	; 8
    107e:	78 f3       	brcs	.-34     	; 0x105e <CLCD_voidWriteSpecialCharacter+0x3e>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
		}

	/*go back to the DDRAM to display the pattern in the selected position*/
		CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1080:	8e 81       	ldd	r24, Y+6	; 0x06
    1082:	6f 81       	ldd	r22, Y+7	; 0x07
    1084:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <CLCD_voidGoToXY>

	/*The DDRAM accessing the CGRAM by block to Displaying the pattern*/
		CLCD_voidSendData(Copy_u8PatternNumber);
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
}
    108e:	27 96       	adiw	r28, 0x07	; 7
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	6b 97       	sbiw	r28, 0x1b	; 27
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	6c 8b       	std	Y+20, r22	; 0x14
    10ba:	7d 8b       	std	Y+21, r23	; 0x15
    10bc:	8e 8b       	std	Y+22, r24	; 0x16
    10be:	9f 8b       	std	Y+23, r25	; 0x17
	/*define local counter and local itrator and temp variable for the swapping*/
	u8 i,temp;
	u8 Local_u8Counter,arr[16]={48};
    10c0:	80 e1       	ldi	r24, 0x10	; 16
    10c2:	fe 01       	movw	r30, r28
    10c4:	34 96       	adiw	r30, 0x04	; 4
    10c6:	df 01       	movw	r26, r30
    10c8:	28 2f       	mov	r18, r24
    10ca:	1d 92       	st	X+, r1
    10cc:	2a 95       	dec	r18
    10ce:	e9 f7       	brne	.-6      	; 0x10ca <CLCD_voidWriteNumber+0x2a>
    10d0:	80 e3       	ldi	r24, 0x30	; 48
    10d2:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8Counter=0;
    10d4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u32Number==0)
    10d6:	8c 89       	ldd	r24, Y+20	; 0x14
    10d8:	9d 89       	ldd	r25, Y+21	; 0x15
    10da:	ae 89       	ldd	r26, Y+22	; 0x16
    10dc:	bf 89       	ldd	r27, Y+23	; 0x17
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	a1 05       	cpc	r26, r1
    10e2:	b1 05       	cpc	r27, r1
    10e4:	91 f5       	brne	.+100    	; 0x114a <CLCD_voidWriteNumber+0xaa>
		CLCD_voidSendData('0');
    10e6:	80 e3       	ldi	r24, 0x30	; 48
    10e8:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    10ec:	99 c0       	rjmp	.+306    	; 0x1220 <CLCD_voidWriteNumber+0x180>
	else{
	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	08 2f       	mov	r16, r24
    10f2:	10 e0       	ldi	r17, 0x00	; 0
    10f4:	8c 89       	ldd	r24, Y+20	; 0x14
    10f6:	9d 89       	ldd	r25, Y+21	; 0x15
    10f8:	ae 89       	ldd	r26, Y+22	; 0x16
    10fa:	bf 89       	ldd	r27, Y+23	; 0x17
    10fc:	2a e0       	ldi	r18, 0x0A	; 10
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	bc 01       	movw	r22, r24
    1106:	cd 01       	movw	r24, r26
    1108:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodsi4>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	28 2f       	mov	r18, r24
    1112:	20 5d       	subi	r18, 0xD0	; 208
    1114:	ce 01       	movw	r24, r28
    1116:	04 96       	adiw	r24, 0x04	; 4
    1118:	fc 01       	movw	r30, r24
    111a:	e0 0f       	add	r30, r16
    111c:	f1 1f       	adc	r31, r17
    111e:	20 83       	st	Z, r18
		Copy_u32Number/=10;
    1120:	8c 89       	ldd	r24, Y+20	; 0x14
    1122:	9d 89       	ldd	r25, Y+21	; 0x15
    1124:	ae 89       	ldd	r26, Y+22	; 0x16
    1126:	bf 89       	ldd	r27, Y+23	; 0x17
    1128:	2a e0       	ldi	r18, 0x0A	; 10
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodsi4>
    1138:	da 01       	movw	r26, r20
    113a:	c9 01       	movw	r24, r18
    113c:	8c 8b       	std	Y+20, r24	; 0x14
    113e:	9d 8b       	std	Y+21, r25	; 0x15
    1140:	ae 8b       	std	Y+22, r26	; 0x16
    1142:	bf 8b       	std	Y+23, r27	; 0x17
		Local_u8Counter++;
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u32Number==0)
		CLCD_voidSendData('0');
	else{
	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
    114a:	8c 89       	ldd	r24, Y+20	; 0x14
    114c:	9d 89       	ldd	r25, Y+21	; 0x15
    114e:	ae 89       	ldd	r26, Y+22	; 0x16
    1150:	bf 89       	ldd	r27, Y+23	; 0x17
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	a1 05       	cpc	r26, r1
    1156:	b1 05       	cpc	r27, r1
    1158:	51 f6       	brne	.-108    	; 0x10ee <CLCD_voidWriteNumber+0x4e>
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
		Copy_u32Number/=10;
		Local_u8Counter++;
	}
	arr[Local_u8Counter]='\0';
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	ce 01       	movw	r24, r28
    1162:	04 96       	adiw	r24, 0x04	; 4
    1164:	fc 01       	movw	r30, r24
    1166:	e2 0f       	add	r30, r18
    1168:	f3 1f       	adc	r31, r19
    116a:	10 82       	st	Z, r1

	/*Loop to reverse the array*/
	Local_u8Counter--;
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	81 50       	subi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    1172:	1b 82       	std	Y+3, r1	; 0x03
    1174:	33 c0       	rjmp	.+102    	; 0x11dc <CLCD_voidWriteNumber+0x13c>
	{
		temp=arr[i];
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	ce 01       	movw	r24, r28
    117e:	04 96       	adiw	r24, 0x04	; 4
    1180:	fc 01       	movw	r30, r24
    1182:	e2 0f       	add	r30, r18
    1184:	f3 1f       	adc	r31, r19
    1186:	80 81       	ld	r24, Z
    1188:	8a 83       	std	Y+2, r24	; 0x02
		arr[i]=arr[Local_u8Counter-i];
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	48 2f       	mov	r20, r24
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	28 1b       	sub	r18, r24
    119e:	39 0b       	sbc	r19, r25
    11a0:	ce 01       	movw	r24, r28
    11a2:	04 96       	adiw	r24, 0x04	; 4
    11a4:	fc 01       	movw	r30, r24
    11a6:	e2 0f       	add	r30, r18
    11a8:	f3 1f       	adc	r31, r19
    11aa:	20 81       	ld	r18, Z
    11ac:	ce 01       	movw	r24, r28
    11ae:	04 96       	adiw	r24, 0x04	; 4
    11b0:	fc 01       	movw	r30, r24
    11b2:	e4 0f       	add	r30, r20
    11b4:	f5 1f       	adc	r31, r21
    11b6:	20 83       	st	Z, r18
		arr[Local_u8Counter-i]=temp;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	28 1b       	sub	r18, r24
    11c6:	39 0b       	sbc	r19, r25
    11c8:	ce 01       	movw	r24, r28
    11ca:	04 96       	adiw	r24, 0x04	; 4
    11cc:	fc 01       	movw	r30, r24
    11ce:	e2 0f       	add	r30, r18
    11d0:	f3 1f       	adc	r31, r19
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	80 83       	st	Z, r24
	}
	arr[Local_u8Counter]='\0';

	/*Loop to reverse the array*/
	Local_u8Counter--;
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	8b 83       	std	Y+3, r24	; 0x03
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	a8 2f       	mov	r26, r24
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	b9 8f       	std	Y+25, r27	; 0x19
    11e4:	a8 8f       	std	Y+24, r26	; 0x18
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9b 8f       	std	Y+27, r25	; 0x1b
    11f0:	8a 8f       	std	Y+26, r24	; 0x1a
    11f2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    11f4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    11f6:	33 23       	and	r19, r19
    11f8:	2c f4       	brge	.+10     	; 0x1204 <CLCD_voidWriteNumber+0x164>
    11fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	9b 8f       	std	Y+27, r25	; 0x1b
    1202:	8a 8f       	std	Y+26, r24	; 0x1a
    1204:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1206:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1208:	95 95       	asr	r25
    120a:	87 95       	ror	r24
    120c:	a8 8d       	ldd	r26, Y+24	; 0x18
    120e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1210:	a8 17       	cp	r26, r24
    1212:	b9 07       	cpc	r27, r25
    1214:	0c f4       	brge	.+2      	; 0x1218 <CLCD_voidWriteNumber+0x178>
    1216:	af cf       	rjmp	.-162    	; 0x1176 <CLCD_voidWriteNumber+0xd6>
		arr[i]=arr[Local_u8Counter-i];
		arr[Local_u8Counter-i]=temp;
	}

	/*displaying the array on the screen*/
	CLCD_voidSendString(arr);
    1218:	ce 01       	movw	r24, r28
    121a:	04 96       	adiw	r24, 0x04	; 4
    121c:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendString>
	}
}
    1220:	6b 96       	adiw	r28, 0x1b	; 27
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <PORT_voidInit>:




void PORT_voidInit(void)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
	/*SET THE PORT Direction*/
	DDRA=PORTA_DIR;
    123e:	ea e3       	ldi	r30, 0x3A	; 58
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
    1244:	e7 e3       	ldi	r30, 0x37	; 55
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
    124a:	e4 e3       	ldi	r30, 0x34	; 52
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
    1250:	e1 e3       	ldi	r30, 0x31	; 49
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	10 82       	st	Z, r1

	/*SET THE PORT Value*/
	PORTA=PORTA_INT;
    1256:	eb e3       	ldi	r30, 0x3B	; 59
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	10 82       	st	Z, r1
	PORTB=PORTB_INT;
    125c:	e8 e3       	ldi	r30, 0x38	; 56
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	10 82       	st	Z, r1
	PORTC=PORTC_INT;
    1262:	e5 e3       	ldi	r30, 0x35	; 53
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	10 82       	st	Z, r1
	PORTD=PORTD_INT;
    1268:	e2 e3       	ldi	r30, 0x32	; 50
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	87 e0       	ldi	r24, 0x07	; 7
    126e:	80 83       	st	Z, r24
}
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	28 97       	sbiw	r28, 0x08	; 8
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	8a 83       	std	Y+2, r24	; 0x02
    128c:	6b 83       	std	Y+3, r22	; 0x03
    128e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1290:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	88 30       	cpi	r24, 0x08	; 8
    1296:	08 f0       	brcs	.+2      	; 0x129a <DIO_u8SetPinDirection+0x24>
    1298:	f4 c0       	rjmp	.+488    	; 0x1482 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	88 23       	and	r24, r24
    129e:	09 f0       	breq	.+2      	; 0x12a2 <DIO_u8SetPinDirection+0x2c>
    12a0:	77 c0       	rjmp	.+238    	; 0x1390 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	38 87       	std	Y+8, r19	; 0x08
    12aa:	2f 83       	std	Y+7, r18	; 0x07
    12ac:	8f 81       	ldd	r24, Y+7	; 0x07
    12ae:	98 85       	ldd	r25, Y+8	; 0x08
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	91 05       	cpc	r25, r1
    12b4:	59 f1       	breq	.+86     	; 0x130c <DIO_u8SetPinDirection+0x96>
    12b6:	2f 81       	ldd	r18, Y+7	; 0x07
    12b8:	38 85       	ldd	r19, Y+8	; 0x08
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	2c f4       	brge	.+10     	; 0x12ca <DIO_u8SetPinDirection+0x54>
    12c0:	8f 81       	ldd	r24, Y+7	; 0x07
    12c2:	98 85       	ldd	r25, Y+8	; 0x08
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	69 f0       	breq	.+26     	; 0x12e2 <DIO_u8SetPinDirection+0x6c>
    12c8:	60 c0       	rjmp	.+192    	; 0x138a <DIO_u8SetPinDirection+0x114>
    12ca:	2f 81       	ldd	r18, Y+7	; 0x07
    12cc:	38 85       	ldd	r19, Y+8	; 0x08
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	89 f1       	breq	.+98     	; 0x1336 <DIO_u8SetPinDirection+0xc0>
    12d4:	8f 81       	ldd	r24, Y+7	; 0x07
    12d6:	98 85       	ldd	r25, Y+8	; 0x08
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	91 05       	cpc	r25, r1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <DIO_u8SetPinDirection+0x6a>
    12de:	40 c0       	rjmp	.+128    	; 0x1360 <DIO_u8SetPinDirection+0xea>
    12e0:	54 c0       	rjmp	.+168    	; 0x138a <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
    12e2:	aa e3       	ldi	r26, 0x3A	; 58
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	ea e3       	ldi	r30, 0x3A	; 58
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_u8SetPinDirection+0x8a>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_u8SetPinDirection+0x86>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	bd c0       	rjmp	.+378    	; 0x1486 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
    130c:	a7 e3       	ldi	r26, 0x37	; 55
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e7 e3       	ldi	r30, 0x37	; 55
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_u8SetPinDirection+0xb4>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_u8SetPinDirection+0xb0>
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	a8 c0       	rjmp	.+336    	; 0x1486 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
    1336:	a4 e3       	ldi	r26, 0x34	; 52
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e4 e3       	ldi	r30, 0x34	; 52
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_u8SetPinDirection+0xde>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_u8SetPinDirection+0xda>
    1358:	80 95       	com	r24
    135a:	84 23       	and	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	93 c0       	rjmp	.+294    	; 0x1486 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
    1360:	a1 e3       	ldi	r26, 0x31	; 49
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e1 e3       	ldi	r30, 0x31	; 49
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_u8SetPinDirection+0x108>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_u8SetPinDirection+0x104>
    1382:	80 95       	com	r24
    1384:	84 23       	and	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	7e c0       	rjmp	.+252    	; 0x1486 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	7b c0       	rjmp	.+246    	; 0x1486 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	09 f0       	breq	.+2      	; 0x1398 <DIO_u8SetPinDirection+0x122>
    1396:	72 c0       	rjmp	.+228    	; 0x147c <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	3e 83       	std	Y+6, r19	; 0x06
    13a0:	2d 83       	std	Y+5, r18	; 0x05
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	9e 81       	ldd	r25, Y+6	; 0x06
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	91 05       	cpc	r25, r1
    13aa:	49 f1       	breq	.+82     	; 0x13fe <DIO_u8SetPinDirection+0x188>
    13ac:	2d 81       	ldd	r18, Y+5	; 0x05
    13ae:	3e 81       	ldd	r19, Y+6	; 0x06
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	2c f4       	brge	.+10     	; 0x13c0 <DIO_u8SetPinDirection+0x14a>
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	61 f0       	breq	.+24     	; 0x13d6 <DIO_u8SetPinDirection+0x160>
    13be:	5b c0       	rjmp	.+182    	; 0x1476 <DIO_u8SetPinDirection+0x200>
    13c0:	2d 81       	ldd	r18, Y+5	; 0x05
    13c2:	3e 81       	ldd	r19, Y+6	; 0x06
    13c4:	22 30       	cpi	r18, 0x02	; 2
    13c6:	31 05       	cpc	r19, r1
    13c8:	71 f1       	breq	.+92     	; 0x1426 <DIO_u8SetPinDirection+0x1b0>
    13ca:	8d 81       	ldd	r24, Y+5	; 0x05
    13cc:	9e 81       	ldd	r25, Y+6	; 0x06
    13ce:	83 30       	cpi	r24, 0x03	; 3
    13d0:	91 05       	cpc	r25, r1
    13d2:	e9 f1       	breq	.+122    	; 0x144e <DIO_u8SetPinDirection+0x1d8>
    13d4:	50 c0       	rjmp	.+160    	; 0x1476 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
    13d6:	aa e3       	ldi	r26, 0x3A	; 58
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	ea e3       	ldi	r30, 0x3A	; 58
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_u8SetPinDirection+0x17e>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_u8SetPinDirection+0x17a>
    13f8:	84 2b       	or	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	44 c0       	rjmp	.+136    	; 0x1486 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
    13fe:	a7 e3       	ldi	r26, 0x37	; 55
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e7 e3       	ldi	r30, 0x37	; 55
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_u8SetPinDirection+0x1a6>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_u8SetPinDirection+0x1a2>
    1420:	84 2b       	or	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	30 c0       	rjmp	.+96     	; 0x1486 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
    1426:	a4 e3       	ldi	r26, 0x34	; 52
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e4 e3       	ldi	r30, 0x34	; 52
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <DIO_u8SetPinDirection+0x1ce>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <DIO_u8SetPinDirection+0x1ca>
    1448:	84 2b       	or	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	1c c0       	rjmp	.+56     	; 0x1486 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
    144e:	a1 e3       	ldi	r26, 0x31	; 49
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e1 e3       	ldi	r30, 0x31	; 49
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_u8SetPinDirection+0x1f6>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_u8SetPinDirection+0x1f2>
    1470:	84 2b       	or	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	05 c0       	rjmp	.+10     	; 0x1486 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	89 83       	std	Y+1, r24	; 0x01
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
}
    1488:	28 96       	adiw	r28, 0x08	; 8
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <DIO_u8SetPortDirection+0x6>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <DIO_u8SetPortDirection+0x8>
    14a2:	0f 92       	push	r0
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	8a 83       	std	Y+2, r24	; 0x02
    14aa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    14ac:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	3d 83       	std	Y+5, r19	; 0x05
    14b6:	2c 83       	std	Y+4, r18	; 0x04
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	91 05       	cpc	r25, r1
    14c0:	d1 f0       	breq	.+52     	; 0x14f6 <DIO_u8SetPortDirection+0x5c>
    14c2:	2c 81       	ldd	r18, Y+4	; 0x04
    14c4:	3d 81       	ldd	r19, Y+5	; 0x05
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	2c f4       	brge	.+10     	; 0x14d6 <DIO_u8SetPortDirection+0x3c>
    14cc:	8c 81       	ldd	r24, Y+4	; 0x04
    14ce:	9d 81       	ldd	r25, Y+5	; 0x05
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	61 f0       	breq	.+24     	; 0x14ec <DIO_u8SetPortDirection+0x52>
    14d4:	1f c0       	rjmp	.+62     	; 0x1514 <DIO_u8SetPortDirection+0x7a>
    14d6:	2c 81       	ldd	r18, Y+4	; 0x04
    14d8:	3d 81       	ldd	r19, Y+5	; 0x05
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	81 f0       	breq	.+32     	; 0x1500 <DIO_u8SetPortDirection+0x66>
    14e0:	8c 81       	ldd	r24, Y+4	; 0x04
    14e2:	9d 81       	ldd	r25, Y+5	; 0x05
    14e4:	83 30       	cpi	r24, 0x03	; 3
    14e6:	91 05       	cpc	r25, r1
    14e8:	81 f0       	breq	.+32     	; 0x150a <DIO_u8SetPortDirection+0x70>
    14ea:	14 c0       	rjmp	.+40     	; 0x1514 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
    14ec:	ea e3       	ldi	r30, 0x3A	; 58
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	80 83       	st	Z, r24
    14f4:	11 c0       	rjmp	.+34     	; 0x1518 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
    14f6:	e7 e3       	ldi	r30, 0x37	; 55
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	80 83       	st	Z, r24
    14fe:	0c c0       	rjmp	.+24     	; 0x1518 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
    1500:	e4 e3       	ldi	r30, 0x34	; 52
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	80 83       	st	Z, r24
    1508:	07 c0       	rjmp	.+14     	; 0x1518 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
    150a:	e1 e3       	ldi	r30, 0x31	; 49
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	80 83       	st	Z, r24
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1518:	89 81       	ldd	r24, Y+1	; 0x01
}
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	28 97       	sbiw	r28, 0x08	; 8
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	8a 83       	std	Y+2, r24	; 0x02
    1540:	6b 83       	std	Y+3, r22	; 0x03
    1542:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1544:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	88 30       	cpi	r24, 0x08	; 8
    154a:	08 f0       	brcs	.+2      	; 0x154e <DIO_u8SetPinValue+0x24>
    154c:	f4 c0       	rjmp	.+488    	; 0x1736 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	88 23       	and	r24, r24
    1552:	09 f0       	breq	.+2      	; 0x1556 <DIO_u8SetPinValue+0x2c>
    1554:	77 c0       	rjmp	.+238    	; 0x1644 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	38 87       	std	Y+8, r19	; 0x08
    155e:	2f 83       	std	Y+7, r18	; 0x07
    1560:	8f 81       	ldd	r24, Y+7	; 0x07
    1562:	98 85       	ldd	r25, Y+8	; 0x08
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	91 05       	cpc	r25, r1
    1568:	59 f1       	breq	.+86     	; 0x15c0 <DIO_u8SetPinValue+0x96>
    156a:	2f 81       	ldd	r18, Y+7	; 0x07
    156c:	38 85       	ldd	r19, Y+8	; 0x08
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	2c f4       	brge	.+10     	; 0x157e <DIO_u8SetPinValue+0x54>
    1574:	8f 81       	ldd	r24, Y+7	; 0x07
    1576:	98 85       	ldd	r25, Y+8	; 0x08
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	69 f0       	breq	.+26     	; 0x1596 <DIO_u8SetPinValue+0x6c>
    157c:	60 c0       	rjmp	.+192    	; 0x163e <DIO_u8SetPinValue+0x114>
    157e:	2f 81       	ldd	r18, Y+7	; 0x07
    1580:	38 85       	ldd	r19, Y+8	; 0x08
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	89 f1       	breq	.+98     	; 0x15ea <DIO_u8SetPinValue+0xc0>
    1588:	8f 81       	ldd	r24, Y+7	; 0x07
    158a:	98 85       	ldd	r25, Y+8	; 0x08
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	91 05       	cpc	r25, r1
    1590:	09 f4       	brne	.+2      	; 0x1594 <DIO_u8SetPinValue+0x6a>
    1592:	40 c0       	rjmp	.+128    	; 0x1614 <DIO_u8SetPinValue+0xea>
    1594:	54 c0       	rjmp	.+168    	; 0x163e <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
    1596:	ab e3       	ldi	r26, 0x3B	; 59
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	eb e3       	ldi	r30, 0x3B	; 59
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_u8SetPinValue+0x8a>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_u8SetPinValue+0x86>
    15b8:	80 95       	com	r24
    15ba:	84 23       	and	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	bd c0       	rjmp	.+378    	; 0x173a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
    15c0:	a8 e3       	ldi	r26, 0x38	; 56
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e8 e3       	ldi	r30, 0x38	; 56
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	02 2e       	mov	r0, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <DIO_u8SetPinValue+0xb4>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	0a 94       	dec	r0
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <DIO_u8SetPinValue+0xb0>
    15e2:	80 95       	com	r24
    15e4:	84 23       	and	r24, r20
    15e6:	8c 93       	st	X, r24
    15e8:	a8 c0       	rjmp	.+336    	; 0x173a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
    15ea:	a5 e3       	ldi	r26, 0x35	; 53
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e5 e3       	ldi	r30, 0x35	; 53
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 2e       	mov	r0, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <DIO_u8SetPinValue+0xde>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <DIO_u8SetPinValue+0xda>
    160c:	80 95       	com	r24
    160e:	84 23       	and	r24, r20
    1610:	8c 93       	st	X, r24
    1612:	93 c0       	rjmp	.+294    	; 0x173a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
    1614:	a2 e3       	ldi	r26, 0x32	; 50
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e2 e3       	ldi	r30, 0x32	; 50
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 2e       	mov	r0, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <DIO_u8SetPinValue+0x108>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	0a 94       	dec	r0
    1634:	e2 f7       	brpl	.-8      	; 0x162e <DIO_u8SetPinValue+0x104>
    1636:	80 95       	com	r24
    1638:	84 23       	and	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	7e c0       	rjmp	.+252    	; 0x173a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	7b c0       	rjmp	.+246    	; 0x173a <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	09 f0       	breq	.+2      	; 0x164c <DIO_u8SetPinValue+0x122>
    164a:	72 c0       	rjmp	.+228    	; 0x1730 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3e 83       	std	Y+6, r19	; 0x06
    1654:	2d 83       	std	Y+5, r18	; 0x05
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	49 f1       	breq	.+82     	; 0x16b2 <DIO_u8SetPinValue+0x188>
    1660:	2d 81       	ldd	r18, Y+5	; 0x05
    1662:	3e 81       	ldd	r19, Y+6	; 0x06
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	2c f4       	brge	.+10     	; 0x1674 <DIO_u8SetPinValue+0x14a>
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	61 f0       	breq	.+24     	; 0x168a <DIO_u8SetPinValue+0x160>
    1672:	5b c0       	rjmp	.+182    	; 0x172a <DIO_u8SetPinValue+0x200>
    1674:	2d 81       	ldd	r18, Y+5	; 0x05
    1676:	3e 81       	ldd	r19, Y+6	; 0x06
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	71 f1       	breq	.+92     	; 0x16da <DIO_u8SetPinValue+0x1b0>
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	e9 f1       	breq	.+122    	; 0x1702 <DIO_u8SetPinValue+0x1d8>
    1688:	50 c0       	rjmp	.+160    	; 0x172a <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
    168a:	ab e3       	ldi	r26, 0x3B	; 59
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	eb e3       	ldi	r30, 0x3B	; 59
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_u8SetPinValue+0x17e>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_u8SetPinValue+0x17a>
    16ac:	84 2b       	or	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	44 c0       	rjmp	.+136    	; 0x173a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
    16b2:	a8 e3       	ldi	r26, 0x38	; 56
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e8 e3       	ldi	r30, 0x38	; 56
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <DIO_u8SetPinValue+0x1a6>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <DIO_u8SetPinValue+0x1a2>
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	30 c0       	rjmp	.+96     	; 0x173a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
    16da:	a5 e3       	ldi	r26, 0x35	; 53
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e5 e3       	ldi	r30, 0x35	; 53
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <DIO_u8SetPinValue+0x1ce>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <DIO_u8SetPinValue+0x1ca>
    16fc:	84 2b       	or	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	1c c0       	rjmp	.+56     	; 0x173a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
    1702:	a2 e3       	ldi	r26, 0x32	; 50
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e2 e3       	ldi	r30, 0x32	; 50
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <DIO_u8SetPinValue+0x1f6>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <DIO_u8SetPinValue+0x1f2>
    1724:	84 2b       	or	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	08 c0       	rjmp	.+16     	; 0x173a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	05 c0       	rjmp	.+10     	; 0x173a <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	02 c0       	rjmp	.+4      	; 0x173a <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    173a:	89 81       	ldd	r24, Y+1	; 0x01
}
    173c:	28 96       	adiw	r28, 0x08	; 8
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	00 d0       	rcall	.+0      	; 0x1754 <DIO_u8SetPortValue+0x6>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <DIO_u8SetPortValue+0x8>
    1756:	0f 92       	push	r0
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	8a 83       	std	Y+2, r24	; 0x02
    175e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1760:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	3d 83       	std	Y+5, r19	; 0x05
    176a:	2c 83       	std	Y+4, r18	; 0x04
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	9d 81       	ldd	r25, Y+5	; 0x05
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	91 05       	cpc	r25, r1
    1774:	d1 f0       	breq	.+52     	; 0x17aa <DIO_u8SetPortValue+0x5c>
    1776:	2c 81       	ldd	r18, Y+4	; 0x04
    1778:	3d 81       	ldd	r19, Y+5	; 0x05
    177a:	22 30       	cpi	r18, 0x02	; 2
    177c:	31 05       	cpc	r19, r1
    177e:	2c f4       	brge	.+10     	; 0x178a <DIO_u8SetPortValue+0x3c>
    1780:	8c 81       	ldd	r24, Y+4	; 0x04
    1782:	9d 81       	ldd	r25, Y+5	; 0x05
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	61 f0       	breq	.+24     	; 0x17a0 <DIO_u8SetPortValue+0x52>
    1788:	1f c0       	rjmp	.+62     	; 0x17c8 <DIO_u8SetPortValue+0x7a>
    178a:	2c 81       	ldd	r18, Y+4	; 0x04
    178c:	3d 81       	ldd	r19, Y+5	; 0x05
    178e:	22 30       	cpi	r18, 0x02	; 2
    1790:	31 05       	cpc	r19, r1
    1792:	81 f0       	breq	.+32     	; 0x17b4 <DIO_u8SetPortValue+0x66>
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	9d 81       	ldd	r25, Y+5	; 0x05
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	91 05       	cpc	r25, r1
    179c:	81 f0       	breq	.+32     	; 0x17be <DIO_u8SetPortValue+0x70>
    179e:	14 c0       	rjmp	.+40     	; 0x17c8 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value;break;
    17a0:	eb e3       	ldi	r30, 0x3B	; 59
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	80 83       	st	Z, r24
    17a8:	11 c0       	rjmp	.+34     	; 0x17cc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value;break;
    17aa:	e8 e3       	ldi	r30, 0x38	; 56
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	80 83       	st	Z, r24
    17b2:	0c c0       	rjmp	.+24     	; 0x17cc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value;break;
    17b4:	e5 e3       	ldi	r30, 0x35	; 53
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	80 83       	st	Z, r24
    17bc:	07 c0       	rjmp	.+14     	; 0x17cc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value;break;
    17be:	e2 e3       	ldi	r30, 0x32	; 50
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	80 83       	st	Z, r24
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	27 97       	sbiw	r28, 0x07	; 7
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	8a 83       	std	Y+2, r24	; 0x02
    17f4:	6b 83       	std	Y+3, r22	; 0x03
    17f6:	5d 83       	std	Y+5, r21	; 0x05
    17f8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    17fa:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=0) && (Copy_u8Pin<=DIO_u8PIN7))
    17fc:	8c 81       	ldd	r24, Y+4	; 0x04
    17fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	09 f4       	brne	.+2      	; 0x1806 <DIO_u8GetPinValue+0x28>
    1804:	78 c0       	rjmp	.+240    	; 0x18f6 <DIO_u8GetPinValue+0x118>
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	88 30       	cpi	r24, 0x08	; 8
    180a:	08 f0       	brcs	.+2      	; 0x180e <DIO_u8GetPinValue+0x30>
    180c:	74 c0       	rjmp	.+232    	; 0x18f6 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	3f 83       	std	Y+7, r19	; 0x07
    1816:	2e 83       	std	Y+6, r18	; 0x06
    1818:	4e 81       	ldd	r20, Y+6	; 0x06
    181a:	5f 81       	ldd	r21, Y+7	; 0x07
    181c:	41 30       	cpi	r20, 0x01	; 1
    181e:	51 05       	cpc	r21, r1
    1820:	59 f1       	breq	.+86     	; 0x1878 <DIO_u8GetPinValue+0x9a>
    1822:	8e 81       	ldd	r24, Y+6	; 0x06
    1824:	9f 81       	ldd	r25, Y+7	; 0x07
    1826:	82 30       	cpi	r24, 0x02	; 2
    1828:	91 05       	cpc	r25, r1
    182a:	34 f4       	brge	.+12     	; 0x1838 <DIO_u8GetPinValue+0x5a>
    182c:	2e 81       	ldd	r18, Y+6	; 0x06
    182e:	3f 81       	ldd	r19, Y+7	; 0x07
    1830:	21 15       	cp	r18, r1
    1832:	31 05       	cpc	r19, r1
    1834:	69 f0       	breq	.+26     	; 0x1850 <DIO_u8GetPinValue+0x72>
    1836:	5c c0       	rjmp	.+184    	; 0x18f0 <DIO_u8GetPinValue+0x112>
    1838:	4e 81       	ldd	r20, Y+6	; 0x06
    183a:	5f 81       	ldd	r21, Y+7	; 0x07
    183c:	42 30       	cpi	r20, 0x02	; 2
    183e:	51 05       	cpc	r21, r1
    1840:	79 f1       	breq	.+94     	; 0x18a0 <DIO_u8GetPinValue+0xc2>
    1842:	8e 81       	ldd	r24, Y+6	; 0x06
    1844:	9f 81       	ldd	r25, Y+7	; 0x07
    1846:	83 30       	cpi	r24, 0x03	; 3
    1848:	91 05       	cpc	r25, r1
    184a:	09 f4       	brne	.+2      	; 0x184e <DIO_u8GetPinValue+0x70>
    184c:	3d c0       	rjmp	.+122    	; 0x18c8 <DIO_u8GetPinValue+0xea>
    184e:	50 c0       	rjmp	.+160    	; 0x18f0 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    1850:	e9 e3       	ldi	r30, 0x39	; 57
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a9 01       	movw	r20, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <DIO_u8GetPinValue+0x8a>
    1864:	55 95       	asr	r21
    1866:	47 95       	ror	r20
    1868:	8a 95       	dec	r24
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <DIO_u8GetPinValue+0x86>
    186c:	ca 01       	movw	r24, r20
    186e:	81 70       	andi	r24, 0x01	; 1
    1870:	ec 81       	ldd	r30, Y+4	; 0x04
    1872:	fd 81       	ldd	r31, Y+5	; 0x05
    1874:	80 83       	st	Z, r24
    1876:	41 c0       	rjmp	.+130    	; 0x18fa <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    1878:	e6 e3       	ldi	r30, 0x36	; 54
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a9 01       	movw	r20, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <DIO_u8GetPinValue+0xb2>
    188c:	55 95       	asr	r21
    188e:	47 95       	ror	r20
    1890:	8a 95       	dec	r24
    1892:	e2 f7       	brpl	.-8      	; 0x188c <DIO_u8GetPinValue+0xae>
    1894:	ca 01       	movw	r24, r20
    1896:	81 70       	andi	r24, 0x01	; 1
    1898:	ec 81       	ldd	r30, Y+4	; 0x04
    189a:	fd 81       	ldd	r31, Y+5	; 0x05
    189c:	80 83       	st	Z, r24
    189e:	2d c0       	rjmp	.+90     	; 0x18fa <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    18a0:	e3 e3       	ldi	r30, 0x33	; 51
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a9 01       	movw	r20, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_u8GetPinValue+0xda>
    18b4:	55 95       	asr	r21
    18b6:	47 95       	ror	r20
    18b8:	8a 95       	dec	r24
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <DIO_u8GetPinValue+0xd6>
    18bc:	ca 01       	movw	r24, r20
    18be:	81 70       	andi	r24, 0x01	; 1
    18c0:	ec 81       	ldd	r30, Y+4	; 0x04
    18c2:	fd 81       	ldd	r31, Y+5	; 0x05
    18c4:	80 83       	st	Z, r24
    18c6:	19 c0       	rjmp	.+50     	; 0x18fa <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    18c8:	e0 e3       	ldi	r30, 0x30	; 48
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	a9 01       	movw	r20, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <DIO_u8GetPinValue+0x102>
    18dc:	55 95       	asr	r21
    18de:	47 95       	ror	r20
    18e0:	8a 95       	dec	r24
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <DIO_u8GetPinValue+0xfe>
    18e4:	ca 01       	movw	r24, r20
    18e6:	81 70       	andi	r24, 0x01	; 1
    18e8:	ec 81       	ldd	r30, Y+4	; 0x04
    18ea:	fd 81       	ldd	r31, Y+5	; 0x05
    18ec:	80 83       	st	Z, r24
    18ee:	05 c0       	rjmp	.+10     	; 0x18fa <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState=1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <DIO_u8GetPinValue+0x11c>
			}
		}
	else
	{
		Local_u8ErrorState=1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_u8ErrorState;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    18fc:	27 96       	adiw	r28, 0x07	; 7
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	00 d0       	rcall	.+0      	; 0x1914 <KPD_u8GetPressedKey+0x6>
    1914:	00 d0       	rcall	.+0      	; 0x1916 <KPD_u8GetPressedKey+0x8>
    1916:	0f 92       	push	r0
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY,Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;
	static u8 Local_u8KPDCoulmnArr[COLUMN_NUM]={KPD_CLOUMN0_PIN,KPD_CLOUMN1_PIN,KPD_CLOUMN2_PIN,KPD_CLOUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1920:	1a 82       	std	Y+2, r1	; 0x02
    1922:	5e c0       	rjmp	.+188    	; 0x19e0 <KPD_u8GetPressedKey+0xd2>
	{
		/*Activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDCoulmnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	fc 01       	movw	r30, r24
    192c:	e4 59       	subi	r30, 0x94	; 148
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	90 81       	ld	r25, Z
    1932:	83 e0       	ldi	r24, 0x03	; 3
    1934:	69 2f       	mov	r22, r25
    1936:	40 e0       	ldi	r20, 0x00	; 0
    1938:	0e 94 95 0a 	call	0x152a	; 0x152a <DIO_u8SetPinValue>

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    193c:	19 82       	std	Y+1, r1	; 0x01
    193e:	3d c0       	rjmp	.+122    	; 0x19ba <KPD_u8GetPressedKey+0xac>
		{
			/*Read the current row*/
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	fc 01       	movw	r30, r24
    1948:	e8 59       	subi	r30, 0x98	; 152
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	90 81       	ld	r25, Z
    194e:	9e 01       	movw	r18, r28
    1950:	2c 5f       	subi	r18, 0xFC	; 252
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	83 e0       	ldi	r24, 0x03	; 3
    1956:	69 2f       	mov	r22, r25
    1958:	a9 01       	movw	r20, r18
    195a:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_u8GetPinValue>

			/*Check if switch is pressed*/
			if(Local_u8PinState==DIO_u8PIN_LOW)
    195e:	8c 81       	ldd	r24, Y+4	; 0x04
    1960:	88 23       	and	r24, r24
    1962:	41 f5       	brne	.+80     	; 0x19b4 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	48 2f       	mov	r20, r24
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	ca 01       	movw	r24, r20
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	82 0f       	add	r24, r18
    197c:	93 1f       	adc	r25, r19
    197e:	fc 01       	movw	r30, r24
    1980:	e0 59       	subi	r30, 0x90	; 144
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 81       	ld	r24, Z
    1986:	8b 83       	std	Y+3, r24	; 0x03
    1988:	0f c0       	rjmp	.+30     	; 0x19a8 <KPD_u8GetPressedKey+0x9a>

				/*Polling (busy waiting) until the key is released*/
				while(Local_u8PinState==DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	fc 01       	movw	r30, r24
    1992:	e8 59       	subi	r30, 0x98	; 152
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	90 81       	ld	r25, Z
    1998:	9e 01       	movw	r18, r28
    199a:	2c 5f       	subi	r18, 0xFC	; 252
    199c:	3f 4f       	sbci	r19, 0xFF	; 255
    199e:	83 e0       	ldi	r24, 0x03	; 3
    19a0:	69 2f       	mov	r22, r25
    19a2:	a9 01       	movw	r20, r18
    19a4:	0e 94 ef 0b 	call	0x17de	; 0x17de <DIO_u8GetPinValue>
			if(Local_u8PinState==DIO_u8PIN_LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				/*Polling (busy waiting) until the key is released*/
				while(Local_u8PinState==DIO_u8PIN_LOW)
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	88 23       	and	r24, r24
    19ac:	71 f3       	breq	.-36     	; 0x198a <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	8d 83       	std	Y+5, r24	; 0x05
    19b2:	1c c0       	rjmp	.+56     	; 0x19ec <KPD_u8GetPressedKey+0xde>
	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
	{
		/*Activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDCoulmnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	8f 5f       	subi	r24, 0xFF	; 255
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	84 30       	cpi	r24, 0x04	; 4
    19be:	08 f4       	brcc	.+2      	; 0x19c2 <KPD_u8GetPressedKey+0xb4>
    19c0:	bf cf       	rjmp	.-130    	; 0x1940 <KPD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDCoulmnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	fc 01       	movw	r30, r24
    19ca:	e4 59       	subi	r30, 0x94	; 148
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	90 81       	ld	r25, Z
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	69 2f       	mov	r22, r25
    19d4:	41 e0       	ldi	r20, 0x01	; 1
    19d6:	0e 94 95 0a 	call	0x152a	; 0x152a <DIO_u8SetPinValue>
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;
	static u8 Local_u8KPDCoulmnArr[COLUMN_NUM]={KPD_CLOUMN0_PIN,KPD_CLOUMN1_PIN,KPD_CLOUMN2_PIN,KPD_CLOUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	8f 5f       	subi	r24, 0xFF	; 255
    19de:	8a 83       	std	Y+2, r24	; 0x02
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	84 30       	cpi	r24, 0x04	; 4
    19e4:	08 f4       	brcc	.+2      	; 0x19e8 <KPD_u8GetPressedKey+0xda>
    19e6:	9e cf       	rjmp	.-196    	; 0x1924 <KPD_u8GetPressedKey+0x16>
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDCoulmnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
	}
	return Local_u8PressedKey;
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	8d 83       	std	Y+5, r24	; 0x05
    19ec:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <main>:
#include "CLCD_interface.h"
#include "KPD_interface.h"


void main(void)
{
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	ce 5b       	subi	r28, 0xBE	; 190
    1a0c:	d0 40       	sbci	r29, 0x00	; 0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
	s8 x,y,z,i=0,j=0,k=0,l=0;
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e2 56       	subi	r30, 0x62	; 98
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	10 82       	st	Z, r1
    1a20:	fe 01       	movw	r30, r28
    1a22:	e3 56       	subi	r30, 0x63	; 99
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	10 82       	st	Z, r1
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e4 56       	subi	r30, 0x64	; 100
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	10 82       	st	Z, r1
    1a30:	fe 01       	movw	r30, r28
    1a32:	e5 56       	subi	r30, 0x65	; 101
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	10 82       	st	Z, r1
	PORT_voidInit();
    1a38:	0e 94 1b 09 	call	0x1236	; 0x1236 <PORT_voidInit>
	CLCD_voidInit(CLCD_2Lines_5x8Fontsize,CLCD_Curser_OFF);
    1a3c:	88 e3       	ldi	r24, 0x38	; 56
    1a3e:	6c e0       	ldi	r22, 0x0C	; 12
    1a40:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidInit>
	//CLCD_voidGoToXY(0,1);
	u8 arr_num[10]={0,1,2,3,4,5,6,7,8,9};
    1a44:	ce 01       	movw	r24, r28
    1a46:	8e 55       	subi	r24, 0x5E	; 94
    1a48:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4a:	c6 54       	subi	r28, 0x46	; 70
    1a4c:	df 4f       	sbci	r29, 0xFF	; 255
    1a4e:	99 83       	std	Y+1, r25	; 0x01
    1a50:	88 83       	st	Y, r24
    1a52:	ca 5b       	subi	r28, 0xBA	; 186
    1a54:	d0 40       	sbci	r29, 0x00	; 0
    1a56:	20 e8       	ldi	r18, 0x80	; 128
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	c4 54       	subi	r28, 0x44	; 68
    1a5c:	df 4f       	sbci	r29, 0xFF	; 255
    1a5e:	39 83       	std	Y+1, r19	; 0x01
    1a60:	28 83       	st	Y, r18
    1a62:	cc 5b       	subi	r28, 0xBC	; 188
    1a64:	d0 40       	sbci	r29, 0x00	; 0
    1a66:	3a e0       	ldi	r19, 0x0A	; 10
    1a68:	c2 54       	subi	r28, 0x42	; 66
    1a6a:	df 4f       	sbci	r29, 0xFF	; 255
    1a6c:	38 83       	st	Y, r19
    1a6e:	ce 5b       	subi	r28, 0xBE	; 190
    1a70:	d0 40       	sbci	r29, 0x00	; 0
    1a72:	c4 54       	subi	r28, 0x44	; 68
    1a74:	df 4f       	sbci	r29, 0xFF	; 255
    1a76:	a8 81       	ld	r26, Y
    1a78:	b9 81       	ldd	r27, Y+1	; 0x01
    1a7a:	cc 5b       	subi	r28, 0xBC	; 188
    1a7c:	d0 40       	sbci	r29, 0x00	; 0
    1a7e:	0c 90       	ld	r0, X
    1a80:	c4 54       	subi	r28, 0x44	; 68
    1a82:	df 4f       	sbci	r29, 0xFF	; 255
    1a84:	e8 81       	ld	r30, Y
    1a86:	f9 81       	ldd	r31, Y+1	; 0x01
    1a88:	cc 5b       	subi	r28, 0xBC	; 188
    1a8a:	d0 40       	sbci	r29, 0x00	; 0
    1a8c:	31 96       	adiw	r30, 0x01	; 1
    1a8e:	c4 54       	subi	r28, 0x44	; 68
    1a90:	df 4f       	sbci	r29, 0xFF	; 255
    1a92:	f9 83       	std	Y+1, r31	; 0x01
    1a94:	e8 83       	st	Y, r30
    1a96:	cc 5b       	subi	r28, 0xBC	; 188
    1a98:	d0 40       	sbci	r29, 0x00	; 0
    1a9a:	c6 54       	subi	r28, 0x46	; 70
    1a9c:	df 4f       	sbci	r29, 0xFF	; 255
    1a9e:	a8 81       	ld	r26, Y
    1aa0:	b9 81       	ldd	r27, Y+1	; 0x01
    1aa2:	ca 5b       	subi	r28, 0xBA	; 186
    1aa4:	d0 40       	sbci	r29, 0x00	; 0
    1aa6:	0c 92       	st	X, r0
    1aa8:	c6 54       	subi	r28, 0x46	; 70
    1aaa:	df 4f       	sbci	r29, 0xFF	; 255
    1aac:	e8 81       	ld	r30, Y
    1aae:	f9 81       	ldd	r31, Y+1	; 0x01
    1ab0:	ca 5b       	subi	r28, 0xBA	; 186
    1ab2:	d0 40       	sbci	r29, 0x00	; 0
    1ab4:	31 96       	adiw	r30, 0x01	; 1
    1ab6:	c6 54       	subi	r28, 0x46	; 70
    1ab8:	df 4f       	sbci	r29, 0xFF	; 255
    1aba:	f9 83       	std	Y+1, r31	; 0x01
    1abc:	e8 83       	st	Y, r30
    1abe:	ca 5b       	subi	r28, 0xBA	; 186
    1ac0:	d0 40       	sbci	r29, 0x00	; 0
    1ac2:	c2 54       	subi	r28, 0x42	; 66
    1ac4:	df 4f       	sbci	r29, 0xFF	; 255
    1ac6:	f8 81       	ld	r31, Y
    1ac8:	ce 5b       	subi	r28, 0xBE	; 190
    1aca:	d0 40       	sbci	r29, 0x00	; 0
    1acc:	f1 50       	subi	r31, 0x01	; 1
    1ace:	c2 54       	subi	r28, 0x42	; 66
    1ad0:	df 4f       	sbci	r29, 0xFF	; 255
    1ad2:	f8 83       	st	Y, r31
    1ad4:	ce 5b       	subi	r28, 0xBE	; 190
    1ad6:	d0 40       	sbci	r29, 0x00	; 0
    1ad8:	c2 54       	subi	r28, 0x42	; 66
    1ada:	df 4f       	sbci	r29, 0xFF	; 255
    1adc:	28 81       	ld	r18, Y
    1ade:	ce 5b       	subi	r28, 0xBE	; 190
    1ae0:	d0 40       	sbci	r29, 0x00	; 0
    1ae2:	22 23       	and	r18, r18
    1ae4:	31 f6       	brne	.-116    	; 0x1a72 <main+0x74>
	u8 arr_sign[4]={'+','-','*','/'};
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e4 55       	subi	r30, 0x54	; 84
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	8b e2       	ldi	r24, 0x2B	; 43
    1aee:	80 83       	st	Z, r24
    1af0:	fe 01       	movw	r30, r28
    1af2:	e4 55       	subi	r30, 0x54	; 84
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	8d e2       	ldi	r24, 0x2D	; 45
    1af8:	81 83       	std	Z+1, r24	; 0x01
    1afa:	fe 01       	movw	r30, r28
    1afc:	e4 55       	subi	r30, 0x54	; 84
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	8a e2       	ldi	r24, 0x2A	; 42
    1b02:	82 83       	std	Z+2, r24	; 0x02
    1b04:	fe 01       	movw	r30, r28
    1b06:	e4 55       	subi	r30, 0x54	; 84
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	8f e2       	ldi	r24, 0x2F	; 47
    1b0c:	83 83       	std	Z+3, r24	; 0x03
			0b00001010,
			0b00010101,
			0b00000100,
			0b00000100,
			0b00000100,
			0b00000100};
    1b0e:	ce 01       	movw	r24, r28
    1b10:	80 55       	subi	r24, 0x50	; 80
    1b12:	9f 4f       	sbci	r25, 0xFF	; 255
    1b14:	28 e0       	ldi	r18, 0x08	; 8
    1b16:	fc 01       	movw	r30, r24
    1b18:	df 01       	movw	r26, r30
    1b1a:	32 2f       	mov	r19, r18
    1b1c:	1d 92       	st	X+, r1
    1b1e:	3a 95       	dec	r19
    1b20:	e9 f7       	brne	.-6      	; 0x1b1c <main+0x11e>
    1b22:	fe 01       	movw	r30, r28
    1b24:	e0 55       	subi	r30, 0x50	; 80
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	84 e0       	ldi	r24, 0x04	; 4
    1b2a:	80 83       	st	Z, r24
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e0 55       	subi	r30, 0x50	; 80
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	8a e0       	ldi	r24, 0x0A	; 10
    1b34:	81 83       	std	Z+1, r24	; 0x01
    1b36:	fe 01       	movw	r30, r28
    1b38:	e0 55       	subi	r30, 0x50	; 80
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	85 e1       	ldi	r24, 0x15	; 21
    1b3e:	82 83       	std	Z+2, r24	; 0x02
    1b40:	fe 01       	movw	r30, r28
    1b42:	e0 55       	subi	r30, 0x50	; 80
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	84 e0       	ldi	r24, 0x04	; 4
    1b48:	83 83       	std	Z+3, r24	; 0x03
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e0 55       	subi	r30, 0x50	; 80
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	84 e0       	ldi	r24, 0x04	; 4
    1b52:	84 83       	std	Z+4, r24	; 0x04
    1b54:	fe 01       	movw	r30, r28
    1b56:	e0 55       	subi	r30, 0x50	; 80
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	84 e0       	ldi	r24, 0x04	; 4
    1b5c:	85 83       	std	Z+5, r24	; 0x05
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e0 55       	subi	r30, 0x50	; 80
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	84 e0       	ldi	r24, 0x04	; 4
    1b66:	86 83       	std	Z+6, r24	; 0x06
	CLCD_voidWriteNumber(arr_num[0]);
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ee 55       	subi	r30, 0x5E	; 94
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a0 e0       	ldi	r26, 0x00	; 0
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <CLCD_voidWriteNumber>
	CLCD_voidSendData(arr_sign[0]);
    1b80:	fe 01       	movw	r30, r28
    1b82:	e4 55       	subi	r30, 0x54	; 84
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	80 81       	ld	r24, Z
    1b88:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
	CLCD_voidWriteNumber(arr_num[0]);
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	ee 55       	subi	r30, 0x5E	; 94
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	80 81       	ld	r24, Z
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a0 e0       	ldi	r26, 0x00	; 0
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <CLCD_voidWriteNumber>
	CLCD_voidSendData('=');
    1ba4:	8d e3       	ldi	r24, 0x3D	; 61
    1ba6:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
	CLCD_voidWriteNumber(0);
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <CLCD_voidWriteNumber>
    1bb6:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <main+0x137e>
	while(1)
	{
		while(GET_BIT(PIND,0)==0)
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e9 56       	subi	r30, 0x69	; 105
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	aa e7       	ldi	r26, 0x7A	; 122
    1bc6:	b3 e4       	ldi	r27, 0x43	; 67
    1bc8:	80 83       	st	Z, r24
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	a2 83       	std	Z+2, r26	; 0x02
    1bce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd0:	8e 01       	movw	r16, r28
    1bd2:	0d 56       	subi	r16, 0x6D	; 109
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e9 56       	subi	r30, 0x69	; 105
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	93 81       	ldd	r25, Z+3	; 0x03
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	4a ef       	ldi	r20, 0xFA	; 250
    1bea:	54 e4       	ldi	r21, 0x44	; 68
    1bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	80 83       	st	Z, r24
    1bf8:	91 83       	std	Z+1, r25	; 0x01
    1bfa:	a2 83       	std	Z+2, r26	; 0x02
    1bfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bfe:	fe 01       	movw	r30, r28
    1c00:	ed 56       	subi	r30, 0x6D	; 109
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	44 f4       	brge	.+16     	; 0x1c2c <main+0x22e>
		__ticks = 1;
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	ef 56       	subi	r30, 0x6F	; 111
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	80 83       	st	Z, r24
    1c2a:	64 c0       	rjmp	.+200    	; 0x1cf4 <main+0x2f6>
	else if (__tmp > 65535)
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	ed 56       	subi	r30, 0x6D	; 109
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	60 81       	ld	r22, Z
    1c34:	71 81       	ldd	r23, Z+1	; 0x01
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	0c f0       	brlt	.+2      	; 0x1c4c <main+0x24e>
    1c4a:	43 c0       	rjmp	.+134    	; 0x1cd2 <main+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e9 56       	subi	r30, 0x69	; 105
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e2       	ldi	r20, 0x20	; 32
    1c60:	51 e4       	ldi	r21, 0x41	; 65
    1c62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	8e 01       	movw	r16, r28
    1c6c:	0f 56       	subi	r16, 0x6F	; 111
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	91 83       	std	Z+1, r25	; 0x01
    1c80:	80 83       	st	Z, r24
    1c82:	1f c0       	rjmp	.+62     	; 0x1cc2 <main+0x2c4>
    1c84:	fe 01       	movw	r30, r28
    1c86:	e1 57       	subi	r30, 0x71	; 113
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	88 ec       	ldi	r24, 0xC8	; 200
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	80 83       	st	Z, r24
    1c92:	fe 01       	movw	r30, r28
    1c94:	e1 57       	subi	r30, 0x71	; 113
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	91 81       	ldd	r25, Z+1	; 0x01
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <main+0x29e>
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	e1 57       	subi	r30, 0x71	; 113
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	91 83       	std	Z+1, r25	; 0x01
    1ca8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1caa:	de 01       	movw	r26, r28
    1cac:	af 56       	subi	r26, 0x6F	; 111
    1cae:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	ef 56       	subi	r30, 0x6F	; 111
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	11 96       	adiw	r26, 0x01	; 1
    1cbe:	9c 93       	st	X, r25
    1cc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	ef 56       	subi	r30, 0x6F	; 111
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	d1 f6       	brne	.-76     	; 0x1c84 <main+0x286>
    1cd0:	27 c0       	rjmp	.+78     	; 0x1d20 <main+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd2:	8e 01       	movw	r16, r28
    1cd4:	0f 56       	subi	r16, 0x6F	; 111
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	fe 01       	movw	r30, r28
    1cda:	ed 56       	subi	r30, 0x6D	; 109
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	60 81       	ld	r22, Z
    1ce0:	71 81       	ldd	r23, Z+1	; 0x01
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	93 81       	ldd	r25, Z+3	; 0x03
    1ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	f8 01       	movw	r30, r16
    1cf0:	91 83       	std	Z+1, r25	; 0x01
    1cf2:	80 83       	st	Z, r24
    1cf4:	de 01       	movw	r26, r28
    1cf6:	a3 57       	subi	r26, 0x73	; 115
    1cf8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ef 56       	subi	r30, 0x6F	; 111
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	80 81       	ld	r24, Z
    1d02:	91 81       	ldd	r25, Z+1	; 0x01
    1d04:	8d 93       	st	X+, r24
    1d06:	9c 93       	st	X, r25
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e3 57       	subi	r30, 0x73	; 115
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <main+0x314>
    1d16:	fe 01       	movw	r30, r28
    1d18:	e3 57       	subi	r30, 0x73	; 115
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	80 83       	st	Z, r24
		{
			_delay_ms(250);
			k++;
    1d20:	de 01       	movw	r26, r28
    1d22:	a4 56       	subi	r26, 0x64	; 100
    1d24:	bf 4f       	sbci	r27, 0xFF	; 255
    1d26:	fe 01       	movw	r30, r28
    1d28:	e4 56       	subi	r30, 0x64	; 100
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8f 5f       	subi	r24, 0xFF	; 255
    1d30:	8c 93       	st	X, r24
    1d32:	8e c2       	rjmp	.+1308   	; 0x2250 <main+0x852>
			while(k==1)
			{
				x=arr_num[i];
    1d34:	fe 01       	movw	r30, r28
    1d36:	e2 56       	subi	r30, 0x62	; 98
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	33 27       	eor	r19, r19
    1d40:	27 fd       	sbrc	r18, 7
    1d42:	30 95       	com	r19
    1d44:	ce 01       	movw	r24, r28
    1d46:	8e 55       	subi	r24, 0x5E	; 94
    1d48:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	e2 0f       	add	r30, r18
    1d4e:	f3 1f       	adc	r31, r19
    1d50:	80 81       	ld	r24, Z
    1d52:	fe 01       	movw	r30, r28
    1d54:	ef 55       	subi	r30, 0x5F	; 95
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	80 83       	st	Z, r24
				if(GET_BIT(PIND,2)==0)
    1d5a:	e0 e3       	ldi	r30, 0x30	; 48
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	86 95       	lsr	r24
    1d62:	86 95       	lsr	r24
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	81 70       	andi	r24, 0x01	; 1
    1d6a:	90 70       	andi	r25, 0x00	; 0
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <main+0x374>
    1d70:	bc c0       	rjmp	.+376    	; 0x1eea <main+0x4ec>
    1d72:	fe 01       	movw	r30, r28
    1d74:	e7 57       	subi	r30, 0x77	; 119
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a8 e4       	ldi	r26, 0x48	; 72
    1d7e:	b3 e4       	ldi	r27, 0x43	; 67
    1d80:	80 83       	st	Z, r24
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	a2 83       	std	Z+2, r26	; 0x02
    1d86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	8e 01       	movw	r16, r28
    1d8a:	0b 57       	subi	r16, 0x7B	; 123
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e7 57       	subi	r30, 0x77	; 119
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	60 81       	ld	r22, Z
    1d96:	71 81       	ldd	r23, Z+1	; 0x01
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	93 81       	ldd	r25, Z+3	; 0x03
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	4a ef       	ldi	r20, 0xFA	; 250
    1da2:	54 e4       	ldi	r21, 0x44	; 68
    1da4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	f8 01       	movw	r30, r16
    1dae:	80 83       	st	Z, r24
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	a2 83       	std	Z+2, r26	; 0x02
    1db4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1db6:	fe 01       	movw	r30, r28
    1db8:	eb 57       	subi	r30, 0x7B	; 123
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	60 81       	ld	r22, Z
    1dbe:	71 81       	ldd	r23, Z+1	; 0x01
    1dc0:	82 81       	ldd	r24, Z+2	; 0x02
    1dc2:	93 81       	ldd	r25, Z+3	; 0x03
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	44 f4       	brge	.+16     	; 0x1de4 <main+0x3e6>
		__ticks = 1;
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	ed 57       	subi	r30, 0x7D	; 125
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	80 83       	st	Z, r24
    1de2:	64 c0       	rjmp	.+200    	; 0x1eac <main+0x4ae>
	else if (__tmp > 65535)
    1de4:	fe 01       	movw	r30, r28
    1de6:	eb 57       	subi	r30, 0x7B	; 123
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	3f ef       	ldi	r19, 0xFF	; 255
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	0c f0       	brlt	.+2      	; 0x1e04 <main+0x406>
    1e02:	43 c0       	rjmp	.+134    	; 0x1e8a <main+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e04:	fe 01       	movw	r30, r28
    1e06:	e7 57       	subi	r30, 0x77	; 119
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	60 81       	ld	r22, Z
    1e0c:	71 81       	ldd	r23, Z+1	; 0x01
    1e0e:	82 81       	ldd	r24, Z+2	; 0x02
    1e10:	93 81       	ldd	r25, Z+3	; 0x03
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	8e 01       	movw	r16, r28
    1e24:	0d 57       	subi	r16, 0x7D	; 125
    1e26:	1f 4f       	sbci	r17, 0xFF	; 255
    1e28:	bc 01       	movw	r22, r24
    1e2a:	cd 01       	movw	r24, r26
    1e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	f8 01       	movw	r30, r16
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	80 83       	st	Z, r24
    1e3a:	1f c0       	rjmp	.+62     	; 0x1e7a <main+0x47c>
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	ef 57       	subi	r30, 0x7F	; 127
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	88 ec       	ldi	r24, 0xC8	; 200
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	91 83       	std	Z+1, r25	; 0x01
    1e48:	80 83       	st	Z, r24
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ef 57       	subi	r30, 0x7F	; 127
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <main+0x456>
    1e58:	fe 01       	movw	r30, r28
    1e5a:	ef 57       	subi	r30, 0x7F	; 127
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e62:	de 01       	movw	r26, r28
    1e64:	ad 57       	subi	r26, 0x7D	; 125
    1e66:	bf 4f       	sbci	r27, 0xFF	; 255
    1e68:	fe 01       	movw	r30, r28
    1e6a:	ed 57       	subi	r30, 0x7D	; 125
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 81       	ld	r24, Z
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	11 96       	adiw	r26, 0x01	; 1
    1e76:	9c 93       	st	X, r25
    1e78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ed 57       	subi	r30, 0x7D	; 125
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 81       	ld	r24, Z
    1e82:	91 81       	ldd	r25, Z+1	; 0x01
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	d1 f6       	brne	.-76     	; 0x1e3c <main+0x43e>
    1e88:	27 c0       	rjmp	.+78     	; 0x1ed8 <main+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8a:	8e 01       	movw	r16, r28
    1e8c:	0d 57       	subi	r16, 0x7D	; 125
    1e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e90:	fe 01       	movw	r30, r28
    1e92:	eb 57       	subi	r30, 0x7B	; 123
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	60 81       	ld	r22, Z
    1e98:	71 81       	ldd	r23, Z+1	; 0x01
    1e9a:	82 81       	ldd	r24, Z+2	; 0x02
    1e9c:	93 81       	ldd	r25, Z+3	; 0x03
    1e9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	f8 01       	movw	r30, r16
    1ea8:	91 83       	std	Z+1, r25	; 0x01
    1eaa:	80 83       	st	Z, r24
    1eac:	de 01       	movw	r26, r28
    1eae:	a1 58       	subi	r26, 0x81	; 129
    1eb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	ed 57       	subi	r30, 0x7D	; 125
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	80 81       	ld	r24, Z
    1eba:	91 81       	ldd	r25, Z+1	; 0x01
    1ebc:	8d 93       	st	X+, r24
    1ebe:	9c 93       	st	X, r25
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e1 58       	subi	r30, 0x81	; 129
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <main+0x4cc>
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e1 58       	subi	r30, 0x81	; 129
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	91 83       	std	Z+1, r25	; 0x01
    1ed6:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					i++;
    1ed8:	de 01       	movw	r26, r28
    1eda:	a2 56       	subi	r26, 0x62	; 98
    1edc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e2 56       	subi	r30, 0x62	; 98
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8f 5f       	subi	r24, 0xFF	; 255
    1ee8:	8c 93       	st	X, r24
				}
				if(GET_BIT(PIND,1)==0)
    1eea:	e0 e3       	ldi	r30, 0x30	; 48
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	86 95       	lsr	r24
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	81 70       	andi	r24, 0x01	; 1
    1ef8:	90 70       	andi	r25, 0x00	; 0
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <main+0x502>
    1efe:	bc c0       	rjmp	.+376    	; 0x2078 <main+0x67a>
    1f00:	fe 01       	movw	r30, r28
    1f02:	e5 58       	subi	r30, 0x85	; 133
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a8 e4       	ldi	r26, 0x48	; 72
    1f0c:	b3 e4       	ldi	r27, 0x43	; 67
    1f0e:	80 83       	st	Z, r24
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	a2 83       	std	Z+2, r26	; 0x02
    1f14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f16:	8e 01       	movw	r16, r28
    1f18:	09 58       	subi	r16, 0x89	; 137
    1f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e5 58       	subi	r30, 0x85	; 133
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4a ef       	ldi	r20, 0xFA	; 250
    1f30:	54 e4       	ldi	r21, 0x44	; 68
    1f32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	80 83       	st	Z, r24
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	a2 83       	std	Z+2, r26	; 0x02
    1f42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f44:	fe 01       	movw	r30, r28
    1f46:	e9 58       	subi	r30, 0x89	; 137
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	44 f4       	brge	.+16     	; 0x1f72 <main+0x574>
		__ticks = 1;
    1f62:	fe 01       	movw	r30, r28
    1f64:	eb 58       	subi	r30, 0x8B	; 139
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	91 83       	std	Z+1, r25	; 0x01
    1f6e:	80 83       	st	Z, r24
    1f70:	64 c0       	rjmp	.+200    	; 0x203a <main+0x63c>
	else if (__tmp > 65535)
    1f72:	fe 01       	movw	r30, r28
    1f74:	e9 58       	subi	r30, 0x89	; 137
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	60 81       	ld	r22, Z
    1f7a:	71 81       	ldd	r23, Z+1	; 0x01
    1f7c:	82 81       	ldd	r24, Z+2	; 0x02
    1f7e:	93 81       	ldd	r25, Z+3	; 0x03
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	0c f0       	brlt	.+2      	; 0x1f92 <main+0x594>
    1f90:	43 c0       	rjmp	.+134    	; 0x2018 <main+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	fe 01       	movw	r30, r28
    1f94:	e5 58       	subi	r30, 0x85	; 133
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8e 01       	movw	r16, r28
    1fb2:	0b 58       	subi	r16, 0x8B	; 139
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
    1fc8:	1f c0       	rjmp	.+62     	; 0x2008 <main+0x60a>
    1fca:	fe 01       	movw	r30, r28
    1fcc:	ed 58       	subi	r30, 0x8D	; 141
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	88 ec       	ldi	r24, 0xC8	; 200
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
    1fd8:	fe 01       	movw	r30, r28
    1fda:	ed 58       	subi	r30, 0x8D	; 141
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <main+0x5e4>
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	ed 58       	subi	r30, 0x8D	; 141
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff0:	de 01       	movw	r26, r28
    1ff2:	ab 58       	subi	r26, 0x8B	; 139
    1ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	eb 58       	subi	r30, 0x8B	; 139
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	11 96       	adiw	r26, 0x01	; 1
    2004:	9c 93       	st	X, r25
    2006:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2008:	fe 01       	movw	r30, r28
    200a:	eb 58       	subi	r30, 0x8B	; 139
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	80 81       	ld	r24, Z
    2010:	91 81       	ldd	r25, Z+1	; 0x01
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	d1 f6       	brne	.-76     	; 0x1fca <main+0x5cc>
    2016:	27 c0       	rjmp	.+78     	; 0x2066 <main+0x668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2018:	8e 01       	movw	r16, r28
    201a:	0b 58       	subi	r16, 0x8B	; 139
    201c:	1f 4f       	sbci	r17, 0xFF	; 255
    201e:	fe 01       	movw	r30, r28
    2020:	e9 58       	subi	r30, 0x89	; 137
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	f8 01       	movw	r30, r16
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	80 83       	st	Z, r24
    203a:	de 01       	movw	r26, r28
    203c:	af 58       	subi	r26, 0x8F	; 143
    203e:	bf 4f       	sbci	r27, 0xFF	; 255
    2040:	fe 01       	movw	r30, r28
    2042:	eb 58       	subi	r30, 0x8B	; 139
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	80 81       	ld	r24, Z
    2048:	91 81       	ldd	r25, Z+1	; 0x01
    204a:	8d 93       	st	X+, r24
    204c:	9c 93       	st	X, r25
    204e:	fe 01       	movw	r30, r28
    2050:	ef 58       	subi	r30, 0x8F	; 143
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	80 81       	ld	r24, Z
    2056:	91 81       	ldd	r25, Z+1	; 0x01
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <main+0x65a>
    205c:	fe 01       	movw	r30, r28
    205e:	ef 58       	subi	r30, 0x8F	; 143
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	91 83       	std	Z+1, r25	; 0x01
    2064:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					i--;
    2066:	de 01       	movw	r26, r28
    2068:	a2 56       	subi	r26, 0x62	; 98
    206a:	bf 4f       	sbci	r27, 0xFF	; 255
    206c:	fe 01       	movw	r30, r28
    206e:	e2 56       	subi	r30, 0x62	; 98
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	80 81       	ld	r24, Z
    2074:	81 50       	subi	r24, 0x01	; 1
    2076:	8c 93       	st	X, r24
				}
				if(i<0)
    2078:	fe 01       	movw	r30, r28
    207a:	e2 56       	subi	r30, 0x62	; 98
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 81       	ld	r24, Z
    2080:	88 23       	and	r24, r24
    2082:	24 f4       	brge	.+8      	; 0x208c <main+0x68e>
					i=0;
    2084:	fe 01       	movw	r30, r28
    2086:	e2 56       	subi	r30, 0x62	; 98
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	10 82       	st	Z, r1
				if(i>9)
    208c:	fe 01       	movw	r30, r28
    208e:	e2 56       	subi	r30, 0x62	; 98
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	80 81       	ld	r24, Z
    2094:	8a 30       	cpi	r24, 0x0A	; 10
    2096:	2c f0       	brlt	.+10     	; 0x20a2 <main+0x6a4>
					i=9;
    2098:	fe 01       	movw	r30, r28
    209a:	e2 56       	subi	r30, 0x62	; 98
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	89 e0       	ldi	r24, 0x09	; 9
    20a0:	80 83       	st	Z, r24
				CLCD_voidGoToXY(0,0);
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <CLCD_voidGoToXY>
				CLCD_voidWriteNumber(x);
    20aa:	fe 01       	movw	r30, r28
    20ac:	ef 55       	subi	r30, 0x5F	; 95
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	80 81       	ld	r24, Z
    20b2:	99 27       	eor	r25, r25
    20b4:	87 fd       	sbrc	r24, 7
    20b6:	90 95       	com	r25
    20b8:	a9 2f       	mov	r26, r25
    20ba:	b9 2f       	mov	r27, r25
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <CLCD_voidWriteNumber>
				CLCD_voidWriteSpecialCharacter(arr_arrow,0,1,0);
    20c4:	ce 01       	movw	r24, r28
    20c6:	80 55       	subi	r24, 0x50	; 80
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	0e 94 10 08 	call	0x1020	; 0x1020 <CLCD_voidWriteSpecialCharacter>
    20d4:	fe 01       	movw	r30, r28
    20d6:	e3 59       	subi	r30, 0x93	; 147
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a8 ec       	ldi	r26, 0xC8	; 200
    20e0:	b1 e4       	ldi	r27, 0x41	; 65
    20e2:	80 83       	st	Z, r24
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	a2 83       	std	Z+2, r26	; 0x02
    20e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	8e 01       	movw	r16, r28
    20ec:	07 59       	subi	r16, 0x97	; 151
    20ee:	1f 4f       	sbci	r17, 0xFF	; 255
    20f0:	fe 01       	movw	r30, r28
    20f2:	e3 59       	subi	r30, 0x93	; 147
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	60 81       	ld	r22, Z
    20f8:	71 81       	ldd	r23, Z+1	; 0x01
    20fa:	82 81       	ldd	r24, Z+2	; 0x02
    20fc:	93 81       	ldd	r25, Z+3	; 0x03
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	4a ef       	ldi	r20, 0xFA	; 250
    2104:	54 e4       	ldi	r21, 0x44	; 68
    2106:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	f8 01       	movw	r30, r16
    2110:	80 83       	st	Z, r24
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	a2 83       	std	Z+2, r26	; 0x02
    2116:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2118:	fe 01       	movw	r30, r28
    211a:	e7 59       	subi	r30, 0x97	; 151
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	44 f4       	brge	.+16     	; 0x2146 <main+0x748>
		__ticks = 1;
    2136:	fe 01       	movw	r30, r28
    2138:	e9 59       	subi	r30, 0x99	; 153
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	80 83       	st	Z, r24
    2144:	64 c0       	rjmp	.+200    	; 0x220e <main+0x810>
	else if (__tmp > 65535)
    2146:	fe 01       	movw	r30, r28
    2148:	e7 59       	subi	r30, 0x97	; 151
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	4f e7       	ldi	r20, 0x7F	; 127
    215a:	57 e4       	ldi	r21, 0x47	; 71
    215c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2160:	18 16       	cp	r1, r24
    2162:	0c f0       	brlt	.+2      	; 0x2166 <main+0x768>
    2164:	43 c0       	rjmp	.+134    	; 0x21ec <main+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2166:	fe 01       	movw	r30, r28
    2168:	e3 59       	subi	r30, 0x93	; 147
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	60 81       	ld	r22, Z
    216e:	71 81       	ldd	r23, Z+1	; 0x01
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	93 81       	ldd	r25, Z+3	; 0x03
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	8e 01       	movw	r16, r28
    2186:	09 59       	subi	r16, 0x99	; 153
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	f8 01       	movw	r30, r16
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
    219c:	1f c0       	rjmp	.+62     	; 0x21dc <main+0x7de>
    219e:	fe 01       	movw	r30, r28
    21a0:	eb 59       	subi	r30, 0x9B	; 155
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	88 ec       	ldi	r24, 0xC8	; 200
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24
    21ac:	fe 01       	movw	r30, r28
    21ae:	eb 59       	subi	r30, 0x9B	; 155
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <main+0x7b8>
    21ba:	fe 01       	movw	r30, r28
    21bc:	eb 59       	subi	r30, 0x9B	; 155
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c4:	de 01       	movw	r26, r28
    21c6:	a9 59       	subi	r26, 0x99	; 153
    21c8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ca:	fe 01       	movw	r30, r28
    21cc:	e9 59       	subi	r30, 0x99	; 153
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	11 96       	adiw	r26, 0x01	; 1
    21d8:	9c 93       	st	X, r25
    21da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	fe 01       	movw	r30, r28
    21de:	e9 59       	subi	r30, 0x99	; 153
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	d1 f6       	brne	.-76     	; 0x219e <main+0x7a0>
    21ea:	28 c0       	rjmp	.+80     	; 0x223c <main+0x83e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ec:	8e 01       	movw	r16, r28
    21ee:	09 59       	subi	r16, 0x99	; 153
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	fe 01       	movw	r30, r28
    21f4:	e7 59       	subi	r30, 0x97	; 151
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	f8 01       	movw	r30, r16
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
    220e:	de 01       	movw	r26, r28
    2210:	ad 59       	subi	r26, 0x9D	; 157
    2212:	bf 4f       	sbci	r27, 0xFF	; 255
    2214:	fe 01       	movw	r30, r28
    2216:	e9 59       	subi	r30, 0x99	; 153
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	91 81       	ldd	r25, Z+1	; 0x01
    221e:	11 96       	adiw	r26, 0x01	; 1
    2220:	9c 93       	st	X, r25
    2222:	8e 93       	st	-X, r24
    2224:	fe 01       	movw	r30, r28
    2226:	ed 59       	subi	r30, 0x9D	; 157
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <main+0x830>
    2232:	fe 01       	movw	r30, r28
    2234:	ed 59       	subi	r30, 0x9D	; 157
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	80 83       	st	Z, r24
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
    223c:	e0 e3       	ldi	r30, 0x30	; 48
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	81 70       	andi	r24, 0x01	; 1
    2248:	90 70       	andi	r25, 0x00	; 0
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	09 f4       	brne	.+2      	; 0x2250 <main+0x852>
    224e:	67 c2       	rjmp	.+1230   	; 0x271e <main+0xd20>
	{
		while(GET_BIT(PIND,0)==0)
		{
			_delay_ms(250);
			k++;
			while(k==1)
    2250:	fe 01       	movw	r30, r28
    2252:	e4 56       	subi	r30, 0x64	; 100
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	09 f4       	brne	.+2      	; 0x225e <main+0x860>
    225c:	6b cd       	rjmp	.-1322   	; 0x1d34 <main+0x336>
    225e:	5f c2       	rjmp	.+1214   	; 0x271e <main+0xd20>
					break;

			}
			while(k==2)
			{
				z=arr_sign[j];
    2260:	fe 01       	movw	r30, r28
    2262:	e3 56       	subi	r30, 0x63	; 99
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 81       	ld	r24, Z
    2268:	28 2f       	mov	r18, r24
    226a:	33 27       	eor	r19, r19
    226c:	27 fd       	sbrc	r18, 7
    226e:	30 95       	com	r19
    2270:	ce 01       	movw	r24, r28
    2272:	84 55       	subi	r24, 0x54	; 84
    2274:	9f 4f       	sbci	r25, 0xFF	; 255
    2276:	fc 01       	movw	r30, r24
    2278:	e2 0f       	add	r30, r18
    227a:	f3 1f       	adc	r31, r19
    227c:	80 81       	ld	r24, Z
    227e:	fe 01       	movw	r30, r28
    2280:	e1 56       	subi	r30, 0x61	; 97
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	80 83       	st	Z, r24
				if(GET_BIT(PIND,2)==0)
    2286:	e0 e3       	ldi	r30, 0x30	; 48
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	86 95       	lsr	r24
    228e:	86 95       	lsr	r24
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	81 70       	andi	r24, 0x01	; 1
    2296:	90 70       	andi	r25, 0x00	; 0
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	09 f0       	breq	.+2      	; 0x229e <main+0x8a0>
    229c:	bc c0       	rjmp	.+376    	; 0x2416 <main+0xa18>
    229e:	fe 01       	movw	r30, r28
    22a0:	e1 5a       	subi	r30, 0xA1	; 161
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a8 e4       	ldi	r26, 0x48	; 72
    22aa:	b3 e4       	ldi	r27, 0x43	; 67
    22ac:	80 83       	st	Z, r24
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	a2 83       	std	Z+2, r26	; 0x02
    22b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b4:	8e 01       	movw	r16, r28
    22b6:	05 5a       	subi	r16, 0xA5	; 165
    22b8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ba:	fe 01       	movw	r30, r28
    22bc:	e1 5a       	subi	r30, 0xA1	; 161
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	82 81       	ldd	r24, Z+2	; 0x02
    22c6:	93 81       	ldd	r25, Z+3	; 0x03
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4a ef       	ldi	r20, 0xFA	; 250
    22ce:	54 e4       	ldi	r21, 0x44	; 68
    22d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	f8 01       	movw	r30, r16
    22da:	80 83       	st	Z, r24
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	a2 83       	std	Z+2, r26	; 0x02
    22e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22e2:	fe 01       	movw	r30, r28
    22e4:	e5 5a       	subi	r30, 0xA5	; 165
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e8       	ldi	r20, 0x80	; 128
    22f6:	5f e3       	ldi	r21, 0x3F	; 63
    22f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22fc:	88 23       	and	r24, r24
    22fe:	44 f4       	brge	.+16     	; 0x2310 <main+0x912>
		__ticks = 1;
    2300:	fe 01       	movw	r30, r28
    2302:	e7 5a       	subi	r30, 0xA7	; 167
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	91 83       	std	Z+1, r25	; 0x01
    230c:	80 83       	st	Z, r24
    230e:	64 c0       	rjmp	.+200    	; 0x23d8 <main+0x9da>
	else if (__tmp > 65535)
    2310:	fe 01       	movw	r30, r28
    2312:	e5 5a       	subi	r30, 0xA5	; 165
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	60 81       	ld	r22, Z
    2318:	71 81       	ldd	r23, Z+1	; 0x01
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	93 81       	ldd	r25, Z+3	; 0x03
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	3f ef       	ldi	r19, 0xFF	; 255
    2322:	4f e7       	ldi	r20, 0x7F	; 127
    2324:	57 e4       	ldi	r21, 0x47	; 71
    2326:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    232a:	18 16       	cp	r1, r24
    232c:	0c f0       	brlt	.+2      	; 0x2330 <main+0x932>
    232e:	43 c0       	rjmp	.+134    	; 0x23b6 <main+0x9b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2330:	fe 01       	movw	r30, r28
    2332:	e1 5a       	subi	r30, 0xA1	; 161
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	60 81       	ld	r22, Z
    2338:	71 81       	ldd	r23, Z+1	; 0x01
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	93 81       	ldd	r25, Z+3	; 0x03
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	8e 01       	movw	r16, r28
    2350:	07 5a       	subi	r16, 0xA7	; 167
    2352:	1f 4f       	sbci	r17, 0xFF	; 255
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	f8 01       	movw	r30, r16
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	80 83       	st	Z, r24
    2366:	1f c0       	rjmp	.+62     	; 0x23a6 <main+0x9a8>
    2368:	fe 01       	movw	r30, r28
    236a:	e9 5a       	subi	r30, 0xA9	; 169
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	88 ec       	ldi	r24, 0xC8	; 200
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	91 83       	std	Z+1, r25	; 0x01
    2374:	80 83       	st	Z, r24
    2376:	fe 01       	movw	r30, r28
    2378:	e9 5a       	subi	r30, 0xA9	; 169
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 81       	ld	r24, Z
    237e:	91 81       	ldd	r25, Z+1	; 0x01
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <main+0x982>
    2384:	fe 01       	movw	r30, r28
    2386:	e9 5a       	subi	r30, 0xA9	; 169
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	91 83       	std	Z+1, r25	; 0x01
    238c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238e:	de 01       	movw	r26, r28
    2390:	a7 5a       	subi	r26, 0xA7	; 167
    2392:	bf 4f       	sbci	r27, 0xFF	; 255
    2394:	fe 01       	movw	r30, r28
    2396:	e7 5a       	subi	r30, 0xA7	; 167
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	80 81       	ld	r24, Z
    239c:	91 81       	ldd	r25, Z+1	; 0x01
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	11 96       	adiw	r26, 0x01	; 1
    23a2:	9c 93       	st	X, r25
    23a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a6:	fe 01       	movw	r30, r28
    23a8:	e7 5a       	subi	r30, 0xA7	; 167
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 81       	ld	r24, Z
    23ae:	91 81       	ldd	r25, Z+1	; 0x01
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	d1 f6       	brne	.-76     	; 0x2368 <main+0x96a>
    23b4:	27 c0       	rjmp	.+78     	; 0x2404 <main+0xa06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	8e 01       	movw	r16, r28
    23b8:	07 5a       	subi	r16, 0xA7	; 167
    23ba:	1f 4f       	sbci	r17, 0xFF	; 255
    23bc:	fe 01       	movw	r30, r28
    23be:	e5 5a       	subi	r30, 0xA5	; 165
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	60 81       	ld	r22, Z
    23c4:	71 81       	ldd	r23, Z+1	; 0x01
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	93 81       	ldd	r25, Z+3	; 0x03
    23ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	f8 01       	movw	r30, r16
    23d4:	91 83       	std	Z+1, r25	; 0x01
    23d6:	80 83       	st	Z, r24
    23d8:	de 01       	movw	r26, r28
    23da:	ab 5a       	subi	r26, 0xAB	; 171
    23dc:	bf 4f       	sbci	r27, 0xFF	; 255
    23de:	fe 01       	movw	r30, r28
    23e0:	e7 5a       	subi	r30, 0xA7	; 167
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	80 81       	ld	r24, Z
    23e6:	91 81       	ldd	r25, Z+1	; 0x01
    23e8:	8d 93       	st	X+, r24
    23ea:	9c 93       	st	X, r25
    23ec:	fe 01       	movw	r30, r28
    23ee:	eb 5a       	subi	r30, 0xAB	; 171
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <main+0x9f8>
    23fa:	fe 01       	movw	r30, r28
    23fc:	eb 5a       	subi	r30, 0xAB	; 171
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					j++;
    2404:	de 01       	movw	r26, r28
    2406:	a3 56       	subi	r26, 0x63	; 99
    2408:	bf 4f       	sbci	r27, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e3 56       	subi	r30, 0x63	; 99
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 81       	ld	r24, Z
    2412:	8f 5f       	subi	r24, 0xFF	; 255
    2414:	8c 93       	st	X, r24
				}
				if(GET_BIT(PIND,1)==0)
    2416:	e0 e3       	ldi	r30, 0x30	; 48
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	86 95       	lsr	r24
    241e:	88 2f       	mov	r24, r24
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	81 70       	andi	r24, 0x01	; 1
    2424:	90 70       	andi	r25, 0x00	; 0
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	09 f0       	breq	.+2      	; 0x242c <main+0xa2e>
    242a:	bc c0       	rjmp	.+376    	; 0x25a4 <main+0xba6>
    242c:	fe 01       	movw	r30, r28
    242e:	ef 5a       	subi	r30, 0xAF	; 175
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	a8 e4       	ldi	r26, 0x48	; 72
    2438:	b3 e4       	ldi	r27, 0x43	; 67
    243a:	80 83       	st	Z, r24
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	a2 83       	std	Z+2, r26	; 0x02
    2440:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2442:	8e 01       	movw	r16, r28
    2444:	03 5b       	subi	r16, 0xB3	; 179
    2446:	1f 4f       	sbci	r17, 0xFF	; 255
    2448:	fe 01       	movw	r30, r28
    244a:	ef 5a       	subi	r30, 0xAF	; 175
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	60 81       	ld	r22, Z
    2450:	71 81       	ldd	r23, Z+1	; 0x01
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	4a ef       	ldi	r20, 0xFA	; 250
    245c:	54 e4       	ldi	r21, 0x44	; 68
    245e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	f8 01       	movw	r30, r16
    2468:	80 83       	st	Z, r24
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	a2 83       	std	Z+2, r26	; 0x02
    246e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2470:	fe 01       	movw	r30, r28
    2472:	e3 5b       	subi	r30, 0xB3	; 179
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	60 81       	ld	r22, Z
    2478:	71 81       	ldd	r23, Z+1	; 0x01
    247a:	82 81       	ldd	r24, Z+2	; 0x02
    247c:	93 81       	ldd	r25, Z+3	; 0x03
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e8       	ldi	r20, 0x80	; 128
    2484:	5f e3       	ldi	r21, 0x3F	; 63
    2486:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    248a:	88 23       	and	r24, r24
    248c:	44 f4       	brge	.+16     	; 0x249e <main+0xaa0>
		__ticks = 1;
    248e:	fe 01       	movw	r30, r28
    2490:	e5 5b       	subi	r30, 0xB5	; 181
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	80 83       	st	Z, r24
    249c:	64 c0       	rjmp	.+200    	; 0x2566 <main+0xb68>
	else if (__tmp > 65535)
    249e:	fe 01       	movw	r30, r28
    24a0:	e3 5b       	subi	r30, 0xB3	; 179
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	60 81       	ld	r22, Z
    24a6:	71 81       	ldd	r23, Z+1	; 0x01
    24a8:	82 81       	ldd	r24, Z+2	; 0x02
    24aa:	93 81       	ldd	r25, Z+3	; 0x03
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	0c f0       	brlt	.+2      	; 0x24be <main+0xac0>
    24bc:	43 c0       	rjmp	.+134    	; 0x2544 <main+0xb46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24be:	fe 01       	movw	r30, r28
    24c0:	ef 5a       	subi	r30, 0xAF	; 175
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	8e 01       	movw	r16, r28
    24de:	05 5b       	subi	r16, 0xB5	; 181
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	f8 01       	movw	r30, r16
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	80 83       	st	Z, r24
    24f4:	1f c0       	rjmp	.+62     	; 0x2534 <main+0xb36>
    24f6:	fe 01       	movw	r30, r28
    24f8:	e7 5b       	subi	r30, 0xB7	; 183
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	88 ec       	ldi	r24, 0xC8	; 200
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	80 83       	st	Z, r24
    2504:	fe 01       	movw	r30, r28
    2506:	e7 5b       	subi	r30, 0xB7	; 183
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 81       	ld	r24, Z
    250c:	91 81       	ldd	r25, Z+1	; 0x01
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <main+0xb10>
    2512:	fe 01       	movw	r30, r28
    2514:	e7 5b       	subi	r30, 0xB7	; 183
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	91 83       	std	Z+1, r25	; 0x01
    251a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251c:	de 01       	movw	r26, r28
    251e:	a5 5b       	subi	r26, 0xB5	; 181
    2520:	bf 4f       	sbci	r27, 0xFF	; 255
    2522:	fe 01       	movw	r30, r28
    2524:	e5 5b       	subi	r30, 0xB5	; 181
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	80 81       	ld	r24, Z
    252a:	91 81       	ldd	r25, Z+1	; 0x01
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	11 96       	adiw	r26, 0x01	; 1
    2530:	9c 93       	st	X, r25
    2532:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2534:	fe 01       	movw	r30, r28
    2536:	e5 5b       	subi	r30, 0xB5	; 181
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	d1 f6       	brne	.-76     	; 0x24f6 <main+0xaf8>
    2542:	27 c0       	rjmp	.+78     	; 0x2592 <main+0xb94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2544:	8e 01       	movw	r16, r28
    2546:	05 5b       	subi	r16, 0xB5	; 181
    2548:	1f 4f       	sbci	r17, 0xFF	; 255
    254a:	fe 01       	movw	r30, r28
    254c:	e3 5b       	subi	r30, 0xB3	; 179
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	60 81       	ld	r22, Z
    2552:	71 81       	ldd	r23, Z+1	; 0x01
    2554:	82 81       	ldd	r24, Z+2	; 0x02
    2556:	93 81       	ldd	r25, Z+3	; 0x03
    2558:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	f8 01       	movw	r30, r16
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	80 83       	st	Z, r24
    2566:	de 01       	movw	r26, r28
    2568:	a9 5b       	subi	r26, 0xB9	; 185
    256a:	bf 4f       	sbci	r27, 0xFF	; 255
    256c:	fe 01       	movw	r30, r28
    256e:	e5 5b       	subi	r30, 0xB5	; 181
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	80 81       	ld	r24, Z
    2574:	91 81       	ldd	r25, Z+1	; 0x01
    2576:	8d 93       	st	X+, r24
    2578:	9c 93       	st	X, r25
    257a:	fe 01       	movw	r30, r28
    257c:	e9 5b       	subi	r30, 0xB9	; 185
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <main+0xb86>
    2588:	fe 01       	movw	r30, r28
    258a:	e9 5b       	subi	r30, 0xB9	; 185
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	91 83       	std	Z+1, r25	; 0x01
    2590:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					j--;
    2592:	de 01       	movw	r26, r28
    2594:	a3 56       	subi	r26, 0x63	; 99
    2596:	bf 4f       	sbci	r27, 0xFF	; 255
    2598:	fe 01       	movw	r30, r28
    259a:	e3 56       	subi	r30, 0x63	; 99
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 81       	ld	r24, Z
    25a0:	81 50       	subi	r24, 0x01	; 1
    25a2:	8c 93       	st	X, r24
				}
				if(j<0)
    25a4:	fe 01       	movw	r30, r28
    25a6:	e3 56       	subi	r30, 0x63	; 99
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	88 23       	and	r24, r24
    25ae:	24 f4       	brge	.+8      	; 0x25b8 <main+0xbba>
					j=0;
    25b0:	fe 01       	movw	r30, r28
    25b2:	e3 56       	subi	r30, 0x63	; 99
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	10 82       	st	Z, r1
				if(j>3)
    25b8:	fe 01       	movw	r30, r28
    25ba:	e3 56       	subi	r30, 0x63	; 99
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 81       	ld	r24, Z
    25c0:	84 30       	cpi	r24, 0x04	; 4
    25c2:	2c f0       	brlt	.+10     	; 0x25ce <main+0xbd0>
					j=3;
    25c4:	fe 01       	movw	r30, r28
    25c6:	e3 56       	subi	r30, 0x63	; 99
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	83 e0       	ldi	r24, 0x03	; 3
    25cc:	80 83       	st	Z, r24
				CLCD_voidGoToXY(0,1);
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	61 e0       	ldi	r22, 0x01	; 1
    25d2:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <CLCD_voidGoToXY>
				CLCD_voidSendData(z);
    25d6:	fe 01       	movw	r30, r28
    25d8:	e1 56       	subi	r30, 0x61	; 97
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
				CLCD_voidGoToXY(1,0);
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <CLCD_voidGoToXY>
				CLCD_voidSendData(' ');
    25ea:	80 e2       	ldi	r24, 0x20	; 32
    25ec:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
				CLCD_voidWriteSpecialCharacter(arr_arrow,0,1,1);
    25f0:	ce 01       	movw	r24, r28
    25f2:	80 55       	subi	r24, 0x50	; 80
    25f4:	9f 4f       	sbci	r25, 0xFF	; 255
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	21 e0       	ldi	r18, 0x01	; 1
    25fc:	0e 94 10 08 	call	0x1020	; 0x1020 <CLCD_voidWriteSpecialCharacter>
    2600:	fe 01       	movw	r30, r28
    2602:	ed 5b       	subi	r30, 0xBD	; 189
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	a8 ec       	ldi	r26, 0xC8	; 200
    260c:	b1 e4       	ldi	r27, 0x41	; 65
    260e:	80 83       	st	Z, r24
    2610:	91 83       	std	Z+1, r25	; 0x01
    2612:	a2 83       	std	Z+2, r26	; 0x02
    2614:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2616:	8e 01       	movw	r16, r28
    2618:	01 5c       	subi	r16, 0xC1	; 193
    261a:	1f 4f       	sbci	r17, 0xFF	; 255
    261c:	fe 01       	movw	r30, r28
    261e:	ed 5b       	subi	r30, 0xBD	; 189
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	4a ef       	ldi	r20, 0xFA	; 250
    2630:	54 e4       	ldi	r21, 0x44	; 68
    2632:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	f8 01       	movw	r30, r16
    263c:	80 83       	st	Z, r24
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	a2 83       	std	Z+2, r26	; 0x02
    2642:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2644:	fe 01       	movw	r30, r28
    2646:	ff 96       	adiw	r30, 0x3f	; 63
    2648:	60 81       	ld	r22, Z
    264a:	71 81       	ldd	r23, Z+1	; 0x01
    264c:	82 81       	ldd	r24, Z+2	; 0x02
    264e:	93 81       	ldd	r25, Z+3	; 0x03
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e8       	ldi	r20, 0x80	; 128
    2656:	5f e3       	ldi	r21, 0x3F	; 63
    2658:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    265c:	88 23       	and	r24, r24
    265e:	2c f4       	brge	.+10     	; 0x266a <main+0xc6c>
		__ticks = 1;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	9e af       	std	Y+62, r25	; 0x3e
    2666:	8d af       	std	Y+61, r24	; 0x3d
    2668:	46 c0       	rjmp	.+140    	; 0x26f6 <main+0xcf8>
	else if (__tmp > 65535)
    266a:	fe 01       	movw	r30, r28
    266c:	ff 96       	adiw	r30, 0x3f	; 63
    266e:	60 81       	ld	r22, Z
    2670:	71 81       	ldd	r23, Z+1	; 0x01
    2672:	82 81       	ldd	r24, Z+2	; 0x02
    2674:	93 81       	ldd	r25, Z+3	; 0x03
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	3f ef       	ldi	r19, 0xFF	; 255
    267a:	4f e7       	ldi	r20, 0x7F	; 127
    267c:	57 e4       	ldi	r21, 0x47	; 71
    267e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2682:	18 16       	cp	r1, r24
    2684:	64 f5       	brge	.+88     	; 0x26de <main+0xce0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2686:	fe 01       	movw	r30, r28
    2688:	ed 5b       	subi	r30, 0xBD	; 189
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	60 81       	ld	r22, Z
    268e:	71 81       	ldd	r23, Z+1	; 0x01
    2690:	82 81       	ldd	r24, Z+2	; 0x02
    2692:	93 81       	ldd	r25, Z+3	; 0x03
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e2       	ldi	r20, 0x20	; 32
    269a:	51 e4       	ldi	r21, 0x41	; 65
    269c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	9e af       	std	Y+62, r25	; 0x3e
    26b2:	8d af       	std	Y+61, r24	; 0x3d
    26b4:	0f c0       	rjmp	.+30     	; 0x26d4 <main+0xcd6>
    26b6:	88 ec       	ldi	r24, 0xC8	; 200
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9c af       	std	Y+60, r25	; 0x3c
    26bc:	8b af       	std	Y+59, r24	; 0x3b
    26be:	8b ad       	ldd	r24, Y+59	; 0x3b
    26c0:	9c ad       	ldd	r25, Y+60	; 0x3c
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <main+0xcc4>
    26c6:	9c af       	std	Y+60, r25	; 0x3c
    26c8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    26cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	9e af       	std	Y+62, r25	; 0x3e
    26d2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    26d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	69 f7       	brne	.-38     	; 0x26b6 <main+0xcb8>
    26dc:	16 c0       	rjmp	.+44     	; 0x270a <main+0xd0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26de:	fe 01       	movw	r30, r28
    26e0:	ff 96       	adiw	r30, 0x3f	; 63
    26e2:	60 81       	ld	r22, Z
    26e4:	71 81       	ldd	r23, Z+1	; 0x01
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	9e af       	std	Y+62, r25	; 0x3e
    26f4:	8d af       	std	Y+61, r24	; 0x3d
    26f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    26f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    26fa:	9a af       	std	Y+58, r25	; 0x3a
    26fc:	89 af       	std	Y+57, r24	; 0x39
    26fe:	89 ad       	ldd	r24, Y+57	; 0x39
    2700:	9a ad       	ldd	r25, Y+58	; 0x3a
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <main+0xd04>
    2706:	9a af       	std	Y+58, r25	; 0x3a
    2708:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
    270a:	e0 e3       	ldi	r30, 0x30	; 48
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	88 2f       	mov	r24, r24
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	81 70       	andi	r24, 0x01	; 1
    2716:	90 70       	andi	r25, 0x00	; 0
    2718:	00 97       	sbiw	r24, 0x00	; 0
    271a:	09 f4       	brne	.+2      	; 0x271e <main+0xd20>
    271c:	cf c1       	rjmp	.+926    	; 0x2abc <main+0x10be>
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
					break;

			}
			while(k==2)
    271e:	fe 01       	movw	r30, r28
    2720:	e4 56       	subi	r30, 0x64	; 100
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 81       	ld	r24, Z
    2726:	82 30       	cpi	r24, 0x02	; 2
    2728:	09 f4       	brne	.+2      	; 0x272c <main+0xd2e>
    272a:	9a cd       	rjmp	.-1228   	; 0x2260 <main+0x862>
    272c:	c7 c1       	rjmp	.+910    	; 0x2abc <main+0x10be>

			}

			while(k==3)
			{
				y=arr_num[l];
    272e:	fe 01       	movw	r30, r28
    2730:	e5 56       	subi	r30, 0x65	; 101
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	28 2f       	mov	r18, r24
    2738:	33 27       	eor	r19, r19
    273a:	27 fd       	sbrc	r18, 7
    273c:	30 95       	com	r19
    273e:	ce 01       	movw	r24, r28
    2740:	8e 55       	subi	r24, 0x5E	; 94
    2742:	9f 4f       	sbci	r25, 0xFF	; 255
    2744:	fc 01       	movw	r30, r24
    2746:	e2 0f       	add	r30, r18
    2748:	f3 1f       	adc	r31, r19
    274a:	80 81       	ld	r24, Z
    274c:	fe 01       	movw	r30, r28
    274e:	e0 56       	subi	r30, 0x60	; 96
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 83       	st	Z, r24
				if(GET_BIT(PIND,2)==0)
    2754:	e0 e3       	ldi	r30, 0x30	; 48
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	86 95       	lsr	r24
    275c:	86 95       	lsr	r24
    275e:	88 2f       	mov	r24, r24
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	81 70       	andi	r24, 0x01	; 1
    2764:	90 70       	andi	r25, 0x00	; 0
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	09 f0       	breq	.+2      	; 0x276c <main+0xd6e>
    276a:	7b c0       	rjmp	.+246    	; 0x2862 <main+0xe64>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	a8 e4       	ldi	r26, 0x48	; 72
    2772:	b3 e4       	ldi	r27, 0x43	; 67
    2774:	8d ab       	std	Y+53, r24	; 0x35
    2776:	9e ab       	std	Y+54, r25	; 0x36
    2778:	af ab       	std	Y+55, r26	; 0x37
    277a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277c:	6d a9       	ldd	r22, Y+53	; 0x35
    277e:	7e a9       	ldd	r23, Y+54	; 0x36
    2780:	8f a9       	ldd	r24, Y+55	; 0x37
    2782:	98 ad       	ldd	r25, Y+56	; 0x38
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a ef       	ldi	r20, 0xFA	; 250
    278a:	54 e4       	ldi	r21, 0x44	; 68
    278c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	89 ab       	std	Y+49, r24	; 0x31
    2796:	9a ab       	std	Y+50, r25	; 0x32
    2798:	ab ab       	std	Y+51, r26	; 0x33
    279a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    279c:	69 a9       	ldd	r22, Y+49	; 0x31
    279e:	7a a9       	ldd	r23, Y+50	; 0x32
    27a0:	8b a9       	ldd	r24, Y+51	; 0x33
    27a2:	9c a9       	ldd	r25, Y+52	; 0x34
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	5f e3       	ldi	r21, 0x3F	; 63
    27ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27b0:	88 23       	and	r24, r24
    27b2:	2c f4       	brge	.+10     	; 0x27be <main+0xdc0>
		__ticks = 1;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	98 ab       	std	Y+48, r25	; 0x30
    27ba:	8f a7       	std	Y+47, r24	; 0x2f
    27bc:	3f c0       	rjmp	.+126    	; 0x283c <main+0xe3e>
	else if (__tmp > 65535)
    27be:	69 a9       	ldd	r22, Y+49	; 0x31
    27c0:	7a a9       	ldd	r23, Y+50	; 0x32
    27c2:	8b a9       	ldd	r24, Y+51	; 0x33
    27c4:	9c a9       	ldd	r25, Y+52	; 0x34
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27d2:	18 16       	cp	r1, r24
    27d4:	4c f5       	brge	.+82     	; 0x2828 <main+0xe2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	6d a9       	ldd	r22, Y+53	; 0x35
    27d8:	7e a9       	ldd	r23, Y+54	; 0x36
    27da:	8f a9       	ldd	r24, Y+55	; 0x37
    27dc:	98 ad       	ldd	r25, Y+56	; 0x38
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	98 ab       	std	Y+48, r25	; 0x30
    27fc:	8f a7       	std	Y+47, r24	; 0x2f
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <main+0xe20>
    2800:	88 ec       	ldi	r24, 0xC8	; 200
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9e a7       	std	Y+46, r25	; 0x2e
    2806:	8d a7       	std	Y+45, r24	; 0x2d
    2808:	8d a5       	ldd	r24, Y+45	; 0x2d
    280a:	9e a5       	ldd	r25, Y+46	; 0x2e
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <main+0xe0e>
    2810:	9e a7       	std	Y+46, r25	; 0x2e
    2812:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	8f a5       	ldd	r24, Y+47	; 0x2f
    2816:	98 a9       	ldd	r25, Y+48	; 0x30
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	98 ab       	std	Y+48, r25	; 0x30
    281c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2820:	98 a9       	ldd	r25, Y+48	; 0x30
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f7       	brne	.-38     	; 0x2800 <main+0xe02>
    2826:	14 c0       	rjmp	.+40     	; 0x2850 <main+0xe52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2828:	69 a9       	ldd	r22, Y+49	; 0x31
    282a:	7a a9       	ldd	r23, Y+50	; 0x32
    282c:	8b a9       	ldd	r24, Y+51	; 0x33
    282e:	9c a9       	ldd	r25, Y+52	; 0x34
    2830:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	98 ab       	std	Y+48, r25	; 0x30
    283a:	8f a7       	std	Y+47, r24	; 0x2f
    283c:	8f a5       	ldd	r24, Y+47	; 0x2f
    283e:	98 a9       	ldd	r25, Y+48	; 0x30
    2840:	9c a7       	std	Y+44, r25	; 0x2c
    2842:	8b a7       	std	Y+43, r24	; 0x2b
    2844:	8b a5       	ldd	r24, Y+43	; 0x2b
    2846:	9c a5       	ldd	r25, Y+44	; 0x2c
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <main+0xe4a>
    284c:	9c a7       	std	Y+44, r25	; 0x2c
    284e:	8b a7       	std	Y+43, r24	; 0x2b
				{
					_delay_ms(200);
					l++;
    2850:	de 01       	movw	r26, r28
    2852:	a5 56       	subi	r26, 0x65	; 101
    2854:	bf 4f       	sbci	r27, 0xFF	; 255
    2856:	fe 01       	movw	r30, r28
    2858:	e5 56       	subi	r30, 0x65	; 101
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	8f 5f       	subi	r24, 0xFF	; 255
    2860:	8c 93       	st	X, r24
				}
				if(GET_BIT(PIND,1)==0)
    2862:	e0 e3       	ldi	r30, 0x30	; 48
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	86 95       	lsr	r24
    286a:	88 2f       	mov	r24, r24
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	81 70       	andi	r24, 0x01	; 1
    2870:	90 70       	andi	r25, 0x00	; 0
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	09 f0       	breq	.+2      	; 0x2878 <main+0xe7a>
    2876:	7b c0       	rjmp	.+246    	; 0x296e <main+0xf70>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a8 e4       	ldi	r26, 0x48	; 72
    287e:	b3 e4       	ldi	r27, 0x43	; 67
    2880:	8f a3       	std	Y+39, r24	; 0x27
    2882:	98 a7       	std	Y+40, r25	; 0x28
    2884:	a9 a7       	std	Y+41, r26	; 0x29
    2886:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	6f a1       	ldd	r22, Y+39	; 0x27
    288a:	78 a5       	ldd	r23, Y+40	; 0x28
    288c:	89 a5       	ldd	r24, Y+41	; 0x29
    288e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a ef       	ldi	r20, 0xFA	; 250
    2896:	54 e4       	ldi	r21, 0x44	; 68
    2898:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	8b a3       	std	Y+35, r24	; 0x23
    28a2:	9c a3       	std	Y+36, r25	; 0x24
    28a4:	ad a3       	std	Y+37, r26	; 0x25
    28a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28a8:	6b a1       	ldd	r22, Y+35	; 0x23
    28aa:	7c a1       	ldd	r23, Y+36	; 0x24
    28ac:	8d a1       	ldd	r24, Y+37	; 0x25
    28ae:	9e a1       	ldd	r25, Y+38	; 0x26
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	2c f4       	brge	.+10     	; 0x28ca <main+0xecc>
		__ticks = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9a a3       	std	Y+34, r25	; 0x22
    28c6:	89 a3       	std	Y+33, r24	; 0x21
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <main+0xf4a>
	else if (__tmp > 65535)
    28ca:	6b a1       	ldd	r22, Y+35	; 0x23
    28cc:	7c a1       	ldd	r23, Y+36	; 0x24
    28ce:	8d a1       	ldd	r24, Y+37	; 0x25
    28d0:	9e a1       	ldd	r25, Y+38	; 0x26
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	4c f5       	brge	.+82     	; 0x2934 <main+0xf36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e2:	6f a1       	ldd	r22, Y+39	; 0x27
    28e4:	78 a5       	ldd	r23, Y+40	; 0x28
    28e6:	89 a5       	ldd	r24, Y+41	; 0x29
    28e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9a a3       	std	Y+34, r25	; 0x22
    2908:	89 a3       	std	Y+33, r24	; 0x21
    290a:	0f c0       	rjmp	.+30     	; 0x292a <main+0xf2c>
    290c:	88 ec       	ldi	r24, 0xC8	; 200
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	98 a3       	std	Y+32, r25	; 0x20
    2912:	8f 8f       	std	Y+31, r24	; 0x1f
    2914:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2916:	98 a1       	ldd	r25, Y+32	; 0x20
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <main+0xf1a>
    291c:	98 a3       	std	Y+32, r25	; 0x20
    291e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	89 a1       	ldd	r24, Y+33	; 0x21
    2922:	9a a1       	ldd	r25, Y+34	; 0x22
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	9a a3       	std	Y+34, r25	; 0x22
    2928:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292a:	89 a1       	ldd	r24, Y+33	; 0x21
    292c:	9a a1       	ldd	r25, Y+34	; 0x22
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	69 f7       	brne	.-38     	; 0x290c <main+0xf0e>
    2932:	14 c0       	rjmp	.+40     	; 0x295c <main+0xf5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	6b a1       	ldd	r22, Y+35	; 0x23
    2936:	7c a1       	ldd	r23, Y+36	; 0x24
    2938:	8d a1       	ldd	r24, Y+37	; 0x25
    293a:	9e a1       	ldd	r25, Y+38	; 0x26
    293c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9a a3       	std	Y+34, r25	; 0x22
    2946:	89 a3       	std	Y+33, r24	; 0x21
    2948:	89 a1       	ldd	r24, Y+33	; 0x21
    294a:	9a a1       	ldd	r25, Y+34	; 0x22
    294c:	9e 8f       	std	Y+30, r25	; 0x1e
    294e:	8d 8f       	std	Y+29, r24	; 0x1d
    2950:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2952:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <main+0xf56>
    2958:	9e 8f       	std	Y+30, r25	; 0x1e
    295a:	8d 8f       	std	Y+29, r24	; 0x1d
				{
					_delay_ms(200);
					l--;
    295c:	de 01       	movw	r26, r28
    295e:	a5 56       	subi	r26, 0x65	; 101
    2960:	bf 4f       	sbci	r27, 0xFF	; 255
    2962:	fe 01       	movw	r30, r28
    2964:	e5 56       	subi	r30, 0x65	; 101
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	81 50       	subi	r24, 0x01	; 1
    296c:	8c 93       	st	X, r24
				}
				if(l>9)
    296e:	fe 01       	movw	r30, r28
    2970:	e5 56       	subi	r30, 0x65	; 101
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 81       	ld	r24, Z
    2976:	8a 30       	cpi	r24, 0x0A	; 10
    2978:	2c f0       	brlt	.+10     	; 0x2984 <main+0xf86>
					l=9;
    297a:	fe 01       	movw	r30, r28
    297c:	e5 56       	subi	r30, 0x65	; 101
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	89 e0       	ldi	r24, 0x09	; 9
    2982:	80 83       	st	Z, r24
				CLCD_voidGoToXY(0,2);
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	62 e0       	ldi	r22, 0x02	; 2
    2988:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <CLCD_voidGoToXY>
				CLCD_voidWriteNumber(y);
    298c:	fe 01       	movw	r30, r28
    298e:	e0 56       	subi	r30, 0x60	; 96
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	80 81       	ld	r24, Z
    2994:	99 27       	eor	r25, r25
    2996:	87 fd       	sbrc	r24, 7
    2998:	90 95       	com	r25
    299a:	a9 2f       	mov	r26, r25
    299c:	b9 2f       	mov	r27, r25
    299e:	bc 01       	movw	r22, r24
    29a0:	cd 01       	movw	r24, r26
    29a2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <CLCD_voidWriteNumber>
				CLCD_voidGoToXY(1,1);
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	61 e0       	ldi	r22, 0x01	; 1
    29aa:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <CLCD_voidGoToXY>
				CLCD_voidSendData(' ');
    29ae:	80 e2       	ldi	r24, 0x20	; 32
    29b0:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
				CLCD_voidWriteSpecialCharacter(arr_arrow,0,1,2);
    29b4:	ce 01       	movw	r24, r28
    29b6:	80 55       	subi	r24, 0x50	; 80
    29b8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	41 e0       	ldi	r20, 0x01	; 1
    29be:	22 e0       	ldi	r18, 0x02	; 2
    29c0:	0e 94 10 08 	call	0x1020	; 0x1020 <CLCD_voidWriteSpecialCharacter>
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	a8 ec       	ldi	r26, 0xC8	; 200
    29ca:	b1 e4       	ldi	r27, 0x41	; 65
    29cc:	89 8f       	std	Y+25, r24	; 0x19
    29ce:	9a 8f       	std	Y+26, r25	; 0x1a
    29d0:	ab 8f       	std	Y+27, r26	; 0x1b
    29d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d4:	69 8d       	ldd	r22, Y+25	; 0x19
    29d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	4a ef       	ldi	r20, 0xFA	; 250
    29e2:	54 e4       	ldi	r21, 0x44	; 68
    29e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	8d 8b       	std	Y+21, r24	; 0x15
    29ee:	9e 8b       	std	Y+22, r25	; 0x16
    29f0:	af 8b       	std	Y+23, r26	; 0x17
    29f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29f4:	6d 89       	ldd	r22, Y+21	; 0x15
    29f6:	7e 89       	ldd	r23, Y+22	; 0x16
    29f8:	8f 89       	ldd	r24, Y+23	; 0x17
    29fa:	98 8d       	ldd	r25, Y+24	; 0x18
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e8       	ldi	r20, 0x80	; 128
    2a02:	5f e3       	ldi	r21, 0x3F	; 63
    2a04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a08:	88 23       	and	r24, r24
    2a0a:	2c f4       	brge	.+10     	; 0x2a16 <main+0x1018>
		__ticks = 1;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9c 8b       	std	Y+20, r25	; 0x14
    2a12:	8b 8b       	std	Y+19, r24	; 0x13
    2a14:	3f c0       	rjmp	.+126    	; 0x2a94 <main+0x1096>
	else if (__tmp > 65535)
    2a16:	6d 89       	ldd	r22, Y+21	; 0x15
    2a18:	7e 89       	ldd	r23, Y+22	; 0x16
    2a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	3f ef       	ldi	r19, 0xFF	; 255
    2a22:	4f e7       	ldi	r20, 0x7F	; 127
    2a24:	57 e4       	ldi	r21, 0x47	; 71
    2a26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a2a:	18 16       	cp	r1, r24
    2a2c:	4c f5       	brge	.+82     	; 0x2a80 <main+0x1082>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e2       	ldi	r20, 0x20	; 32
    2a3c:	51 e4       	ldi	r21, 0x41	; 65
    2a3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	bc 01       	movw	r22, r24
    2a48:	cd 01       	movw	r24, r26
    2a4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	9c 8b       	std	Y+20, r25	; 0x14
    2a54:	8b 8b       	std	Y+19, r24	; 0x13
    2a56:	0f c0       	rjmp	.+30     	; 0x2a76 <main+0x1078>
    2a58:	88 ec       	ldi	r24, 0xC8	; 200
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	9a 8b       	std	Y+18, r25	; 0x12
    2a5e:	89 8b       	std	Y+17, r24	; 0x11
    2a60:	89 89       	ldd	r24, Y+17	; 0x11
    2a62:	9a 89       	ldd	r25, Y+18	; 0x12
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <main+0x1066>
    2a68:	9a 8b       	std	Y+18, r25	; 0x12
    2a6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	9c 8b       	std	Y+20, r25	; 0x14
    2a74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a76:	8b 89       	ldd	r24, Y+19	; 0x13
    2a78:	9c 89       	ldd	r25, Y+20	; 0x14
    2a7a:	00 97       	sbiw	r24, 0x00	; 0
    2a7c:	69 f7       	brne	.-38     	; 0x2a58 <main+0x105a>
    2a7e:	14 c0       	rjmp	.+40     	; 0x2aa8 <main+0x10aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a80:	6d 89       	ldd	r22, Y+21	; 0x15
    2a82:	7e 89       	ldd	r23, Y+22	; 0x16
    2a84:	8f 89       	ldd	r24, Y+23	; 0x17
    2a86:	98 8d       	ldd	r25, Y+24	; 0x18
    2a88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	9c 8b       	std	Y+20, r25	; 0x14
    2a92:	8b 8b       	std	Y+19, r24	; 0x13
    2a94:	8b 89       	ldd	r24, Y+19	; 0x13
    2a96:	9c 89       	ldd	r25, Y+20	; 0x14
    2a98:	98 8b       	std	Y+16, r25	; 0x10
    2a9a:	8f 87       	std	Y+15, r24	; 0x0f
    2a9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a9e:	98 89       	ldd	r25, Y+16	; 0x10
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	f1 f7       	brne	.-4      	; 0x2aa0 <main+0x10a2>
    2aa4:	98 8b       	std	Y+16, r25	; 0x10
    2aa6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
    2aa8:	e0 e3       	ldi	r30, 0x30	; 48
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	88 2f       	mov	r24, r24
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	81 70       	andi	r24, 0x01	; 1
    2ab4:	90 70       	andi	r25, 0x00	; 0
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <main+0x10be>
    2aba:	4f c1       	rjmp	.+670    	; 0x2d5a <main+0x135c>
				if(GET_BIT(PIND,0)==0)
					break;

			}

			while(k==3)
    2abc:	fe 01       	movw	r30, r28
    2abe:	e4 56       	subi	r30, 0x64	; 100
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	83 30       	cpi	r24, 0x03	; 3
    2ac6:	09 f4       	brne	.+2      	; 0x2aca <main+0x10cc>
    2ac8:	32 ce       	rjmp	.-924    	; 0x272e <main+0xd30>
    2aca:	47 c1       	rjmp	.+654    	; 0x2d5a <main+0x135c>
					break;

			}
			while(k==4)
			{
				CLCD_voidGoToXY(0,4);
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	64 e0       	ldi	r22, 0x04	; 4
    2ad0:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <CLCD_voidGoToXY>
				switch(z)
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e1 56       	subi	r30, 0x61	; 97
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 81       	ld	r24, Z
    2adc:	28 2f       	mov	r18, r24
    2ade:	33 27       	eor	r19, r19
    2ae0:	27 fd       	sbrc	r18, 7
    2ae2:	30 95       	com	r19
    2ae4:	c8 54       	subi	r28, 0x48	; 72
    2ae6:	df 4f       	sbci	r29, 0xFF	; 255
    2ae8:	39 83       	std	Y+1, r19	; 0x01
    2aea:	28 83       	st	Y, r18
    2aec:	c8 5b       	subi	r28, 0xB8	; 184
    2aee:	d0 40       	sbci	r29, 0x00	; 0
    2af0:	c8 54       	subi	r28, 0x48	; 72
    2af2:	df 4f       	sbci	r29, 0xFF	; 255
    2af4:	48 81       	ld	r20, Y
    2af6:	59 81       	ldd	r21, Y+1	; 0x01
    2af8:	c8 5b       	subi	r28, 0xB8	; 184
    2afa:	d0 40       	sbci	r29, 0x00	; 0
    2afc:	4b 32       	cpi	r20, 0x2B	; 43
    2afe:	51 05       	cpc	r21, r1
    2b00:	39 f1       	breq	.+78     	; 0x2b50 <main+0x1152>
    2b02:	c8 54       	subi	r28, 0x48	; 72
    2b04:	df 4f       	sbci	r29, 0xFF	; 255
    2b06:	88 81       	ld	r24, Y
    2b08:	99 81       	ldd	r25, Y+1	; 0x01
    2b0a:	c8 5b       	subi	r28, 0xB8	; 184
    2b0c:	d0 40       	sbci	r29, 0x00	; 0
    2b0e:	8c 32       	cpi	r24, 0x2C	; 44
    2b10:	91 05       	cpc	r25, r1
    2b12:	5c f4       	brge	.+22     	; 0x2b2a <main+0x112c>
    2b14:	c8 54       	subi	r28, 0x48	; 72
    2b16:	df 4f       	sbci	r29, 0xFF	; 255
    2b18:	a8 81       	ld	r26, Y
    2b1a:	b9 81       	ldd	r27, Y+1	; 0x01
    2b1c:	c8 5b       	subi	r28, 0xB8	; 184
    2b1e:	d0 40       	sbci	r29, 0x00	; 0
    2b20:	aa 32       	cpi	r26, 0x2A	; 42
    2b22:	b1 05       	cpc	r27, r1
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <main+0x112a>
    2b26:	68 c0       	rjmp	.+208    	; 0x2bf8 <main+0x11fa>
    2b28:	86 c0       	rjmp	.+268    	; 0x2c36 <main+0x1238>
    2b2a:	c8 54       	subi	r28, 0x48	; 72
    2b2c:	df 4f       	sbci	r29, 0xFF	; 255
    2b2e:	e8 81       	ld	r30, Y
    2b30:	f9 81       	ldd	r31, Y+1	; 0x01
    2b32:	c8 5b       	subi	r28, 0xB8	; 184
    2b34:	d0 40       	sbci	r29, 0x00	; 0
    2b36:	ed 32       	cpi	r30, 0x2D	; 45
    2b38:	f1 05       	cpc	r31, r1
    2b3a:	21 f1       	breq	.+72     	; 0x2b84 <main+0x1186>
    2b3c:	c8 54       	subi	r28, 0x48	; 72
    2b3e:	df 4f       	sbci	r29, 0xFF	; 255
    2b40:	28 81       	ld	r18, Y
    2b42:	39 81       	ldd	r19, Y+1	; 0x01
    2b44:	c8 5b       	subi	r28, 0xB8	; 184
    2b46:	d0 40       	sbci	r29, 0x00	; 0
    2b48:	2f 32       	cpi	r18, 0x2F	; 47
    2b4a:	31 05       	cpc	r19, r1
    2b4c:	b9 f1       	breq	.+110    	; 0x2bbc <main+0x11be>
    2b4e:	73 c0       	rjmp	.+230    	; 0x2c36 <main+0x1238>
				{
				case '+':
					CLCD_voidWriteNumber(x+y);
    2b50:	fe 01       	movw	r30, r28
    2b52:	ef 55       	subi	r30, 0x5F	; 95
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	80 81       	ld	r24, Z
    2b58:	28 2f       	mov	r18, r24
    2b5a:	33 27       	eor	r19, r19
    2b5c:	27 fd       	sbrc	r18, 7
    2b5e:	30 95       	com	r19
    2b60:	fe 01       	movw	r30, r28
    2b62:	e0 56       	subi	r30, 0x60	; 96
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	99 27       	eor	r25, r25
    2b6a:	87 fd       	sbrc	r24, 7
    2b6c:	90 95       	com	r25
    2b6e:	82 0f       	add	r24, r18
    2b70:	93 1f       	adc	r25, r19
    2b72:	aa 27       	eor	r26, r26
    2b74:	97 fd       	sbrc	r25, 7
    2b76:	a0 95       	com	r26
    2b78:	ba 2f       	mov	r27, r26
    2b7a:	bc 01       	movw	r22, r24
    2b7c:	cd 01       	movw	r24, r26
    2b7e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <CLCD_voidWriteNumber>
    2b82:	59 c0       	rjmp	.+178    	; 0x2c36 <main+0x1238>
					break;
				case '-':
					CLCD_voidWriteNumber(x-y);
    2b84:	fe 01       	movw	r30, r28
    2b86:	ef 55       	subi	r30, 0x5F	; 95
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	80 81       	ld	r24, Z
    2b8c:	28 2f       	mov	r18, r24
    2b8e:	33 27       	eor	r19, r19
    2b90:	27 fd       	sbrc	r18, 7
    2b92:	30 95       	com	r19
    2b94:	fe 01       	movw	r30, r28
    2b96:	e0 56       	subi	r30, 0x60	; 96
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	80 81       	ld	r24, Z
    2b9c:	99 27       	eor	r25, r25
    2b9e:	87 fd       	sbrc	r24, 7
    2ba0:	90 95       	com	r25
    2ba2:	a9 01       	movw	r20, r18
    2ba4:	48 1b       	sub	r20, r24
    2ba6:	59 0b       	sbc	r21, r25
    2ba8:	ca 01       	movw	r24, r20
    2baa:	aa 27       	eor	r26, r26
    2bac:	97 fd       	sbrc	r25, 7
    2bae:	a0 95       	com	r26
    2bb0:	ba 2f       	mov	r27, r26
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <CLCD_voidWriteNumber>
    2bba:	3d c0       	rjmp	.+122    	; 0x2c36 <main+0x1238>
					break;
				case '/':
					CLCD_voidWriteNumber(x/y);
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	ef 55       	subi	r30, 0x5F	; 95
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 81       	ld	r24, Z
    2bc4:	48 2f       	mov	r20, r24
    2bc6:	55 27       	eor	r21, r21
    2bc8:	47 fd       	sbrc	r20, 7
    2bca:	50 95       	com	r21
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e0 56       	subi	r30, 0x60	; 96
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	80 81       	ld	r24, Z
    2bd4:	28 2f       	mov	r18, r24
    2bd6:	33 27       	eor	r19, r19
    2bd8:	27 fd       	sbrc	r18, 7
    2bda:	30 95       	com	r19
    2bdc:	ca 01       	movw	r24, r20
    2bde:	b9 01       	movw	r22, r18
    2be0:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__divmodhi4>
    2be4:	cb 01       	movw	r24, r22
    2be6:	aa 27       	eor	r26, r26
    2be8:	97 fd       	sbrc	r25, 7
    2bea:	a0 95       	com	r26
    2bec:	ba 2f       	mov	r27, r26
    2bee:	bc 01       	movw	r22, r24
    2bf0:	cd 01       	movw	r24, r26
    2bf2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <CLCD_voidWriteNumber>
    2bf6:	1f c0       	rjmp	.+62     	; 0x2c36 <main+0x1238>
					break;
				case '*':
					CLCD_voidWriteNumber(x*y);
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ef 55       	subi	r30, 0x5F	; 95
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	80 81       	ld	r24, Z
    2c00:	28 2f       	mov	r18, r24
    2c02:	33 27       	eor	r19, r19
    2c04:	27 fd       	sbrc	r18, 7
    2c06:	30 95       	com	r19
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e0 56       	subi	r30, 0x60	; 96
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	80 81       	ld	r24, Z
    2c10:	99 27       	eor	r25, r25
    2c12:	87 fd       	sbrc	r24, 7
    2c14:	90 95       	com	r25
    2c16:	dc 01       	movw	r26, r24
    2c18:	2a 9f       	mul	r18, r26
    2c1a:	c0 01       	movw	r24, r0
    2c1c:	2b 9f       	mul	r18, r27
    2c1e:	90 0d       	add	r25, r0
    2c20:	3a 9f       	mul	r19, r26
    2c22:	90 0d       	add	r25, r0
    2c24:	11 24       	eor	r1, r1
    2c26:	aa 27       	eor	r26, r26
    2c28:	97 fd       	sbrc	r25, 7
    2c2a:	a0 95       	com	r26
    2c2c:	ba 2f       	mov	r27, r26
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 50 08 	call	0x10a0	; 0x10a0 <CLCD_voidWriteNumber>
				}

				CLCD_voidGoToXY(1,2);
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	62 e0       	ldi	r22, 0x02	; 2
    2c3a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <CLCD_voidGoToXY>
				CLCD_voidSendData(' ');
    2c3e:	80 e2       	ldi	r24, 0x20	; 32
    2c40:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
				CLCD_voidWriteSpecialCharacter(arr_arrow,0,1,4);
    2c44:	ce 01       	movw	r24, r28
    2c46:	80 55       	subi	r24, 0x50	; 80
    2c48:	9f 4f       	sbci	r25, 0xFF	; 255
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	41 e0       	ldi	r20, 0x01	; 1
    2c4e:	24 e0       	ldi	r18, 0x04	; 4
    2c50:	0e 94 10 08 	call	0x1020	; 0x1020 <CLCD_voidWriteSpecialCharacter>
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	a8 ec       	ldi	r26, 0xC8	; 200
    2c5a:	b1 e4       	ldi	r27, 0x41	; 65
    2c5c:	8b 87       	std	Y+11, r24	; 0x0b
    2c5e:	9c 87       	std	Y+12, r25	; 0x0c
    2c60:	ad 87       	std	Y+13, r26	; 0x0d
    2c62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	4a ef       	ldi	r20, 0xFA	; 250
    2c72:	54 e4       	ldi	r21, 0x44	; 68
    2c74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	8f 83       	std	Y+7, r24	; 0x07
    2c7e:	98 87       	std	Y+8, r25	; 0x08
    2c80:	a9 87       	std	Y+9, r26	; 0x09
    2c82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c84:	6f 81       	ldd	r22, Y+7	; 0x07
    2c86:	78 85       	ldd	r23, Y+8	; 0x08
    2c88:	89 85       	ldd	r24, Y+9	; 0x09
    2c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e8       	ldi	r20, 0x80	; 128
    2c92:	5f e3       	ldi	r21, 0x3F	; 63
    2c94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c98:	88 23       	and	r24, r24
    2c9a:	2c f4       	brge	.+10     	; 0x2ca6 <main+0x12a8>
		__ticks = 1;
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	9e 83       	std	Y+6, r25	; 0x06
    2ca2:	8d 83       	std	Y+5, r24	; 0x05
    2ca4:	3f c0       	rjmp	.+126    	; 0x2d24 <main+0x1326>
	else if (__tmp > 65535)
    2ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca8:	78 85       	ldd	r23, Y+8	; 0x08
    2caa:	89 85       	ldd	r24, Y+9	; 0x09
    2cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	3f ef       	ldi	r19, 0xFF	; 255
    2cb2:	4f e7       	ldi	r20, 0x7F	; 127
    2cb4:	57 e4       	ldi	r21, 0x47	; 71
    2cb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cba:	18 16       	cp	r1, r24
    2cbc:	4c f5       	brge	.+82     	; 0x2d10 <main+0x1312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e2       	ldi	r20, 0x20	; 32
    2ccc:	51 e4       	ldi	r21, 0x41	; 65
    2cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	cd 01       	movw	r24, r26
    2cda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	9e 83       	std	Y+6, r25	; 0x06
    2ce4:	8d 83       	std	Y+5, r24	; 0x05
    2ce6:	0f c0       	rjmp	.+30     	; 0x2d06 <main+0x1308>
    2ce8:	88 ec       	ldi	r24, 0xC8	; 200
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	9c 83       	std	Y+4, r25	; 0x04
    2cee:	8b 83       	std	Y+3, r24	; 0x03
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	f1 f7       	brne	.-4      	; 0x2cf4 <main+0x12f6>
    2cf8:	9c 83       	std	Y+4, r25	; 0x04
    2cfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	9e 83       	std	Y+6, r25	; 0x06
    2d04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d06:	8d 81       	ldd	r24, Y+5	; 0x05
    2d08:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	69 f7       	brne	.-38     	; 0x2ce8 <main+0x12ea>
    2d0e:	14 c0       	rjmp	.+40     	; 0x2d38 <main+0x133a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d10:	6f 81       	ldd	r22, Y+7	; 0x07
    2d12:	78 85       	ldd	r23, Y+8	; 0x08
    2d14:	89 85       	ldd	r24, Y+9	; 0x09
    2d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	8d 81       	ldd	r24, Y+5	; 0x05
    2d26:	9e 81       	ldd	r25, Y+6	; 0x06
    2d28:	9a 83       	std	Y+2, r25	; 0x02
    2d2a:	89 83       	std	Y+1, r24	; 0x01
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	f1 f7       	brne	.-4      	; 0x2d30 <main+0x1332>
    2d34:	9a 83       	std	Y+2, r25	; 0x02
    2d36:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
    2d38:	e0 e3       	ldi	r30, 0x30	; 48
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	88 2f       	mov	r24, r24
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	81 70       	andi	r24, 0x01	; 1
    2d44:	90 70       	andi	r25, 0x00	; 0
    2d46:	00 97       	sbiw	r24, 0x00	; 0
    2d48:	41 f4       	brne	.+16     	; 0x2d5a <main+0x135c>
				{
					CLCD_voidGoToXY(1,4);
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	64 e0       	ldi	r22, 0x04	; 4
    2d4e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <CLCD_voidGoToXY>
					CLCD_voidSendData(' ');
    2d52:	80 e2       	ldi	r24, 0x20	; 32
    2d54:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    2d58:	07 c0       	rjmp	.+14     	; 0x2d68 <main+0x136a>
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
					break;

			}
			while(k==4)
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e4 56       	subi	r30, 0x64	; 100
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	80 81       	ld	r24, Z
    2d62:	84 30       	cpi	r24, 0x04	; 4
    2d64:	09 f4       	brne	.+2      	; 0x2d68 <main+0x136a>
    2d66:	b2 ce       	rjmp	.-668    	; 0x2acc <main+0x10ce>
					break;
				}


			}
			if(k>4)
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e4 56       	subi	r30, 0x64	; 100
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	80 81       	ld	r24, Z
    2d70:	85 30       	cpi	r24, 0x05	; 5
    2d72:	24 f0       	brlt	.+8      	; 0x2d7c <main+0x137e>
				k=0;
    2d74:	fe 01       	movw	r30, r28
    2d76:	e4 56       	subi	r30, 0x64	; 100
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	10 82       	st	Z, r1
	CLCD_voidWriteNumber(arr_num[0]);
	CLCD_voidSendData('=');
	CLCD_voidWriteNumber(0);
	while(1)
	{
		while(GET_BIT(PIND,0)==0)
    2d7c:	e0 e3       	ldi	r30, 0x30	; 48
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	88 2f       	mov	r24, r24
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	81 70       	andi	r24, 0x01	; 1
    2d88:	90 70       	andi	r25, 0x00	; 0
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	11 f4       	brne	.+4      	; 0x2d92 <main+0x1394>
    2d8e:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <main+0x1bc>
    2d92:	f4 cf       	rjmp	.-24     	; 0x2d7c <main+0x137e>

00002d94 <__divmodhi4>:
    2d94:	97 fb       	bst	r25, 7
    2d96:	09 2e       	mov	r0, r25
    2d98:	07 26       	eor	r0, r23
    2d9a:	0a d0       	rcall	.+20     	; 0x2db0 <__divmodhi4_neg1>
    2d9c:	77 fd       	sbrc	r23, 7
    2d9e:	04 d0       	rcall	.+8      	; 0x2da8 <__divmodhi4_neg2>
    2da0:	2e d0       	rcall	.+92     	; 0x2dfe <__udivmodhi4>
    2da2:	06 d0       	rcall	.+12     	; 0x2db0 <__divmodhi4_neg1>
    2da4:	00 20       	and	r0, r0
    2da6:	1a f4       	brpl	.+6      	; 0x2dae <__divmodhi4_exit>

00002da8 <__divmodhi4_neg2>:
    2da8:	70 95       	com	r23
    2daa:	61 95       	neg	r22
    2dac:	7f 4f       	sbci	r23, 0xFF	; 255

00002dae <__divmodhi4_exit>:
    2dae:	08 95       	ret

00002db0 <__divmodhi4_neg1>:
    2db0:	f6 f7       	brtc	.-4      	; 0x2dae <__divmodhi4_exit>
    2db2:	90 95       	com	r25
    2db4:	81 95       	neg	r24
    2db6:	9f 4f       	sbci	r25, 0xFF	; 255
    2db8:	08 95       	ret

00002dba <__udivmodsi4>:
    2dba:	a1 e2       	ldi	r26, 0x21	; 33
    2dbc:	1a 2e       	mov	r1, r26
    2dbe:	aa 1b       	sub	r26, r26
    2dc0:	bb 1b       	sub	r27, r27
    2dc2:	fd 01       	movw	r30, r26
    2dc4:	0d c0       	rjmp	.+26     	; 0x2de0 <__udivmodsi4_ep>

00002dc6 <__udivmodsi4_loop>:
    2dc6:	aa 1f       	adc	r26, r26
    2dc8:	bb 1f       	adc	r27, r27
    2dca:	ee 1f       	adc	r30, r30
    2dcc:	ff 1f       	adc	r31, r31
    2dce:	a2 17       	cp	r26, r18
    2dd0:	b3 07       	cpc	r27, r19
    2dd2:	e4 07       	cpc	r30, r20
    2dd4:	f5 07       	cpc	r31, r21
    2dd6:	20 f0       	brcs	.+8      	; 0x2de0 <__udivmodsi4_ep>
    2dd8:	a2 1b       	sub	r26, r18
    2dda:	b3 0b       	sbc	r27, r19
    2ddc:	e4 0b       	sbc	r30, r20
    2dde:	f5 0b       	sbc	r31, r21

00002de0 <__udivmodsi4_ep>:
    2de0:	66 1f       	adc	r22, r22
    2de2:	77 1f       	adc	r23, r23
    2de4:	88 1f       	adc	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	1a 94       	dec	r1
    2dea:	69 f7       	brne	.-38     	; 0x2dc6 <__udivmodsi4_loop>
    2dec:	60 95       	com	r22
    2dee:	70 95       	com	r23
    2df0:	80 95       	com	r24
    2df2:	90 95       	com	r25
    2df4:	9b 01       	movw	r18, r22
    2df6:	ac 01       	movw	r20, r24
    2df8:	bd 01       	movw	r22, r26
    2dfa:	cf 01       	movw	r24, r30
    2dfc:	08 95       	ret

00002dfe <__udivmodhi4>:
    2dfe:	aa 1b       	sub	r26, r26
    2e00:	bb 1b       	sub	r27, r27
    2e02:	51 e1       	ldi	r21, 0x11	; 17
    2e04:	07 c0       	rjmp	.+14     	; 0x2e14 <__udivmodhi4_ep>

00002e06 <__udivmodhi4_loop>:
    2e06:	aa 1f       	adc	r26, r26
    2e08:	bb 1f       	adc	r27, r27
    2e0a:	a6 17       	cp	r26, r22
    2e0c:	b7 07       	cpc	r27, r23
    2e0e:	10 f0       	brcs	.+4      	; 0x2e14 <__udivmodhi4_ep>
    2e10:	a6 1b       	sub	r26, r22
    2e12:	b7 0b       	sbc	r27, r23

00002e14 <__udivmodhi4_ep>:
    2e14:	88 1f       	adc	r24, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	5a 95       	dec	r21
    2e1a:	a9 f7       	brne	.-22     	; 0x2e06 <__udivmodhi4_loop>
    2e1c:	80 95       	com	r24
    2e1e:	90 95       	com	r25
    2e20:	bc 01       	movw	r22, r24
    2e22:	cd 01       	movw	r24, r26
    2e24:	08 95       	ret

00002e26 <__prologue_saves__>:
    2e26:	2f 92       	push	r2
    2e28:	3f 92       	push	r3
    2e2a:	4f 92       	push	r4
    2e2c:	5f 92       	push	r5
    2e2e:	6f 92       	push	r6
    2e30:	7f 92       	push	r7
    2e32:	8f 92       	push	r8
    2e34:	9f 92       	push	r9
    2e36:	af 92       	push	r10
    2e38:	bf 92       	push	r11
    2e3a:	cf 92       	push	r12
    2e3c:	df 92       	push	r13
    2e3e:	ef 92       	push	r14
    2e40:	ff 92       	push	r15
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	ca 1b       	sub	r28, r26
    2e50:	db 0b       	sbc	r29, r27
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	f8 94       	cli
    2e56:	de bf       	out	0x3e, r29	; 62
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	cd bf       	out	0x3d, r28	; 61
    2e5c:	09 94       	ijmp

00002e5e <__epilogue_restores__>:
    2e5e:	2a 88       	ldd	r2, Y+18	; 0x12
    2e60:	39 88       	ldd	r3, Y+17	; 0x11
    2e62:	48 88       	ldd	r4, Y+16	; 0x10
    2e64:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e66:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e68:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e70:	b9 84       	ldd	r11, Y+9	; 0x09
    2e72:	c8 84       	ldd	r12, Y+8	; 0x08
    2e74:	df 80       	ldd	r13, Y+7	; 0x07
    2e76:	ee 80       	ldd	r14, Y+6	; 0x06
    2e78:	fd 80       	ldd	r15, Y+5	; 0x05
    2e7a:	0c 81       	ldd	r16, Y+4	; 0x04
    2e7c:	1b 81       	ldd	r17, Y+3	; 0x03
    2e7e:	aa 81       	ldd	r26, Y+2	; 0x02
    2e80:	b9 81       	ldd	r27, Y+1	; 0x01
    2e82:	ce 0f       	add	r28, r30
    2e84:	d1 1d       	adc	r29, r1
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	ed 01       	movw	r28, r26
    2e92:	08 95       	ret

00002e94 <_exit>:
    2e94:	f8 94       	cli

00002e96 <__stop_program>:
    2e96:	ff cf       	rjmp	.-2      	; 0x2e96 <__stop_program>
