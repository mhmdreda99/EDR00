
LCD_StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004016  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00004016  000040aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000a4  008000a4  000040ee  2**0
                  ALLOC
  3 .stab         00002d48  00000000  00000000  000040f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c51  00000000  00000000  00006e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009982  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a86d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b61c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b77c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c1d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3b       	cpi	r26, 0xB1	; 177
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <main>
      8a:	0c 94 09 20 	jmp	0x4012	; 0x4012 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d2 1f 	jmp	0x3fa4	; 0x3fa4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ee 1f 	jmp	0x3fdc	; 0x3fdc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d2 1f 	jmp	0x3fa4	; 0x3fa4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ee 1f 	jmp	0x3fdc	; 0x3fdc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e2 1f 	jmp	0x3fc4	; 0x3fc4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f


	/*Set RS pin to low for command*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 9d 0a 	call	0x153a	; 0x153a <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 9d 0a 	call	0x153a	; 0x153a <DIO_u8SetPinValue>

	#ifdef  _EIGHT_BIT

    /*Set command to data pins*/
    DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_u8SetPortValue>
    
    /*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 9d 0a 	call	0x153a	; 0x153a <DIO_u8SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 9d 0a 	call	0x153a	; 0x153a <DIO_u8SetPinValue>
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

	#endif


}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to High for Data*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 9d 0a 	call	0x153a	; 0x153a <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 9d 0a 	call	0x153a	; 0x153a <DIO_u8SetPinValue>

	#ifdef _EIGHT_BIT

    /*Set command to data pins*/
    DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_u8SetPortValue>

    /*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 9d 0a 	call	0x153a	; 0x153a <DIO_u8SetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 9d 0a 	call	0x153a	; 0x153a <DIO_u8SetPinValue>
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

	#endif

}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidInit>:

void CLCD_voidInit(u8 Copy_u8Function,u8 Copy_u8Display)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	64 97       	sbiw	r28, 0x14	; 20
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	8f 87       	std	Y+15, r24	; 0x0f
     dd4:	68 8b       	std	Y+16, r22	; 0x10
	#ifdef _EIGHT_BIT

	/*Initialize LCD pins direction*/
	DIO_u8SetPortDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	41 e0       	ldi	r20, 0x01	; 1
     de4:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	41 e0       	ldi	r20, 0x01	; 1
     dee:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	62 e0       	ldi	r22, 0x02	; 2
     df6:	41 e0       	ldi	r20, 0x01	; 1
     df8:	0e 94 43 09 	call	0x1286	; 0x1286 <DIO_u8SetPinDirection>
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a0 e2       	ldi	r26, 0x20	; 32
     e02:	b2 e4       	ldi	r27, 0x42	; 66
     e04:	8b 87       	std	Y+11, r24	; 0x0b
     e06:	9c 87       	std	Y+12, r25	; 0x0c
     e08:	ad 87       	std	Y+13, r26	; 0x0d
     e0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e10:	8d 85       	ldd	r24, Y+13	; 0x0d
     e12:	9e 85       	ldd	r25, Y+14	; 0x0e
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	4a ef       	ldi	r20, 0xFA	; 250
     e1a:	54 e4       	ldi	r21, 0x44	; 68
     e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	8f 83       	std	Y+7, r24	; 0x07
     e26:	98 87       	std	Y+8, r25	; 0x08
     e28:	a9 87       	std	Y+9, r26	; 0x09
     e2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e2c:	6f 81       	ldd	r22, Y+7	; 0x07
     e2e:	78 85       	ldd	r23, Y+8	; 0x08
     e30:	89 85       	ldd	r24, Y+9	; 0x09
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e8       	ldi	r20, 0x80	; 128
     e3a:	5f e3       	ldi	r21, 0x3F	; 63
     e3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e40:	88 23       	and	r24, r24
     e42:	2c f4       	brge	.+10     	; 0xe4e <CLCD_voidInit+0x90>
		__ticks = 1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	9e 83       	std	Y+6, r25	; 0x06
     e4a:	8d 83       	std	Y+5, r24	; 0x05
     e4c:	3f c0       	rjmp	.+126    	; 0xecc <CLCD_voidInit+0x10e>
	else if (__tmp > 65535)
     e4e:	6f 81       	ldd	r22, Y+7	; 0x07
     e50:	78 85       	ldd	r23, Y+8	; 0x08
     e52:	89 85       	ldd	r24, Y+9	; 0x09
     e54:	9a 85       	ldd	r25, Y+10	; 0x0a
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	3f ef       	ldi	r19, 0xFF	; 255
     e5a:	4f e7       	ldi	r20, 0x7F	; 127
     e5c:	57 e4       	ldi	r21, 0x47	; 71
     e5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e62:	18 16       	cp	r1, r24
     e64:	4c f5       	brge	.+82     	; 0xeb8 <CLCD_voidInit+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e66:	6b 85       	ldd	r22, Y+11	; 0x0b
     e68:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e2       	ldi	r20, 0x20	; 32
     e74:	51 e4       	ldi	r21, 0x41	; 65
     e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	9e 83       	std	Y+6, r25	; 0x06
     e8c:	8d 83       	std	Y+5, r24	; 0x05
     e8e:	0f c0       	rjmp	.+30     	; 0xeae <CLCD_voidInit+0xf0>
     e90:	88 ec       	ldi	r24, 0xC8	; 200
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	9c 83       	std	Y+4, r25	; 0x04
     e96:	8b 83       	std	Y+3, r24	; 0x03
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <CLCD_voidInit+0xde>
     ea0:	9c 83       	std	Y+4, r25	; 0x04
     ea2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea4:	8d 81       	ldd	r24, Y+5	; 0x05
     ea6:	9e 81       	ldd	r25, Y+6	; 0x06
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	9e 83       	std	Y+6, r25	; 0x06
     eac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
     eb0:	9e 81       	ldd	r25, Y+6	; 0x06
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	69 f7       	brne	.-38     	; 0xe90 <CLCD_voidInit+0xd2>
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <CLCD_voidInit+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb8:	6f 81       	ldd	r22, Y+7	; 0x07
     eba:	78 85       	ldd	r23, Y+8	; 0x08
     ebc:	89 85       	ldd	r24, Y+9	; 0x09
     ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	9e 83       	std	Y+6, r25	; 0x06
     eca:	8d 83       	std	Y+5, r24	; 0x05
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	9a 83       	std	Y+2, r25	; 0x02
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <CLCD_voidInit+0x11a>
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set command: Choose lines, Choose Font size*/
	switch(Copy_u8Function)
     ee0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	3c 8b       	std	Y+20, r19	; 0x14
     ee8:	2b 8b       	std	Y+19, r18	; 0x13
     eea:	8b 89       	ldd	r24, Y+19	; 0x13
     eec:	9c 89       	ldd	r25, Y+20	; 0x14
     eee:	84 33       	cpi	r24, 0x34	; 52
     ef0:	91 05       	cpc	r25, r1
     ef2:	11 f1       	breq	.+68     	; 0xf38 <CLCD_voidInit+0x17a>
     ef4:	2b 89       	ldd	r18, Y+19	; 0x13
     ef6:	3c 89       	ldd	r19, Y+20	; 0x14
     ef8:	25 33       	cpi	r18, 0x35	; 53
     efa:	31 05       	cpc	r19, r1
     efc:	34 f4       	brge	.+12     	; 0xf0a <CLCD_voidInit+0x14c>
     efe:	8b 89       	ldd	r24, Y+19	; 0x13
     f00:	9c 89       	ldd	r25, Y+20	; 0x14
     f02:	80 33       	cpi	r24, 0x30	; 48
     f04:	91 05       	cpc	r25, r1
     f06:	a1 f0       	breq	.+40     	; 0xf30 <CLCD_voidInit+0x172>
     f08:	1a c0       	rjmp	.+52     	; 0xf3e <CLCD_voidInit+0x180>
     f0a:	2b 89       	ldd	r18, Y+19	; 0x13
     f0c:	3c 89       	ldd	r19, Y+20	; 0x14
     f0e:	28 33       	cpi	r18, 0x38	; 56
     f10:	31 05       	cpc	r19, r1
     f12:	31 f0       	breq	.+12     	; 0xf20 <CLCD_voidInit+0x162>
     f14:	8b 89       	ldd	r24, Y+19	; 0x13
     f16:	9c 89       	ldd	r25, Y+20	; 0x14
     f18:	8c 33       	cpi	r24, 0x3C	; 60
     f1a:	91 05       	cpc	r25, r1
     f1c:	29 f0       	breq	.+10     	; 0xf28 <CLCD_voidInit+0x16a>
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <CLCD_voidInit+0x180>
    {
		case CLCD_2Lines_5x8Fontsize:
            CLCD_voidSendCommand(CLCD_2Lines_5x8Fontsize);
     f20:	88 e3       	ldi	r24, 0x38	; 56
     f22:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
     f26:	0b c0       	rjmp	.+22     	; 0xf3e <CLCD_voidInit+0x180>
            break;
        case CLCD_2Lines_5x11Fontsize:
            CLCD_voidSendCommand(CLCD_2Lines_5x11Fontsize);
     f28:	8c e3       	ldi	r24, 0x3C	; 60
     f2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
     f2e:	07 c0       	rjmp	.+14     	; 0xf3e <CLCD_voidInit+0x180>
            break;
        case CLCD_1Lines_5x8Fontsize:
            CLCD_voidSendCommand(CLCD_1Lines_5x11Fontsize);
     f30:	84 e3       	ldi	r24, 0x34	; 52
     f32:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <CLCD_voidInit+0x180>
            break;
        case CLCD_1Lines_5x11Fontsize:
            CLCD_voidSendCommand(CLCD_1Lines_5x11Fontsize);
     f38:	84 e3       	ldi	r24, 0x34	; 52
     f3a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
            break;
    }

	/*Display on off control: display enable, disable/enable cursor, no/ blink cursor*/
	switch(Copy_u8Display)
     f3e:	88 89       	ldd	r24, Y+16	; 0x10
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	3a 8b       	std	Y+18, r19	; 0x12
     f46:	29 8b       	std	Y+17, r18	; 0x11
     f48:	89 89       	ldd	r24, Y+17	; 0x11
     f4a:	9a 89       	ldd	r25, Y+18	; 0x12
     f4c:	8e 30       	cpi	r24, 0x0E	; 14
     f4e:	91 05       	cpc	r25, r1
     f50:	71 f0       	breq	.+28     	; 0xf6e <CLCD_voidInit+0x1b0>
     f52:	29 89       	ldd	r18, Y+17	; 0x11
     f54:	3a 89       	ldd	r19, Y+18	; 0x12
     f56:	2f 30       	cpi	r18, 0x0F	; 15
     f58:	31 05       	cpc	r19, r1
     f5a:	69 f0       	breq	.+26     	; 0xf76 <CLCD_voidInit+0x1b8>
     f5c:	89 89       	ldd	r24, Y+17	; 0x11
     f5e:	9a 89       	ldd	r25, Y+18	; 0x12
     f60:	8c 30       	cpi	r24, 0x0C	; 12
     f62:	91 05       	cpc	r25, r1
     f64:	59 f4       	brne	.+22     	; 0xf7c <CLCD_voidInit+0x1be>
    {

        case CLCD_Curser_OFF:
            CLCD_voidSendCommand(CLCD_Curser_OFF);
     f66:	8c e0       	ldi	r24, 0x0C	; 12
     f68:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
     f6c:	07 c0       	rjmp	.+14     	; 0xf7c <CLCD_voidInit+0x1be>
            break;
        case CLCD_Curser_ON_NoBlinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_NoBlinking);
     f6e:	8e e0       	ldi	r24, 0x0E	; 14
     f70:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <CLCD_voidInit+0x1be>
            break;
        case CLCD_Curser_ON_Blinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_Blinking);
     f76:	8f e0       	ldi	r24, 0x0F	; 15
     f78:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
            break;

    }

	/*Clear display*/
	CLCD_voidSendCommand(1);
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(1);

	#endif


}
     f82:	64 96       	adiw	r28, 0x14	; 20
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <CLCD_voidSendString+0x6>
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	9b 83       	std	Y+3, r25	; 0x03
     fa2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	15 c0       	rjmp	.+42     	; 0xfd2 <CLCD_voidSendString+0x3e>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	9b 81       	ldd	r25, Y+3	; 0x03
     fb2:	fc 01       	movw	r30, r24
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	80 81       	ld	r24, Z
     fba:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		Local_u8Counter++;
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u8Counter==16)
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	80 31       	cpi	r24, 0x10	; 16
     fc8:	21 f4       	brne	.+8      	; 0xfd2 <CLCD_voidSendString+0x3e>
			CLCD_voidGoToXY(1,0);
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	9b 81       	ldd	r25, Y+3	; 0x03
     fdc:	fc 01       	movw	r30, r24
     fde:	e2 0f       	add	r30, r18
     fe0:	f3 1f       	adc	r31, r19
     fe2:	80 81       	ld	r24, Z
     fe4:	88 23       	and	r24, r24
     fe6:	01 f7       	brne	.-64     	; 0xfa8 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
		if(Local_u8Counter==16)
			CLCD_voidGoToXY(1,0);
	}
}
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <CLCD_voidGoToXY+0x6>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	8a 83       	std	Y+2, r24	; 0x02
    1002:	6b 83       	std	Y+3, r22	; 0x03
	/*Calculating the Address of the DDRAM by the coordinates X and Y*/
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	88 23       	and	r24, r24
    1008:	19 f4       	brne	.+6      	; 0x1010 <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at the first line*/
		Local_u8Address=Copy_u8YPos;
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	06 c0       	rjmp	.+12     	; 0x101c <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	19 f4       	brne	.+6      	; 0x101c <CLCD_voidGoToXY+0x28>
	{
		/*Location is at the second line*/
		Local_u8Address=Copy_u8YPos+0x40;
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	80 5c       	subi	r24, 0xC0	; 192
    101a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Send the DDRAM Address to point on the location on the screen you want to write on it with setting bit 7*/
	CLCD_voidSendCommand(Local_u8Address+128);
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	80 58       	subi	r24, 0x80	; 128
    1020:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8arr,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	27 97       	sbiw	r28, 0x07	; 7
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	9c 83       	std	Y+4, r25	; 0x04
    1046:	8b 83       	std	Y+3, r24	; 0x03
    1048:	6d 83       	std	Y+5, r22	; 0x05
    104a:	4e 83       	std	Y+6, r20	; 0x06
    104c:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Counter,Local_u8CGRAM_Address;

	/*Calculating the Address of the CGRAM whose block is 8 bytes*/
	Local_u8CGRAM_Address=Copy_u8PatternNumber*8;
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	89 83       	std	Y+1, r24	; 0x01

	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	80 5c       	subi	r24, 0xC0	; 192
    1066:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    106a:	1a 82       	std	Y+2, r1	; 0x02
    106c:	0e c0       	rjmp	.+28     	; 0x108a <CLCD_voidWriteSpecialCharacter+0x5a>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	fc 01       	movw	r30, r24
    107a:	e2 0f       	add	r30, r18
    107c:	f3 1f       	adc	r31, r19
    107e:	80 81       	ld	r24, Z
    1080:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	8f 5f       	subi	r24, 0xFF	; 255
    1088:	8a 83       	std	Y+2, r24	; 0x02
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	88 30       	cpi	r24, 0x08	; 8
    108e:	78 f3       	brcs	.-34     	; 0x106e <CLCD_voidWriteSpecialCharacter+0x3e>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
		}

	/*go back to the DDRAM to display the pattern in the selected position*/
		CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1090:	8e 81       	ldd	r24, Y+6	; 0x06
    1092:	6f 81       	ldd	r22, Y+7	; 0x07
    1094:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>

	/*The DDRAM accessing the CGRAM by block to Displaying the pattern*/
		CLCD_voidSendData(Copy_u8PatternNumber);
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
}
    109e:	27 96       	adiw	r28, 0x07	; 7
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	6b 97       	sbiw	r28, 0x1b	; 27
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	6c 8b       	std	Y+20, r22	; 0x14
    10ca:	7d 8b       	std	Y+21, r23	; 0x15
    10cc:	8e 8b       	std	Y+22, r24	; 0x16
    10ce:	9f 8b       	std	Y+23, r25	; 0x17
	/*define local counter and local itrator and temp variable for the swapping*/
	u8 i,temp;
	u8 Local_u8Counter,arr[16]={48};
    10d0:	80 e1       	ldi	r24, 0x10	; 16
    10d2:	fe 01       	movw	r30, r28
    10d4:	34 96       	adiw	r30, 0x04	; 4
    10d6:	df 01       	movw	r26, r30
    10d8:	28 2f       	mov	r18, r24
    10da:	1d 92       	st	X+, r1
    10dc:	2a 95       	dec	r18
    10de:	e9 f7       	brne	.-6      	; 0x10da <CLCD_voidWriteNumber+0x2a>
    10e0:	80 e3       	ldi	r24, 0x30	; 48
    10e2:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8Counter=0;
    10e4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u32Number==0)
    10e6:	8c 89       	ldd	r24, Y+20	; 0x14
    10e8:	9d 89       	ldd	r25, Y+21	; 0x15
    10ea:	ae 89       	ldd	r26, Y+22	; 0x16
    10ec:	bf 89       	ldd	r27, Y+23	; 0x17
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	a1 05       	cpc	r26, r1
    10f2:	b1 05       	cpc	r27, r1
    10f4:	91 f5       	brne	.+100    	; 0x115a <CLCD_voidWriteNumber+0xaa>
		CLCD_voidSendData('0');
    10f6:	80 e3       	ldi	r24, 0x30	; 48
    10f8:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    10fc:	99 c0       	rjmp	.+306    	; 0x1230 <CLCD_voidWriteNumber+0x180>
	else{
	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	08 2f       	mov	r16, r24
    1102:	10 e0       	ldi	r17, 0x00	; 0
    1104:	8c 89       	ldd	r24, Y+20	; 0x14
    1106:	9d 89       	ldd	r25, Y+21	; 0x15
    1108:	ae 89       	ldd	r26, Y+22	; 0x16
    110a:	bf 89       	ldd	r27, Y+23	; 0x17
    110c:	2a e0       	ldi	r18, 0x0A	; 10
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	bc 01       	movw	r22, r24
    1116:	cd 01       	movw	r24, r26
    1118:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__udivmodsi4>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	28 2f       	mov	r18, r24
    1122:	20 5d       	subi	r18, 0xD0	; 208
    1124:	ce 01       	movw	r24, r28
    1126:	04 96       	adiw	r24, 0x04	; 4
    1128:	fc 01       	movw	r30, r24
    112a:	e0 0f       	add	r30, r16
    112c:	f1 1f       	adc	r31, r17
    112e:	20 83       	st	Z, r18
		Copy_u32Number/=10;
    1130:	8c 89       	ldd	r24, Y+20	; 0x14
    1132:	9d 89       	ldd	r25, Y+21	; 0x15
    1134:	ae 89       	ldd	r26, Y+22	; 0x16
    1136:	bf 89       	ldd	r27, Y+23	; 0x17
    1138:	2a e0       	ldi	r18, 0x0A	; 10
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__udivmodsi4>
    1148:	da 01       	movw	r26, r20
    114a:	c9 01       	movw	r24, r18
    114c:	8c 8b       	std	Y+20, r24	; 0x14
    114e:	9d 8b       	std	Y+21, r25	; 0x15
    1150:	ae 8b       	std	Y+22, r26	; 0x16
    1152:	bf 8b       	std	Y+23, r27	; 0x17
		Local_u8Counter++;
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    1158:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u32Number==0)
		CLCD_voidSendData('0');
	else{
	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
    115a:	8c 89       	ldd	r24, Y+20	; 0x14
    115c:	9d 89       	ldd	r25, Y+21	; 0x15
    115e:	ae 89       	ldd	r26, Y+22	; 0x16
    1160:	bf 89       	ldd	r27, Y+23	; 0x17
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	a1 05       	cpc	r26, r1
    1166:	b1 05       	cpc	r27, r1
    1168:	51 f6       	brne	.-108    	; 0x10fe <CLCD_voidWriteNumber+0x4e>
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
		Copy_u32Number/=10;
		Local_u8Counter++;
	}
	arr[Local_u8Counter]='\0';
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	ce 01       	movw	r24, r28
    1172:	04 96       	adiw	r24, 0x04	; 4
    1174:	fc 01       	movw	r30, r24
    1176:	e2 0f       	add	r30, r18
    1178:	f3 1f       	adc	r31, r19
    117a:	10 82       	st	Z, r1

	/*Loop to reverse the array*/
	Local_u8Counter--;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	81 50       	subi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    1182:	1b 82       	std	Y+3, r1	; 0x03
    1184:	33 c0       	rjmp	.+102    	; 0x11ec <CLCD_voidWriteNumber+0x13c>
	{
		temp=arr[i];
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	ce 01       	movw	r24, r28
    118e:	04 96       	adiw	r24, 0x04	; 4
    1190:	fc 01       	movw	r30, r24
    1192:	e2 0f       	add	r30, r18
    1194:	f3 1f       	adc	r31, r19
    1196:	80 81       	ld	r24, Z
    1198:	8a 83       	std	Y+2, r24	; 0x02
		arr[i]=arr[Local_u8Counter-i];
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	48 2f       	mov	r20, r24
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	28 1b       	sub	r18, r24
    11ae:	39 0b       	sbc	r19, r25
    11b0:	ce 01       	movw	r24, r28
    11b2:	04 96       	adiw	r24, 0x04	; 4
    11b4:	fc 01       	movw	r30, r24
    11b6:	e2 0f       	add	r30, r18
    11b8:	f3 1f       	adc	r31, r19
    11ba:	20 81       	ld	r18, Z
    11bc:	ce 01       	movw	r24, r28
    11be:	04 96       	adiw	r24, 0x04	; 4
    11c0:	fc 01       	movw	r30, r24
    11c2:	e4 0f       	add	r30, r20
    11c4:	f5 1f       	adc	r31, r21
    11c6:	20 83       	st	Z, r18
		arr[Local_u8Counter-i]=temp;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	28 1b       	sub	r18, r24
    11d6:	39 0b       	sbc	r19, r25
    11d8:	ce 01       	movw	r24, r28
    11da:	04 96       	adiw	r24, 0x04	; 4
    11dc:	fc 01       	movw	r30, r24
    11de:	e2 0f       	add	r30, r18
    11e0:	f3 1f       	adc	r31, r19
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
	}
	arr[Local_u8Counter]='\0';

	/*Loop to reverse the array*/
	Local_u8Counter--;
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	8b 83       	std	Y+3, r24	; 0x03
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	a8 2f       	mov	r26, r24
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	b9 8f       	std	Y+25, r27	; 0x19
    11f4:	a8 8f       	std	Y+24, r26	; 0x18
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	9b 8f       	std	Y+27, r25	; 0x1b
    1200:	8a 8f       	std	Y+26, r24	; 0x1a
    1202:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1204:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1206:	33 23       	and	r19, r19
    1208:	2c f4       	brge	.+10     	; 0x1214 <CLCD_voidWriteNumber+0x164>
    120a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    120c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	9b 8f       	std	Y+27, r25	; 0x1b
    1212:	8a 8f       	std	Y+26, r24	; 0x1a
    1214:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1216:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1218:	95 95       	asr	r25
    121a:	87 95       	ror	r24
    121c:	a8 8d       	ldd	r26, Y+24	; 0x18
    121e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1220:	a8 17       	cp	r26, r24
    1222:	b9 07       	cpc	r27, r25
    1224:	0c f4       	brge	.+2      	; 0x1228 <CLCD_voidWriteNumber+0x178>
    1226:	af cf       	rjmp	.-162    	; 0x1186 <CLCD_voidWriteNumber+0xd6>
		arr[i]=arr[Local_u8Counter-i];
		arr[Local_u8Counter-i]=temp;
	}

	/*displaying the array on the screen*/
	CLCD_voidSendString(arr);
    1228:	ce 01       	movw	r24, r28
    122a:	04 96       	adiw	r24, 0x04	; 4
    122c:	0e 94 ca 07 	call	0xf94	; 0xf94 <CLCD_voidSendString>
	}
}
    1230:	6b 96       	adiw	r28, 0x1b	; 27
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	08 95       	ret

00001246 <PORT_voidInit>:




void PORT_voidInit(void)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
	/*SET THE PORT Direction*/
	DDRA=PORTA_DIR;
    124e:	ea e3       	ldi	r30, 0x3A	; 58
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
    1254:	e7 e3       	ldi	r30, 0x37	; 55
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
    125a:	e4 e3       	ldi	r30, 0x34	; 52
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
    1260:	e1 e3       	ldi	r30, 0x31	; 49
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	10 82       	st	Z, r1

	/*SET THE PORT Value*/
	PORTA=PORTA_INT;
    1266:	eb e3       	ldi	r30, 0x3B	; 59
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	10 82       	st	Z, r1
	PORTB=PORTB_INT;
    126c:	e8 e3       	ldi	r30, 0x38	; 56
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	10 82       	st	Z, r1
	PORTC=PORTC_INT;
    1272:	e5 e3       	ldi	r30, 0x35	; 53
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	10 82       	st	Z, r1
	PORTD=PORTD_INT;
    1278:	e2 e3       	ldi	r30, 0x32	; 50
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	87 e0       	ldi	r24, 0x07	; 7
    127e:	80 83       	st	Z, r24
}
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	28 97       	sbiw	r28, 0x08	; 8
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	8a 83       	std	Y+2, r24	; 0x02
    129c:	6b 83       	std	Y+3, r22	; 0x03
    129e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    12a0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	88 30       	cpi	r24, 0x08	; 8
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <DIO_u8SetPinDirection+0x24>
    12a8:	f4 c0       	rjmp	.+488    	; 0x1492 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	88 23       	and	r24, r24
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <DIO_u8SetPinDirection+0x2c>
    12b0:	77 c0       	rjmp	.+238    	; 0x13a0 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	38 87       	std	Y+8, r19	; 0x08
    12ba:	2f 83       	std	Y+7, r18	; 0x07
    12bc:	8f 81       	ldd	r24, Y+7	; 0x07
    12be:	98 85       	ldd	r25, Y+8	; 0x08
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	59 f1       	breq	.+86     	; 0x131c <DIO_u8SetPinDirection+0x96>
    12c6:	2f 81       	ldd	r18, Y+7	; 0x07
    12c8:	38 85       	ldd	r19, Y+8	; 0x08
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	2c f4       	brge	.+10     	; 0x12da <DIO_u8SetPinDirection+0x54>
    12d0:	8f 81       	ldd	r24, Y+7	; 0x07
    12d2:	98 85       	ldd	r25, Y+8	; 0x08
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	69 f0       	breq	.+26     	; 0x12f2 <DIO_u8SetPinDirection+0x6c>
    12d8:	60 c0       	rjmp	.+192    	; 0x139a <DIO_u8SetPinDirection+0x114>
    12da:	2f 81       	ldd	r18, Y+7	; 0x07
    12dc:	38 85       	ldd	r19, Y+8	; 0x08
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	89 f1       	breq	.+98     	; 0x1346 <DIO_u8SetPinDirection+0xc0>
    12e4:	8f 81       	ldd	r24, Y+7	; 0x07
    12e6:	98 85       	ldd	r25, Y+8	; 0x08
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	91 05       	cpc	r25, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <DIO_u8SetPinDirection+0x6a>
    12ee:	40 c0       	rjmp	.+128    	; 0x1370 <DIO_u8SetPinDirection+0xea>
    12f0:	54 c0       	rjmp	.+168    	; 0x139a <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
    12f2:	aa e3       	ldi	r26, 0x3A	; 58
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	ea e3       	ldi	r30, 0x3A	; 58
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_u8SetPinDirection+0x8a>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_u8SetPinDirection+0x86>
    1314:	80 95       	com	r24
    1316:	84 23       	and	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	bd c0       	rjmp	.+378    	; 0x1496 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
    131c:	a7 e3       	ldi	r26, 0x37	; 55
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e7 e3       	ldi	r30, 0x37	; 55
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_u8SetPinDirection+0xb4>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_u8SetPinDirection+0xb0>
    133e:	80 95       	com	r24
    1340:	84 23       	and	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	a8 c0       	rjmp	.+336    	; 0x1496 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
    1346:	a4 e3       	ldi	r26, 0x34	; 52
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e4 e3       	ldi	r30, 0x34	; 52
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_u8SetPinDirection+0xde>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_u8SetPinDirection+0xda>
    1368:	80 95       	com	r24
    136a:	84 23       	and	r24, r20
    136c:	8c 93       	st	X, r24
    136e:	93 c0       	rjmp	.+294    	; 0x1496 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
    1370:	a1 e3       	ldi	r26, 0x31	; 49
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e1 e3       	ldi	r30, 0x31	; 49
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_u8SetPinDirection+0x108>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_u8SetPinDirection+0x104>
    1392:	80 95       	com	r24
    1394:	84 23       	and	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	7e c0       	rjmp	.+252    	; 0x1496 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	7b c0       	rjmp	.+246    	; 0x1496 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <DIO_u8SetPinDirection+0x122>
    13a6:	72 c0       	rjmp	.+228    	; 0x148c <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	3e 83       	std	Y+6, r19	; 0x06
    13b0:	2d 83       	std	Y+5, r18	; 0x05
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	9e 81       	ldd	r25, Y+6	; 0x06
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	91 05       	cpc	r25, r1
    13ba:	49 f1       	breq	.+82     	; 0x140e <DIO_u8SetPinDirection+0x188>
    13bc:	2d 81       	ldd	r18, Y+5	; 0x05
    13be:	3e 81       	ldd	r19, Y+6	; 0x06
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <DIO_u8SetPinDirection+0x14a>
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	61 f0       	breq	.+24     	; 0x13e6 <DIO_u8SetPinDirection+0x160>
    13ce:	5b c0       	rjmp	.+182    	; 0x1486 <DIO_u8SetPinDirection+0x200>
    13d0:	2d 81       	ldd	r18, Y+5	; 0x05
    13d2:	3e 81       	ldd	r19, Y+6	; 0x06
    13d4:	22 30       	cpi	r18, 0x02	; 2
    13d6:	31 05       	cpc	r19, r1
    13d8:	71 f1       	breq	.+92     	; 0x1436 <DIO_u8SetPinDirection+0x1b0>
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	91 05       	cpc	r25, r1
    13e2:	e9 f1       	breq	.+122    	; 0x145e <DIO_u8SetPinDirection+0x1d8>
    13e4:	50 c0       	rjmp	.+160    	; 0x1486 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
    13e6:	aa e3       	ldi	r26, 0x3A	; 58
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	ea e3       	ldi	r30, 0x3A	; 58
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_u8SetPinDirection+0x17e>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_u8SetPinDirection+0x17a>
    1408:	84 2b       	or	r24, r20
    140a:	8c 93       	st	X, r24
    140c:	44 c0       	rjmp	.+136    	; 0x1496 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
    140e:	a7 e3       	ldi	r26, 0x37	; 55
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e7 e3       	ldi	r30, 0x37	; 55
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_u8SetPinDirection+0x1a6>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_u8SetPinDirection+0x1a2>
    1430:	84 2b       	or	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	30 c0       	rjmp	.+96     	; 0x1496 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
    1436:	a4 e3       	ldi	r26, 0x34	; 52
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e4 e3       	ldi	r30, 0x34	; 52
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_u8SetPinDirection+0x1ce>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_u8SetPinDirection+0x1ca>
    1458:	84 2b       	or	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	1c c0       	rjmp	.+56     	; 0x1496 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
    145e:	a1 e3       	ldi	r26, 0x31	; 49
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e1 e3       	ldi	r30, 0x31	; 49
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_u8SetPinDirection+0x1f6>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_u8SetPinDirection+0x1f2>
    1480:	84 2b       	or	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	05 c0       	rjmp	.+10     	; 0x1496 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1496:	89 81       	ldd	r24, Y+1	; 0x01
}
    1498:	28 96       	adiw	r28, 0x08	; 8
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <DIO_u8SetPortDirection+0x6>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <DIO_u8SetPortDirection+0x8>
    14b2:	0f 92       	push	r0
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    14bc:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	3d 83       	std	Y+5, r19	; 0x05
    14c6:	2c 83       	std	Y+4, r18	; 0x04
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	91 05       	cpc	r25, r1
    14d0:	d1 f0       	breq	.+52     	; 0x1506 <DIO_u8SetPortDirection+0x5c>
    14d2:	2c 81       	ldd	r18, Y+4	; 0x04
    14d4:	3d 81       	ldd	r19, Y+5	; 0x05
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	2c f4       	brge	.+10     	; 0x14e6 <DIO_u8SetPortDirection+0x3c>
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	61 f0       	breq	.+24     	; 0x14fc <DIO_u8SetPortDirection+0x52>
    14e4:	1f c0       	rjmp	.+62     	; 0x1524 <DIO_u8SetPortDirection+0x7a>
    14e6:	2c 81       	ldd	r18, Y+4	; 0x04
    14e8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	81 f0       	breq	.+32     	; 0x1510 <DIO_u8SetPortDirection+0x66>
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	9d 81       	ldd	r25, Y+5	; 0x05
    14f4:	83 30       	cpi	r24, 0x03	; 3
    14f6:	91 05       	cpc	r25, r1
    14f8:	81 f0       	breq	.+32     	; 0x151a <DIO_u8SetPortDirection+0x70>
    14fa:	14 c0       	rjmp	.+40     	; 0x1524 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
    14fc:	ea e3       	ldi	r30, 0x3A	; 58
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	80 83       	st	Z, r24
    1504:	11 c0       	rjmp	.+34     	; 0x1528 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
    1506:	e7 e3       	ldi	r30, 0x37	; 55
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	80 83       	st	Z, r24
    150e:	0c c0       	rjmp	.+24     	; 0x1528 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
    1510:	e4 e3       	ldi	r30, 0x34	; 52
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	80 83       	st	Z, r24
    1518:	07 c0       	rjmp	.+14     	; 0x1528 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
    151a:	e1 e3       	ldi	r30, 0x31	; 49
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	80 83       	st	Z, r24
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1528:	89 81       	ldd	r24, Y+1	; 0x01
}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	28 97       	sbiw	r28, 0x08	; 8
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	8a 83       	std	Y+2, r24	; 0x02
    1550:	6b 83       	std	Y+3, r22	; 0x03
    1552:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1554:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	88 30       	cpi	r24, 0x08	; 8
    155a:	08 f0       	brcs	.+2      	; 0x155e <DIO_u8SetPinValue+0x24>
    155c:	f4 c0       	rjmp	.+488    	; 0x1746 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	88 23       	and	r24, r24
    1562:	09 f0       	breq	.+2      	; 0x1566 <DIO_u8SetPinValue+0x2c>
    1564:	77 c0       	rjmp	.+238    	; 0x1654 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	38 87       	std	Y+8, r19	; 0x08
    156e:	2f 83       	std	Y+7, r18	; 0x07
    1570:	8f 81       	ldd	r24, Y+7	; 0x07
    1572:	98 85       	ldd	r25, Y+8	; 0x08
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	91 05       	cpc	r25, r1
    1578:	59 f1       	breq	.+86     	; 0x15d0 <DIO_u8SetPinValue+0x96>
    157a:	2f 81       	ldd	r18, Y+7	; 0x07
    157c:	38 85       	ldd	r19, Y+8	; 0x08
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	2c f4       	brge	.+10     	; 0x158e <DIO_u8SetPinValue+0x54>
    1584:	8f 81       	ldd	r24, Y+7	; 0x07
    1586:	98 85       	ldd	r25, Y+8	; 0x08
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	69 f0       	breq	.+26     	; 0x15a6 <DIO_u8SetPinValue+0x6c>
    158c:	60 c0       	rjmp	.+192    	; 0x164e <DIO_u8SetPinValue+0x114>
    158e:	2f 81       	ldd	r18, Y+7	; 0x07
    1590:	38 85       	ldd	r19, Y+8	; 0x08
    1592:	22 30       	cpi	r18, 0x02	; 2
    1594:	31 05       	cpc	r19, r1
    1596:	89 f1       	breq	.+98     	; 0x15fa <DIO_u8SetPinValue+0xc0>
    1598:	8f 81       	ldd	r24, Y+7	; 0x07
    159a:	98 85       	ldd	r25, Y+8	; 0x08
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	91 05       	cpc	r25, r1
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <DIO_u8SetPinValue+0x6a>
    15a2:	40 c0       	rjmp	.+128    	; 0x1624 <DIO_u8SetPinValue+0xea>
    15a4:	54 c0       	rjmp	.+168    	; 0x164e <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
    15a6:	ab e3       	ldi	r26, 0x3B	; 59
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	eb e3       	ldi	r30, 0x3B	; 59
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <DIO_u8SetPinValue+0x8a>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <DIO_u8SetPinValue+0x86>
    15c8:	80 95       	com	r24
    15ca:	84 23       	and	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	bd c0       	rjmp	.+378    	; 0x174a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
    15d0:	a8 e3       	ldi	r26, 0x38	; 56
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e8 e3       	ldi	r30, 0x38	; 56
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_u8SetPinValue+0xb4>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_u8SetPinValue+0xb0>
    15f2:	80 95       	com	r24
    15f4:	84 23       	and	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	a8 c0       	rjmp	.+336    	; 0x174a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
    15fa:	a5 e3       	ldi	r26, 0x35	; 53
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e5 e3       	ldi	r30, 0x35	; 53
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_u8SetPinValue+0xde>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_u8SetPinValue+0xda>
    161c:	80 95       	com	r24
    161e:	84 23       	and	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	93 c0       	rjmp	.+294    	; 0x174a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
    1624:	a2 e3       	ldi	r26, 0x32	; 50
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e2 e3       	ldi	r30, 0x32	; 50
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_u8SetPinValue+0x108>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_u8SetPinValue+0x104>
    1646:	80 95       	com	r24
    1648:	84 23       	and	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	7e c0       	rjmp	.+252    	; 0x174a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	7b c0       	rjmp	.+246    	; 0x174a <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    1654:	8c 81       	ldd	r24, Y+4	; 0x04
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	09 f0       	breq	.+2      	; 0x165c <DIO_u8SetPinValue+0x122>
    165a:	72 c0       	rjmp	.+228    	; 0x1740 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	3e 83       	std	Y+6, r19	; 0x06
    1664:	2d 83       	std	Y+5, r18	; 0x05
    1666:	8d 81       	ldd	r24, Y+5	; 0x05
    1668:	9e 81       	ldd	r25, Y+6	; 0x06
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	91 05       	cpc	r25, r1
    166e:	49 f1       	breq	.+82     	; 0x16c2 <DIO_u8SetPinValue+0x188>
    1670:	2d 81       	ldd	r18, Y+5	; 0x05
    1672:	3e 81       	ldd	r19, Y+6	; 0x06
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	2c f4       	brge	.+10     	; 0x1684 <DIO_u8SetPinValue+0x14a>
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	9e 81       	ldd	r25, Y+6	; 0x06
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	61 f0       	breq	.+24     	; 0x169a <DIO_u8SetPinValue+0x160>
    1682:	5b c0       	rjmp	.+182    	; 0x173a <DIO_u8SetPinValue+0x200>
    1684:	2d 81       	ldd	r18, Y+5	; 0x05
    1686:	3e 81       	ldd	r19, Y+6	; 0x06
    1688:	22 30       	cpi	r18, 0x02	; 2
    168a:	31 05       	cpc	r19, r1
    168c:	71 f1       	breq	.+92     	; 0x16ea <DIO_u8SetPinValue+0x1b0>
    168e:	8d 81       	ldd	r24, Y+5	; 0x05
    1690:	9e 81       	ldd	r25, Y+6	; 0x06
    1692:	83 30       	cpi	r24, 0x03	; 3
    1694:	91 05       	cpc	r25, r1
    1696:	e9 f1       	breq	.+122    	; 0x1712 <DIO_u8SetPinValue+0x1d8>
    1698:	50 c0       	rjmp	.+160    	; 0x173a <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
    169a:	ab e3       	ldi	r26, 0x3B	; 59
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	eb e3       	ldi	r30, 0x3B	; 59
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <DIO_u8SetPinValue+0x17e>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <DIO_u8SetPinValue+0x17a>
    16bc:	84 2b       	or	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	44 c0       	rjmp	.+136    	; 0x174a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
    16c2:	a8 e3       	ldi	r26, 0x38	; 56
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e8 e3       	ldi	r30, 0x38	; 56
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_u8SetPinValue+0x1a6>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <DIO_u8SetPinValue+0x1a2>
    16e4:	84 2b       	or	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	30 c0       	rjmp	.+96     	; 0x174a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
    16ea:	a5 e3       	ldi	r26, 0x35	; 53
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e5 e3       	ldi	r30, 0x35	; 53
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_u8SetPinValue+0x1ce>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <DIO_u8SetPinValue+0x1ca>
    170c:	84 2b       	or	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	1c c0       	rjmp	.+56     	; 0x174a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
    1712:	a2 e3       	ldi	r26, 0x32	; 50
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e2 e3       	ldi	r30, 0x32	; 50
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_u8SetPinValue+0x1f6>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_u8SetPinValue+0x1f2>
    1734:	84 2b       	or	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	08 c0       	rjmp	.+16     	; 0x174a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	05 c0       	rjmp	.+10     	; 0x174a <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    174a:	89 81       	ldd	r24, Y+1	; 0x01
}
    174c:	28 96       	adiw	r28, 0x08	; 8
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	00 d0       	rcall	.+0      	; 0x1764 <DIO_u8SetPortValue+0x6>
    1764:	00 d0       	rcall	.+0      	; 0x1766 <DIO_u8SetPortValue+0x8>
    1766:	0f 92       	push	r0
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	8a 83       	std	Y+2, r24	; 0x02
    176e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1770:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	3d 83       	std	Y+5, r19	; 0x05
    177a:	2c 83       	std	Y+4, r18	; 0x04
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	9d 81       	ldd	r25, Y+5	; 0x05
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	91 05       	cpc	r25, r1
    1784:	d1 f0       	breq	.+52     	; 0x17ba <DIO_u8SetPortValue+0x5c>
    1786:	2c 81       	ldd	r18, Y+4	; 0x04
    1788:	3d 81       	ldd	r19, Y+5	; 0x05
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	2c f4       	brge	.+10     	; 0x179a <DIO_u8SetPortValue+0x3c>
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	9d 81       	ldd	r25, Y+5	; 0x05
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	61 f0       	breq	.+24     	; 0x17b0 <DIO_u8SetPortValue+0x52>
    1798:	1f c0       	rjmp	.+62     	; 0x17d8 <DIO_u8SetPortValue+0x7a>
    179a:	2c 81       	ldd	r18, Y+4	; 0x04
    179c:	3d 81       	ldd	r19, Y+5	; 0x05
    179e:	22 30       	cpi	r18, 0x02	; 2
    17a0:	31 05       	cpc	r19, r1
    17a2:	81 f0       	breq	.+32     	; 0x17c4 <DIO_u8SetPortValue+0x66>
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	83 30       	cpi	r24, 0x03	; 3
    17aa:	91 05       	cpc	r25, r1
    17ac:	81 f0       	breq	.+32     	; 0x17ce <DIO_u8SetPortValue+0x70>
    17ae:	14 c0       	rjmp	.+40     	; 0x17d8 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value;break;
    17b0:	eb e3       	ldi	r30, 0x3B	; 59
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	80 83       	st	Z, r24
    17b8:	11 c0       	rjmp	.+34     	; 0x17dc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value;break;
    17ba:	e8 e3       	ldi	r30, 0x38	; 56
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	80 83       	st	Z, r24
    17c2:	0c c0       	rjmp	.+24     	; 0x17dc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value;break;
    17c4:	e5 e3       	ldi	r30, 0x35	; 53
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	80 83       	st	Z, r24
    17cc:	07 c0       	rjmp	.+14     	; 0x17dc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value;break;
    17ce:	e2 e3       	ldi	r30, 0x32	; 50
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	80 83       	st	Z, r24
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	27 97       	sbiw	r28, 0x07	; 7
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	8a 83       	std	Y+2, r24	; 0x02
    1804:	6b 83       	std	Y+3, r22	; 0x03
    1806:	5d 83       	std	Y+5, r21	; 0x05
    1808:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    180a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=0) && (Copy_u8Pin<=DIO_u8PIN7))
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	9d 81       	ldd	r25, Y+5	; 0x05
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	09 f4       	brne	.+2      	; 0x1816 <DIO_u8GetPinValue+0x28>
    1814:	78 c0       	rjmp	.+240    	; 0x1906 <DIO_u8GetPinValue+0x118>
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	88 30       	cpi	r24, 0x08	; 8
    181a:	08 f0       	brcs	.+2      	; 0x181e <DIO_u8GetPinValue+0x30>
    181c:	74 c0       	rjmp	.+232    	; 0x1906 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	3f 83       	std	Y+7, r19	; 0x07
    1826:	2e 83       	std	Y+6, r18	; 0x06
    1828:	4e 81       	ldd	r20, Y+6	; 0x06
    182a:	5f 81       	ldd	r21, Y+7	; 0x07
    182c:	41 30       	cpi	r20, 0x01	; 1
    182e:	51 05       	cpc	r21, r1
    1830:	59 f1       	breq	.+86     	; 0x1888 <DIO_u8GetPinValue+0x9a>
    1832:	8e 81       	ldd	r24, Y+6	; 0x06
    1834:	9f 81       	ldd	r25, Y+7	; 0x07
    1836:	82 30       	cpi	r24, 0x02	; 2
    1838:	91 05       	cpc	r25, r1
    183a:	34 f4       	brge	.+12     	; 0x1848 <DIO_u8GetPinValue+0x5a>
    183c:	2e 81       	ldd	r18, Y+6	; 0x06
    183e:	3f 81       	ldd	r19, Y+7	; 0x07
    1840:	21 15       	cp	r18, r1
    1842:	31 05       	cpc	r19, r1
    1844:	69 f0       	breq	.+26     	; 0x1860 <DIO_u8GetPinValue+0x72>
    1846:	5c c0       	rjmp	.+184    	; 0x1900 <DIO_u8GetPinValue+0x112>
    1848:	4e 81       	ldd	r20, Y+6	; 0x06
    184a:	5f 81       	ldd	r21, Y+7	; 0x07
    184c:	42 30       	cpi	r20, 0x02	; 2
    184e:	51 05       	cpc	r21, r1
    1850:	79 f1       	breq	.+94     	; 0x18b0 <DIO_u8GetPinValue+0xc2>
    1852:	8e 81       	ldd	r24, Y+6	; 0x06
    1854:	9f 81       	ldd	r25, Y+7	; 0x07
    1856:	83 30       	cpi	r24, 0x03	; 3
    1858:	91 05       	cpc	r25, r1
    185a:	09 f4       	brne	.+2      	; 0x185e <DIO_u8GetPinValue+0x70>
    185c:	3d c0       	rjmp	.+122    	; 0x18d8 <DIO_u8GetPinValue+0xea>
    185e:	50 c0       	rjmp	.+160    	; 0x1900 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    1860:	e9 e3       	ldi	r30, 0x39	; 57
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a9 01       	movw	r20, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <DIO_u8GetPinValue+0x8a>
    1874:	55 95       	asr	r21
    1876:	47 95       	ror	r20
    1878:	8a 95       	dec	r24
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <DIO_u8GetPinValue+0x86>
    187c:	ca 01       	movw	r24, r20
    187e:	81 70       	andi	r24, 0x01	; 1
    1880:	ec 81       	ldd	r30, Y+4	; 0x04
    1882:	fd 81       	ldd	r31, Y+5	; 0x05
    1884:	80 83       	st	Z, r24
    1886:	41 c0       	rjmp	.+130    	; 0x190a <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    1888:	e6 e3       	ldi	r30, 0x36	; 54
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	88 2f       	mov	r24, r24
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a9 01       	movw	r20, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <DIO_u8GetPinValue+0xb2>
    189c:	55 95       	asr	r21
    189e:	47 95       	ror	r20
    18a0:	8a 95       	dec	r24
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <DIO_u8GetPinValue+0xae>
    18a4:	ca 01       	movw	r24, r20
    18a6:	81 70       	andi	r24, 0x01	; 1
    18a8:	ec 81       	ldd	r30, Y+4	; 0x04
    18aa:	fd 81       	ldd	r31, Y+5	; 0x05
    18ac:	80 83       	st	Z, r24
    18ae:	2d c0       	rjmp	.+90     	; 0x190a <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    18b0:	e3 e3       	ldi	r30, 0x33	; 51
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a9 01       	movw	r20, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <DIO_u8GetPinValue+0xda>
    18c4:	55 95       	asr	r21
    18c6:	47 95       	ror	r20
    18c8:	8a 95       	dec	r24
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <DIO_u8GetPinValue+0xd6>
    18cc:	ca 01       	movw	r24, r20
    18ce:	81 70       	andi	r24, 0x01	; 1
    18d0:	ec 81       	ldd	r30, Y+4	; 0x04
    18d2:	fd 81       	ldd	r31, Y+5	; 0x05
    18d4:	80 83       	st	Z, r24
    18d6:	19 c0       	rjmp	.+50     	; 0x190a <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    18d8:	e0 e3       	ldi	r30, 0x30	; 48
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a9 01       	movw	r20, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_u8GetPinValue+0x102>
    18ec:	55 95       	asr	r21
    18ee:	47 95       	ror	r20
    18f0:	8a 95       	dec	r24
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <DIO_u8GetPinValue+0xfe>
    18f4:	ca 01       	movw	r24, r20
    18f6:	81 70       	andi	r24, 0x01	; 1
    18f8:	ec 81       	ldd	r30, Y+4	; 0x04
    18fa:	fd 81       	ldd	r31, Y+5	; 0x05
    18fc:	80 83       	st	Z, r24
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState=1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	02 c0       	rjmp	.+4      	; 0x190a <DIO_u8GetPinValue+0x11c>
			}
		}
	else
	{
		Local_u8ErrorState=1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_u8ErrorState;
    190a:	89 81       	ldd	r24, Y+1	; 0x01
}
    190c:	27 96       	adiw	r28, 0x07	; 7
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <KPD_u8GetPressedKey+0x6>
    1924:	00 d0       	rcall	.+0      	; 0x1926 <KPD_u8GetPressedKey+0x8>
    1926:	0f 92       	push	r0
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY,Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
    192c:	8f ef       	ldi	r24, 0xFF	; 255
    192e:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;
	static u8 Local_u8KPDCoulmnArr[COLUMN_NUM]={KPD_CLOUMN0_PIN,KPD_CLOUMN1_PIN,KPD_CLOUMN2_PIN,KPD_CLOUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1930:	1a 82       	std	Y+2, r1	; 0x02
    1932:	5e c0       	rjmp	.+188    	; 0x19f0 <KPD_u8GetPressedKey+0xd2>
	{
		/*Activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDCoulmnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	fc 01       	movw	r30, r24
    193c:	ea 58       	subi	r30, 0x8A	; 138
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	90 81       	ld	r25, Z
    1942:	83 e0       	ldi	r24, 0x03	; 3
    1944:	69 2f       	mov	r22, r25
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	0e 94 9d 0a 	call	0x153a	; 0x153a <DIO_u8SetPinValue>

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    194c:	19 82       	std	Y+1, r1	; 0x01
    194e:	3d c0       	rjmp	.+122    	; 0x19ca <KPD_u8GetPressedKey+0xac>
		{
			/*Read the current row*/
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	fc 01       	movw	r30, r24
    1958:	ee 58       	subi	r30, 0x8E	; 142
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	90 81       	ld	r25, Z
    195e:	9e 01       	movw	r18, r28
    1960:	2c 5f       	subi	r18, 0xFC	; 252
    1962:	3f 4f       	sbci	r19, 0xFF	; 255
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	69 2f       	mov	r22, r25
    1968:	a9 01       	movw	r20, r18
    196a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <DIO_u8GetPinValue>

			/*Check if switch is pressed*/
			if(Local_u8PinState==DIO_u8PIN_LOW)
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	88 23       	and	r24, r24
    1972:	41 f5       	brne	.+80     	; 0x19c4 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	48 2f       	mov	r20, r24
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	ca 01       	movw	r24, r20
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	82 0f       	add	r24, r18
    198c:	93 1f       	adc	r25, r19
    198e:	fc 01       	movw	r30, r24
    1990:	e6 58       	subi	r30, 0x86	; 134
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	80 81       	ld	r24, Z
    1996:	8b 83       	std	Y+3, r24	; 0x03
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <KPD_u8GetPressedKey+0x9a>

				/*Polling (busy waiting) until the key is released*/
				while(Local_u8PinState==DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	fc 01       	movw	r30, r24
    19a2:	ee 58       	subi	r30, 0x8E	; 142
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	90 81       	ld	r25, Z
    19a8:	9e 01       	movw	r18, r28
    19aa:	2c 5f       	subi	r18, 0xFC	; 252
    19ac:	3f 4f       	sbci	r19, 0xFF	; 255
    19ae:	83 e0       	ldi	r24, 0x03	; 3
    19b0:	69 2f       	mov	r22, r25
    19b2:	a9 01       	movw	r20, r18
    19b4:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <DIO_u8GetPinValue>
			if(Local_u8PinState==DIO_u8PIN_LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				/*Polling (busy waiting) until the key is released*/
				while(Local_u8PinState==DIO_u8PIN_LOW)
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	88 23       	and	r24, r24
    19bc:	71 f3       	breq	.-36     	; 0x199a <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	8d 83       	std	Y+5, r24	; 0x05
    19c2:	1c c0       	rjmp	.+56     	; 0x19fc <KPD_u8GetPressedKey+0xde>
	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
	{
		/*Activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDCoulmnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	8f 5f       	subi	r24, 0xFF	; 255
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	84 30       	cpi	r24, 0x04	; 4
    19ce:	08 f4       	brcc	.+2      	; 0x19d2 <KPD_u8GetPressedKey+0xb4>
    19d0:	bf cf       	rjmp	.-130    	; 0x1950 <KPD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDCoulmnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	fc 01       	movw	r30, r24
    19da:	ea 58       	subi	r30, 0x8A	; 138
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	90 81       	ld	r25, Z
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	69 2f       	mov	r22, r25
    19e4:	41 e0       	ldi	r20, 0x01	; 1
    19e6:	0e 94 9d 0a 	call	0x153a	; 0x153a <DIO_u8SetPinValue>
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;
	static u8 Local_u8KPDCoulmnArr[COLUMN_NUM]={KPD_CLOUMN0_PIN,KPD_CLOUMN1_PIN,KPD_CLOUMN2_PIN,KPD_CLOUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	8f 5f       	subi	r24, 0xFF	; 255
    19ee:	8a 83       	std	Y+2, r24	; 0x02
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	84 30       	cpi	r24, 0x04	; 4
    19f4:	08 f4       	brcc	.+2      	; 0x19f8 <KPD_u8GetPressedKey+0xda>
    19f6:	9e cf       	rjmp	.-196    	; 0x1934 <KPD_u8GetPressedKey+0x16>
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDCoulmnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
	}
	return Local_u8PressedKey;
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	8d 83       	std	Y+5, r24	; 0x05
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <main>:
#include "CLCD_interface.h"
#include "KPD_interface.h"


void main(void)
{
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	c8 51       	subi	r28, 0x18	; 24
    1a1c:	d1 40       	sbci	r29, 0x01	; 1
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    1a28:	0e 94 23 09 	call	0x1246	; 0x1246 <PORT_voidInit>
	CLCD_voidInit(CLCD_2Lines_5x8Fontsize,CLCD_Curser_OFF);
    1a2c:	88 e3       	ldi	r24, 0x38	; 56
    1a2e:	6c e0       	ldi	r22, 0x0C	; 12
    1a30:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidInit>
			,0b00000100
			,0b00001110
			,0b00010101
			,0b00001010
			,0b00010001};
	CLCD_voidWriteNumber(arr_num[0]);
    1a34:	80 91 9a 00 	lds	r24, 0x009A
    1a38:	88 2f       	mov	r24, r24
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	a0 e0       	ldi	r26, 0x00	; 0
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
	CLCD_voidWriteNumber(arr_num[0]);
    1a48:	80 91 9a 00 	lds	r24, 0x009A
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 e0       	ldi	r26, 0x00	; 0
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
	CLCD_voidSendData(':');
    1a5c:	8a e3       	ldi	r24, 0x3A	; 58
    1a5e:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidWriteNumber(arr_num[0]);
    1a62:	80 91 9a 00 	lds	r24, 0x009A
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a0 e0       	ldi	r26, 0x00	; 0
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
	CLCD_voidWriteNumber(arr_num[0]);
    1a76:	80 91 9a 00 	lds	r24, 0x009A
    1a7a:	88 2f       	mov	r24, r24
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a0 e0       	ldi	r26, 0x00	; 0
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
	CLCD_voidSendData(':');
    1a8a:	8a e3       	ldi	r24, 0x3A	; 58
    1a8c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	CLCD_voidWriteNumber(arr_num[0]);
    1a90:	80 91 9a 00 	lds	r24, 0x009A
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 e0       	ldi	r26, 0x00	; 0
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	cd 01       	movw	r24, r26
    1aa0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
	CLCD_voidWriteNumber(arr_num[0]);
    1aa4:	80 91 9a 00 	lds	r24, 0x009A
    1aa8:	88 2f       	mov	r24, r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
    1ab8:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <main+0x253a>
	while(1)
	{
		while(GET_BIT(PIND,0)==0)
    1abc:	fe 01       	movw	r30, r28
    1abe:	eb 5e       	subi	r30, 0xEB	; 235
    1ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	aa e7       	ldi	r26, 0x7A	; 122
    1ac8:	b3 e4       	ldi	r27, 0x43	; 67
    1aca:	80 83       	st	Z, r24
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	a2 83       	std	Z+2, r26	; 0x02
    1ad0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	8e 01       	movw	r16, r28
    1ad4:	0f 5e       	subi	r16, 0xEF	; 239
    1ad6:	1e 4f       	sbci	r17, 0xFE	; 254
    1ad8:	fe 01       	movw	r30, r28
    1ada:	eb 5e       	subi	r30, 0xEB	; 235
    1adc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a ef       	ldi	r20, 0xFA	; 250
    1aec:	54 e4       	ldi	r21, 0x44	; 68
    1aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	f8 01       	movw	r30, r16
    1af8:	80 83       	st	Z, r24
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	a2 83       	std	Z+2, r26	; 0x02
    1afe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b00:	fe 01       	movw	r30, r28
    1b02:	ef 5e       	subi	r30, 0xEF	; 239
    1b04:	fe 4f       	sbci	r31, 0xFE	; 254
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e8       	ldi	r20, 0x80	; 128
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b1a:	88 23       	and	r24, r24
    1b1c:	44 f4       	brge	.+16     	; 0x1b2e <main+0x120>
		__ticks = 1;
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e1 5f       	subi	r30, 0xF1	; 241
    1b22:	fe 4f       	sbci	r31, 0xFE	; 254
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	80 83       	st	Z, r24
    1b2c:	64 c0       	rjmp	.+200    	; 0x1bf6 <main+0x1e8>
	else if (__tmp > 65535)
    1b2e:	fe 01       	movw	r30, r28
    1b30:	ef 5e       	subi	r30, 0xEF	; 239
    1b32:	fe 4f       	sbci	r31, 0xFE	; 254
    1b34:	60 81       	ld	r22, Z
    1b36:	71 81       	ldd	r23, Z+1	; 0x01
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	57 e4       	ldi	r21, 0x47	; 71
    1b44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	0c f0       	brlt	.+2      	; 0x1b4e <main+0x140>
    1b4c:	43 c0       	rjmp	.+134    	; 0x1bd4 <main+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	fe 01       	movw	r30, r28
    1b50:	eb 5e       	subi	r30, 0xEB	; 235
    1b52:	fe 4f       	sbci	r31, 0xFE	; 254
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e2       	ldi	r20, 0x20	; 32
    1b62:	51 e4       	ldi	r21, 0x41	; 65
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8e 01       	movw	r16, r28
    1b6e:	01 5f       	subi	r16, 0xF1	; 241
    1b70:	1e 4f       	sbci	r17, 0xFE	; 254
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	f8 01       	movw	r30, r16
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	80 83       	st	Z, r24
    1b84:	1f c0       	rjmp	.+62     	; 0x1bc4 <main+0x1b6>
    1b86:	fe 01       	movw	r30, r28
    1b88:	e3 5f       	subi	r30, 0xF3	; 243
    1b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b8c:	88 ec       	ldi	r24, 0xC8	; 200
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	80 83       	st	Z, r24
    1b94:	fe 01       	movw	r30, r28
    1b96:	e3 5f       	subi	r30, 0xF3	; 243
    1b98:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <main+0x190>
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e3 5f       	subi	r30, 0xF3	; 243
    1ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bac:	de 01       	movw	r26, r28
    1bae:	a1 5f       	subi	r26, 0xF1	; 241
    1bb0:	be 4f       	sbci	r27, 0xFE	; 254
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e1 5f       	subi	r30, 0xF1	; 241
    1bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb8:	80 81       	ld	r24, Z
    1bba:	91 81       	ldd	r25, Z+1	; 0x01
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	11 96       	adiw	r26, 0x01	; 1
    1bc0:	9c 93       	st	X, r25
    1bc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e1 5f       	subi	r30, 0xF1	; 241
    1bc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bca:	80 81       	ld	r24, Z
    1bcc:	91 81       	ldd	r25, Z+1	; 0x01
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	d1 f6       	brne	.-76     	; 0x1b86 <main+0x178>
    1bd2:	28 c0       	rjmp	.+80     	; 0x1c24 <main+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd4:	8e 01       	movw	r16, r28
    1bd6:	01 5f       	subi	r16, 0xF1	; 241
    1bd8:	1e 4f       	sbci	r17, 0xFE	; 254
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ef 5e       	subi	r30, 0xEF	; 239
    1bde:	fe 4f       	sbci	r31, 0xFE	; 254
    1be0:	60 81       	ld	r22, Z
    1be2:	71 81       	ldd	r23, Z+1	; 0x01
    1be4:	82 81       	ldd	r24, Z+2	; 0x02
    1be6:	93 81       	ldd	r25, Z+3	; 0x03
    1be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	80 83       	st	Z, r24
    1bf6:	de 01       	movw	r26, r28
    1bf8:	a5 5f       	subi	r26, 0xF5	; 245
    1bfa:	be 4f       	sbci	r27, 0xFE	; 254
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e1 5f       	subi	r30, 0xF1	; 241
    1c00:	fe 4f       	sbci	r31, 0xFE	; 254
    1c02:	80 81       	ld	r24, Z
    1c04:	91 81       	ldd	r25, Z+1	; 0x01
    1c06:	11 96       	adiw	r26, 0x01	; 1
    1c08:	9c 93       	st	X, r25
    1c0a:	8e 93       	st	-X, r24
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e5 5f       	subi	r30, 0xF5	; 245
    1c10:	fe 4f       	sbci	r31, 0xFE	; 254
    1c12:	80 81       	ld	r24, Z
    1c14:	91 81       	ldd	r25, Z+1	; 0x01
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <main+0x208>
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e5 5f       	subi	r30, 0xF5	; 245
    1c1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c20:	91 83       	std	Z+1, r25	; 0x01
    1c22:	80 83       	st	Z, r24
		{
			_delay_ms(250);
			k++;
    1c24:	80 91 a8 00 	lds	r24, 0x00A8
    1c28:	8f 5f       	subi	r24, 0xFF	; 255
    1c2a:	80 93 a8 00 	sts	0x00A8, r24
    1c2e:	75 c2       	rjmp	.+1258   	; 0x211a <main+0x70c>
			while(k==1)
			{
				a=arr_num[i];
    1c30:	80 91 aa 00 	lds	r24, 0x00AA
    1c34:	99 27       	eor	r25, r25
    1c36:	87 fd       	sbrc	r24, 7
    1c38:	90 95       	com	r25
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e6 56       	subi	r30, 0x66	; 102
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 81       	ld	r24, Z
    1c42:	80 93 b0 00 	sts	0x00B0, r24
				if(GET_BIT(PIND,2)==0)
    1c46:	e0 e3       	ldi	r30, 0x30	; 48
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	86 95       	lsr	r24
    1c4e:	86 95       	lsr	r24
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	81 70       	andi	r24, 0x01	; 1
    1c56:	90 70       	andi	r25, 0x00	; 0
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <main+0x250>
    1c5c:	b9 c0       	rjmp	.+370    	; 0x1dd0 <main+0x3c2>
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e9 5f       	subi	r30, 0xF9	; 249
    1c62:	fe 4f       	sbci	r31, 0xFE	; 254
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a8 e4       	ldi	r26, 0x48	; 72
    1c6a:	b3 e4       	ldi	r27, 0x43	; 67
    1c6c:	80 83       	st	Z, r24
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	a2 83       	std	Z+2, r26	; 0x02
    1c72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c74:	8e 01       	movw	r16, r28
    1c76:	0d 5f       	subi	r16, 0xFD	; 253
    1c78:	1e 4f       	sbci	r17, 0xFE	; 254
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e9 5f       	subi	r30, 0xF9	; 249
    1c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c80:	60 81       	ld	r22, Z
    1c82:	71 81       	ldd	r23, Z+1	; 0x01
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	4a ef       	ldi	r20, 0xFA	; 250
    1c8e:	54 e4       	ldi	r21, 0x44	; 68
    1c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	f8 01       	movw	r30, r16
    1c9a:	80 83       	st	Z, r24
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	a2 83       	std	Z+2, r26	; 0x02
    1ca0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ed 5f       	subi	r30, 0xFD	; 253
    1ca6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca8:	60 81       	ld	r22, Z
    1caa:	71 81       	ldd	r23, Z+1	; 0x01
    1cac:	82 81       	ldd	r24, Z+2	; 0x02
    1cae:	93 81       	ldd	r25, Z+3	; 0x03
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e8       	ldi	r20, 0x80	; 128
    1cb6:	5f e3       	ldi	r21, 0x3F	; 63
    1cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	44 f4       	brge	.+16     	; 0x1cd0 <main+0x2c2>
		__ticks = 1;
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	ef 5f       	subi	r30, 0xFF	; 255
    1cc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	80 83       	st	Z, r24
    1cce:	64 c0       	rjmp	.+200    	; 0x1d98 <main+0x38a>
	else if (__tmp > 65535)
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	ed 5f       	subi	r30, 0xFD	; 253
    1cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd6:	60 81       	ld	r22, Z
    1cd8:	71 81       	ldd	r23, Z+1	; 0x01
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	3f ef       	ldi	r19, 0xFF	; 255
    1ce2:	4f e7       	ldi	r20, 0x7F	; 127
    1ce4:	57 e4       	ldi	r21, 0x47	; 71
    1ce6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cea:	18 16       	cp	r1, r24
    1cec:	0c f0       	brlt	.+2      	; 0x1cf0 <main+0x2e2>
    1cee:	43 c0       	rjmp	.+134    	; 0x1d76 <main+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	e9 5f       	subi	r30, 0xF9	; 249
    1cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf6:	60 81       	ld	r22, Z
    1cf8:	71 81       	ldd	r23, Z+1	; 0x01
    1cfa:	82 81       	ldd	r24, Z+2	; 0x02
    1cfc:	93 81       	ldd	r25, Z+3	; 0x03
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e2       	ldi	r20, 0x20	; 32
    1d04:	51 e4       	ldi	r21, 0x41	; 65
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	8e 01       	movw	r16, r28
    1d10:	0f 5f       	subi	r16, 0xFF	; 255
    1d12:	1e 4f       	sbci	r17, 0xFE	; 254
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	f8 01       	movw	r30, r16
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	80 83       	st	Z, r24
    1d26:	1f c0       	rjmp	.+62     	; 0x1d66 <main+0x358>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e1 50       	subi	r30, 0x01	; 1
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	88 ec       	ldi	r24, 0xC8	; 200
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
    1d36:	fe 01       	movw	r30, r28
    1d38:	e1 50       	subi	r30, 0x01	; 1
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	91 81       	ldd	r25, Z+1	; 0x01
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <main+0x332>
    1d44:	fe 01       	movw	r30, r28
    1d46:	e1 50       	subi	r30, 0x01	; 1
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4e:	de 01       	movw	r26, r28
    1d50:	af 5f       	subi	r26, 0xFF	; 255
    1d52:	be 4f       	sbci	r27, 0xFE	; 254
    1d54:	fe 01       	movw	r30, r28
    1d56:	ef 5f       	subi	r30, 0xFF	; 255
    1d58:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5a:	80 81       	ld	r24, Z
    1d5c:	91 81       	ldd	r25, Z+1	; 0x01
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	11 96       	adiw	r26, 0x01	; 1
    1d62:	9c 93       	st	X, r25
    1d64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	fe 01       	movw	r30, r28
    1d68:	ef 5f       	subi	r30, 0xFF	; 255
    1d6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6c:	80 81       	ld	r24, Z
    1d6e:	91 81       	ldd	r25, Z+1	; 0x01
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	d1 f6       	brne	.-76     	; 0x1d28 <main+0x31a>
    1d74:	28 c0       	rjmp	.+80     	; 0x1dc6 <main+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d76:	8e 01       	movw	r16, r28
    1d78:	0f 5f       	subi	r16, 0xFF	; 255
    1d7a:	1e 4f       	sbci	r17, 0xFE	; 254
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ed 5f       	subi	r30, 0xFD	; 253
    1d80:	fe 4f       	sbci	r31, 0xFE	; 254
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	f8 01       	movw	r30, r16
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
    1d98:	de 01       	movw	r26, r28
    1d9a:	a3 50       	subi	r26, 0x03	; 3
    1d9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ef 5f       	subi	r30, 0xFF	; 255
    1da2:	fe 4f       	sbci	r31, 0xFE	; 254
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	11 96       	adiw	r26, 0x01	; 1
    1daa:	9c 93       	st	X, r25
    1dac:	8e 93       	st	-X, r24
    1dae:	fe 01       	movw	r30, r28
    1db0:	e3 50       	subi	r30, 0x03	; 3
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	80 81       	ld	r24, Z
    1db6:	91 81       	ldd	r25, Z+1	; 0x01
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <main+0x3aa>
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e3 50       	subi	r30, 0x03	; 3
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	91 83       	std	Z+1, r25	; 0x01
    1dc4:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					i++;
    1dc6:	80 91 aa 00 	lds	r24, 0x00AA
    1dca:	8f 5f       	subi	r24, 0xFF	; 255
    1dcc:	80 93 aa 00 	sts	0x00AA, r24
				}
				if(GET_BIT(PIND,1)==0)
    1dd0:	e0 e3       	ldi	r30, 0x30	; 48
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	86 95       	lsr	r24
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	81 70       	andi	r24, 0x01	; 1
    1dde:	90 70       	andi	r25, 0x00	; 0
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <main+0x3d8>
    1de4:	b9 c0       	rjmp	.+370    	; 0x1f58 <main+0x54a>
    1de6:	fe 01       	movw	r30, r28
    1de8:	e7 50       	subi	r30, 0x07	; 7
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	a8 e4       	ldi	r26, 0x48	; 72
    1df2:	b3 e4       	ldi	r27, 0x43	; 67
    1df4:	80 83       	st	Z, r24
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	a2 83       	std	Z+2, r26	; 0x02
    1dfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfc:	8e 01       	movw	r16, r28
    1dfe:	0b 50       	subi	r16, 0x0B	; 11
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	fe 01       	movw	r30, r28
    1e04:	e7 50       	subi	r30, 0x07	; 7
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	60 81       	ld	r22, Z
    1e0a:	71 81       	ldd	r23, Z+1	; 0x01
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a ef       	ldi	r20, 0xFA	; 250
    1e16:	54 e4       	ldi	r21, 0x44	; 68
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	f8 01       	movw	r30, r16
    1e22:	80 83       	st	Z, r24
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	a2 83       	std	Z+2, r26	; 0x02
    1e28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	eb 50       	subi	r30, 0x0B	; 11
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	60 81       	ld	r22, Z
    1e32:	71 81       	ldd	r23, Z+1	; 0x01
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	5f e3       	ldi	r21, 0x3F	; 63
    1e40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e44:	88 23       	and	r24, r24
    1e46:	44 f4       	brge	.+16     	; 0x1e58 <main+0x44a>
		__ticks = 1;
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ed 50       	subi	r30, 0x0D	; 13
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	80 83       	st	Z, r24
    1e56:	64 c0       	rjmp	.+200    	; 0x1f20 <main+0x512>
	else if (__tmp > 65535)
    1e58:	fe 01       	movw	r30, r28
    1e5a:	eb 50       	subi	r30, 0x0B	; 11
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	60 81       	ld	r22, Z
    1e60:	71 81       	ldd	r23, Z+1	; 0x01
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	3f ef       	ldi	r19, 0xFF	; 255
    1e6a:	4f e7       	ldi	r20, 0x7F	; 127
    1e6c:	57 e4       	ldi	r21, 0x47	; 71
    1e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e72:	18 16       	cp	r1, r24
    1e74:	0c f0       	brlt	.+2      	; 0x1e78 <main+0x46a>
    1e76:	43 c0       	rjmp	.+134    	; 0x1efe <main+0x4f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e7 50       	subi	r30, 0x07	; 7
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e2       	ldi	r20, 0x20	; 32
    1e8c:	51 e4       	ldi	r21, 0x41	; 65
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8e 01       	movw	r16, r28
    1e98:	0d 50       	subi	r16, 0x0D	; 13
    1e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	80 83       	st	Z, r24
    1eae:	1f c0       	rjmp	.+62     	; 0x1eee <main+0x4e0>
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	ef 50       	subi	r30, 0x0F	; 15
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	88 ec       	ldi	r24, 0xC8	; 200
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	80 83       	st	Z, r24
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ef 50       	subi	r30, 0x0F	; 15
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <main+0x4ba>
    1ecc:	fe 01       	movw	r30, r28
    1ece:	ef 50       	subi	r30, 0x0F	; 15
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed6:	de 01       	movw	r26, r28
    1ed8:	ad 50       	subi	r26, 0x0D	; 13
    1eda:	bf 4f       	sbci	r27, 0xFF	; 255
    1edc:	fe 01       	movw	r30, r28
    1ede:	ed 50       	subi	r30, 0x0D	; 13
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	11 96       	adiw	r26, 0x01	; 1
    1eea:	9c 93       	st	X, r25
    1eec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	fe 01       	movw	r30, r28
    1ef0:	ed 50       	subi	r30, 0x0D	; 13
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	d1 f6       	brne	.-76     	; 0x1eb0 <main+0x4a2>
    1efc:	28 c0       	rjmp	.+80     	; 0x1f4e <main+0x540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efe:	8e 01       	movw	r16, r28
    1f00:	0d 50       	subi	r16, 0x0D	; 13
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	fe 01       	movw	r30, r28
    1f06:	eb 50       	subi	r30, 0x0B	; 11
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	60 81       	ld	r22, Z
    1f0c:	71 81       	ldd	r23, Z+1	; 0x01
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	f8 01       	movw	r30, r16
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24
    1f20:	de 01       	movw	r26, r28
    1f22:	a1 51       	subi	r26, 0x11	; 17
    1f24:	bf 4f       	sbci	r27, 0xFF	; 255
    1f26:	fe 01       	movw	r30, r28
    1f28:	ed 50       	subi	r30, 0x0D	; 13
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 81       	ld	r24, Z
    1f2e:	91 81       	ldd	r25, Z+1	; 0x01
    1f30:	11 96       	adiw	r26, 0x01	; 1
    1f32:	9c 93       	st	X, r25
    1f34:	8e 93       	st	-X, r24
    1f36:	fe 01       	movw	r30, r28
    1f38:	e1 51       	subi	r30, 0x11	; 17
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 81       	ld	r24, Z
    1f3e:	91 81       	ldd	r25, Z+1	; 0x01
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <main+0x532>
    1f44:	fe 01       	movw	r30, r28
    1f46:	e1 51       	subi	r30, 0x11	; 17
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	91 83       	std	Z+1, r25	; 0x01
    1f4c:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					i--;
    1f4e:	80 91 aa 00 	lds	r24, 0x00AA
    1f52:	81 50       	subi	r24, 0x01	; 1
    1f54:	80 93 aa 00 	sts	0x00AA, r24
				}
				if(i<0)
    1f58:	80 91 aa 00 	lds	r24, 0x00AA
    1f5c:	88 23       	and	r24, r24
    1f5e:	14 f4       	brge	.+4      	; 0x1f64 <main+0x556>
					i=0;
    1f60:	10 92 aa 00 	sts	0x00AA, r1
				if(i>2)
    1f64:	80 91 aa 00 	lds	r24, 0x00AA
    1f68:	83 30       	cpi	r24, 0x03	; 3
    1f6a:	1c f0       	brlt	.+6      	; 0x1f72 <main+0x564>
					i=2;
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	80 93 aa 00 	sts	0x00AA, r24
				CLCD_voidGoToXY(0,0);
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
				CLCD_voidWriteNumber(a);
    1f7a:	80 91 b0 00 	lds	r24, 0x00B0
    1f7e:	99 27       	eor	r25, r25
    1f80:	87 fd       	sbrc	r24, 7
    1f82:	90 95       	com	r25
    1f84:	a9 2f       	mov	r26, r25
    1f86:	b9 2f       	mov	r27, r25
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
				CLCD_voidWriteSpecialCharacter(arr_arrow,0,1,0);
    1f90:	82 e9       	ldi	r24, 0x92	; 146
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	0e 94 18 08 	call	0x1030	; 0x1030 <CLCD_voidWriteSpecialCharacter>
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e5 51       	subi	r30, 0x15	; 21
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a8 ec       	ldi	r26, 0xC8	; 200
    1faa:	b1 e4       	ldi	r27, 0x41	; 65
    1fac:	80 83       	st	Z, r24
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	a2 83       	std	Z+2, r26	; 0x02
    1fb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	8e 01       	movw	r16, r28
    1fb6:	09 51       	subi	r16, 0x19	; 25
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e5 51       	subi	r30, 0x15	; 21
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	4a ef       	ldi	r20, 0xFA	; 250
    1fce:	54 e4       	ldi	r21, 0x44	; 68
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	f8 01       	movw	r30, r16
    1fda:	80 83       	st	Z, r24
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	a2 83       	std	Z+2, r26	; 0x02
    1fe0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e9 51       	subi	r30, 0x19	; 25
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	60 81       	ld	r22, Z
    1fea:	71 81       	ldd	r23, Z+1	; 0x01
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	44 f4       	brge	.+16     	; 0x2010 <main+0x602>
		__ticks = 1;
    2000:	fe 01       	movw	r30, r28
    2002:	eb 51       	subi	r30, 0x1B	; 27
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	80 83       	st	Z, r24
    200e:	64 c0       	rjmp	.+200    	; 0x20d8 <main+0x6ca>
	else if (__tmp > 65535)
    2010:	fe 01       	movw	r30, r28
    2012:	e9 51       	subi	r30, 0x19	; 25
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	3f ef       	ldi	r19, 0xFF	; 255
    2022:	4f e7       	ldi	r20, 0x7F	; 127
    2024:	57 e4       	ldi	r21, 0x47	; 71
    2026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202a:	18 16       	cp	r1, r24
    202c:	0c f0       	brlt	.+2      	; 0x2030 <main+0x622>
    202e:	43 c0       	rjmp	.+134    	; 0x20b6 <main+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2030:	fe 01       	movw	r30, r28
    2032:	e5 51       	subi	r30, 0x15	; 21
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	8e 01       	movw	r16, r28
    2050:	0b 51       	subi	r16, 0x1B	; 27
    2052:	1f 4f       	sbci	r17, 0xFF	; 255
    2054:	bc 01       	movw	r22, r24
    2056:	cd 01       	movw	r24, r26
    2058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	f8 01       	movw	r30, r16
    2062:	91 83       	std	Z+1, r25	; 0x01
    2064:	80 83       	st	Z, r24
    2066:	1f c0       	rjmp	.+62     	; 0x20a6 <main+0x698>
    2068:	fe 01       	movw	r30, r28
    206a:	ed 51       	subi	r30, 0x1D	; 29
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	88 ec       	ldi	r24, 0xC8	; 200
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
    2076:	fe 01       	movw	r30, r28
    2078:	ed 51       	subi	r30, 0x1D	; 29
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	91 81       	ldd	r25, Z+1	; 0x01
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <main+0x672>
    2084:	fe 01       	movw	r30, r28
    2086:	ed 51       	subi	r30, 0x1D	; 29
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208e:	de 01       	movw	r26, r28
    2090:	ab 51       	subi	r26, 0x1B	; 27
    2092:	bf 4f       	sbci	r27, 0xFF	; 255
    2094:	fe 01       	movw	r30, r28
    2096:	eb 51       	subi	r30, 0x1B	; 27
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	80 81       	ld	r24, Z
    209c:	91 81       	ldd	r25, Z+1	; 0x01
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	11 96       	adiw	r26, 0x01	; 1
    20a2:	9c 93       	st	X, r25
    20a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a6:	fe 01       	movw	r30, r28
    20a8:	eb 51       	subi	r30, 0x1B	; 27
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 81       	ld	r24, Z
    20ae:	91 81       	ldd	r25, Z+1	; 0x01
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	d1 f6       	brne	.-76     	; 0x2068 <main+0x65a>
    20b4:	28 c0       	rjmp	.+80     	; 0x2106 <main+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b6:	8e 01       	movw	r16, r28
    20b8:	0b 51       	subi	r16, 0x1B	; 27
    20ba:	1f 4f       	sbci	r17, 0xFF	; 255
    20bc:	fe 01       	movw	r30, r28
    20be:	e9 51       	subi	r30, 0x19	; 25
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	f8 01       	movw	r30, r16
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	80 83       	st	Z, r24
    20d8:	de 01       	movw	r26, r28
    20da:	af 51       	subi	r26, 0x1F	; 31
    20dc:	bf 4f       	sbci	r27, 0xFF	; 255
    20de:	fe 01       	movw	r30, r28
    20e0:	eb 51       	subi	r30, 0x1B	; 27
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 81       	ld	r24, Z
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
    20e8:	11 96       	adiw	r26, 0x01	; 1
    20ea:	9c 93       	st	X, r25
    20ec:	8e 93       	st	-X, r24
    20ee:	fe 01       	movw	r30, r28
    20f0:	ef 51       	subi	r30, 0x1F	; 31
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	91 81       	ldd	r25, Z+1	; 0x01
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <main+0x6ea>
    20fc:	fe 01       	movw	r30, r28
    20fe:	ef 51       	subi	r30, 0x1F	; 31
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	80 83       	st	Z, r24
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
    2106:	e0 e3       	ldi	r30, 0x30	; 48
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	81 70       	andi	r24, 0x01	; 1
    2112:	90 70       	andi	r25, 0x00	; 0
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	09 f4       	brne	.+2      	; 0x211a <main+0x70c>
    2118:	8d c2       	rjmp	.+1306   	; 0x2634 <main+0xc26>
	{
		while(GET_BIT(PIND,0)==0)
		{
			_delay_ms(250);
			k++;
			while(k==1)
    211a:	80 91 a8 00 	lds	r24, 0x00A8
    211e:	81 30       	cpi	r24, 0x01	; 1
    2120:	09 f4       	brne	.+2      	; 0x2124 <main+0x716>
    2122:	86 cd       	rjmp	.-1268   	; 0x1c30 <main+0x222>
    2124:	87 c2       	rjmp	.+1294   	; 0x2634 <main+0xc26>
					break;

			}
			while(k==2)
			{
				b=arr_num[j];
    2126:	80 91 a9 00 	lds	r24, 0x00A9
    212a:	99 27       	eor	r25, r25
    212c:	87 fd       	sbrc	r24, 7
    212e:	90 95       	com	r25
    2130:	fc 01       	movw	r30, r24
    2132:	e6 56       	subi	r30, 0x66	; 102
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	80 81       	ld	r24, Z
    2138:	80 93 af 00 	sts	0x00AF, r24
				if(GET_BIT(PIND,2)==0)
    213c:	e0 e3       	ldi	r30, 0x30	; 48
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	86 95       	lsr	r24
    2144:	86 95       	lsr	r24
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	81 70       	andi	r24, 0x01	; 1
    214c:	90 70       	andi	r25, 0x00	; 0
    214e:	00 97       	sbiw	r24, 0x00	; 0
    2150:	09 f0       	breq	.+2      	; 0x2154 <main+0x746>
    2152:	b9 c0       	rjmp	.+370    	; 0x22c6 <main+0x8b8>
    2154:	fe 01       	movw	r30, r28
    2156:	e3 52       	subi	r30, 0x23	; 35
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	a8 e4       	ldi	r26, 0x48	; 72
    2160:	b3 e4       	ldi	r27, 0x43	; 67
    2162:	80 83       	st	Z, r24
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	a2 83       	std	Z+2, r26	; 0x02
    2168:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216a:	8e 01       	movw	r16, r28
    216c:	07 52       	subi	r16, 0x27	; 39
    216e:	1f 4f       	sbci	r17, 0xFF	; 255
    2170:	fe 01       	movw	r30, r28
    2172:	e3 52       	subi	r30, 0x23	; 35
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	60 81       	ld	r22, Z
    2178:	71 81       	ldd	r23, Z+1	; 0x01
    217a:	82 81       	ldd	r24, Z+2	; 0x02
    217c:	93 81       	ldd	r25, Z+3	; 0x03
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	4a ef       	ldi	r20, 0xFA	; 250
    2184:	54 e4       	ldi	r21, 0x44	; 68
    2186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	f8 01       	movw	r30, r16
    2190:	80 83       	st	Z, r24
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	a2 83       	std	Z+2, r26	; 0x02
    2196:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2198:	fe 01       	movw	r30, r28
    219a:	e7 52       	subi	r30, 0x27	; 39
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	60 81       	ld	r22, Z
    21a0:	71 81       	ldd	r23, Z+1	; 0x01
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e8       	ldi	r20, 0x80	; 128
    21ac:	5f e3       	ldi	r21, 0x3F	; 63
    21ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b2:	88 23       	and	r24, r24
    21b4:	44 f4       	brge	.+16     	; 0x21c6 <main+0x7b8>
		__ticks = 1;
    21b6:	fe 01       	movw	r30, r28
    21b8:	e9 52       	subi	r30, 0x29	; 41
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
    21c4:	64 c0       	rjmp	.+200    	; 0x228e <main+0x880>
	else if (__tmp > 65535)
    21c6:	fe 01       	movw	r30, r28
    21c8:	e7 52       	subi	r30, 0x27	; 39
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	60 81       	ld	r22, Z
    21ce:	71 81       	ldd	r23, Z+1	; 0x01
    21d0:	82 81       	ldd	r24, Z+2	; 0x02
    21d2:	93 81       	ldd	r25, Z+3	; 0x03
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	3f ef       	ldi	r19, 0xFF	; 255
    21d8:	4f e7       	ldi	r20, 0x7F	; 127
    21da:	57 e4       	ldi	r21, 0x47	; 71
    21dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e0:	18 16       	cp	r1, r24
    21e2:	0c f0       	brlt	.+2      	; 0x21e6 <main+0x7d8>
    21e4:	43 c0       	rjmp	.+134    	; 0x226c <main+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e6:	fe 01       	movw	r30, r28
    21e8:	e3 52       	subi	r30, 0x23	; 35
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	60 81       	ld	r22, Z
    21ee:	71 81       	ldd	r23, Z+1	; 0x01
    21f0:	82 81       	ldd	r24, Z+2	; 0x02
    21f2:	93 81       	ldd	r25, Z+3	; 0x03
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	8e 01       	movw	r16, r28
    2206:	09 52       	subi	r16, 0x29	; 41
    2208:	1f 4f       	sbci	r17, 0xFF	; 255
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	f8 01       	movw	r30, r16
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	80 83       	st	Z, r24
    221c:	1f c0       	rjmp	.+62     	; 0x225c <main+0x84e>
    221e:	fe 01       	movw	r30, r28
    2220:	eb 52       	subi	r30, 0x2B	; 43
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	88 ec       	ldi	r24, 0xC8	; 200
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
    222c:	fe 01       	movw	r30, r28
    222e:	eb 52       	subi	r30, 0x2B	; 43
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 81       	ld	r24, Z
    2234:	91 81       	ldd	r25, Z+1	; 0x01
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <main+0x828>
    223a:	fe 01       	movw	r30, r28
    223c:	eb 52       	subi	r30, 0x2B	; 43
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2244:	de 01       	movw	r26, r28
    2246:	a9 52       	subi	r26, 0x29	; 41
    2248:	bf 4f       	sbci	r27, 0xFF	; 255
    224a:	fe 01       	movw	r30, r28
    224c:	e9 52       	subi	r30, 0x29	; 41
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	11 96       	adiw	r26, 0x01	; 1
    2258:	9c 93       	st	X, r25
    225a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225c:	fe 01       	movw	r30, r28
    225e:	e9 52       	subi	r30, 0x29	; 41
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 81       	ld	r24, Z
    2264:	91 81       	ldd	r25, Z+1	; 0x01
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	d1 f6       	brne	.-76     	; 0x221e <main+0x810>
    226a:	28 c0       	rjmp	.+80     	; 0x22bc <main+0x8ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226c:	8e 01       	movw	r16, r28
    226e:	09 52       	subi	r16, 0x29	; 41
    2270:	1f 4f       	sbci	r17, 0xFF	; 255
    2272:	fe 01       	movw	r30, r28
    2274:	e7 52       	subi	r30, 0x27	; 39
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	f8 01       	movw	r30, r16
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	80 83       	st	Z, r24
    228e:	de 01       	movw	r26, r28
    2290:	ad 52       	subi	r26, 0x2D	; 45
    2292:	bf 4f       	sbci	r27, 0xFF	; 255
    2294:	fe 01       	movw	r30, r28
    2296:	e9 52       	subi	r30, 0x29	; 41
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	11 96       	adiw	r26, 0x01	; 1
    22a0:	9c 93       	st	X, r25
    22a2:	8e 93       	st	-X, r24
    22a4:	fe 01       	movw	r30, r28
    22a6:	ed 52       	subi	r30, 0x2D	; 45
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <main+0x8a0>
    22b2:	fe 01       	movw	r30, r28
    22b4:	ed 52       	subi	r30, 0x2D	; 45
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					j++;
    22bc:	80 91 a9 00 	lds	r24, 0x00A9
    22c0:	8f 5f       	subi	r24, 0xFF	; 255
    22c2:	80 93 a9 00 	sts	0x00A9, r24
				}
				if(GET_BIT(PIND,1)==0)
    22c6:	e0 e3       	ldi	r30, 0x30	; 48
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	86 95       	lsr	r24
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	81 70       	andi	r24, 0x01	; 1
    22d4:	90 70       	andi	r25, 0x00	; 0
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	09 f0       	breq	.+2      	; 0x22dc <main+0x8ce>
    22da:	b9 c0       	rjmp	.+370    	; 0x244e <main+0xa40>
    22dc:	fe 01       	movw	r30, r28
    22de:	e1 53       	subi	r30, 0x31	; 49
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	a8 e4       	ldi	r26, 0x48	; 72
    22e8:	b3 e4       	ldi	r27, 0x43	; 67
    22ea:	80 83       	st	Z, r24
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	a2 83       	std	Z+2, r26	; 0x02
    22f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f2:	8e 01       	movw	r16, r28
    22f4:	05 53       	subi	r16, 0x35	; 53
    22f6:	1f 4f       	sbci	r17, 0xFF	; 255
    22f8:	fe 01       	movw	r30, r28
    22fa:	e1 53       	subi	r30, 0x31	; 49
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	60 81       	ld	r22, Z
    2300:	71 81       	ldd	r23, Z+1	; 0x01
    2302:	82 81       	ldd	r24, Z+2	; 0x02
    2304:	93 81       	ldd	r25, Z+3	; 0x03
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	4a ef       	ldi	r20, 0xFA	; 250
    230c:	54 e4       	ldi	r21, 0x44	; 68
    230e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	f8 01       	movw	r30, r16
    2318:	80 83       	st	Z, r24
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	a2 83       	std	Z+2, r26	; 0x02
    231e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2320:	fe 01       	movw	r30, r28
    2322:	e5 53       	subi	r30, 0x35	; 53
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	60 81       	ld	r22, Z
    2328:	71 81       	ldd	r23, Z+1	; 0x01
    232a:	82 81       	ldd	r24, Z+2	; 0x02
    232c:	93 81       	ldd	r25, Z+3	; 0x03
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	44 f4       	brge	.+16     	; 0x234e <main+0x940>
		__ticks = 1;
    233e:	fe 01       	movw	r30, r28
    2340:	e7 53       	subi	r30, 0x37	; 55
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	80 83       	st	Z, r24
    234c:	64 c0       	rjmp	.+200    	; 0x2416 <main+0xa08>
	else if (__tmp > 65535)
    234e:	fe 01       	movw	r30, r28
    2350:	e5 53       	subi	r30, 0x35	; 53
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	60 81       	ld	r22, Z
    2356:	71 81       	ldd	r23, Z+1	; 0x01
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	93 81       	ldd	r25, Z+3	; 0x03
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	3f ef       	ldi	r19, 0xFF	; 255
    2360:	4f e7       	ldi	r20, 0x7F	; 127
    2362:	57 e4       	ldi	r21, 0x47	; 71
    2364:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2368:	18 16       	cp	r1, r24
    236a:	0c f0       	brlt	.+2      	; 0x236e <main+0x960>
    236c:	43 c0       	rjmp	.+134    	; 0x23f4 <main+0x9e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236e:	fe 01       	movw	r30, r28
    2370:	e1 53       	subi	r30, 0x31	; 49
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e2       	ldi	r20, 0x20	; 32
    2382:	51 e4       	ldi	r21, 0x41	; 65
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	8e 01       	movw	r16, r28
    238e:	07 53       	subi	r16, 0x37	; 55
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	f8 01       	movw	r30, r16
    23a0:	91 83       	std	Z+1, r25	; 0x01
    23a2:	80 83       	st	Z, r24
    23a4:	1f c0       	rjmp	.+62     	; 0x23e4 <main+0x9d6>
    23a6:	fe 01       	movw	r30, r28
    23a8:	e9 53       	subi	r30, 0x39	; 57
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	88 ec       	ldi	r24, 0xC8	; 200
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	80 83       	st	Z, r24
    23b4:	fe 01       	movw	r30, r28
    23b6:	e9 53       	subi	r30, 0x39	; 57
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <main+0x9b0>
    23c2:	fe 01       	movw	r30, r28
    23c4:	e9 53       	subi	r30, 0x39	; 57
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	91 83       	std	Z+1, r25	; 0x01
    23ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23cc:	de 01       	movw	r26, r28
    23ce:	a7 53       	subi	r26, 0x37	; 55
    23d0:	bf 4f       	sbci	r27, 0xFF	; 255
    23d2:	fe 01       	movw	r30, r28
    23d4:	e7 53       	subi	r30, 0x37	; 55
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 81       	ld	r24, Z
    23da:	91 81       	ldd	r25, Z+1	; 0x01
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	11 96       	adiw	r26, 0x01	; 1
    23e0:	9c 93       	st	X, r25
    23e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e4:	fe 01       	movw	r30, r28
    23e6:	e7 53       	subi	r30, 0x37	; 55
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	80 81       	ld	r24, Z
    23ec:	91 81       	ldd	r25, Z+1	; 0x01
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	d1 f6       	brne	.-76     	; 0x23a6 <main+0x998>
    23f2:	28 c0       	rjmp	.+80     	; 0x2444 <main+0xa36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	8e 01       	movw	r16, r28
    23f6:	07 53       	subi	r16, 0x37	; 55
    23f8:	1f 4f       	sbci	r17, 0xFF	; 255
    23fa:	fe 01       	movw	r30, r28
    23fc:	e5 53       	subi	r30, 0x35	; 53
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	60 81       	ld	r22, Z
    2402:	71 81       	ldd	r23, Z+1	; 0x01
    2404:	82 81       	ldd	r24, Z+2	; 0x02
    2406:	93 81       	ldd	r25, Z+3	; 0x03
    2408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	f8 01       	movw	r30, r16
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
    2416:	de 01       	movw	r26, r28
    2418:	ab 53       	subi	r26, 0x3B	; 59
    241a:	bf 4f       	sbci	r27, 0xFF	; 255
    241c:	fe 01       	movw	r30, r28
    241e:	e7 53       	subi	r30, 0x37	; 55
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	80 81       	ld	r24, Z
    2424:	91 81       	ldd	r25, Z+1	; 0x01
    2426:	11 96       	adiw	r26, 0x01	; 1
    2428:	9c 93       	st	X, r25
    242a:	8e 93       	st	-X, r24
    242c:	fe 01       	movw	r30, r28
    242e:	eb 53       	subi	r30, 0x3B	; 59
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <main+0xa28>
    243a:	fe 01       	movw	r30, r28
    243c:	eb 53       	subi	r30, 0x3B	; 59
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					j--;
    2444:	80 91 a9 00 	lds	r24, 0x00A9
    2448:	81 50       	subi	r24, 0x01	; 1
    244a:	80 93 a9 00 	sts	0x00A9, r24
				}
				if(j<0)
    244e:	80 91 a9 00 	lds	r24, 0x00A9
    2452:	88 23       	and	r24, r24
    2454:	14 f4       	brge	.+4      	; 0x245a <main+0xa4c>
					j=0;
    2456:	10 92 a9 00 	sts	0x00A9, r1
				if(j>9)
    245a:	80 91 a9 00 	lds	r24, 0x00A9
    245e:	8a 30       	cpi	r24, 0x0A	; 10
    2460:	1c f0       	brlt	.+6      	; 0x2468 <main+0xa5a>
					j=9;
    2462:	89 e0       	ldi	r24, 0x09	; 9
    2464:	80 93 a9 00 	sts	0x00A9, r24
				if(i==2)
    2468:	80 91 aa 00 	lds	r24, 0x00AA
    246c:	82 30       	cpi	r24, 0x02	; 2
    246e:	39 f4       	brne	.+14     	; 0x247e <main+0xa70>
				{
					if(j>4)
    2470:	80 91 a9 00 	lds	r24, 0x00A9
    2474:	85 30       	cpi	r24, 0x05	; 5
    2476:	1c f0       	brlt	.+6      	; 0x247e <main+0xa70>
						j=4;
    2478:	84 e0       	ldi	r24, 0x04	; 4
    247a:	80 93 a9 00 	sts	0x00A9, r24
				}
				CLCD_voidGoToXY(0,1);
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	61 e0       	ldi	r22, 0x01	; 1
    2482:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
				CLCD_voidWriteNumber(b);
    2486:	80 91 af 00 	lds	r24, 0x00AF
    248a:	99 27       	eor	r25, r25
    248c:	87 fd       	sbrc	r24, 7
    248e:	90 95       	com	r25
    2490:	a9 2f       	mov	r26, r25
    2492:	b9 2f       	mov	r27, r25
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
				CLCD_voidGoToXY(1,0);
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
				CLCD_voidSendData(' ');
    24a4:	80 e2       	ldi	r24, 0x20	; 32
    24a6:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
				CLCD_voidWriteSpecialCharacter(arr_arrow,0,1,1);
    24aa:	82 e9       	ldi	r24, 0x92	; 146
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	21 e0       	ldi	r18, 0x01	; 1
    24b4:	0e 94 18 08 	call	0x1030	; 0x1030 <CLCD_voidWriteSpecialCharacter>
    24b8:	fe 01       	movw	r30, r28
    24ba:	ef 53       	subi	r30, 0x3F	; 63
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	a8 ec       	ldi	r26, 0xC8	; 200
    24c4:	b1 e4       	ldi	r27, 0x41	; 65
    24c6:	80 83       	st	Z, r24
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	a2 83       	std	Z+2, r26	; 0x02
    24cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ce:	8e 01       	movw	r16, r28
    24d0:	03 54       	subi	r16, 0x43	; 67
    24d2:	1f 4f       	sbci	r17, 0xFF	; 255
    24d4:	fe 01       	movw	r30, r28
    24d6:	ef 53       	subi	r30, 0x3F	; 63
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	4a ef       	ldi	r20, 0xFA	; 250
    24e8:	54 e4       	ldi	r21, 0x44	; 68
    24ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	f8 01       	movw	r30, r16
    24f4:	80 83       	st	Z, r24
    24f6:	91 83       	std	Z+1, r25	; 0x01
    24f8:	a2 83       	std	Z+2, r26	; 0x02
    24fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24fc:	fe 01       	movw	r30, r28
    24fe:	e3 54       	subi	r30, 0x43	; 67
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e8       	ldi	r20, 0x80	; 128
    2510:	5f e3       	ldi	r21, 0x3F	; 63
    2512:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2516:	88 23       	and	r24, r24
    2518:	44 f4       	brge	.+16     	; 0x252a <main+0xb1c>
		__ticks = 1;
    251a:	fe 01       	movw	r30, r28
    251c:	e5 54       	subi	r30, 0x45	; 69
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	80 83       	st	Z, r24
    2528:	64 c0       	rjmp	.+200    	; 0x25f2 <main+0xbe4>
	else if (__tmp > 65535)
    252a:	fe 01       	movw	r30, r28
    252c:	e3 54       	subi	r30, 0x43	; 67
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	60 81       	ld	r22, Z
    2532:	71 81       	ldd	r23, Z+1	; 0x01
    2534:	82 81       	ldd	r24, Z+2	; 0x02
    2536:	93 81       	ldd	r25, Z+3	; 0x03
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	3f ef       	ldi	r19, 0xFF	; 255
    253c:	4f e7       	ldi	r20, 0x7F	; 127
    253e:	57 e4       	ldi	r21, 0x47	; 71
    2540:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2544:	18 16       	cp	r1, r24
    2546:	0c f0       	brlt	.+2      	; 0x254a <main+0xb3c>
    2548:	43 c0       	rjmp	.+134    	; 0x25d0 <main+0xbc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254a:	fe 01       	movw	r30, r28
    254c:	ef 53       	subi	r30, 0x3F	; 63
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	60 81       	ld	r22, Z
    2552:	71 81       	ldd	r23, Z+1	; 0x01
    2554:	82 81       	ldd	r24, Z+2	; 0x02
    2556:	93 81       	ldd	r25, Z+3	; 0x03
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e2       	ldi	r20, 0x20	; 32
    255e:	51 e4       	ldi	r21, 0x41	; 65
    2560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	8e 01       	movw	r16, r28
    256a:	05 54       	subi	r16, 0x45	; 69
    256c:	1f 4f       	sbci	r17, 0xFF	; 255
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	f8 01       	movw	r30, r16
    257c:	91 83       	std	Z+1, r25	; 0x01
    257e:	80 83       	st	Z, r24
    2580:	1f c0       	rjmp	.+62     	; 0x25c0 <main+0xbb2>
    2582:	fe 01       	movw	r30, r28
    2584:	e7 54       	subi	r30, 0x47	; 71
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	88 ec       	ldi	r24, 0xC8	; 200
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	80 83       	st	Z, r24
    2590:	fe 01       	movw	r30, r28
    2592:	e7 54       	subi	r30, 0x47	; 71
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 81       	ld	r24, Z
    2598:	91 81       	ldd	r25, Z+1	; 0x01
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <main+0xb8c>
    259e:	fe 01       	movw	r30, r28
    25a0:	e7 54       	subi	r30, 0x47	; 71
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	91 83       	std	Z+1, r25	; 0x01
    25a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a8:	de 01       	movw	r26, r28
    25aa:	a5 54       	subi	r26, 0x45	; 69
    25ac:	bf 4f       	sbci	r27, 0xFF	; 255
    25ae:	fe 01       	movw	r30, r28
    25b0:	e5 54       	subi	r30, 0x45	; 69
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	80 81       	ld	r24, Z
    25b6:	91 81       	ldd	r25, Z+1	; 0x01
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	11 96       	adiw	r26, 0x01	; 1
    25bc:	9c 93       	st	X, r25
    25be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c0:	fe 01       	movw	r30, r28
    25c2:	e5 54       	subi	r30, 0x45	; 69
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	d1 f6       	brne	.-76     	; 0x2582 <main+0xb74>
    25ce:	28 c0       	rjmp	.+80     	; 0x2620 <main+0xc12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d0:	8e 01       	movw	r16, r28
    25d2:	05 54       	subi	r16, 0x45	; 69
    25d4:	1f 4f       	sbci	r17, 0xFF	; 255
    25d6:	fe 01       	movw	r30, r28
    25d8:	e3 54       	subi	r30, 0x43	; 67
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	60 81       	ld	r22, Z
    25de:	71 81       	ldd	r23, Z+1	; 0x01
    25e0:	82 81       	ldd	r24, Z+2	; 0x02
    25e2:	93 81       	ldd	r25, Z+3	; 0x03
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	f8 01       	movw	r30, r16
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	80 83       	st	Z, r24
    25f2:	de 01       	movw	r26, r28
    25f4:	a9 54       	subi	r26, 0x49	; 73
    25f6:	bf 4f       	sbci	r27, 0xFF	; 255
    25f8:	fe 01       	movw	r30, r28
    25fa:	e5 54       	subi	r30, 0x45	; 69
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 81       	ld	r24, Z
    2600:	91 81       	ldd	r25, Z+1	; 0x01
    2602:	11 96       	adiw	r26, 0x01	; 1
    2604:	9c 93       	st	X, r25
    2606:	8e 93       	st	-X, r24
    2608:	fe 01       	movw	r30, r28
    260a:	e9 54       	subi	r30, 0x49	; 73
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	f1 f7       	brne	.-4      	; 0x2612 <main+0xc04>
    2616:	fe 01       	movw	r30, r28
    2618:	e9 54       	subi	r30, 0x49	; 73
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	91 83       	std	Z+1, r25	; 0x01
    261e:	80 83       	st	Z, r24
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
    2620:	e0 e3       	ldi	r30, 0x30	; 48
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	88 2f       	mov	r24, r24
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	81 70       	andi	r24, 0x01	; 1
    262c:	90 70       	andi	r25, 0x00	; 0
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	09 f4       	brne	.+2      	; 0x2634 <main+0xc26>
    2632:	86 c2       	rjmp	.+1292   	; 0x2b40 <main+0x1132>
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
					break;

			}
			while(k==2)
    2634:	80 91 a8 00 	lds	r24, 0x00A8
    2638:	82 30       	cpi	r24, 0x02	; 2
    263a:	09 f4       	brne	.+2      	; 0x263e <main+0xc30>
    263c:	74 cd       	rjmp	.-1304   	; 0x2126 <main+0x718>
    263e:	80 c2       	rjmp	.+1280   	; 0x2b40 <main+0x1132>

			}

			while(k==3)
			{
				c=arr_num[l];
    2640:	80 91 a7 00 	lds	r24, 0x00A7
    2644:	99 27       	eor	r25, r25
    2646:	87 fd       	sbrc	r24, 7
    2648:	90 95       	com	r25
    264a:	fc 01       	movw	r30, r24
    264c:	e6 56       	subi	r30, 0x66	; 102
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	80 93 ae 00 	sts	0x00AE, r24
				if(GET_BIT(PIND,2)==0)
    2656:	e0 e3       	ldi	r30, 0x30	; 48
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	86 95       	lsr	r24
    265e:	86 95       	lsr	r24
    2660:	88 2f       	mov	r24, r24
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	81 70       	andi	r24, 0x01	; 1
    2666:	90 70       	andi	r25, 0x00	; 0
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	09 f0       	breq	.+2      	; 0x266e <main+0xc60>
    266c:	b9 c0       	rjmp	.+370    	; 0x27e0 <main+0xdd2>
    266e:	fe 01       	movw	r30, r28
    2670:	ed 54       	subi	r30, 0x4D	; 77
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	a8 e4       	ldi	r26, 0x48	; 72
    267a:	b3 e4       	ldi	r27, 0x43	; 67
    267c:	80 83       	st	Z, r24
    267e:	91 83       	std	Z+1, r25	; 0x01
    2680:	a2 83       	std	Z+2, r26	; 0x02
    2682:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2684:	8e 01       	movw	r16, r28
    2686:	01 55       	subi	r16, 0x51	; 81
    2688:	1f 4f       	sbci	r17, 0xFF	; 255
    268a:	fe 01       	movw	r30, r28
    268c:	ed 54       	subi	r30, 0x4D	; 77
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	60 81       	ld	r22, Z
    2692:	71 81       	ldd	r23, Z+1	; 0x01
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	93 81       	ldd	r25, Z+3	; 0x03
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	4a ef       	ldi	r20, 0xFA	; 250
    269e:	54 e4       	ldi	r21, 0x44	; 68
    26a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	f8 01       	movw	r30, r16
    26aa:	80 83       	st	Z, r24
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	a2 83       	std	Z+2, r26	; 0x02
    26b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26b2:	fe 01       	movw	r30, r28
    26b4:	e1 55       	subi	r30, 0x51	; 81
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	60 81       	ld	r22, Z
    26ba:	71 81       	ldd	r23, Z+1	; 0x01
    26bc:	82 81       	ldd	r24, Z+2	; 0x02
    26be:	93 81       	ldd	r25, Z+3	; 0x03
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e8       	ldi	r20, 0x80	; 128
    26c6:	5f e3       	ldi	r21, 0x3F	; 63
    26c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26cc:	88 23       	and	r24, r24
    26ce:	44 f4       	brge	.+16     	; 0x26e0 <main+0xcd2>
		__ticks = 1;
    26d0:	fe 01       	movw	r30, r28
    26d2:	e3 55       	subi	r30, 0x53	; 83
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
    26de:	64 c0       	rjmp	.+200    	; 0x27a8 <main+0xd9a>
	else if (__tmp > 65535)
    26e0:	fe 01       	movw	r30, r28
    26e2:	e1 55       	subi	r30, 0x51	; 81
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	60 81       	ld	r22, Z
    26e8:	71 81       	ldd	r23, Z+1	; 0x01
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	93 81       	ldd	r25, Z+3	; 0x03
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	3f ef       	ldi	r19, 0xFF	; 255
    26f2:	4f e7       	ldi	r20, 0x7F	; 127
    26f4:	57 e4       	ldi	r21, 0x47	; 71
    26f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26fa:	18 16       	cp	r1, r24
    26fc:	0c f0       	brlt	.+2      	; 0x2700 <main+0xcf2>
    26fe:	43 c0       	rjmp	.+134    	; 0x2786 <main+0xd78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2700:	fe 01       	movw	r30, r28
    2702:	ed 54       	subi	r30, 0x4D	; 77
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	60 81       	ld	r22, Z
    2708:	71 81       	ldd	r23, Z+1	; 0x01
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e2       	ldi	r20, 0x20	; 32
    2714:	51 e4       	ldi	r21, 0x41	; 65
    2716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	8e 01       	movw	r16, r28
    2720:	03 55       	subi	r16, 0x53	; 83
    2722:	1f 4f       	sbci	r17, 0xFF	; 255
    2724:	bc 01       	movw	r22, r24
    2726:	cd 01       	movw	r24, r26
    2728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	f8 01       	movw	r30, r16
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	80 83       	st	Z, r24
    2736:	1f c0       	rjmp	.+62     	; 0x2776 <main+0xd68>
    2738:	fe 01       	movw	r30, r28
    273a:	e5 55       	subi	r30, 0x55	; 85
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	88 ec       	ldi	r24, 0xC8	; 200
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	80 83       	st	Z, r24
    2746:	fe 01       	movw	r30, r28
    2748:	e5 55       	subi	r30, 0x55	; 85
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 81       	ld	r24, Z
    274e:	91 81       	ldd	r25, Z+1	; 0x01
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <main+0xd42>
    2754:	fe 01       	movw	r30, r28
    2756:	e5 55       	subi	r30, 0x55	; 85
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	91 83       	std	Z+1, r25	; 0x01
    275c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275e:	de 01       	movw	r26, r28
    2760:	a3 55       	subi	r26, 0x53	; 83
    2762:	bf 4f       	sbci	r27, 0xFF	; 255
    2764:	fe 01       	movw	r30, r28
    2766:	e3 55       	subi	r30, 0x53	; 83
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 81       	ld	r24, Z
    276c:	91 81       	ldd	r25, Z+1	; 0x01
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	11 96       	adiw	r26, 0x01	; 1
    2772:	9c 93       	st	X, r25
    2774:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2776:	fe 01       	movw	r30, r28
    2778:	e3 55       	subi	r30, 0x53	; 83
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 81       	ld	r24, Z
    277e:	91 81       	ldd	r25, Z+1	; 0x01
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	d1 f6       	brne	.-76     	; 0x2738 <main+0xd2a>
    2784:	28 c0       	rjmp	.+80     	; 0x27d6 <main+0xdc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2786:	8e 01       	movw	r16, r28
    2788:	03 55       	subi	r16, 0x53	; 83
    278a:	1f 4f       	sbci	r17, 0xFF	; 255
    278c:	fe 01       	movw	r30, r28
    278e:	e1 55       	subi	r30, 0x51	; 81
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	f8 01       	movw	r30, r16
    27a4:	91 83       	std	Z+1, r25	; 0x01
    27a6:	80 83       	st	Z, r24
    27a8:	de 01       	movw	r26, r28
    27aa:	a7 55       	subi	r26, 0x57	; 87
    27ac:	bf 4f       	sbci	r27, 0xFF	; 255
    27ae:	fe 01       	movw	r30, r28
    27b0:	e3 55       	subi	r30, 0x53	; 83
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 81       	ld	r24, Z
    27b6:	91 81       	ldd	r25, Z+1	; 0x01
    27b8:	11 96       	adiw	r26, 0x01	; 1
    27ba:	9c 93       	st	X, r25
    27bc:	8e 93       	st	-X, r24
    27be:	fe 01       	movw	r30, r28
    27c0:	e7 55       	subi	r30, 0x57	; 87
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	80 81       	ld	r24, Z
    27c6:	91 81       	ldd	r25, Z+1	; 0x01
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <main+0xdba>
    27cc:	fe 01       	movw	r30, r28
    27ce:	e7 55       	subi	r30, 0x57	; 87
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	91 83       	std	Z+1, r25	; 0x01
    27d4:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					l++;
    27d6:	80 91 a7 00 	lds	r24, 0x00A7
    27da:	8f 5f       	subi	r24, 0xFF	; 255
    27dc:	80 93 a7 00 	sts	0x00A7, r24
				}
				if(GET_BIT(PIND,1)==0)
    27e0:	e0 e3       	ldi	r30, 0x30	; 48
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	86 95       	lsr	r24
    27e8:	88 2f       	mov	r24, r24
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	81 70       	andi	r24, 0x01	; 1
    27ee:	90 70       	andi	r25, 0x00	; 0
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <main+0xde8>
    27f4:	b9 c0       	rjmp	.+370    	; 0x2968 <main+0xf5a>
    27f6:	fe 01       	movw	r30, r28
    27f8:	eb 55       	subi	r30, 0x5B	; 91
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	a8 e4       	ldi	r26, 0x48	; 72
    2802:	b3 e4       	ldi	r27, 0x43	; 67
    2804:	80 83       	st	Z, r24
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	a2 83       	std	Z+2, r26	; 0x02
    280a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280c:	8e 01       	movw	r16, r28
    280e:	0f 55       	subi	r16, 0x5F	; 95
    2810:	1f 4f       	sbci	r17, 0xFF	; 255
    2812:	fe 01       	movw	r30, r28
    2814:	eb 55       	subi	r30, 0x5B	; 91
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	4a ef       	ldi	r20, 0xFA	; 250
    2826:	54 e4       	ldi	r21, 0x44	; 68
    2828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	f8 01       	movw	r30, r16
    2832:	80 83       	st	Z, r24
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	a2 83       	std	Z+2, r26	; 0x02
    2838:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    283a:	fe 01       	movw	r30, r28
    283c:	ef 55       	subi	r30, 0x5F	; 95
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	60 81       	ld	r22, Z
    2842:	71 81       	ldd	r23, Z+1	; 0x01
    2844:	82 81       	ldd	r24, Z+2	; 0x02
    2846:	93 81       	ldd	r25, Z+3	; 0x03
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e8       	ldi	r20, 0x80	; 128
    284e:	5f e3       	ldi	r21, 0x3F	; 63
    2850:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2854:	88 23       	and	r24, r24
    2856:	44 f4       	brge	.+16     	; 0x2868 <main+0xe5a>
		__ticks = 1;
    2858:	fe 01       	movw	r30, r28
    285a:	e1 56       	subi	r30, 0x61	; 97
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	80 83       	st	Z, r24
    2866:	64 c0       	rjmp	.+200    	; 0x2930 <main+0xf22>
	else if (__tmp > 65535)
    2868:	fe 01       	movw	r30, r28
    286a:	ef 55       	subi	r30, 0x5F	; 95
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	60 81       	ld	r22, Z
    2870:	71 81       	ldd	r23, Z+1	; 0x01
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	3f ef       	ldi	r19, 0xFF	; 255
    287a:	4f e7       	ldi	r20, 0x7F	; 127
    287c:	57 e4       	ldi	r21, 0x47	; 71
    287e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2882:	18 16       	cp	r1, r24
    2884:	0c f0       	brlt	.+2      	; 0x2888 <main+0xe7a>
    2886:	43 c0       	rjmp	.+134    	; 0x290e <main+0xf00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2888:	fe 01       	movw	r30, r28
    288a:	eb 55       	subi	r30, 0x5B	; 91
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	60 81       	ld	r22, Z
    2890:	71 81       	ldd	r23, Z+1	; 0x01
    2892:	82 81       	ldd	r24, Z+2	; 0x02
    2894:	93 81       	ldd	r25, Z+3	; 0x03
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e2       	ldi	r20, 0x20	; 32
    289c:	51 e4       	ldi	r21, 0x41	; 65
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	8e 01       	movw	r16, r28
    28a8:	01 56       	subi	r16, 0x61	; 97
    28aa:	1f 4f       	sbci	r17, 0xFF	; 255
    28ac:	bc 01       	movw	r22, r24
    28ae:	cd 01       	movw	r24, r26
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	f8 01       	movw	r30, r16
    28ba:	91 83       	std	Z+1, r25	; 0x01
    28bc:	80 83       	st	Z, r24
    28be:	1f c0       	rjmp	.+62     	; 0x28fe <main+0xef0>
    28c0:	fe 01       	movw	r30, r28
    28c2:	e3 56       	subi	r30, 0x63	; 99
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	88 ec       	ldi	r24, 0xC8	; 200
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	80 83       	st	Z, r24
    28ce:	fe 01       	movw	r30, r28
    28d0:	e3 56       	subi	r30, 0x63	; 99
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	91 81       	ldd	r25, Z+1	; 0x01
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <main+0xeca>
    28dc:	fe 01       	movw	r30, r28
    28de:	e3 56       	subi	r30, 0x63	; 99
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e6:	de 01       	movw	r26, r28
    28e8:	a1 56       	subi	r26, 0x61	; 97
    28ea:	bf 4f       	sbci	r27, 0xFF	; 255
    28ec:	fe 01       	movw	r30, r28
    28ee:	e1 56       	subi	r30, 0x61	; 97
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 81       	ld	r24, Z
    28f4:	91 81       	ldd	r25, Z+1	; 0x01
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	11 96       	adiw	r26, 0x01	; 1
    28fa:	9c 93       	st	X, r25
    28fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fe:	fe 01       	movw	r30, r28
    2900:	e1 56       	subi	r30, 0x61	; 97
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	80 81       	ld	r24, Z
    2906:	91 81       	ldd	r25, Z+1	; 0x01
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	d1 f6       	brne	.-76     	; 0x28c0 <main+0xeb2>
    290c:	28 c0       	rjmp	.+80     	; 0x295e <main+0xf50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290e:	8e 01       	movw	r16, r28
    2910:	01 56       	subi	r16, 0x61	; 97
    2912:	1f 4f       	sbci	r17, 0xFF	; 255
    2914:	fe 01       	movw	r30, r28
    2916:	ef 55       	subi	r30, 0x5F	; 95
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	60 81       	ld	r22, Z
    291c:	71 81       	ldd	r23, Z+1	; 0x01
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	93 81       	ldd	r25, Z+3	; 0x03
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	f8 01       	movw	r30, r16
    292c:	91 83       	std	Z+1, r25	; 0x01
    292e:	80 83       	st	Z, r24
    2930:	de 01       	movw	r26, r28
    2932:	a5 56       	subi	r26, 0x65	; 101
    2934:	bf 4f       	sbci	r27, 0xFF	; 255
    2936:	fe 01       	movw	r30, r28
    2938:	e1 56       	subi	r30, 0x61	; 97
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 81       	ld	r24, Z
    293e:	91 81       	ldd	r25, Z+1	; 0x01
    2940:	11 96       	adiw	r26, 0x01	; 1
    2942:	9c 93       	st	X, r25
    2944:	8e 93       	st	-X, r24
    2946:	fe 01       	movw	r30, r28
    2948:	e5 56       	subi	r30, 0x65	; 101
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	80 81       	ld	r24, Z
    294e:	91 81       	ldd	r25, Z+1	; 0x01
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <main+0xf42>
    2954:	fe 01       	movw	r30, r28
    2956:	e5 56       	subi	r30, 0x65	; 101
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	91 83       	std	Z+1, r25	; 0x01
    295c:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					l--;
    295e:	80 91 a7 00 	lds	r24, 0x00A7
    2962:	81 50       	subi	r24, 0x01	; 1
    2964:	80 93 a7 00 	sts	0x00A7, r24
				}
				if(l>5)
    2968:	80 91 a7 00 	lds	r24, 0x00A7
    296c:	86 30       	cpi	r24, 0x06	; 6
    296e:	1c f0       	brlt	.+6      	; 0x2976 <main+0xf68>
					l=5;
    2970:	85 e0       	ldi	r24, 0x05	; 5
    2972:	80 93 a7 00 	sts	0x00A7, r24
				if(i==2 && j==4)
    2976:	80 91 aa 00 	lds	r24, 0x00AA
    297a:	82 30       	cpi	r24, 0x02	; 2
    297c:	31 f4       	brne	.+12     	; 0x298a <main+0xf7c>
    297e:	80 91 a9 00 	lds	r24, 0x00A9
    2982:	84 30       	cpi	r24, 0x04	; 4
    2984:	11 f4       	brne	.+4      	; 0x298a <main+0xf7c>
					l=0;
    2986:	10 92 a7 00 	sts	0x00A7, r1
				CLCD_voidGoToXY(0,3);
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	63 e0       	ldi	r22, 0x03	; 3
    298e:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
				CLCD_voidWriteNumber(c);
    2992:	80 91 ae 00 	lds	r24, 0x00AE
    2996:	99 27       	eor	r25, r25
    2998:	87 fd       	sbrc	r24, 7
    299a:	90 95       	com	r25
    299c:	a9 2f       	mov	r26, r25
    299e:	b9 2f       	mov	r27, r25
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
				CLCD_voidGoToXY(1,1);
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	61 e0       	ldi	r22, 0x01	; 1
    29ac:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
				CLCD_voidSendData(' ');
    29b0:	80 e2       	ldi	r24, 0x20	; 32
    29b2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
				CLCD_voidWriteSpecialCharacter(arr_arrow,0,1,3);
    29b6:	82 e9       	ldi	r24, 0x92	; 146
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	41 e0       	ldi	r20, 0x01	; 1
    29be:	23 e0       	ldi	r18, 0x03	; 3
    29c0:	0e 94 18 08 	call	0x1030	; 0x1030 <CLCD_voidWriteSpecialCharacter>
    29c4:	fe 01       	movw	r30, r28
    29c6:	e9 56       	subi	r30, 0x69	; 105
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	a8 ec       	ldi	r26, 0xC8	; 200
    29d0:	b1 e4       	ldi	r27, 0x41	; 65
    29d2:	80 83       	st	Z, r24
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	a2 83       	std	Z+2, r26	; 0x02
    29d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29da:	8e 01       	movw	r16, r28
    29dc:	0d 56       	subi	r16, 0x6D	; 109
    29de:	1f 4f       	sbci	r17, 0xFF	; 255
    29e0:	fe 01       	movw	r30, r28
    29e2:	e9 56       	subi	r30, 0x69	; 105
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	60 81       	ld	r22, Z
    29e8:	71 81       	ldd	r23, Z+1	; 0x01
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	4a ef       	ldi	r20, 0xFA	; 250
    29f4:	54 e4       	ldi	r21, 0x44	; 68
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	f8 01       	movw	r30, r16
    2a00:	80 83       	st	Z, r24
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	a2 83       	std	Z+2, r26	; 0x02
    2a06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a08:	fe 01       	movw	r30, r28
    2a0a:	ed 56       	subi	r30, 0x6D	; 109
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	60 81       	ld	r22, Z
    2a10:	71 81       	ldd	r23, Z+1	; 0x01
    2a12:	82 81       	ldd	r24, Z+2	; 0x02
    2a14:	93 81       	ldd	r25, Z+3	; 0x03
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	40 e8       	ldi	r20, 0x80	; 128
    2a1c:	5f e3       	ldi	r21, 0x3F	; 63
    2a1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a22:	88 23       	and	r24, r24
    2a24:	44 f4       	brge	.+16     	; 0x2a36 <main+0x1028>
		__ticks = 1;
    2a26:	fe 01       	movw	r30, r28
    2a28:	ef 56       	subi	r30, 0x6F	; 111
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	80 83       	st	Z, r24
    2a34:	64 c0       	rjmp	.+200    	; 0x2afe <main+0x10f0>
	else if (__tmp > 65535)
    2a36:	fe 01       	movw	r30, r28
    2a38:	ed 56       	subi	r30, 0x6D	; 109
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	60 81       	ld	r22, Z
    2a3e:	71 81       	ldd	r23, Z+1	; 0x01
    2a40:	82 81       	ldd	r24, Z+2	; 0x02
    2a42:	93 81       	ldd	r25, Z+3	; 0x03
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	3f ef       	ldi	r19, 0xFF	; 255
    2a48:	4f e7       	ldi	r20, 0x7F	; 127
    2a4a:	57 e4       	ldi	r21, 0x47	; 71
    2a4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a50:	18 16       	cp	r1, r24
    2a52:	0c f0       	brlt	.+2      	; 0x2a56 <main+0x1048>
    2a54:	43 c0       	rjmp	.+134    	; 0x2adc <main+0x10ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a56:	fe 01       	movw	r30, r28
    2a58:	e9 56       	subi	r30, 0x69	; 105
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	60 81       	ld	r22, Z
    2a5e:	71 81       	ldd	r23, Z+1	; 0x01
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	93 81       	ldd	r25, Z+3	; 0x03
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e2       	ldi	r20, 0x20	; 32
    2a6a:	51 e4       	ldi	r21, 0x41	; 65
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	8e 01       	movw	r16, r28
    2a76:	0f 56       	subi	r16, 0x6F	; 111
    2a78:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7a:	bc 01       	movw	r22, r24
    2a7c:	cd 01       	movw	r24, r26
    2a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	f8 01       	movw	r30, r16
    2a88:	91 83       	std	Z+1, r25	; 0x01
    2a8a:	80 83       	st	Z, r24
    2a8c:	1f c0       	rjmp	.+62     	; 0x2acc <main+0x10be>
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e1 57       	subi	r30, 0x71	; 113
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	88 ec       	ldi	r24, 0xC8	; 200
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	91 83       	std	Z+1, r25	; 0x01
    2a9a:	80 83       	st	Z, r24
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e1 57       	subi	r30, 0x71	; 113
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	80 81       	ld	r24, Z
    2aa4:	91 81       	ldd	r25, Z+1	; 0x01
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <main+0x1098>
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e1 57       	subi	r30, 0x71	; 113
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab4:	de 01       	movw	r26, r28
    2ab6:	af 56       	subi	r26, 0x6F	; 111
    2ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aba:	fe 01       	movw	r30, r28
    2abc:	ef 56       	subi	r30, 0x6F	; 111
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	80 81       	ld	r24, Z
    2ac2:	91 81       	ldd	r25, Z+1	; 0x01
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	11 96       	adiw	r26, 0x01	; 1
    2ac8:	9c 93       	st	X, r25
    2aca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2acc:	fe 01       	movw	r30, r28
    2ace:	ef 56       	subi	r30, 0x6F	; 111
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	80 81       	ld	r24, Z
    2ad4:	91 81       	ldd	r25, Z+1	; 0x01
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	d1 f6       	brne	.-76     	; 0x2a8e <main+0x1080>
    2ada:	28 c0       	rjmp	.+80     	; 0x2b2c <main+0x111e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2adc:	8e 01       	movw	r16, r28
    2ade:	0f 56       	subi	r16, 0x6F	; 111
    2ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	ed 56       	subi	r30, 0x6D	; 109
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	60 81       	ld	r22, Z
    2aea:	71 81       	ldd	r23, Z+1	; 0x01
    2aec:	82 81       	ldd	r24, Z+2	; 0x02
    2aee:	93 81       	ldd	r25, Z+3	; 0x03
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	f8 01       	movw	r30, r16
    2afa:	91 83       	std	Z+1, r25	; 0x01
    2afc:	80 83       	st	Z, r24
    2afe:	de 01       	movw	r26, r28
    2b00:	a3 57       	subi	r26, 0x73	; 115
    2b02:	bf 4f       	sbci	r27, 0xFF	; 255
    2b04:	fe 01       	movw	r30, r28
    2b06:	ef 56       	subi	r30, 0x6F	; 111
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	80 81       	ld	r24, Z
    2b0c:	91 81       	ldd	r25, Z+1	; 0x01
    2b0e:	11 96       	adiw	r26, 0x01	; 1
    2b10:	9c 93       	st	X, r25
    2b12:	8e 93       	st	-X, r24
    2b14:	fe 01       	movw	r30, r28
    2b16:	e3 57       	subi	r30, 0x73	; 115
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	80 81       	ld	r24, Z
    2b1c:	91 81       	ldd	r25, Z+1	; 0x01
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <main+0x1110>
    2b22:	fe 01       	movw	r30, r28
    2b24:	e3 57       	subi	r30, 0x73	; 115
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	80 83       	st	Z, r24
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
    2b2c:	e0 e3       	ldi	r30, 0x30	; 48
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	88 2f       	mov	r24, r24
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	81 70       	andi	r24, 0x01	; 1
    2b38:	90 70       	andi	r25, 0x00	; 0
    2b3a:	00 97       	sbiw	r24, 0x00	; 0
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <main+0x1132>
    2b3e:	86 c2       	rjmp	.+1292   	; 0x304c <main+0x163e>
				if(GET_BIT(PIND,0)==0)
					break;

			}

			while(k==3)
    2b40:	80 91 a8 00 	lds	r24, 0x00A8
    2b44:	83 30       	cpi	r24, 0x03	; 3
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <main+0x113c>
    2b48:	7b cd       	rjmp	.-1290   	; 0x2640 <main+0xc32>
    2b4a:	80 c2       	rjmp	.+1280   	; 0x304c <main+0x163e>
					break;

			}
			while(k==4)
			{
				d=arr_num[m];
    2b4c:	80 91 a6 00 	lds	r24, 0x00A6
    2b50:	99 27       	eor	r25, r25
    2b52:	87 fd       	sbrc	r24, 7
    2b54:	90 95       	com	r25
    2b56:	fc 01       	movw	r30, r24
    2b58:	e6 56       	subi	r30, 0x66	; 102
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	80 81       	ld	r24, Z
    2b5e:	80 93 ad 00 	sts	0x00AD, r24
				if(GET_BIT(PIND,2)==0)
    2b62:	e0 e3       	ldi	r30, 0x30	; 48
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	86 95       	lsr	r24
    2b6a:	86 95       	lsr	r24
    2b6c:	88 2f       	mov	r24, r24
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	81 70       	andi	r24, 0x01	; 1
    2b72:	90 70       	andi	r25, 0x00	; 0
    2b74:	00 97       	sbiw	r24, 0x00	; 0
    2b76:	09 f0       	breq	.+2      	; 0x2b7a <main+0x116c>
    2b78:	b9 c0       	rjmp	.+370    	; 0x2cec <main+0x12de>
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e7 57       	subi	r30, 0x77	; 119
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	a8 e4       	ldi	r26, 0x48	; 72
    2b86:	b3 e4       	ldi	r27, 0x43	; 67
    2b88:	80 83       	st	Z, r24
    2b8a:	91 83       	std	Z+1, r25	; 0x01
    2b8c:	a2 83       	std	Z+2, r26	; 0x02
    2b8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b90:	8e 01       	movw	r16, r28
    2b92:	0b 57       	subi	r16, 0x7B	; 123
    2b94:	1f 4f       	sbci	r17, 0xFF	; 255
    2b96:	fe 01       	movw	r30, r28
    2b98:	e7 57       	subi	r30, 0x77	; 119
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	60 81       	ld	r22, Z
    2b9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ba0:	82 81       	ldd	r24, Z+2	; 0x02
    2ba2:	93 81       	ldd	r25, Z+3	; 0x03
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	4a ef       	ldi	r20, 0xFA	; 250
    2baa:	54 e4       	ldi	r21, 0x44	; 68
    2bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	f8 01       	movw	r30, r16
    2bb6:	80 83       	st	Z, r24
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	a2 83       	std	Z+2, r26	; 0x02
    2bbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	eb 57       	subi	r30, 0x7B	; 123
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	60 81       	ld	r22, Z
    2bc6:	71 81       	ldd	r23, Z+1	; 0x01
    2bc8:	82 81       	ldd	r24, Z+2	; 0x02
    2bca:	93 81       	ldd	r25, Z+3	; 0x03
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e8       	ldi	r20, 0x80	; 128
    2bd2:	5f e3       	ldi	r21, 0x3F	; 63
    2bd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bd8:	88 23       	and	r24, r24
    2bda:	44 f4       	brge	.+16     	; 0x2bec <main+0x11de>
		__ticks = 1;
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ed 57       	subi	r30, 0x7D	; 125
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	91 83       	std	Z+1, r25	; 0x01
    2be8:	80 83       	st	Z, r24
    2bea:	64 c0       	rjmp	.+200    	; 0x2cb4 <main+0x12a6>
	else if (__tmp > 65535)
    2bec:	fe 01       	movw	r30, r28
    2bee:	eb 57       	subi	r30, 0x7B	; 123
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	60 81       	ld	r22, Z
    2bf4:	71 81       	ldd	r23, Z+1	; 0x01
    2bf6:	82 81       	ldd	r24, Z+2	; 0x02
    2bf8:	93 81       	ldd	r25, Z+3	; 0x03
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	3f ef       	ldi	r19, 0xFF	; 255
    2bfe:	4f e7       	ldi	r20, 0x7F	; 127
    2c00:	57 e4       	ldi	r21, 0x47	; 71
    2c02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c06:	18 16       	cp	r1, r24
    2c08:	0c f0       	brlt	.+2      	; 0x2c0c <main+0x11fe>
    2c0a:	43 c0       	rjmp	.+134    	; 0x2c92 <main+0x1284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	e7 57       	subi	r30, 0x77	; 119
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	60 81       	ld	r22, Z
    2c14:	71 81       	ldd	r23, Z+1	; 0x01
    2c16:	82 81       	ldd	r24, Z+2	; 0x02
    2c18:	93 81       	ldd	r25, Z+3	; 0x03
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e2       	ldi	r20, 0x20	; 32
    2c20:	51 e4       	ldi	r21, 0x41	; 65
    2c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	8e 01       	movw	r16, r28
    2c2c:	0d 57       	subi	r16, 0x7D	; 125
    2c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c30:	bc 01       	movw	r22, r24
    2c32:	cd 01       	movw	r24, r26
    2c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	91 83       	std	Z+1, r25	; 0x01
    2c40:	80 83       	st	Z, r24
    2c42:	1f c0       	rjmp	.+62     	; 0x2c82 <main+0x1274>
    2c44:	fe 01       	movw	r30, r28
    2c46:	ef 57       	subi	r30, 0x7F	; 127
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	88 ec       	ldi	r24, 0xC8	; 200
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	80 83       	st	Z, r24
    2c52:	fe 01       	movw	r30, r28
    2c54:	ef 57       	subi	r30, 0x7F	; 127
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	80 81       	ld	r24, Z
    2c5a:	91 81       	ldd	r25, Z+1	; 0x01
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <main+0x124e>
    2c60:	fe 01       	movw	r30, r28
    2c62:	ef 57       	subi	r30, 0x7F	; 127
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6a:	de 01       	movw	r26, r28
    2c6c:	ad 57       	subi	r26, 0x7D	; 125
    2c6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c70:	fe 01       	movw	r30, r28
    2c72:	ed 57       	subi	r30, 0x7D	; 125
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	80 81       	ld	r24, Z
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	11 96       	adiw	r26, 0x01	; 1
    2c7e:	9c 93       	st	X, r25
    2c80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c82:	fe 01       	movw	r30, r28
    2c84:	ed 57       	subi	r30, 0x7D	; 125
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	80 81       	ld	r24, Z
    2c8a:	91 81       	ldd	r25, Z+1	; 0x01
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	d1 f6       	brne	.-76     	; 0x2c44 <main+0x1236>
    2c90:	28 c0       	rjmp	.+80     	; 0x2ce2 <main+0x12d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c92:	8e 01       	movw	r16, r28
    2c94:	0d 57       	subi	r16, 0x7D	; 125
    2c96:	1f 4f       	sbci	r17, 0xFF	; 255
    2c98:	fe 01       	movw	r30, r28
    2c9a:	eb 57       	subi	r30, 0x7B	; 123
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	60 81       	ld	r22, Z
    2ca0:	71 81       	ldd	r23, Z+1	; 0x01
    2ca2:	82 81       	ldd	r24, Z+2	; 0x02
    2ca4:	93 81       	ldd	r25, Z+3	; 0x03
    2ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	f8 01       	movw	r30, r16
    2cb0:	91 83       	std	Z+1, r25	; 0x01
    2cb2:	80 83       	st	Z, r24
    2cb4:	de 01       	movw	r26, r28
    2cb6:	a1 58       	subi	r26, 0x81	; 129
    2cb8:	bf 4f       	sbci	r27, 0xFF	; 255
    2cba:	fe 01       	movw	r30, r28
    2cbc:	ed 57       	subi	r30, 0x7D	; 125
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	80 81       	ld	r24, Z
    2cc2:	91 81       	ldd	r25, Z+1	; 0x01
    2cc4:	11 96       	adiw	r26, 0x01	; 1
    2cc6:	9c 93       	st	X, r25
    2cc8:	8e 93       	st	-X, r24
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e1 58       	subi	r30, 0x81	; 129
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	80 81       	ld	r24, Z
    2cd2:	91 81       	ldd	r25, Z+1	; 0x01
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <main+0x12c6>
    2cd8:	fe 01       	movw	r30, r28
    2cda:	e1 58       	subi	r30, 0x81	; 129
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					m++;
    2ce2:	80 91 a6 00 	lds	r24, 0x00A6
    2ce6:	8f 5f       	subi	r24, 0xFF	; 255
    2ce8:	80 93 a6 00 	sts	0x00A6, r24
				}
				if(GET_BIT(PIND,1)==0)
    2cec:	e0 e3       	ldi	r30, 0x30	; 48
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	86 95       	lsr	r24
    2cf4:	88 2f       	mov	r24, r24
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	81 70       	andi	r24, 0x01	; 1
    2cfa:	90 70       	andi	r25, 0x00	; 0
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	09 f0       	breq	.+2      	; 0x2d02 <main+0x12f4>
    2d00:	b9 c0       	rjmp	.+370    	; 0x2e74 <main+0x1466>
    2d02:	fe 01       	movw	r30, r28
    2d04:	e5 58       	subi	r30, 0x85	; 133
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	a8 e4       	ldi	r26, 0x48	; 72
    2d0e:	b3 e4       	ldi	r27, 0x43	; 67
    2d10:	80 83       	st	Z, r24
    2d12:	91 83       	std	Z+1, r25	; 0x01
    2d14:	a2 83       	std	Z+2, r26	; 0x02
    2d16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d18:	8e 01       	movw	r16, r28
    2d1a:	09 58       	subi	r16, 0x89	; 137
    2d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1e:	fe 01       	movw	r30, r28
    2d20:	e5 58       	subi	r30, 0x85	; 133
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	60 81       	ld	r22, Z
    2d26:	71 81       	ldd	r23, Z+1	; 0x01
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	93 81       	ldd	r25, Z+3	; 0x03
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	4a ef       	ldi	r20, 0xFA	; 250
    2d32:	54 e4       	ldi	r21, 0x44	; 68
    2d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	f8 01       	movw	r30, r16
    2d3e:	80 83       	st	Z, r24
    2d40:	91 83       	std	Z+1, r25	; 0x01
    2d42:	a2 83       	std	Z+2, r26	; 0x02
    2d44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d46:	fe 01       	movw	r30, r28
    2d48:	e9 58       	subi	r30, 0x89	; 137
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e8       	ldi	r20, 0x80	; 128
    2d5a:	5f e3       	ldi	r21, 0x3F	; 63
    2d5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d60:	88 23       	and	r24, r24
    2d62:	44 f4       	brge	.+16     	; 0x2d74 <main+0x1366>
		__ticks = 1;
    2d64:	fe 01       	movw	r30, r28
    2d66:	eb 58       	subi	r30, 0x8B	; 139
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	91 83       	std	Z+1, r25	; 0x01
    2d70:	80 83       	st	Z, r24
    2d72:	64 c0       	rjmp	.+200    	; 0x2e3c <main+0x142e>
	else if (__tmp > 65535)
    2d74:	fe 01       	movw	r30, r28
    2d76:	e9 58       	subi	r30, 0x89	; 137
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	60 81       	ld	r22, Z
    2d7c:	71 81       	ldd	r23, Z+1	; 0x01
    2d7e:	82 81       	ldd	r24, Z+2	; 0x02
    2d80:	93 81       	ldd	r25, Z+3	; 0x03
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	3f ef       	ldi	r19, 0xFF	; 255
    2d86:	4f e7       	ldi	r20, 0x7F	; 127
    2d88:	57 e4       	ldi	r21, 0x47	; 71
    2d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d8e:	18 16       	cp	r1, r24
    2d90:	0c f0       	brlt	.+2      	; 0x2d94 <main+0x1386>
    2d92:	43 c0       	rjmp	.+134    	; 0x2e1a <main+0x140c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d94:	fe 01       	movw	r30, r28
    2d96:	e5 58       	subi	r30, 0x85	; 133
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	93 81       	ldd	r25, Z+3	; 0x03
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e2       	ldi	r20, 0x20	; 32
    2da8:	51 e4       	ldi	r21, 0x41	; 65
    2daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	8e 01       	movw	r16, r28
    2db4:	0b 58       	subi	r16, 0x8B	; 139
    2db6:	1f 4f       	sbci	r17, 0xFF	; 255
    2db8:	bc 01       	movw	r22, r24
    2dba:	cd 01       	movw	r24, r26
    2dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	f8 01       	movw	r30, r16
    2dc6:	91 83       	std	Z+1, r25	; 0x01
    2dc8:	80 83       	st	Z, r24
    2dca:	1f c0       	rjmp	.+62     	; 0x2e0a <main+0x13fc>
    2dcc:	fe 01       	movw	r30, r28
    2dce:	ed 58       	subi	r30, 0x8D	; 141
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	88 ec       	ldi	r24, 0xC8	; 200
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	80 83       	st	Z, r24
    2dda:	fe 01       	movw	r30, r28
    2ddc:	ed 58       	subi	r30, 0x8D	; 141
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 81       	ld	r24, Z
    2de2:	91 81       	ldd	r25, Z+1	; 0x01
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <main+0x13d6>
    2de8:	fe 01       	movw	r30, r28
    2dea:	ed 58       	subi	r30, 0x8D	; 141
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	91 83       	std	Z+1, r25	; 0x01
    2df0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df2:	de 01       	movw	r26, r28
    2df4:	ab 58       	subi	r26, 0x8B	; 139
    2df6:	bf 4f       	sbci	r27, 0xFF	; 255
    2df8:	fe 01       	movw	r30, r28
    2dfa:	eb 58       	subi	r30, 0x8B	; 139
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	80 81       	ld	r24, Z
    2e00:	91 81       	ldd	r25, Z+1	; 0x01
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	11 96       	adiw	r26, 0x01	; 1
    2e06:	9c 93       	st	X, r25
    2e08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	eb 58       	subi	r30, 0x8B	; 139
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 81       	ld	r24, Z
    2e12:	91 81       	ldd	r25, Z+1	; 0x01
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	d1 f6       	brne	.-76     	; 0x2dcc <main+0x13be>
    2e18:	28 c0       	rjmp	.+80     	; 0x2e6a <main+0x145c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1a:	8e 01       	movw	r16, r28
    2e1c:	0b 58       	subi	r16, 0x8B	; 139
    2e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e20:	fe 01       	movw	r30, r28
    2e22:	e9 58       	subi	r30, 0x89	; 137
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	60 81       	ld	r22, Z
    2e28:	71 81       	ldd	r23, Z+1	; 0x01
    2e2a:	82 81       	ldd	r24, Z+2	; 0x02
    2e2c:	93 81       	ldd	r25, Z+3	; 0x03
    2e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	f8 01       	movw	r30, r16
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	80 83       	st	Z, r24
    2e3c:	de 01       	movw	r26, r28
    2e3e:	af 58       	subi	r26, 0x8F	; 143
    2e40:	bf 4f       	sbci	r27, 0xFF	; 255
    2e42:	fe 01       	movw	r30, r28
    2e44:	eb 58       	subi	r30, 0x8B	; 139
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	80 81       	ld	r24, Z
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
    2e4c:	11 96       	adiw	r26, 0x01	; 1
    2e4e:	9c 93       	st	X, r25
    2e50:	8e 93       	st	-X, r24
    2e52:	fe 01       	movw	r30, r28
    2e54:	ef 58       	subi	r30, 0x8F	; 143
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	80 81       	ld	r24, Z
    2e5a:	91 81       	ldd	r25, Z+1	; 0x01
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	f1 f7       	brne	.-4      	; 0x2e5c <main+0x144e>
    2e60:	fe 01       	movw	r30, r28
    2e62:	ef 58       	subi	r30, 0x8F	; 143
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					m--;
    2e6a:	80 91 a6 00 	lds	r24, 0x00A6
    2e6e:	81 50       	subi	r24, 0x01	; 1
    2e70:	80 93 a6 00 	sts	0x00A6, r24
				}
				if(m>9)
    2e74:	80 91 a6 00 	lds	r24, 0x00A6
    2e78:	8a 30       	cpi	r24, 0x0A	; 10
    2e7a:	1c f0       	brlt	.+6      	; 0x2e82 <main+0x1474>
					m=9;
    2e7c:	89 e0       	ldi	r24, 0x09	; 9
    2e7e:	80 93 a6 00 	sts	0x00A6, r24
				if(i==2 && j==4)
    2e82:	80 91 aa 00 	lds	r24, 0x00AA
    2e86:	82 30       	cpi	r24, 0x02	; 2
    2e88:	31 f4       	brne	.+12     	; 0x2e96 <main+0x1488>
    2e8a:	80 91 a9 00 	lds	r24, 0x00A9
    2e8e:	84 30       	cpi	r24, 0x04	; 4
    2e90:	11 f4       	brne	.+4      	; 0x2e96 <main+0x1488>
					m=0;
    2e92:	10 92 a6 00 	sts	0x00A6, r1
				CLCD_voidGoToXY(0,4);
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	64 e0       	ldi	r22, 0x04	; 4
    2e9a:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
				CLCD_voidWriteNumber(m);
    2e9e:	80 91 a6 00 	lds	r24, 0x00A6
    2ea2:	99 27       	eor	r25, r25
    2ea4:	87 fd       	sbrc	r24, 7
    2ea6:	90 95       	com	r25
    2ea8:	a9 2f       	mov	r26, r25
    2eaa:	b9 2f       	mov	r27, r25
    2eac:	bc 01       	movw	r22, r24
    2eae:	cd 01       	movw	r24, r26
    2eb0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
				CLCD_voidGoToXY(1,3);
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	63 e0       	ldi	r22, 0x03	; 3
    2eb8:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
				CLCD_voidSendData(' ');
    2ebc:	80 e2       	ldi	r24, 0x20	; 32
    2ebe:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
				CLCD_voidWriteSpecialCharacter(arr_arrow,0,1,4);
    2ec2:	82 e9       	ldi	r24, 0x92	; 146
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	60 e0       	ldi	r22, 0x00	; 0
    2ec8:	41 e0       	ldi	r20, 0x01	; 1
    2eca:	24 e0       	ldi	r18, 0x04	; 4
    2ecc:	0e 94 18 08 	call	0x1030	; 0x1030 <CLCD_voidWriteSpecialCharacter>
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	e3 59       	subi	r30, 0x93	; 147
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	a8 ec       	ldi	r26, 0xC8	; 200
    2edc:	b1 e4       	ldi	r27, 0x41	; 65
    2ede:	80 83       	st	Z, r24
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	a2 83       	std	Z+2, r26	; 0x02
    2ee4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee6:	8e 01       	movw	r16, r28
    2ee8:	07 59       	subi	r16, 0x97	; 151
    2eea:	1f 4f       	sbci	r17, 0xFF	; 255
    2eec:	fe 01       	movw	r30, r28
    2eee:	e3 59       	subi	r30, 0x93	; 147
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4a ef       	ldi	r20, 0xFA	; 250
    2f00:	54 e4       	ldi	r21, 0x44	; 68
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	f8 01       	movw	r30, r16
    2f0c:	80 83       	st	Z, r24
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	a2 83       	std	Z+2, r26	; 0x02
    2f12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f14:	fe 01       	movw	r30, r28
    2f16:	e7 59       	subi	r30, 0x97	; 151
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	60 81       	ld	r22, Z
    2f1c:	71 81       	ldd	r23, Z+1	; 0x01
    2f1e:	82 81       	ldd	r24, Z+2	; 0x02
    2f20:	93 81       	ldd	r25, Z+3	; 0x03
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	40 e8       	ldi	r20, 0x80	; 128
    2f28:	5f e3       	ldi	r21, 0x3F	; 63
    2f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f2e:	88 23       	and	r24, r24
    2f30:	44 f4       	brge	.+16     	; 0x2f42 <main+0x1534>
		__ticks = 1;
    2f32:	fe 01       	movw	r30, r28
    2f34:	e9 59       	subi	r30, 0x99	; 153
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	91 83       	std	Z+1, r25	; 0x01
    2f3e:	80 83       	st	Z, r24
    2f40:	64 c0       	rjmp	.+200    	; 0x300a <main+0x15fc>
	else if (__tmp > 65535)
    2f42:	fe 01       	movw	r30, r28
    2f44:	e7 59       	subi	r30, 0x97	; 151
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	60 81       	ld	r22, Z
    2f4a:	71 81       	ldd	r23, Z+1	; 0x01
    2f4c:	82 81       	ldd	r24, Z+2	; 0x02
    2f4e:	93 81       	ldd	r25, Z+3	; 0x03
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	3f ef       	ldi	r19, 0xFF	; 255
    2f54:	4f e7       	ldi	r20, 0x7F	; 127
    2f56:	57 e4       	ldi	r21, 0x47	; 71
    2f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f5c:	18 16       	cp	r1, r24
    2f5e:	0c f0       	brlt	.+2      	; 0x2f62 <main+0x1554>
    2f60:	43 c0       	rjmp	.+134    	; 0x2fe8 <main+0x15da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f62:	fe 01       	movw	r30, r28
    2f64:	e3 59       	subi	r30, 0x93	; 147
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	60 81       	ld	r22, Z
    2f6a:	71 81       	ldd	r23, Z+1	; 0x01
    2f6c:	82 81       	ldd	r24, Z+2	; 0x02
    2f6e:	93 81       	ldd	r25, Z+3	; 0x03
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e2       	ldi	r20, 0x20	; 32
    2f76:	51 e4       	ldi	r21, 0x41	; 65
    2f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	8e 01       	movw	r16, r28
    2f82:	09 59       	subi	r16, 0x99	; 153
    2f84:	1f 4f       	sbci	r17, 0xFF	; 255
    2f86:	bc 01       	movw	r22, r24
    2f88:	cd 01       	movw	r24, r26
    2f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	f8 01       	movw	r30, r16
    2f94:	91 83       	std	Z+1, r25	; 0x01
    2f96:	80 83       	st	Z, r24
    2f98:	1f c0       	rjmp	.+62     	; 0x2fd8 <main+0x15ca>
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	eb 59       	subi	r30, 0x9B	; 155
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	88 ec       	ldi	r24, 0xC8	; 200
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	80 83       	st	Z, r24
    2fa8:	fe 01       	movw	r30, r28
    2faa:	eb 59       	subi	r30, 0x9B	; 155
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	80 81       	ld	r24, Z
    2fb0:	91 81       	ldd	r25, Z+1	; 0x01
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	f1 f7       	brne	.-4      	; 0x2fb2 <main+0x15a4>
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	eb 59       	subi	r30, 0x9B	; 155
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	91 83       	std	Z+1, r25	; 0x01
    2fbe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc0:	de 01       	movw	r26, r28
    2fc2:	a9 59       	subi	r26, 0x99	; 153
    2fc4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e9 59       	subi	r30, 0x99	; 153
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	80 81       	ld	r24, Z
    2fce:	91 81       	ldd	r25, Z+1	; 0x01
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	11 96       	adiw	r26, 0x01	; 1
    2fd4:	9c 93       	st	X, r25
    2fd6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e9 59       	subi	r30, 0x99	; 153
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 81       	ldd	r25, Z+1	; 0x01
    2fe2:	00 97       	sbiw	r24, 0x00	; 0
    2fe4:	d1 f6       	brne	.-76     	; 0x2f9a <main+0x158c>
    2fe6:	28 c0       	rjmp	.+80     	; 0x3038 <main+0x162a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe8:	8e 01       	movw	r16, r28
    2fea:	09 59       	subi	r16, 0x99	; 153
    2fec:	1f 4f       	sbci	r17, 0xFF	; 255
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e7 59       	subi	r30, 0x97	; 151
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	60 81       	ld	r22, Z
    2ff6:	71 81       	ldd	r23, Z+1	; 0x01
    2ff8:	82 81       	ldd	r24, Z+2	; 0x02
    2ffa:	93 81       	ldd	r25, Z+3	; 0x03
    2ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	f8 01       	movw	r30, r16
    3006:	91 83       	std	Z+1, r25	; 0x01
    3008:	80 83       	st	Z, r24
    300a:	de 01       	movw	r26, r28
    300c:	ad 59       	subi	r26, 0x9D	; 157
    300e:	bf 4f       	sbci	r27, 0xFF	; 255
    3010:	fe 01       	movw	r30, r28
    3012:	e9 59       	subi	r30, 0x99	; 153
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	80 81       	ld	r24, Z
    3018:	91 81       	ldd	r25, Z+1	; 0x01
    301a:	11 96       	adiw	r26, 0x01	; 1
    301c:	9c 93       	st	X, r25
    301e:	8e 93       	st	-X, r24
    3020:	fe 01       	movw	r30, r28
    3022:	ed 59       	subi	r30, 0x9D	; 157
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	80 81       	ld	r24, Z
    3028:	91 81       	ldd	r25, Z+1	; 0x01
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	f1 f7       	brne	.-4      	; 0x302a <main+0x161c>
    302e:	fe 01       	movw	r30, r28
    3030:	ed 59       	subi	r30, 0x9D	; 157
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	91 83       	std	Z+1, r25	; 0x01
    3036:	80 83       	st	Z, r24
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
    3038:	e0 e3       	ldi	r30, 0x30	; 48
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	88 2f       	mov	r24, r24
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	81 70       	andi	r24, 0x01	; 1
    3044:	90 70       	andi	r25, 0x00	; 0
    3046:	00 97       	sbiw	r24, 0x00	; 0
    3048:	09 f4       	brne	.+2      	; 0x304c <main+0x163e>
    304a:	57 c2       	rjmp	.+1198   	; 0x34fa <main+0x1aec>
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
					break;

			}
			while(k==4)
    304c:	80 91 a8 00 	lds	r24, 0x00A8
    3050:	84 30       	cpi	r24, 0x04	; 4
    3052:	09 f4       	brne	.+2      	; 0x3056 <main+0x1648>
    3054:	7b cd       	rjmp	.-1290   	; 0x2b4c <main+0x113e>
    3056:	51 c2       	rjmp	.+1186   	; 0x34fa <main+0x1aec>
					break;

			}
			while(k==5)
			{
				e=arr_num[n];
    3058:	80 91 a5 00 	lds	r24, 0x00A5
    305c:	99 27       	eor	r25, r25
    305e:	87 fd       	sbrc	r24, 7
    3060:	90 95       	com	r25
    3062:	fc 01       	movw	r30, r24
    3064:	e6 56       	subi	r30, 0x66	; 102
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	80 81       	ld	r24, Z
    306a:	80 93 ac 00 	sts	0x00AC, r24
				if(GET_BIT(PIND,2)==0)
    306e:	e0 e3       	ldi	r30, 0x30	; 48
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	86 95       	lsr	r24
    3076:	86 95       	lsr	r24
    3078:	88 2f       	mov	r24, r24
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	81 70       	andi	r24, 0x01	; 1
    307e:	90 70       	andi	r25, 0x00	; 0
    3080:	00 97       	sbiw	r24, 0x00	; 0
    3082:	09 f0       	breq	.+2      	; 0x3086 <main+0x1678>
    3084:	b9 c0       	rjmp	.+370    	; 0x31f8 <main+0x17ea>
    3086:	fe 01       	movw	r30, r28
    3088:	e1 5a       	subi	r30, 0xA1	; 161
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	a8 e4       	ldi	r26, 0x48	; 72
    3092:	b3 e4       	ldi	r27, 0x43	; 67
    3094:	80 83       	st	Z, r24
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	a2 83       	std	Z+2, r26	; 0x02
    309a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309c:	8e 01       	movw	r16, r28
    309e:	05 5a       	subi	r16, 0xA5	; 165
    30a0:	1f 4f       	sbci	r17, 0xFF	; 255
    30a2:	fe 01       	movw	r30, r28
    30a4:	e1 5a       	subi	r30, 0xA1	; 161
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	60 81       	ld	r22, Z
    30aa:	71 81       	ldd	r23, Z+1	; 0x01
    30ac:	82 81       	ldd	r24, Z+2	; 0x02
    30ae:	93 81       	ldd	r25, Z+3	; 0x03
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	4a ef       	ldi	r20, 0xFA	; 250
    30b6:	54 e4       	ldi	r21, 0x44	; 68
    30b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	f8 01       	movw	r30, r16
    30c2:	80 83       	st	Z, r24
    30c4:	91 83       	std	Z+1, r25	; 0x01
    30c6:	a2 83       	std	Z+2, r26	; 0x02
    30c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30ca:	fe 01       	movw	r30, r28
    30cc:	e5 5a       	subi	r30, 0xA5	; 165
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	93 81       	ldd	r25, Z+3	; 0x03
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	40 e8       	ldi	r20, 0x80	; 128
    30de:	5f e3       	ldi	r21, 0x3F	; 63
    30e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30e4:	88 23       	and	r24, r24
    30e6:	44 f4       	brge	.+16     	; 0x30f8 <main+0x16ea>
		__ticks = 1;
    30e8:	fe 01       	movw	r30, r28
    30ea:	e7 5a       	subi	r30, 0xA7	; 167
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	91 83       	std	Z+1, r25	; 0x01
    30f4:	80 83       	st	Z, r24
    30f6:	64 c0       	rjmp	.+200    	; 0x31c0 <main+0x17b2>
	else if (__tmp > 65535)
    30f8:	fe 01       	movw	r30, r28
    30fa:	e5 5a       	subi	r30, 0xA5	; 165
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	60 81       	ld	r22, Z
    3100:	71 81       	ldd	r23, Z+1	; 0x01
    3102:	82 81       	ldd	r24, Z+2	; 0x02
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	3f ef       	ldi	r19, 0xFF	; 255
    310a:	4f e7       	ldi	r20, 0x7F	; 127
    310c:	57 e4       	ldi	r21, 0x47	; 71
    310e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3112:	18 16       	cp	r1, r24
    3114:	0c f0       	brlt	.+2      	; 0x3118 <main+0x170a>
    3116:	43 c0       	rjmp	.+134    	; 0x319e <main+0x1790>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3118:	fe 01       	movw	r30, r28
    311a:	e1 5a       	subi	r30, 0xA1	; 161
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	60 81       	ld	r22, Z
    3120:	71 81       	ldd	r23, Z+1	; 0x01
    3122:	82 81       	ldd	r24, Z+2	; 0x02
    3124:	93 81       	ldd	r25, Z+3	; 0x03
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e2       	ldi	r20, 0x20	; 32
    312c:	51 e4       	ldi	r21, 0x41	; 65
    312e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	8e 01       	movw	r16, r28
    3138:	07 5a       	subi	r16, 0xA7	; 167
    313a:	1f 4f       	sbci	r17, 0xFF	; 255
    313c:	bc 01       	movw	r22, r24
    313e:	cd 01       	movw	r24, r26
    3140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	f8 01       	movw	r30, r16
    314a:	91 83       	std	Z+1, r25	; 0x01
    314c:	80 83       	st	Z, r24
    314e:	1f c0       	rjmp	.+62     	; 0x318e <main+0x1780>
    3150:	fe 01       	movw	r30, r28
    3152:	e9 5a       	subi	r30, 0xA9	; 169
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	88 ec       	ldi	r24, 0xC8	; 200
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	91 83       	std	Z+1, r25	; 0x01
    315c:	80 83       	st	Z, r24
    315e:	fe 01       	movw	r30, r28
    3160:	e9 5a       	subi	r30, 0xA9	; 169
    3162:	ff 4f       	sbci	r31, 0xFF	; 255
    3164:	80 81       	ld	r24, Z
    3166:	91 81       	ldd	r25, Z+1	; 0x01
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	f1 f7       	brne	.-4      	; 0x3168 <main+0x175a>
    316c:	fe 01       	movw	r30, r28
    316e:	e9 5a       	subi	r30, 0xA9	; 169
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	91 83       	std	Z+1, r25	; 0x01
    3174:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3176:	de 01       	movw	r26, r28
    3178:	a7 5a       	subi	r26, 0xA7	; 167
    317a:	bf 4f       	sbci	r27, 0xFF	; 255
    317c:	fe 01       	movw	r30, r28
    317e:	e7 5a       	subi	r30, 0xA7	; 167
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	80 81       	ld	r24, Z
    3184:	91 81       	ldd	r25, Z+1	; 0x01
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	11 96       	adiw	r26, 0x01	; 1
    318a:	9c 93       	st	X, r25
    318c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318e:	fe 01       	movw	r30, r28
    3190:	e7 5a       	subi	r30, 0xA7	; 167
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	80 81       	ld	r24, Z
    3196:	91 81       	ldd	r25, Z+1	; 0x01
    3198:	00 97       	sbiw	r24, 0x00	; 0
    319a:	d1 f6       	brne	.-76     	; 0x3150 <main+0x1742>
    319c:	28 c0       	rjmp	.+80     	; 0x31ee <main+0x17e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    319e:	8e 01       	movw	r16, r28
    31a0:	07 5a       	subi	r16, 0xA7	; 167
    31a2:	1f 4f       	sbci	r17, 0xFF	; 255
    31a4:	fe 01       	movw	r30, r28
    31a6:	e5 5a       	subi	r30, 0xA5	; 165
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	60 81       	ld	r22, Z
    31ac:	71 81       	ldd	r23, Z+1	; 0x01
    31ae:	82 81       	ldd	r24, Z+2	; 0x02
    31b0:	93 81       	ldd	r25, Z+3	; 0x03
    31b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	f8 01       	movw	r30, r16
    31bc:	91 83       	std	Z+1, r25	; 0x01
    31be:	80 83       	st	Z, r24
    31c0:	de 01       	movw	r26, r28
    31c2:	ab 5a       	subi	r26, 0xAB	; 171
    31c4:	bf 4f       	sbci	r27, 0xFF	; 255
    31c6:	fe 01       	movw	r30, r28
    31c8:	e7 5a       	subi	r30, 0xA7	; 167
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	80 81       	ld	r24, Z
    31ce:	91 81       	ldd	r25, Z+1	; 0x01
    31d0:	11 96       	adiw	r26, 0x01	; 1
    31d2:	9c 93       	st	X, r25
    31d4:	8e 93       	st	-X, r24
    31d6:	fe 01       	movw	r30, r28
    31d8:	eb 5a       	subi	r30, 0xAB	; 171
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 81       	ld	r24, Z
    31de:	91 81       	ldd	r25, Z+1	; 0x01
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	f1 f7       	brne	.-4      	; 0x31e0 <main+0x17d2>
    31e4:	fe 01       	movw	r30, r28
    31e6:	eb 5a       	subi	r30, 0xAB	; 171
    31e8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ea:	91 83       	std	Z+1, r25	; 0x01
    31ec:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					n++;
    31ee:	80 91 a5 00 	lds	r24, 0x00A5
    31f2:	8f 5f       	subi	r24, 0xFF	; 255
    31f4:	80 93 a5 00 	sts	0x00A5, r24
				}
				if(GET_BIT(PIND,1)==0)
    31f8:	e0 e3       	ldi	r30, 0x30	; 48
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
    31fe:	86 95       	lsr	r24
    3200:	88 2f       	mov	r24, r24
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	81 70       	andi	r24, 0x01	; 1
    3206:	90 70       	andi	r25, 0x00	; 0
    3208:	00 97       	sbiw	r24, 0x00	; 0
    320a:	09 f0       	breq	.+2      	; 0x320e <main+0x1800>
    320c:	b9 c0       	rjmp	.+370    	; 0x3380 <main+0x1972>
    320e:	fe 01       	movw	r30, r28
    3210:	ef 5a       	subi	r30, 0xAF	; 175
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	80 e0       	ldi	r24, 0x00	; 0
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	a8 e4       	ldi	r26, 0x48	; 72
    321a:	b3 e4       	ldi	r27, 0x43	; 67
    321c:	80 83       	st	Z, r24
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	a2 83       	std	Z+2, r26	; 0x02
    3222:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3224:	8e 01       	movw	r16, r28
    3226:	03 5b       	subi	r16, 0xB3	; 179
    3228:	1f 4f       	sbci	r17, 0xFF	; 255
    322a:	fe 01       	movw	r30, r28
    322c:	ef 5a       	subi	r30, 0xAF	; 175
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	60 81       	ld	r22, Z
    3232:	71 81       	ldd	r23, Z+1	; 0x01
    3234:	82 81       	ldd	r24, Z+2	; 0x02
    3236:	93 81       	ldd	r25, Z+3	; 0x03
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	4a ef       	ldi	r20, 0xFA	; 250
    323e:	54 e4       	ldi	r21, 0x44	; 68
    3240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	f8 01       	movw	r30, r16
    324a:	80 83       	st	Z, r24
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	a2 83       	std	Z+2, r26	; 0x02
    3250:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3252:	fe 01       	movw	r30, r28
    3254:	e3 5b       	subi	r30, 0xB3	; 179
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	60 81       	ld	r22, Z
    325a:	71 81       	ldd	r23, Z+1	; 0x01
    325c:	82 81       	ldd	r24, Z+2	; 0x02
    325e:	93 81       	ldd	r25, Z+3	; 0x03
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e8       	ldi	r20, 0x80	; 128
    3266:	5f e3       	ldi	r21, 0x3F	; 63
    3268:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    326c:	88 23       	and	r24, r24
    326e:	44 f4       	brge	.+16     	; 0x3280 <main+0x1872>
		__ticks = 1;
    3270:	fe 01       	movw	r30, r28
    3272:	e5 5b       	subi	r30, 0xB5	; 181
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	80 83       	st	Z, r24
    327e:	64 c0       	rjmp	.+200    	; 0x3348 <main+0x193a>
	else if (__tmp > 65535)
    3280:	fe 01       	movw	r30, r28
    3282:	e3 5b       	subi	r30, 0xB3	; 179
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	60 81       	ld	r22, Z
    3288:	71 81       	ldd	r23, Z+1	; 0x01
    328a:	82 81       	ldd	r24, Z+2	; 0x02
    328c:	93 81       	ldd	r25, Z+3	; 0x03
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	3f ef       	ldi	r19, 0xFF	; 255
    3292:	4f e7       	ldi	r20, 0x7F	; 127
    3294:	57 e4       	ldi	r21, 0x47	; 71
    3296:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    329a:	18 16       	cp	r1, r24
    329c:	0c f0       	brlt	.+2      	; 0x32a0 <main+0x1892>
    329e:	43 c0       	rjmp	.+134    	; 0x3326 <main+0x1918>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a0:	fe 01       	movw	r30, r28
    32a2:	ef 5a       	subi	r30, 0xAF	; 175
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	60 81       	ld	r22, Z
    32a8:	71 81       	ldd	r23, Z+1	; 0x01
    32aa:	82 81       	ldd	r24, Z+2	; 0x02
    32ac:	93 81       	ldd	r25, Z+3	; 0x03
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e2       	ldi	r20, 0x20	; 32
    32b4:	51 e4       	ldi	r21, 0x41	; 65
    32b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	8e 01       	movw	r16, r28
    32c0:	05 5b       	subi	r16, 0xB5	; 181
    32c2:	1f 4f       	sbci	r17, 0xFF	; 255
    32c4:	bc 01       	movw	r22, r24
    32c6:	cd 01       	movw	r24, r26
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	f8 01       	movw	r30, r16
    32d2:	91 83       	std	Z+1, r25	; 0x01
    32d4:	80 83       	st	Z, r24
    32d6:	1f c0       	rjmp	.+62     	; 0x3316 <main+0x1908>
    32d8:	fe 01       	movw	r30, r28
    32da:	e7 5b       	subi	r30, 0xB7	; 183
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	88 ec       	ldi	r24, 0xC8	; 200
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	91 83       	std	Z+1, r25	; 0x01
    32e4:	80 83       	st	Z, r24
    32e6:	fe 01       	movw	r30, r28
    32e8:	e7 5b       	subi	r30, 0xB7	; 183
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	80 81       	ld	r24, Z
    32ee:	91 81       	ldd	r25, Z+1	; 0x01
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <main+0x18e2>
    32f4:	fe 01       	movw	r30, r28
    32f6:	e7 5b       	subi	r30, 0xB7	; 183
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	91 83       	std	Z+1, r25	; 0x01
    32fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32fe:	de 01       	movw	r26, r28
    3300:	a5 5b       	subi	r26, 0xB5	; 181
    3302:	bf 4f       	sbci	r27, 0xFF	; 255
    3304:	fe 01       	movw	r30, r28
    3306:	e5 5b       	subi	r30, 0xB5	; 181
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	80 81       	ld	r24, Z
    330c:	91 81       	ldd	r25, Z+1	; 0x01
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	11 96       	adiw	r26, 0x01	; 1
    3312:	9c 93       	st	X, r25
    3314:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3316:	fe 01       	movw	r30, r28
    3318:	e5 5b       	subi	r30, 0xB5	; 181
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	80 81       	ld	r24, Z
    331e:	91 81       	ldd	r25, Z+1	; 0x01
    3320:	00 97       	sbiw	r24, 0x00	; 0
    3322:	d1 f6       	brne	.-76     	; 0x32d8 <main+0x18ca>
    3324:	28 c0       	rjmp	.+80     	; 0x3376 <main+0x1968>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3326:	8e 01       	movw	r16, r28
    3328:	05 5b       	subi	r16, 0xB5	; 181
    332a:	1f 4f       	sbci	r17, 0xFF	; 255
    332c:	fe 01       	movw	r30, r28
    332e:	e3 5b       	subi	r30, 0xB3	; 179
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	60 81       	ld	r22, Z
    3334:	71 81       	ldd	r23, Z+1	; 0x01
    3336:	82 81       	ldd	r24, Z+2	; 0x02
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	f8 01       	movw	r30, r16
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	80 83       	st	Z, r24
    3348:	de 01       	movw	r26, r28
    334a:	a9 5b       	subi	r26, 0xB9	; 185
    334c:	bf 4f       	sbci	r27, 0xFF	; 255
    334e:	fe 01       	movw	r30, r28
    3350:	e5 5b       	subi	r30, 0xB5	; 181
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	80 81       	ld	r24, Z
    3356:	91 81       	ldd	r25, Z+1	; 0x01
    3358:	11 96       	adiw	r26, 0x01	; 1
    335a:	9c 93       	st	X, r25
    335c:	8e 93       	st	-X, r24
    335e:	fe 01       	movw	r30, r28
    3360:	e9 5b       	subi	r30, 0xB9	; 185
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 81       	ld	r24, Z
    3366:	91 81       	ldd	r25, Z+1	; 0x01
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	f1 f7       	brne	.-4      	; 0x3368 <main+0x195a>
    336c:	fe 01       	movw	r30, r28
    336e:	e9 5b       	subi	r30, 0xB9	; 185
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	91 83       	std	Z+1, r25	; 0x01
    3374:	80 83       	st	Z, r24
				{
					_delay_ms(200);
					n--;
    3376:	80 91 a5 00 	lds	r24, 0x00A5
    337a:	81 50       	subi	r24, 0x01	; 1
    337c:	80 93 a5 00 	sts	0x00A5, r24
				}
				if(n>5)
    3380:	80 91 a5 00 	lds	r24, 0x00A5
    3384:	86 30       	cpi	r24, 0x06	; 6
    3386:	1c f0       	brlt	.+6      	; 0x338e <main+0x1980>
					n=5;
    3388:	85 e0       	ldi	r24, 0x05	; 5
    338a:	80 93 a5 00 	sts	0x00A5, r24
				if(i==2 && j==4)
    338e:	80 91 aa 00 	lds	r24, 0x00AA
    3392:	82 30       	cpi	r24, 0x02	; 2
    3394:	31 f4       	brne	.+12     	; 0x33a2 <main+0x1994>
    3396:	80 91 a9 00 	lds	r24, 0x00A9
    339a:	84 30       	cpi	r24, 0x04	; 4
    339c:	11 f4       	brne	.+4      	; 0x33a2 <main+0x1994>
					n=0;
    339e:	10 92 a5 00 	sts	0x00A5, r1
				CLCD_voidGoToXY(0,6);
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	66 e0       	ldi	r22, 0x06	; 6
    33a6:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
				CLCD_voidWriteNumber(e);
    33aa:	80 91 ac 00 	lds	r24, 0x00AC
    33ae:	99 27       	eor	r25, r25
    33b0:	87 fd       	sbrc	r24, 7
    33b2:	90 95       	com	r25
    33b4:	a9 2f       	mov	r26, r25
    33b6:	b9 2f       	mov	r27, r25
    33b8:	bc 01       	movw	r22, r24
    33ba:	cd 01       	movw	r24, r26
    33bc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
				CLCD_voidGoToXY(1,4);
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	64 e0       	ldi	r22, 0x04	; 4
    33c4:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
				CLCD_voidSendData(' ');
    33c8:	80 e2       	ldi	r24, 0x20	; 32
    33ca:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
				CLCD_voidWriteSpecialCharacter(arr_arrow,0,1,6);
    33ce:	82 e9       	ldi	r24, 0x92	; 146
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	41 e0       	ldi	r20, 0x01	; 1
    33d6:	26 e0       	ldi	r18, 0x06	; 6
    33d8:	0e 94 18 08 	call	0x1030	; 0x1030 <CLCD_voidWriteSpecialCharacter>
    33dc:	fe 01       	movw	r30, r28
    33de:	ed 5b       	subi	r30, 0xBD	; 189
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	a8 ec       	ldi	r26, 0xC8	; 200
    33e8:	b1 e4       	ldi	r27, 0x41	; 65
    33ea:	80 83       	st	Z, r24
    33ec:	91 83       	std	Z+1, r25	; 0x01
    33ee:	a2 83       	std	Z+2, r26	; 0x02
    33f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f2:	8e 01       	movw	r16, r28
    33f4:	01 5c       	subi	r16, 0xC1	; 193
    33f6:	1f 4f       	sbci	r17, 0xFF	; 255
    33f8:	fe 01       	movw	r30, r28
    33fa:	ed 5b       	subi	r30, 0xBD	; 189
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	60 81       	ld	r22, Z
    3400:	71 81       	ldd	r23, Z+1	; 0x01
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	93 81       	ldd	r25, Z+3	; 0x03
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	4a ef       	ldi	r20, 0xFA	; 250
    340c:	54 e4       	ldi	r21, 0x44	; 68
    340e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	f8 01       	movw	r30, r16
    3418:	80 83       	st	Z, r24
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	a2 83       	std	Z+2, r26	; 0x02
    341e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3420:	fe 01       	movw	r30, r28
    3422:	ff 96       	adiw	r30, 0x3f	; 63
    3424:	60 81       	ld	r22, Z
    3426:	71 81       	ldd	r23, Z+1	; 0x01
    3428:	82 81       	ldd	r24, Z+2	; 0x02
    342a:	93 81       	ldd	r25, Z+3	; 0x03
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	40 e8       	ldi	r20, 0x80	; 128
    3432:	5f e3       	ldi	r21, 0x3F	; 63
    3434:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3438:	88 23       	and	r24, r24
    343a:	2c f4       	brge	.+10     	; 0x3446 <main+0x1a38>
		__ticks = 1;
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	9e af       	std	Y+62, r25	; 0x3e
    3442:	8d af       	std	Y+61, r24	; 0x3d
    3444:	46 c0       	rjmp	.+140    	; 0x34d2 <main+0x1ac4>
	else if (__tmp > 65535)
    3446:	fe 01       	movw	r30, r28
    3448:	ff 96       	adiw	r30, 0x3f	; 63
    344a:	60 81       	ld	r22, Z
    344c:	71 81       	ldd	r23, Z+1	; 0x01
    344e:	82 81       	ldd	r24, Z+2	; 0x02
    3450:	93 81       	ldd	r25, Z+3	; 0x03
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	3f ef       	ldi	r19, 0xFF	; 255
    3456:	4f e7       	ldi	r20, 0x7F	; 127
    3458:	57 e4       	ldi	r21, 0x47	; 71
    345a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    345e:	18 16       	cp	r1, r24
    3460:	64 f5       	brge	.+88     	; 0x34ba <main+0x1aac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3462:	fe 01       	movw	r30, r28
    3464:	ed 5b       	subi	r30, 0xBD	; 189
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	60 81       	ld	r22, Z
    346a:	71 81       	ldd	r23, Z+1	; 0x01
    346c:	82 81       	ldd	r24, Z+2	; 0x02
    346e:	93 81       	ldd	r25, Z+3	; 0x03
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	40 e2       	ldi	r20, 0x20	; 32
    3476:	51 e4       	ldi	r21, 0x41	; 65
    3478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	bc 01       	movw	r22, r24
    3482:	cd 01       	movw	r24, r26
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	9e af       	std	Y+62, r25	; 0x3e
    348e:	8d af       	std	Y+61, r24	; 0x3d
    3490:	0f c0       	rjmp	.+30     	; 0x34b0 <main+0x1aa2>
    3492:	88 ec       	ldi	r24, 0xC8	; 200
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	9c af       	std	Y+60, r25	; 0x3c
    3498:	8b af       	std	Y+59, r24	; 0x3b
    349a:	8b ad       	ldd	r24, Y+59	; 0x3b
    349c:	9c ad       	ldd	r25, Y+60	; 0x3c
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <main+0x1a90>
    34a2:	9c af       	std	Y+60, r25	; 0x3c
    34a4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    34a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	9e af       	std	Y+62, r25	; 0x3e
    34ae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    34b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	69 f7       	brne	.-38     	; 0x3492 <main+0x1a84>
    34b8:	16 c0       	rjmp	.+44     	; 0x34e6 <main+0x1ad8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ba:	fe 01       	movw	r30, r28
    34bc:	ff 96       	adiw	r30, 0x3f	; 63
    34be:	60 81       	ld	r22, Z
    34c0:	71 81       	ldd	r23, Z+1	; 0x01
    34c2:	82 81       	ldd	r24, Z+2	; 0x02
    34c4:	93 81       	ldd	r25, Z+3	; 0x03
    34c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	9e af       	std	Y+62, r25	; 0x3e
    34d0:	8d af       	std	Y+61, r24	; 0x3d
    34d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    34d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    34d6:	9a af       	std	Y+58, r25	; 0x3a
    34d8:	89 af       	std	Y+57, r24	; 0x39
    34da:	89 ad       	ldd	r24, Y+57	; 0x39
    34dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    34de:	01 97       	sbiw	r24, 0x01	; 1
    34e0:	f1 f7       	brne	.-4      	; 0x34de <main+0x1ad0>
    34e2:	9a af       	std	Y+58, r25	; 0x3a
    34e4:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
    34e6:	e0 e3       	ldi	r30, 0x30	; 48
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	80 81       	ld	r24, Z
    34ec:	88 2f       	mov	r24, r24
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	81 70       	andi	r24, 0x01	; 1
    34f2:	90 70       	andi	r25, 0x00	; 0
    34f4:	00 97       	sbiw	r24, 0x00	; 0
    34f6:	09 f4       	brne	.+2      	; 0x34fa <main+0x1aec>
    34f8:	c0 c1       	rjmp	.+896    	; 0x387a <main+0x1e6c>
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
					break;

			}
			while(k==5)
    34fa:	80 91 a8 00 	lds	r24, 0x00A8
    34fe:	85 30       	cpi	r24, 0x05	; 5
    3500:	09 f4       	brne	.+2      	; 0x3504 <main+0x1af6>
    3502:	aa cd       	rjmp	.-1196   	; 0x3058 <main+0x164a>
    3504:	ba c1       	rjmp	.+884    	; 0x387a <main+0x1e6c>
					break;

			}
			while(k==6)
			{
				f=arr_num[o];
    3506:	80 91 a4 00 	lds	r24, 0x00A4
    350a:	99 27       	eor	r25, r25
    350c:	87 fd       	sbrc	r24, 7
    350e:	90 95       	com	r25
    3510:	fc 01       	movw	r30, r24
    3512:	e6 56       	subi	r30, 0x66	; 102
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	80 81       	ld	r24, Z
    3518:	80 93 ab 00 	sts	0x00AB, r24
				if(GET_BIT(PIND,2)==0)
    351c:	e0 e3       	ldi	r30, 0x30	; 48
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	80 81       	ld	r24, Z
    3522:	86 95       	lsr	r24
    3524:	86 95       	lsr	r24
    3526:	88 2f       	mov	r24, r24
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	81 70       	andi	r24, 0x01	; 1
    352c:	90 70       	andi	r25, 0x00	; 0
    352e:	00 97       	sbiw	r24, 0x00	; 0
    3530:	09 f0       	breq	.+2      	; 0x3534 <main+0x1b26>
    3532:	77 c0       	rjmp	.+238    	; 0x3622 <main+0x1c14>
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	a8 e4       	ldi	r26, 0x48	; 72
    353a:	b3 e4       	ldi	r27, 0x43	; 67
    353c:	8d ab       	std	Y+53, r24	; 0x35
    353e:	9e ab       	std	Y+54, r25	; 0x36
    3540:	af ab       	std	Y+55, r26	; 0x37
    3542:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3544:	6d a9       	ldd	r22, Y+53	; 0x35
    3546:	7e a9       	ldd	r23, Y+54	; 0x36
    3548:	8f a9       	ldd	r24, Y+55	; 0x37
    354a:	98 ad       	ldd	r25, Y+56	; 0x38
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	4a ef       	ldi	r20, 0xFA	; 250
    3552:	54 e4       	ldi	r21, 0x44	; 68
    3554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	89 ab       	std	Y+49, r24	; 0x31
    355e:	9a ab       	std	Y+50, r25	; 0x32
    3560:	ab ab       	std	Y+51, r26	; 0x33
    3562:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3564:	69 a9       	ldd	r22, Y+49	; 0x31
    3566:	7a a9       	ldd	r23, Y+50	; 0x32
    3568:	8b a9       	ldd	r24, Y+51	; 0x33
    356a:	9c a9       	ldd	r25, Y+52	; 0x34
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	40 e8       	ldi	r20, 0x80	; 128
    3572:	5f e3       	ldi	r21, 0x3F	; 63
    3574:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3578:	88 23       	and	r24, r24
    357a:	2c f4       	brge	.+10     	; 0x3586 <main+0x1b78>
		__ticks = 1;
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	98 ab       	std	Y+48, r25	; 0x30
    3582:	8f a7       	std	Y+47, r24	; 0x2f
    3584:	3f c0       	rjmp	.+126    	; 0x3604 <main+0x1bf6>
	else if (__tmp > 65535)
    3586:	69 a9       	ldd	r22, Y+49	; 0x31
    3588:	7a a9       	ldd	r23, Y+50	; 0x32
    358a:	8b a9       	ldd	r24, Y+51	; 0x33
    358c:	9c a9       	ldd	r25, Y+52	; 0x34
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	3f ef       	ldi	r19, 0xFF	; 255
    3592:	4f e7       	ldi	r20, 0x7F	; 127
    3594:	57 e4       	ldi	r21, 0x47	; 71
    3596:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    359a:	18 16       	cp	r1, r24
    359c:	4c f5       	brge	.+82     	; 0x35f0 <main+0x1be2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    359e:	6d a9       	ldd	r22, Y+53	; 0x35
    35a0:	7e a9       	ldd	r23, Y+54	; 0x36
    35a2:	8f a9       	ldd	r24, Y+55	; 0x37
    35a4:	98 ad       	ldd	r25, Y+56	; 0x38
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	40 e2       	ldi	r20, 0x20	; 32
    35ac:	51 e4       	ldi	r21, 0x41	; 65
    35ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	bc 01       	movw	r22, r24
    35b8:	cd 01       	movw	r24, r26
    35ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	98 ab       	std	Y+48, r25	; 0x30
    35c4:	8f a7       	std	Y+47, r24	; 0x2f
    35c6:	0f c0       	rjmp	.+30     	; 0x35e6 <main+0x1bd8>
    35c8:	88 ec       	ldi	r24, 0xC8	; 200
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	9e a7       	std	Y+46, r25	; 0x2e
    35ce:	8d a7       	std	Y+45, r24	; 0x2d
    35d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    35d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	f1 f7       	brne	.-4      	; 0x35d4 <main+0x1bc6>
    35d8:	9e a7       	std	Y+46, r25	; 0x2e
    35da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    35de:	98 a9       	ldd	r25, Y+48	; 0x30
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	98 ab       	std	Y+48, r25	; 0x30
    35e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    35e8:	98 a9       	ldd	r25, Y+48	; 0x30
    35ea:	00 97       	sbiw	r24, 0x00	; 0
    35ec:	69 f7       	brne	.-38     	; 0x35c8 <main+0x1bba>
    35ee:	14 c0       	rjmp	.+40     	; 0x3618 <main+0x1c0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f0:	69 a9       	ldd	r22, Y+49	; 0x31
    35f2:	7a a9       	ldd	r23, Y+50	; 0x32
    35f4:	8b a9       	ldd	r24, Y+51	; 0x33
    35f6:	9c a9       	ldd	r25, Y+52	; 0x34
    35f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	98 ab       	std	Y+48, r25	; 0x30
    3602:	8f a7       	std	Y+47, r24	; 0x2f
    3604:	8f a5       	ldd	r24, Y+47	; 0x2f
    3606:	98 a9       	ldd	r25, Y+48	; 0x30
    3608:	9c a7       	std	Y+44, r25	; 0x2c
    360a:	8b a7       	std	Y+43, r24	; 0x2b
    360c:	8b a5       	ldd	r24, Y+43	; 0x2b
    360e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3610:	01 97       	sbiw	r24, 0x01	; 1
    3612:	f1 f7       	brne	.-4      	; 0x3610 <main+0x1c02>
    3614:	9c a7       	std	Y+44, r25	; 0x2c
    3616:	8b a7       	std	Y+43, r24	; 0x2b
				{
					_delay_ms(200);
					o++;
    3618:	80 91 a4 00 	lds	r24, 0x00A4
    361c:	8f 5f       	subi	r24, 0xFF	; 255
    361e:	80 93 a4 00 	sts	0x00A4, r24
				}
				if(GET_BIT(PIND,1)==0)
    3622:	e0 e3       	ldi	r30, 0x30	; 48
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	80 81       	ld	r24, Z
    3628:	86 95       	lsr	r24
    362a:	88 2f       	mov	r24, r24
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	81 70       	andi	r24, 0x01	; 1
    3630:	90 70       	andi	r25, 0x00	; 0
    3632:	00 97       	sbiw	r24, 0x00	; 0
    3634:	09 f0       	breq	.+2      	; 0x3638 <main+0x1c2a>
    3636:	77 c0       	rjmp	.+238    	; 0x3726 <main+0x1d18>
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	a8 e4       	ldi	r26, 0x48	; 72
    363e:	b3 e4       	ldi	r27, 0x43	; 67
    3640:	8f a3       	std	Y+39, r24	; 0x27
    3642:	98 a7       	std	Y+40, r25	; 0x28
    3644:	a9 a7       	std	Y+41, r26	; 0x29
    3646:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3648:	6f a1       	ldd	r22, Y+39	; 0x27
    364a:	78 a5       	ldd	r23, Y+40	; 0x28
    364c:	89 a5       	ldd	r24, Y+41	; 0x29
    364e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	4a ef       	ldi	r20, 0xFA	; 250
    3656:	54 e4       	ldi	r21, 0x44	; 68
    3658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	8b a3       	std	Y+35, r24	; 0x23
    3662:	9c a3       	std	Y+36, r25	; 0x24
    3664:	ad a3       	std	Y+37, r26	; 0x25
    3666:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3668:	6b a1       	ldd	r22, Y+35	; 0x23
    366a:	7c a1       	ldd	r23, Y+36	; 0x24
    366c:	8d a1       	ldd	r24, Y+37	; 0x25
    366e:	9e a1       	ldd	r25, Y+38	; 0x26
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e8       	ldi	r20, 0x80	; 128
    3676:	5f e3       	ldi	r21, 0x3F	; 63
    3678:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    367c:	88 23       	and	r24, r24
    367e:	2c f4       	brge	.+10     	; 0x368a <main+0x1c7c>
		__ticks = 1;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	9a a3       	std	Y+34, r25	; 0x22
    3686:	89 a3       	std	Y+33, r24	; 0x21
    3688:	3f c0       	rjmp	.+126    	; 0x3708 <main+0x1cfa>
	else if (__tmp > 65535)
    368a:	6b a1       	ldd	r22, Y+35	; 0x23
    368c:	7c a1       	ldd	r23, Y+36	; 0x24
    368e:	8d a1       	ldd	r24, Y+37	; 0x25
    3690:	9e a1       	ldd	r25, Y+38	; 0x26
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	3f ef       	ldi	r19, 0xFF	; 255
    3696:	4f e7       	ldi	r20, 0x7F	; 127
    3698:	57 e4       	ldi	r21, 0x47	; 71
    369a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    369e:	18 16       	cp	r1, r24
    36a0:	4c f5       	brge	.+82     	; 0x36f4 <main+0x1ce6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a2:	6f a1       	ldd	r22, Y+39	; 0x27
    36a4:	78 a5       	ldd	r23, Y+40	; 0x28
    36a6:	89 a5       	ldd	r24, Y+41	; 0x29
    36a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e2       	ldi	r20, 0x20	; 32
    36b0:	51 e4       	ldi	r21, 0x41	; 65
    36b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	bc 01       	movw	r22, r24
    36bc:	cd 01       	movw	r24, r26
    36be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c2:	dc 01       	movw	r26, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	9a a3       	std	Y+34, r25	; 0x22
    36c8:	89 a3       	std	Y+33, r24	; 0x21
    36ca:	0f c0       	rjmp	.+30     	; 0x36ea <main+0x1cdc>
    36cc:	88 ec       	ldi	r24, 0xC8	; 200
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	98 a3       	std	Y+32, r25	; 0x20
    36d2:	8f 8f       	std	Y+31, r24	; 0x1f
    36d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36d6:	98 a1       	ldd	r25, Y+32	; 0x20
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	f1 f7       	brne	.-4      	; 0x36d8 <main+0x1cca>
    36dc:	98 a3       	std	Y+32, r25	; 0x20
    36de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e0:	89 a1       	ldd	r24, Y+33	; 0x21
    36e2:	9a a1       	ldd	r25, Y+34	; 0x22
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	9a a3       	std	Y+34, r25	; 0x22
    36e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ea:	89 a1       	ldd	r24, Y+33	; 0x21
    36ec:	9a a1       	ldd	r25, Y+34	; 0x22
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	69 f7       	brne	.-38     	; 0x36cc <main+0x1cbe>
    36f2:	14 c0       	rjmp	.+40     	; 0x371c <main+0x1d0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f4:	6b a1       	ldd	r22, Y+35	; 0x23
    36f6:	7c a1       	ldd	r23, Y+36	; 0x24
    36f8:	8d a1       	ldd	r24, Y+37	; 0x25
    36fa:	9e a1       	ldd	r25, Y+38	; 0x26
    36fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3700:	dc 01       	movw	r26, r24
    3702:	cb 01       	movw	r24, r22
    3704:	9a a3       	std	Y+34, r25	; 0x22
    3706:	89 a3       	std	Y+33, r24	; 0x21
    3708:	89 a1       	ldd	r24, Y+33	; 0x21
    370a:	9a a1       	ldd	r25, Y+34	; 0x22
    370c:	9e 8f       	std	Y+30, r25	; 0x1e
    370e:	8d 8f       	std	Y+29, r24	; 0x1d
    3710:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3712:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	f1 f7       	brne	.-4      	; 0x3714 <main+0x1d06>
    3718:	9e 8f       	std	Y+30, r25	; 0x1e
    371a:	8d 8f       	std	Y+29, r24	; 0x1d
				{
					_delay_ms(200);
					o--;
    371c:	80 91 a4 00 	lds	r24, 0x00A4
    3720:	81 50       	subi	r24, 0x01	; 1
    3722:	80 93 a4 00 	sts	0x00A4, r24
				}
				if(o>9)
    3726:	80 91 a4 00 	lds	r24, 0x00A4
    372a:	8a 30       	cpi	r24, 0x0A	; 10
    372c:	1c f0       	brlt	.+6      	; 0x3734 <main+0x1d26>
					o=9;
    372e:	89 e0       	ldi	r24, 0x09	; 9
    3730:	80 93 a4 00 	sts	0x00A4, r24
				if(i==2 && j==4)
    3734:	80 91 aa 00 	lds	r24, 0x00AA
    3738:	82 30       	cpi	r24, 0x02	; 2
    373a:	31 f4       	brne	.+12     	; 0x3748 <main+0x1d3a>
    373c:	80 91 a9 00 	lds	r24, 0x00A9
    3740:	84 30       	cpi	r24, 0x04	; 4
    3742:	11 f4       	brne	.+4      	; 0x3748 <main+0x1d3a>
					o=0;
    3744:	10 92 a4 00 	sts	0x00A4, r1
				CLCD_voidGoToXY(0,7);
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	67 e0       	ldi	r22, 0x07	; 7
    374c:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
				CLCD_voidWriteNumber(f);
    3750:	80 91 ab 00 	lds	r24, 0x00AB
    3754:	99 27       	eor	r25, r25
    3756:	87 fd       	sbrc	r24, 7
    3758:	90 95       	com	r25
    375a:	a9 2f       	mov	r26, r25
    375c:	b9 2f       	mov	r27, r25
    375e:	bc 01       	movw	r22, r24
    3760:	cd 01       	movw	r24, r26
    3762:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
				CLCD_voidGoToXY(1,6);
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	66 e0       	ldi	r22, 0x06	; 6
    376a:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
				CLCD_voidSendData(' ');
    376e:	80 e2       	ldi	r24, 0x20	; 32
    3770:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
				CLCD_voidWriteSpecialCharacter(arr_arrow,0,1,7);
    3774:	82 e9       	ldi	r24, 0x92	; 146
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	60 e0       	ldi	r22, 0x00	; 0
    377a:	41 e0       	ldi	r20, 0x01	; 1
    377c:	27 e0       	ldi	r18, 0x07	; 7
    377e:	0e 94 18 08 	call	0x1030	; 0x1030 <CLCD_voidWriteSpecialCharacter>
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	a8 ec       	ldi	r26, 0xC8	; 200
    3788:	b1 e4       	ldi	r27, 0x41	; 65
    378a:	89 8f       	std	Y+25, r24	; 0x19
    378c:	9a 8f       	std	Y+26, r25	; 0x1a
    378e:	ab 8f       	std	Y+27, r26	; 0x1b
    3790:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3792:	69 8d       	ldd	r22, Y+25	; 0x19
    3794:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3796:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3798:	9c 8d       	ldd	r25, Y+28	; 0x1c
    379a:	20 e0       	ldi	r18, 0x00	; 0
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	4a ef       	ldi	r20, 0xFA	; 250
    37a0:	54 e4       	ldi	r21, 0x44	; 68
    37a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	8d 8b       	std	Y+21, r24	; 0x15
    37ac:	9e 8b       	std	Y+22, r25	; 0x16
    37ae:	af 8b       	std	Y+23, r26	; 0x17
    37b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37b2:	6d 89       	ldd	r22, Y+21	; 0x15
    37b4:	7e 89       	ldd	r23, Y+22	; 0x16
    37b6:	8f 89       	ldd	r24, Y+23	; 0x17
    37b8:	98 8d       	ldd	r25, Y+24	; 0x18
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	40 e8       	ldi	r20, 0x80	; 128
    37c0:	5f e3       	ldi	r21, 0x3F	; 63
    37c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37c6:	88 23       	and	r24, r24
    37c8:	2c f4       	brge	.+10     	; 0x37d4 <main+0x1dc6>
		__ticks = 1;
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	9c 8b       	std	Y+20, r25	; 0x14
    37d0:	8b 8b       	std	Y+19, r24	; 0x13
    37d2:	3f c0       	rjmp	.+126    	; 0x3852 <main+0x1e44>
	else if (__tmp > 65535)
    37d4:	6d 89       	ldd	r22, Y+21	; 0x15
    37d6:	7e 89       	ldd	r23, Y+22	; 0x16
    37d8:	8f 89       	ldd	r24, Y+23	; 0x17
    37da:	98 8d       	ldd	r25, Y+24	; 0x18
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	3f ef       	ldi	r19, 0xFF	; 255
    37e0:	4f e7       	ldi	r20, 0x7F	; 127
    37e2:	57 e4       	ldi	r21, 0x47	; 71
    37e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37e8:	18 16       	cp	r1, r24
    37ea:	4c f5       	brge	.+82     	; 0x383e <main+0x1e30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ec:	69 8d       	ldd	r22, Y+25	; 0x19
    37ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	40 e2       	ldi	r20, 0x20	; 32
    37fa:	51 e4       	ldi	r21, 0x41	; 65
    37fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22
    3804:	bc 01       	movw	r22, r24
    3806:	cd 01       	movw	r24, r26
    3808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	9c 8b       	std	Y+20, r25	; 0x14
    3812:	8b 8b       	std	Y+19, r24	; 0x13
    3814:	0f c0       	rjmp	.+30     	; 0x3834 <main+0x1e26>
    3816:	88 ec       	ldi	r24, 0xC8	; 200
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	9a 8b       	std	Y+18, r25	; 0x12
    381c:	89 8b       	std	Y+17, r24	; 0x11
    381e:	89 89       	ldd	r24, Y+17	; 0x11
    3820:	9a 89       	ldd	r25, Y+18	; 0x12
    3822:	01 97       	sbiw	r24, 0x01	; 1
    3824:	f1 f7       	brne	.-4      	; 0x3822 <main+0x1e14>
    3826:	9a 8b       	std	Y+18, r25	; 0x12
    3828:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    382a:	8b 89       	ldd	r24, Y+19	; 0x13
    382c:	9c 89       	ldd	r25, Y+20	; 0x14
    382e:	01 97       	sbiw	r24, 0x01	; 1
    3830:	9c 8b       	std	Y+20, r25	; 0x14
    3832:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3834:	8b 89       	ldd	r24, Y+19	; 0x13
    3836:	9c 89       	ldd	r25, Y+20	; 0x14
    3838:	00 97       	sbiw	r24, 0x00	; 0
    383a:	69 f7       	brne	.-38     	; 0x3816 <main+0x1e08>
    383c:	14 c0       	rjmp	.+40     	; 0x3866 <main+0x1e58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383e:	6d 89       	ldd	r22, Y+21	; 0x15
    3840:	7e 89       	ldd	r23, Y+22	; 0x16
    3842:	8f 89       	ldd	r24, Y+23	; 0x17
    3844:	98 8d       	ldd	r25, Y+24	; 0x18
    3846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	9c 8b       	std	Y+20, r25	; 0x14
    3850:	8b 8b       	std	Y+19, r24	; 0x13
    3852:	8b 89       	ldd	r24, Y+19	; 0x13
    3854:	9c 89       	ldd	r25, Y+20	; 0x14
    3856:	98 8b       	std	Y+16, r25	; 0x10
    3858:	8f 87       	std	Y+15, r24	; 0x0f
    385a:	8f 85       	ldd	r24, Y+15	; 0x0f
    385c:	98 89       	ldd	r25, Y+16	; 0x10
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	f1 f7       	brne	.-4      	; 0x385e <main+0x1e50>
    3862:	98 8b       	std	Y+16, r25	; 0x10
    3864:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
    3866:	e0 e3       	ldi	r30, 0x30	; 48
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	80 81       	ld	r24, Z
    386c:	88 2f       	mov	r24, r24
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	81 70       	andi	r24, 0x01	; 1
    3872:	90 70       	andi	r25, 0x00	; 0
    3874:	00 97       	sbiw	r24, 0x00	; 0
    3876:	09 f4       	brne	.+2      	; 0x387a <main+0x1e6c>
    3878:	08 c3       	rjmp	.+1552   	; 0x3e8a <main+0x247c>
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
					break;

			}
			while(k==6)
    387a:	80 91 a8 00 	lds	r24, 0x00A8
    387e:	86 30       	cpi	r24, 0x06	; 6
    3880:	09 f4       	brne	.+2      	; 0x3884 <main+0x1e76>
    3882:	41 ce       	rjmp	.-894    	; 0x3506 <main+0x1af8>
    3884:	02 c3       	rjmp	.+1540   	; 0x3e8a <main+0x247c>
					break;

			}
			while(k==7)
			{
				CLCD_voidGoToXY(1,7);
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	67 e0       	ldi	r22, 0x07	; 7
    388a:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
				CLCD_voidSendData(' ');
    388e:	80 e2       	ldi	r24, 0x20	; 32
    3890:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
				if(o!=0)
    3894:	80 91 a4 00 	lds	r24, 0x00A4
    3898:	88 23       	and	r24, r24
    389a:	09 f4       	brne	.+2      	; 0x389e <main+0x1e90>
    389c:	a0 c0       	rjmp	.+320    	; 0x39de <main+0x1fd0>
				{
					o--;
    389e:	80 91 a4 00 	lds	r24, 0x00A4
    38a2:	81 50       	subi	r24, 0x01	; 1
    38a4:	80 93 a4 00 	sts	0x00A4, r24
					e=arr_num[n];
    38a8:	80 91 a5 00 	lds	r24, 0x00A5
    38ac:	99 27       	eor	r25, r25
    38ae:	87 fd       	sbrc	r24, 7
    38b0:	90 95       	com	r25
    38b2:	fc 01       	movw	r30, r24
    38b4:	e6 56       	subi	r30, 0x66	; 102
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	80 81       	ld	r24, Z
    38ba:	80 93 ac 00 	sts	0x00AC, r24
					CLCD_voidGoToXY(0,6);
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	66 e0       	ldi	r22, 0x06	; 6
    38c2:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					f=arr_num[o];
    38c6:	80 91 a4 00 	lds	r24, 0x00A4
    38ca:	99 27       	eor	r25, r25
    38cc:	87 fd       	sbrc	r24, 7
    38ce:	90 95       	com	r25
    38d0:	fc 01       	movw	r30, r24
    38d2:	e6 56       	subi	r30, 0x66	; 102
    38d4:	ff 4f       	sbci	r31, 0xFF	; 255
    38d6:	80 81       	ld	r24, Z
    38d8:	80 93 ab 00 	sts	0x00AB, r24
					CLCD_voidGoToXY(0,7);
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	67 e0       	ldi	r22, 0x07	; 7
    38e0:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(f);
    38e4:	80 91 ab 00 	lds	r24, 0x00AB
    38e8:	99 27       	eor	r25, r25
    38ea:	87 fd       	sbrc	r24, 7
    38ec:	90 95       	com	r25
    38ee:	a9 2f       	mov	r26, r25
    38f0:	b9 2f       	mov	r27, r25
    38f2:	bc 01       	movw	r22, r24
    38f4:	cd 01       	movw	r24, r26
    38f6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	90 e4       	ldi	r25, 0x40	; 64
    38fe:	ab e3       	ldi	r26, 0x3B	; 59
    3900:	b4 e4       	ldi	r27, 0x44	; 68
    3902:	8b 87       	std	Y+11, r24	; 0x0b
    3904:	9c 87       	std	Y+12, r25	; 0x0c
    3906:	ad 87       	std	Y+13, r26	; 0x0d
    3908:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    390a:	6b 85       	ldd	r22, Y+11	; 0x0b
    390c:	7c 85       	ldd	r23, Y+12	; 0x0c
    390e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3910:	9e 85       	ldd	r25, Y+14	; 0x0e
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	4a ef       	ldi	r20, 0xFA	; 250
    3918:	54 e4       	ldi	r21, 0x44	; 68
    391a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	8f 83       	std	Y+7, r24	; 0x07
    3924:	98 87       	std	Y+8, r25	; 0x08
    3926:	a9 87       	std	Y+9, r26	; 0x09
    3928:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    392a:	6f 81       	ldd	r22, Y+7	; 0x07
    392c:	78 85       	ldd	r23, Y+8	; 0x08
    392e:	89 85       	ldd	r24, Y+9	; 0x09
    3930:	9a 85       	ldd	r25, Y+10	; 0x0a
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	40 e8       	ldi	r20, 0x80	; 128
    3938:	5f e3       	ldi	r21, 0x3F	; 63
    393a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    393e:	88 23       	and	r24, r24
    3940:	2c f4       	brge	.+10     	; 0x394c <main+0x1f3e>
		__ticks = 1;
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	9e 83       	std	Y+6, r25	; 0x06
    3948:	8d 83       	std	Y+5, r24	; 0x05
    394a:	3f c0       	rjmp	.+126    	; 0x39ca <main+0x1fbc>
	else if (__tmp > 65535)
    394c:	6f 81       	ldd	r22, Y+7	; 0x07
    394e:	78 85       	ldd	r23, Y+8	; 0x08
    3950:	89 85       	ldd	r24, Y+9	; 0x09
    3952:	9a 85       	ldd	r25, Y+10	; 0x0a
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	3f ef       	ldi	r19, 0xFF	; 255
    3958:	4f e7       	ldi	r20, 0x7F	; 127
    395a:	57 e4       	ldi	r21, 0x47	; 71
    395c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3960:	18 16       	cp	r1, r24
    3962:	4c f5       	brge	.+82     	; 0x39b6 <main+0x1fa8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3964:	6b 85       	ldd	r22, Y+11	; 0x0b
    3966:	7c 85       	ldd	r23, Y+12	; 0x0c
    3968:	8d 85       	ldd	r24, Y+13	; 0x0d
    396a:	9e 85       	ldd	r25, Y+14	; 0x0e
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	40 e2       	ldi	r20, 0x20	; 32
    3972:	51 e4       	ldi	r21, 0x41	; 65
    3974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	bc 01       	movw	r22, r24
    397e:	cd 01       	movw	r24, r26
    3980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	9e 83       	std	Y+6, r25	; 0x06
    398a:	8d 83       	std	Y+5, r24	; 0x05
    398c:	0f c0       	rjmp	.+30     	; 0x39ac <main+0x1f9e>
    398e:	88 ec       	ldi	r24, 0xC8	; 200
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	9c 83       	std	Y+4, r25	; 0x04
    3994:	8b 83       	std	Y+3, r24	; 0x03
    3996:	8b 81       	ldd	r24, Y+3	; 0x03
    3998:	9c 81       	ldd	r25, Y+4	; 0x04
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	f1 f7       	brne	.-4      	; 0x399a <main+0x1f8c>
    399e:	9c 83       	std	Y+4, r25	; 0x04
    39a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a2:	8d 81       	ldd	r24, Y+5	; 0x05
    39a4:	9e 81       	ldd	r25, Y+6	; 0x06
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	9e 83       	std	Y+6, r25	; 0x06
    39aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ac:	8d 81       	ldd	r24, Y+5	; 0x05
    39ae:	9e 81       	ldd	r25, Y+6	; 0x06
    39b0:	00 97       	sbiw	r24, 0x00	; 0
    39b2:	69 f7       	brne	.-38     	; 0x398e <main+0x1f80>
    39b4:	14 c0       	rjmp	.+40     	; 0x39de <main+0x1fd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b6:	6f 81       	ldd	r22, Y+7	; 0x07
    39b8:	78 85       	ldd	r23, Y+8	; 0x08
    39ba:	89 85       	ldd	r24, Y+9	; 0x09
    39bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	9e 83       	std	Y+6, r25	; 0x06
    39c8:	8d 83       	std	Y+5, r24	; 0x05
    39ca:	8d 81       	ldd	r24, Y+5	; 0x05
    39cc:	9e 81       	ldd	r25, Y+6	; 0x06
    39ce:	9a 83       	std	Y+2, r25	; 0x02
    39d0:	89 83       	std	Y+1, r24	; 0x01
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	9a 81       	ldd	r25, Y+2	; 0x02
    39d6:	01 97       	sbiw	r24, 0x01	; 1
    39d8:	f1 f7       	brne	.-4      	; 0x39d6 <main+0x1fc8>
    39da:	9a 83       	std	Y+2, r25	; 0x02
    39dc:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(749);
				}

				if(n>0 && o==0)
    39de:	80 91 a5 00 	lds	r24, 0x00A5
    39e2:	18 16       	cp	r1, r24
    39e4:	34 f5       	brge	.+76     	; 0x3a32 <main+0x2024>
    39e6:	80 91 a4 00 	lds	r24, 0x00A4
    39ea:	88 23       	and	r24, r24
    39ec:	11 f5       	brne	.+68     	; 0x3a32 <main+0x2024>
				{
					n--;
    39ee:	80 91 a5 00 	lds	r24, 0x00A5
    39f2:	81 50       	subi	r24, 0x01	; 1
    39f4:	80 93 a5 00 	sts	0x00A5, r24
					e=arr_num[n];
    39f8:	80 91 a5 00 	lds	r24, 0x00A5
    39fc:	99 27       	eor	r25, r25
    39fe:	87 fd       	sbrc	r24, 7
    3a00:	90 95       	com	r25
    3a02:	fc 01       	movw	r30, r24
    3a04:	e6 56       	subi	r30, 0x66	; 102
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	80 81       	ld	r24, Z
    3a0a:	80 93 ac 00 	sts	0x00AC, r24
					CLCD_voidGoToXY(0,6);
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	66 e0       	ldi	r22, 0x06	; 6
    3a12:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(e);
    3a16:	80 91 ac 00 	lds	r24, 0x00AC
    3a1a:	99 27       	eor	r25, r25
    3a1c:	87 fd       	sbrc	r24, 7
    3a1e:	90 95       	com	r25
    3a20:	a9 2f       	mov	r26, r25
    3a22:	b9 2f       	mov	r27, r25
    3a24:	bc 01       	movw	r22, r24
    3a26:	cd 01       	movw	r24, r26
    3a28:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					o=10;
    3a2c:	8a e0       	ldi	r24, 0x0A	; 10
    3a2e:	80 93 a4 00 	sts	0x00A4, r24
				}
				if(m>0 && n==0 && o==0)
    3a32:	80 91 a6 00 	lds	r24, 0x00A6
    3a36:	18 16       	cp	r1, r24
    3a38:	0c f0       	brlt	.+2      	; 0x3a3c <main+0x202e>
    3a3a:	49 c0       	rjmp	.+146    	; 0x3ace <main+0x20c0>
    3a3c:	80 91 a5 00 	lds	r24, 0x00A5
    3a40:	88 23       	and	r24, r24
    3a42:	09 f0       	breq	.+2      	; 0x3a46 <main+0x2038>
    3a44:	44 c0       	rjmp	.+136    	; 0x3ace <main+0x20c0>
    3a46:	80 91 a4 00 	lds	r24, 0x00A4
    3a4a:	88 23       	and	r24, r24
    3a4c:	09 f0       	breq	.+2      	; 0x3a50 <main+0x2042>
    3a4e:	3f c0       	rjmp	.+126    	; 0x3ace <main+0x20c0>
				{
					m--;
    3a50:	80 91 a6 00 	lds	r24, 0x00A6
    3a54:	81 50       	subi	r24, 0x01	; 1
    3a56:	80 93 a6 00 	sts	0x00A6, r24
					d=arr_num[m];
    3a5a:	80 91 a6 00 	lds	r24, 0x00A6
    3a5e:	99 27       	eor	r25, r25
    3a60:	87 fd       	sbrc	r24, 7
    3a62:	90 95       	com	r25
    3a64:	fc 01       	movw	r30, r24
    3a66:	e6 56       	subi	r30, 0x66	; 102
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	80 81       	ld	r24, Z
    3a6c:	80 93 ad 00 	sts	0x00AD, r24
					CLCD_voidGoToXY(0,4);
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	64 e0       	ldi	r22, 0x04	; 4
    3a74:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(m);
    3a78:	80 91 a6 00 	lds	r24, 0x00A6
    3a7c:	99 27       	eor	r25, r25
    3a7e:	87 fd       	sbrc	r24, 7
    3a80:	90 95       	com	r25
    3a82:	a9 2f       	mov	r26, r25
    3a84:	b9 2f       	mov	r27, r25
    3a86:	bc 01       	movw	r22, r24
    3a88:	cd 01       	movw	r24, r26
    3a8a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					n=5;
    3a8e:	85 e0       	ldi	r24, 0x05	; 5
    3a90:	80 93 a5 00 	sts	0x00A5, r24
					e=arr_num[n];
    3a94:	80 91 a5 00 	lds	r24, 0x00A5
    3a98:	99 27       	eor	r25, r25
    3a9a:	87 fd       	sbrc	r24, 7
    3a9c:	90 95       	com	r25
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	e6 56       	subi	r30, 0x66	; 102
    3aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa4:	80 81       	ld	r24, Z
    3aa6:	80 93 ac 00 	sts	0x00AC, r24
					CLCD_voidGoToXY(0,6);
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	66 e0       	ldi	r22, 0x06	; 6
    3aae:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(e);
    3ab2:	80 91 ac 00 	lds	r24, 0x00AC
    3ab6:	99 27       	eor	r25, r25
    3ab8:	87 fd       	sbrc	r24, 7
    3aba:	90 95       	com	r25
    3abc:	a9 2f       	mov	r26, r25
    3abe:	b9 2f       	mov	r27, r25
    3ac0:	bc 01       	movw	r22, r24
    3ac2:	cd 01       	movw	r24, r26
    3ac4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					o=10;
    3ac8:	8a e0       	ldi	r24, 0x0A	; 10
    3aca:	80 93 a4 00 	sts	0x00A4, r24
				}
				if(l>0 && m==0 && n==0 && o==0)
    3ace:	80 91 a7 00 	lds	r24, 0x00A7
    3ad2:	18 16       	cp	r1, r24
    3ad4:	0c f0       	brlt	.+2      	; 0x3ad8 <main+0x20ca>
    3ad6:	6b c0       	rjmp	.+214    	; 0x3bae <main+0x21a0>
    3ad8:	80 91 a6 00 	lds	r24, 0x00A6
    3adc:	88 23       	and	r24, r24
    3ade:	09 f0       	breq	.+2      	; 0x3ae2 <main+0x20d4>
    3ae0:	66 c0       	rjmp	.+204    	; 0x3bae <main+0x21a0>
    3ae2:	80 91 a5 00 	lds	r24, 0x00A5
    3ae6:	88 23       	and	r24, r24
    3ae8:	09 f0       	breq	.+2      	; 0x3aec <main+0x20de>
    3aea:	61 c0       	rjmp	.+194    	; 0x3bae <main+0x21a0>
    3aec:	80 91 a4 00 	lds	r24, 0x00A4
    3af0:	88 23       	and	r24, r24
    3af2:	09 f0       	breq	.+2      	; 0x3af6 <main+0x20e8>
    3af4:	5c c0       	rjmp	.+184    	; 0x3bae <main+0x21a0>
				{
					l--;
    3af6:	80 91 a7 00 	lds	r24, 0x00A7
    3afa:	81 50       	subi	r24, 0x01	; 1
    3afc:	80 93 a7 00 	sts	0x00A7, r24
					c=arr_num[l];
    3b00:	80 91 a7 00 	lds	r24, 0x00A7
    3b04:	99 27       	eor	r25, r25
    3b06:	87 fd       	sbrc	r24, 7
    3b08:	90 95       	com	r25
    3b0a:	fc 01       	movw	r30, r24
    3b0c:	e6 56       	subi	r30, 0x66	; 102
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	80 81       	ld	r24, Z
    3b12:	80 93 ae 00 	sts	0x00AE, r24
					CLCD_voidGoToXY(0,3);
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	63 e0       	ldi	r22, 0x03	; 3
    3b1a:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(c);
    3b1e:	80 91 ae 00 	lds	r24, 0x00AE
    3b22:	99 27       	eor	r25, r25
    3b24:	87 fd       	sbrc	r24, 7
    3b26:	90 95       	com	r25
    3b28:	a9 2f       	mov	r26, r25
    3b2a:	b9 2f       	mov	r27, r25
    3b2c:	bc 01       	movw	r22, r24
    3b2e:	cd 01       	movw	r24, r26
    3b30:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					m=9;
    3b34:	89 e0       	ldi	r24, 0x09	; 9
    3b36:	80 93 a6 00 	sts	0x00A6, r24
					d=arr_num[m];
    3b3a:	80 91 a6 00 	lds	r24, 0x00A6
    3b3e:	99 27       	eor	r25, r25
    3b40:	87 fd       	sbrc	r24, 7
    3b42:	90 95       	com	r25
    3b44:	fc 01       	movw	r30, r24
    3b46:	e6 56       	subi	r30, 0x66	; 102
    3b48:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4a:	80 81       	ld	r24, Z
    3b4c:	80 93 ad 00 	sts	0x00AD, r24
					CLCD_voidGoToXY(0,4);
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	64 e0       	ldi	r22, 0x04	; 4
    3b54:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(m);
    3b58:	80 91 a6 00 	lds	r24, 0x00A6
    3b5c:	99 27       	eor	r25, r25
    3b5e:	87 fd       	sbrc	r24, 7
    3b60:	90 95       	com	r25
    3b62:	a9 2f       	mov	r26, r25
    3b64:	b9 2f       	mov	r27, r25
    3b66:	bc 01       	movw	r22, r24
    3b68:	cd 01       	movw	r24, r26
    3b6a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					n=5;
    3b6e:	85 e0       	ldi	r24, 0x05	; 5
    3b70:	80 93 a5 00 	sts	0x00A5, r24
					e=arr_num[n];
    3b74:	80 91 a5 00 	lds	r24, 0x00A5
    3b78:	99 27       	eor	r25, r25
    3b7a:	87 fd       	sbrc	r24, 7
    3b7c:	90 95       	com	r25
    3b7e:	fc 01       	movw	r30, r24
    3b80:	e6 56       	subi	r30, 0x66	; 102
    3b82:	ff 4f       	sbci	r31, 0xFF	; 255
    3b84:	80 81       	ld	r24, Z
    3b86:	80 93 ac 00 	sts	0x00AC, r24
					CLCD_voidGoToXY(0,6);
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	66 e0       	ldi	r22, 0x06	; 6
    3b8e:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(e);
    3b92:	80 91 ac 00 	lds	r24, 0x00AC
    3b96:	99 27       	eor	r25, r25
    3b98:	87 fd       	sbrc	r24, 7
    3b9a:	90 95       	com	r25
    3b9c:	a9 2f       	mov	r26, r25
    3b9e:	b9 2f       	mov	r27, r25
    3ba0:	bc 01       	movw	r22, r24
    3ba2:	cd 01       	movw	r24, r26
    3ba4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					o=10;
    3ba8:	8a e0       	ldi	r24, 0x0A	; 10
    3baa:	80 93 a4 00 	sts	0x00A4, r24
				}
				if(j>0 && l==0 && m==0 && n==0 && o==0)
    3bae:	80 91 a9 00 	lds	r24, 0x00A9
    3bb2:	18 16       	cp	r1, r24
    3bb4:	0c f0       	brlt	.+2      	; 0x3bb8 <main+0x21aa>
    3bb6:	8d c0       	rjmp	.+282    	; 0x3cd2 <main+0x22c4>
    3bb8:	80 91 a7 00 	lds	r24, 0x00A7
    3bbc:	88 23       	and	r24, r24
    3bbe:	09 f0       	breq	.+2      	; 0x3bc2 <main+0x21b4>
    3bc0:	88 c0       	rjmp	.+272    	; 0x3cd2 <main+0x22c4>
    3bc2:	80 91 a6 00 	lds	r24, 0x00A6
    3bc6:	88 23       	and	r24, r24
    3bc8:	09 f0       	breq	.+2      	; 0x3bcc <main+0x21be>
    3bca:	83 c0       	rjmp	.+262    	; 0x3cd2 <main+0x22c4>
    3bcc:	80 91 a5 00 	lds	r24, 0x00A5
    3bd0:	88 23       	and	r24, r24
    3bd2:	09 f0       	breq	.+2      	; 0x3bd6 <main+0x21c8>
    3bd4:	7e c0       	rjmp	.+252    	; 0x3cd2 <main+0x22c4>
    3bd6:	80 91 a4 00 	lds	r24, 0x00A4
    3bda:	88 23       	and	r24, r24
    3bdc:	09 f0       	breq	.+2      	; 0x3be0 <main+0x21d2>
    3bde:	79 c0       	rjmp	.+242    	; 0x3cd2 <main+0x22c4>
				{
					j--;
    3be0:	80 91 a9 00 	lds	r24, 0x00A9
    3be4:	81 50       	subi	r24, 0x01	; 1
    3be6:	80 93 a9 00 	sts	0x00A9, r24
					b=arr_num[j];
    3bea:	80 91 a9 00 	lds	r24, 0x00A9
    3bee:	99 27       	eor	r25, r25
    3bf0:	87 fd       	sbrc	r24, 7
    3bf2:	90 95       	com	r25
    3bf4:	fc 01       	movw	r30, r24
    3bf6:	e6 56       	subi	r30, 0x66	; 102
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	80 81       	ld	r24, Z
    3bfc:	80 93 af 00 	sts	0x00AF, r24
					CLCD_voidGoToXY(0,1);
    3c00:	80 e0       	ldi	r24, 0x00	; 0
    3c02:	61 e0       	ldi	r22, 0x01	; 1
    3c04:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(b);
    3c08:	80 91 af 00 	lds	r24, 0x00AF
    3c0c:	99 27       	eor	r25, r25
    3c0e:	87 fd       	sbrc	r24, 7
    3c10:	90 95       	com	r25
    3c12:	a9 2f       	mov	r26, r25
    3c14:	b9 2f       	mov	r27, r25
    3c16:	bc 01       	movw	r22, r24
    3c18:	cd 01       	movw	r24, r26
    3c1a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					l=5;
    3c1e:	85 e0       	ldi	r24, 0x05	; 5
    3c20:	80 93 a7 00 	sts	0x00A7, r24
					c=arr_num[l];
    3c24:	80 91 a7 00 	lds	r24, 0x00A7
    3c28:	99 27       	eor	r25, r25
    3c2a:	87 fd       	sbrc	r24, 7
    3c2c:	90 95       	com	r25
    3c2e:	fc 01       	movw	r30, r24
    3c30:	e6 56       	subi	r30, 0x66	; 102
    3c32:	ff 4f       	sbci	r31, 0xFF	; 255
    3c34:	80 81       	ld	r24, Z
    3c36:	80 93 ae 00 	sts	0x00AE, r24
					CLCD_voidGoToXY(0,3);
    3c3a:	80 e0       	ldi	r24, 0x00	; 0
    3c3c:	63 e0       	ldi	r22, 0x03	; 3
    3c3e:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(c);
    3c42:	80 91 ae 00 	lds	r24, 0x00AE
    3c46:	99 27       	eor	r25, r25
    3c48:	87 fd       	sbrc	r24, 7
    3c4a:	90 95       	com	r25
    3c4c:	a9 2f       	mov	r26, r25
    3c4e:	b9 2f       	mov	r27, r25
    3c50:	bc 01       	movw	r22, r24
    3c52:	cd 01       	movw	r24, r26
    3c54:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					m=9;
    3c58:	89 e0       	ldi	r24, 0x09	; 9
    3c5a:	80 93 a6 00 	sts	0x00A6, r24
					d=arr_num[m];
    3c5e:	80 91 a6 00 	lds	r24, 0x00A6
    3c62:	99 27       	eor	r25, r25
    3c64:	87 fd       	sbrc	r24, 7
    3c66:	90 95       	com	r25
    3c68:	fc 01       	movw	r30, r24
    3c6a:	e6 56       	subi	r30, 0x66	; 102
    3c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6e:	80 81       	ld	r24, Z
    3c70:	80 93 ad 00 	sts	0x00AD, r24
					CLCD_voidGoToXY(0,4);
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	64 e0       	ldi	r22, 0x04	; 4
    3c78:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(m);
    3c7c:	80 91 a6 00 	lds	r24, 0x00A6
    3c80:	99 27       	eor	r25, r25
    3c82:	87 fd       	sbrc	r24, 7
    3c84:	90 95       	com	r25
    3c86:	a9 2f       	mov	r26, r25
    3c88:	b9 2f       	mov	r27, r25
    3c8a:	bc 01       	movw	r22, r24
    3c8c:	cd 01       	movw	r24, r26
    3c8e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					n=5;
    3c92:	85 e0       	ldi	r24, 0x05	; 5
    3c94:	80 93 a5 00 	sts	0x00A5, r24
					e=arr_num[n];
    3c98:	80 91 a5 00 	lds	r24, 0x00A5
    3c9c:	99 27       	eor	r25, r25
    3c9e:	87 fd       	sbrc	r24, 7
    3ca0:	90 95       	com	r25
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	e6 56       	subi	r30, 0x66	; 102
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	80 81       	ld	r24, Z
    3caa:	80 93 ac 00 	sts	0x00AC, r24
					CLCD_voidGoToXY(0,6);
    3cae:	80 e0       	ldi	r24, 0x00	; 0
    3cb0:	66 e0       	ldi	r22, 0x06	; 6
    3cb2:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(e);
    3cb6:	80 91 ac 00 	lds	r24, 0x00AC
    3cba:	99 27       	eor	r25, r25
    3cbc:	87 fd       	sbrc	r24, 7
    3cbe:	90 95       	com	r25
    3cc0:	a9 2f       	mov	r26, r25
    3cc2:	b9 2f       	mov	r27, r25
    3cc4:	bc 01       	movw	r22, r24
    3cc6:	cd 01       	movw	r24, r26
    3cc8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					o=10;
    3ccc:	8a e0       	ldi	r24, 0x0A	; 10
    3cce:	80 93 a4 00 	sts	0x00A4, r24
				}
				if(i>0 && j==0 && l==0 && m==0 && n==0 && o==0)
    3cd2:	80 91 aa 00 	lds	r24, 0x00AA
    3cd6:	18 16       	cp	r1, r24
    3cd8:	0c f0       	brlt	.+2      	; 0x3cdc <main+0x22ce>
    3cda:	af c0       	rjmp	.+350    	; 0x3e3a <main+0x242c>
    3cdc:	80 91 a9 00 	lds	r24, 0x00A9
    3ce0:	88 23       	and	r24, r24
    3ce2:	09 f0       	breq	.+2      	; 0x3ce6 <main+0x22d8>
    3ce4:	aa c0       	rjmp	.+340    	; 0x3e3a <main+0x242c>
    3ce6:	80 91 a7 00 	lds	r24, 0x00A7
    3cea:	88 23       	and	r24, r24
    3cec:	09 f0       	breq	.+2      	; 0x3cf0 <main+0x22e2>
    3cee:	a5 c0       	rjmp	.+330    	; 0x3e3a <main+0x242c>
    3cf0:	80 91 a6 00 	lds	r24, 0x00A6
    3cf4:	88 23       	and	r24, r24
    3cf6:	09 f0       	breq	.+2      	; 0x3cfa <main+0x22ec>
    3cf8:	a0 c0       	rjmp	.+320    	; 0x3e3a <main+0x242c>
    3cfa:	80 91 a5 00 	lds	r24, 0x00A5
    3cfe:	88 23       	and	r24, r24
    3d00:	09 f0       	breq	.+2      	; 0x3d04 <main+0x22f6>
    3d02:	9b c0       	rjmp	.+310    	; 0x3e3a <main+0x242c>
    3d04:	80 91 a4 00 	lds	r24, 0x00A4
    3d08:	88 23       	and	r24, r24
    3d0a:	09 f0       	breq	.+2      	; 0x3d0e <main+0x2300>
    3d0c:	96 c0       	rjmp	.+300    	; 0x3e3a <main+0x242c>
				{
					i--;
    3d0e:	80 91 aa 00 	lds	r24, 0x00AA
    3d12:	81 50       	subi	r24, 0x01	; 1
    3d14:	80 93 aa 00 	sts	0x00AA, r24
					a=arr_num[i];
    3d18:	80 91 aa 00 	lds	r24, 0x00AA
    3d1c:	99 27       	eor	r25, r25
    3d1e:	87 fd       	sbrc	r24, 7
    3d20:	90 95       	com	r25
    3d22:	fc 01       	movw	r30, r24
    3d24:	e6 56       	subi	r30, 0x66	; 102
    3d26:	ff 4f       	sbci	r31, 0xFF	; 255
    3d28:	80 81       	ld	r24, Z
    3d2a:	80 93 b0 00 	sts	0x00B0, r24
					CLCD_voidGoToXY(0,0);
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	60 e0       	ldi	r22, 0x00	; 0
    3d32:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(a);
    3d36:	80 91 b0 00 	lds	r24, 0x00B0
    3d3a:	99 27       	eor	r25, r25
    3d3c:	87 fd       	sbrc	r24, 7
    3d3e:	90 95       	com	r25
    3d40:	a9 2f       	mov	r26, r25
    3d42:	b9 2f       	mov	r27, r25
    3d44:	bc 01       	movw	r22, r24
    3d46:	cd 01       	movw	r24, r26
    3d48:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>

					j=9;
    3d4c:	89 e0       	ldi	r24, 0x09	; 9
    3d4e:	80 93 a9 00 	sts	0x00A9, r24
					b=arr_num[j];
    3d52:	80 91 a9 00 	lds	r24, 0x00A9
    3d56:	99 27       	eor	r25, r25
    3d58:	87 fd       	sbrc	r24, 7
    3d5a:	90 95       	com	r25
    3d5c:	fc 01       	movw	r30, r24
    3d5e:	e6 56       	subi	r30, 0x66	; 102
    3d60:	ff 4f       	sbci	r31, 0xFF	; 255
    3d62:	80 81       	ld	r24, Z
    3d64:	80 93 af 00 	sts	0x00AF, r24
					CLCD_voidGoToXY(0,1);
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	61 e0       	ldi	r22, 0x01	; 1
    3d6c:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(b);
    3d70:	80 91 af 00 	lds	r24, 0x00AF
    3d74:	99 27       	eor	r25, r25
    3d76:	87 fd       	sbrc	r24, 7
    3d78:	90 95       	com	r25
    3d7a:	a9 2f       	mov	r26, r25
    3d7c:	b9 2f       	mov	r27, r25
    3d7e:	bc 01       	movw	r22, r24
    3d80:	cd 01       	movw	r24, r26
    3d82:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					l=5;
    3d86:	85 e0       	ldi	r24, 0x05	; 5
    3d88:	80 93 a7 00 	sts	0x00A7, r24
					c=arr_num[l];
    3d8c:	80 91 a7 00 	lds	r24, 0x00A7
    3d90:	99 27       	eor	r25, r25
    3d92:	87 fd       	sbrc	r24, 7
    3d94:	90 95       	com	r25
    3d96:	fc 01       	movw	r30, r24
    3d98:	e6 56       	subi	r30, 0x66	; 102
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	80 81       	ld	r24, Z
    3d9e:	80 93 ae 00 	sts	0x00AE, r24
					CLCD_voidGoToXY(0,3);
    3da2:	80 e0       	ldi	r24, 0x00	; 0
    3da4:	63 e0       	ldi	r22, 0x03	; 3
    3da6:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(c);
    3daa:	80 91 ae 00 	lds	r24, 0x00AE
    3dae:	99 27       	eor	r25, r25
    3db0:	87 fd       	sbrc	r24, 7
    3db2:	90 95       	com	r25
    3db4:	a9 2f       	mov	r26, r25
    3db6:	b9 2f       	mov	r27, r25
    3db8:	bc 01       	movw	r22, r24
    3dba:	cd 01       	movw	r24, r26
    3dbc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					m=9;
    3dc0:	89 e0       	ldi	r24, 0x09	; 9
    3dc2:	80 93 a6 00 	sts	0x00A6, r24
					d=arr_num[m];
    3dc6:	80 91 a6 00 	lds	r24, 0x00A6
    3dca:	99 27       	eor	r25, r25
    3dcc:	87 fd       	sbrc	r24, 7
    3dce:	90 95       	com	r25
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	e6 56       	subi	r30, 0x66	; 102
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	80 81       	ld	r24, Z
    3dd8:	80 93 ad 00 	sts	0x00AD, r24
					CLCD_voidGoToXY(0,4);
    3ddc:	80 e0       	ldi	r24, 0x00	; 0
    3dde:	64 e0       	ldi	r22, 0x04	; 4
    3de0:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(m);
    3de4:	80 91 a6 00 	lds	r24, 0x00A6
    3de8:	99 27       	eor	r25, r25
    3dea:	87 fd       	sbrc	r24, 7
    3dec:	90 95       	com	r25
    3dee:	a9 2f       	mov	r26, r25
    3df0:	b9 2f       	mov	r27, r25
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					n=5;
    3dfa:	85 e0       	ldi	r24, 0x05	; 5
    3dfc:	80 93 a5 00 	sts	0x00A5, r24
					e=arr_num[n];
    3e00:	80 91 a5 00 	lds	r24, 0x00A5
    3e04:	99 27       	eor	r25, r25
    3e06:	87 fd       	sbrc	r24, 7
    3e08:	90 95       	com	r25
    3e0a:	fc 01       	movw	r30, r24
    3e0c:	e6 56       	subi	r30, 0x66	; 102
    3e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e10:	80 81       	ld	r24, Z
    3e12:	80 93 ac 00 	sts	0x00AC, r24
					CLCD_voidGoToXY(0,6);
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	66 e0       	ldi	r22, 0x06	; 6
    3e1a:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidWriteNumber(e);
    3e1e:	80 91 ac 00 	lds	r24, 0x00AC
    3e22:	99 27       	eor	r25, r25
    3e24:	87 fd       	sbrc	r24, 7
    3e26:	90 95       	com	r25
    3e28:	a9 2f       	mov	r26, r25
    3e2a:	b9 2f       	mov	r27, r25
    3e2c:	bc 01       	movw	r22, r24
    3e2e:	cd 01       	movw	r24, r26
    3e30:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
					o=10;
    3e34:	8a e0       	ldi	r24, 0x0A	; 10
    3e36:	80 93 a4 00 	sts	0x00A4, r24
				}
				if(i==0 && j==0 && l==0 && m==0 && n==0 && o==0)
    3e3a:	80 91 aa 00 	lds	r24, 0x00AA
    3e3e:	88 23       	and	r24, r24
    3e40:	21 f5       	brne	.+72     	; 0x3e8a <main+0x247c>
    3e42:	80 91 a9 00 	lds	r24, 0x00A9
    3e46:	88 23       	and	r24, r24
    3e48:	01 f5       	brne	.+64     	; 0x3e8a <main+0x247c>
    3e4a:	80 91 a7 00 	lds	r24, 0x00A7
    3e4e:	88 23       	and	r24, r24
    3e50:	e1 f4       	brne	.+56     	; 0x3e8a <main+0x247c>
    3e52:	80 91 a6 00 	lds	r24, 0x00A6
    3e56:	88 23       	and	r24, r24
    3e58:	c1 f4       	brne	.+48     	; 0x3e8a <main+0x247c>
    3e5a:	80 91 a5 00 	lds	r24, 0x00A5
    3e5e:	88 23       	and	r24, r24
    3e60:	a1 f4       	brne	.+40     	; 0x3e8a <main+0x247c>
    3e62:	80 91 a4 00 	lds	r24, 0x00A4
    3e66:	88 23       	and	r24, r24
    3e68:	81 f4       	brne	.+32     	; 0x3e8a <main+0x247c>
				{
					CLCD_voidGoToXY(1,1);
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	61 e0       	ldi	r22, 0x01	; 1
    3e6e:	0e 94 fa 07 	call	0xff4	; 0xff4 <CLCD_voidGoToXY>
					CLCD_voidSendString("It's TIME");
    3e72:	80 e6       	ldi	r24, 0x60	; 96
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	0e 94 ca 07 	call	0xf94	; 0xf94 <CLCD_voidSendString>
					CLCD_voidWriteSpecialCharacter(arr_hamoksha,0,1,12);
    3e7a:	8a e8       	ldi	r24, 0x8A	; 138
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	60 e0       	ldi	r22, 0x00	; 0
    3e80:	41 e0       	ldi	r20, 0x01	; 1
    3e82:	2c e0       	ldi	r18, 0x0C	; 12
    3e84:	0e 94 18 08 	call	0x1030	; 0x1030 <CLCD_voidWriteSpecialCharacter>
    3e88:	05 c0       	rjmp	.+10     	; 0x3e94 <main+0x2486>
				_delay_ms(25);
				if(GET_BIT(PIND,0)==0)
					break;

			}
			while(k==7)
    3e8a:	80 91 a8 00 	lds	r24, 0x00A8
    3e8e:	87 30       	cpi	r24, 0x07	; 7
    3e90:	09 f4       	brne	.+2      	; 0x3e94 <main+0x2486>
    3e92:	f9 cc       	rjmp	.-1550   	; 0x3886 <main+0x1e78>
					CLCD_voidSendString("It's TIME");
					CLCD_voidWriteSpecialCharacter(arr_hamoksha,0,1,12);
					break;
				}
			}
			if(k>7)
    3e94:	80 91 a8 00 	lds	r24, 0x00A8
    3e98:	88 30       	cpi	r24, 0x08	; 8
    3e9a:	0c f4       	brge	.+2      	; 0x3e9e <main+0x2490>
    3e9c:	55 c0       	rjmp	.+170    	; 0x3f48 <main+0x253a>
			{
				k=0;
    3e9e:	10 92 a8 00 	sts	0x00A8, r1
				CLCD_voidSendCommand(CLCD_Clear_Display);
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
				CLCD_voidWriteNumber(arr_num[0]);
    3ea8:	80 91 9a 00 	lds	r24, 0x009A
    3eac:	88 2f       	mov	r24, r24
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	a0 e0       	ldi	r26, 0x00	; 0
    3eb2:	b0 e0       	ldi	r27, 0x00	; 0
    3eb4:	bc 01       	movw	r22, r24
    3eb6:	cd 01       	movw	r24, r26
    3eb8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
				CLCD_voidWriteNumber(arr_num[0]);
    3ebc:	80 91 9a 00 	lds	r24, 0x009A
    3ec0:	88 2f       	mov	r24, r24
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	a0 e0       	ldi	r26, 0x00	; 0
    3ec6:	b0 e0       	ldi	r27, 0x00	; 0
    3ec8:	bc 01       	movw	r22, r24
    3eca:	cd 01       	movw	r24, r26
    3ecc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
				CLCD_voidSendData(':');
    3ed0:	8a e3       	ldi	r24, 0x3A	; 58
    3ed2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
				CLCD_voidWriteNumber(arr_num[0]);
    3ed6:	80 91 9a 00 	lds	r24, 0x009A
    3eda:	88 2f       	mov	r24, r24
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	a0 e0       	ldi	r26, 0x00	; 0
    3ee0:	b0 e0       	ldi	r27, 0x00	; 0
    3ee2:	bc 01       	movw	r22, r24
    3ee4:	cd 01       	movw	r24, r26
    3ee6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
				CLCD_voidWriteNumber(arr_num[0]);
    3eea:	80 91 9a 00 	lds	r24, 0x009A
    3eee:	88 2f       	mov	r24, r24
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	a0 e0       	ldi	r26, 0x00	; 0
    3ef4:	b0 e0       	ldi	r27, 0x00	; 0
    3ef6:	bc 01       	movw	r22, r24
    3ef8:	cd 01       	movw	r24, r26
    3efa:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
				CLCD_voidSendData(':');
    3efe:	8a e3       	ldi	r24, 0x3A	; 58
    3f00:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
				CLCD_voidWriteNumber(arr_num[0]);
    3f04:	80 91 9a 00 	lds	r24, 0x009A
    3f08:	88 2f       	mov	r24, r24
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	a0 e0       	ldi	r26, 0x00	; 0
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	bc 01       	movw	r22, r24
    3f12:	cd 01       	movw	r24, r26
    3f14:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
				CLCD_voidWriteNumber(arr_num[0]);
    3f18:	80 91 9a 00 	lds	r24, 0x009A
    3f1c:	88 2f       	mov	r24, r24
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	a0 e0       	ldi	r26, 0x00	; 0
    3f22:	b0 e0       	ldi	r27, 0x00	; 0
    3f24:	bc 01       	movw	r22, r24
    3f26:	cd 01       	movw	r24, r26
    3f28:	0e 94 58 08 	call	0x10b0	; 0x10b0 <CLCD_voidWriteNumber>
				i=0,j=0,k=0,l=0,m=0,n=0,o=0;
    3f2c:	10 92 aa 00 	sts	0x00AA, r1
    3f30:	10 92 a9 00 	sts	0x00A9, r1
    3f34:	10 92 a8 00 	sts	0x00A8, r1
    3f38:	10 92 a7 00 	sts	0x00A7, r1
    3f3c:	10 92 a6 00 	sts	0x00A6, r1
    3f40:	10 92 a5 00 	sts	0x00A5, r1
    3f44:	10 92 a4 00 	sts	0x00A4, r1
	CLCD_voidSendData(':');
	CLCD_voidWriteNumber(arr_num[0]);
	CLCD_voidWriteNumber(arr_num[0]);
	while(1)
	{
		while(GET_BIT(PIND,0)==0)
    3f48:	e0 e3       	ldi	r30, 0x30	; 48
    3f4a:	f0 e0       	ldi	r31, 0x00	; 0
    3f4c:	80 81       	ld	r24, Z
    3f4e:	88 2f       	mov	r24, r24
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	81 70       	andi	r24, 0x01	; 1
    3f54:	90 70       	andi	r25, 0x00	; 0
    3f56:	00 97       	sbiw	r24, 0x00	; 0
    3f58:	11 f4       	brne	.+4      	; 0x3f5e <main+0x2550>
    3f5a:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <main+0xae>
    3f5e:	f4 cf       	rjmp	.-24     	; 0x3f48 <main+0x253a>

00003f60 <__udivmodsi4>:
    3f60:	a1 e2       	ldi	r26, 0x21	; 33
    3f62:	1a 2e       	mov	r1, r26
    3f64:	aa 1b       	sub	r26, r26
    3f66:	bb 1b       	sub	r27, r27
    3f68:	fd 01       	movw	r30, r26
    3f6a:	0d c0       	rjmp	.+26     	; 0x3f86 <__udivmodsi4_ep>

00003f6c <__udivmodsi4_loop>:
    3f6c:	aa 1f       	adc	r26, r26
    3f6e:	bb 1f       	adc	r27, r27
    3f70:	ee 1f       	adc	r30, r30
    3f72:	ff 1f       	adc	r31, r31
    3f74:	a2 17       	cp	r26, r18
    3f76:	b3 07       	cpc	r27, r19
    3f78:	e4 07       	cpc	r30, r20
    3f7a:	f5 07       	cpc	r31, r21
    3f7c:	20 f0       	brcs	.+8      	; 0x3f86 <__udivmodsi4_ep>
    3f7e:	a2 1b       	sub	r26, r18
    3f80:	b3 0b       	sbc	r27, r19
    3f82:	e4 0b       	sbc	r30, r20
    3f84:	f5 0b       	sbc	r31, r21

00003f86 <__udivmodsi4_ep>:
    3f86:	66 1f       	adc	r22, r22
    3f88:	77 1f       	adc	r23, r23
    3f8a:	88 1f       	adc	r24, r24
    3f8c:	99 1f       	adc	r25, r25
    3f8e:	1a 94       	dec	r1
    3f90:	69 f7       	brne	.-38     	; 0x3f6c <__udivmodsi4_loop>
    3f92:	60 95       	com	r22
    3f94:	70 95       	com	r23
    3f96:	80 95       	com	r24
    3f98:	90 95       	com	r25
    3f9a:	9b 01       	movw	r18, r22
    3f9c:	ac 01       	movw	r20, r24
    3f9e:	bd 01       	movw	r22, r26
    3fa0:	cf 01       	movw	r24, r30
    3fa2:	08 95       	ret

00003fa4 <__prologue_saves__>:
    3fa4:	2f 92       	push	r2
    3fa6:	3f 92       	push	r3
    3fa8:	4f 92       	push	r4
    3faa:	5f 92       	push	r5
    3fac:	6f 92       	push	r6
    3fae:	7f 92       	push	r7
    3fb0:	8f 92       	push	r8
    3fb2:	9f 92       	push	r9
    3fb4:	af 92       	push	r10
    3fb6:	bf 92       	push	r11
    3fb8:	cf 92       	push	r12
    3fba:	df 92       	push	r13
    3fbc:	ef 92       	push	r14
    3fbe:	ff 92       	push	r15
    3fc0:	0f 93       	push	r16
    3fc2:	1f 93       	push	r17
    3fc4:	cf 93       	push	r28
    3fc6:	df 93       	push	r29
    3fc8:	cd b7       	in	r28, 0x3d	; 61
    3fca:	de b7       	in	r29, 0x3e	; 62
    3fcc:	ca 1b       	sub	r28, r26
    3fce:	db 0b       	sbc	r29, r27
    3fd0:	0f b6       	in	r0, 0x3f	; 63
    3fd2:	f8 94       	cli
    3fd4:	de bf       	out	0x3e, r29	; 62
    3fd6:	0f be       	out	0x3f, r0	; 63
    3fd8:	cd bf       	out	0x3d, r28	; 61
    3fda:	09 94       	ijmp

00003fdc <__epilogue_restores__>:
    3fdc:	2a 88       	ldd	r2, Y+18	; 0x12
    3fde:	39 88       	ldd	r3, Y+17	; 0x11
    3fe0:	48 88       	ldd	r4, Y+16	; 0x10
    3fe2:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fe4:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fe6:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fe8:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fea:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fec:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fee:	b9 84       	ldd	r11, Y+9	; 0x09
    3ff0:	c8 84       	ldd	r12, Y+8	; 0x08
    3ff2:	df 80       	ldd	r13, Y+7	; 0x07
    3ff4:	ee 80       	ldd	r14, Y+6	; 0x06
    3ff6:	fd 80       	ldd	r15, Y+5	; 0x05
    3ff8:	0c 81       	ldd	r16, Y+4	; 0x04
    3ffa:	1b 81       	ldd	r17, Y+3	; 0x03
    3ffc:	aa 81       	ldd	r26, Y+2	; 0x02
    3ffe:	b9 81       	ldd	r27, Y+1	; 0x01
    4000:	ce 0f       	add	r28, r30
    4002:	d1 1d       	adc	r29, r1
    4004:	0f b6       	in	r0, 0x3f	; 63
    4006:	f8 94       	cli
    4008:	de bf       	out	0x3e, r29	; 62
    400a:	0f be       	out	0x3f, r0	; 63
    400c:	cd bf       	out	0x3d, r28	; 61
    400e:	ed 01       	movw	r28, r26
    4010:	08 95       	ret

00004012 <_exit>:
    4012:	f8 94       	cli

00004014 <__stop_program>:
    4014:	ff cf       	rjmp	.-2      	; 0x4014 <__stop_program>
