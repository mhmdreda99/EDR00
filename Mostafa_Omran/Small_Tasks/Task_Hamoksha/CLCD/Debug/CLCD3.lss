
CLCD3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d3c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00002d3c  00002db0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c5c  00000000  00000000  00002df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a8a  00000000  00000000  00004a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000054d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005616  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005786  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000073cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000082ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000091c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009455  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009c23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 55 0c 	call	0x18aa	; 0x18aa <main>
      7a:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 e9       	ldi	r26, 0x97	; 151
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 e9       	ldi	r24, 0x97	; 151
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2f 97       	sbiw	r28, 0x0f	; 15
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to low for command*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_u8SetPinValue>

    /*Set command to data pins*/
    DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	6f 85       	ldd	r22, Y+15	; 0x0f
     b64:	0e 94 75 0b 	call	0x16ea	; 0x16ea <DIO_u8SetPortValue>
    
    /*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	62 e0       	ldi	r22, 0x02	; 2
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_u8SetPinValue>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e4       	ldi	r27, 0x40	; 64
     b7a:	8b 87       	std	Y+11, r24	; 0x0b
     b7c:	9c 87       	std	Y+12, r25	; 0x0c
     b7e:	ad 87       	std	Y+13, r26	; 0x0d
     b80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b82:	6b 85       	ldd	r22, Y+11	; 0x0b
     b84:	7c 85       	ldd	r23, Y+12	; 0x0c
     b86:	8d 85       	ldd	r24, Y+13	; 0x0d
     b88:	9e 85       	ldd	r25, Y+14	; 0x0e
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	8f 83       	std	Y+7, r24	; 0x07
     b9c:	98 87       	std	Y+8, r25	; 0x08
     b9e:	a9 87       	std	Y+9, r26	; 0x09
     ba0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba2:	6f 81       	ldd	r22, Y+7	; 0x07
     ba4:	78 85       	ldd	r23, Y+8	; 0x08
     ba6:	89 85       	ldd	r24, Y+9	; 0x09
     ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bb6:	88 23       	and	r24, r24
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9e 83       	std	Y+6, r25	; 0x06
     bc0:	8d 83       	std	Y+5, r24	; 0x05
     bc2:	3f c0       	rjmp	.+126    	; 0xc42 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bc4:	6f 81       	ldd	r22, Y+7	; 0x07
     bc6:	78 85       	ldd	r23, Y+8	; 0x08
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	3f ef       	ldi	r19, 0xFF	; 255
     bd0:	4f e7       	ldi	r20, 0x7F	; 127
     bd2:	57 e4       	ldi	r21, 0x47	; 71
     bd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd8:	18 16       	cp	r1, r24
     bda:	4c f5       	brge	.+82     	; 0xc2e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bde:	7c 85       	ldd	r23, Y+12	; 0x0c
     be0:	8d 85       	ldd	r24, Y+13	; 0x0d
     be2:	9e 85       	ldd	r25, Y+14	; 0x0e
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <CLCD_voidSendCommand+0xee>
     c06:	88 ec       	ldi	r24, 0xC8	; 200
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <CLCD_voidSendCommand+0xdc>
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8d 81       	ldd	r24, Y+5	; 0x05
     c1c:	9e 81       	ldd	r25, Y+6	; 0x06
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <CLCD_voidSendCommand+0xd0>
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	6f 81       	ldd	r22, Y+7	; 0x07
     c30:	78 85       	ldd	r23, Y+8	; 0x08
     c32:	89 85       	ldd	r24, Y+9	; 0x09
     c34:	9a 85       	ldd	r25, Y+10	; 0x0a
     c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <CLCD_voidSendCommand+0x118>
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	62 e0       	ldi	r22, 0x02	; 2
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_u8SetPinValue>
}
     c60:	2f 96       	adiw	r28, 0x0f	; 15
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	2f 97       	sbiw	r28, 0x0f	; 15
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to High for Data*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_u8SetPinValue>

    /*Set command to data pins*/
    DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	6f 85       	ldd	r22, Y+15	; 0x0f
     ca0:	0e 94 75 0b 	call	0x16ea	; 0x16ea <DIO_u8SetPortValue>

    /*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	62 e0       	ldi	r22, 0x02	; 2
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_u8SetPinValue>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b0 e4       	ldi	r27, 0x40	; 64
     cb6:	8b 87       	std	Y+11, r24	; 0x0b
     cb8:	9c 87       	std	Y+12, r25	; 0x0c
     cba:	ad 87       	std	Y+13, r26	; 0x0d
     cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a ef       	ldi	r20, 0xFA	; 250
     ccc:	54 e4       	ldi	r21, 0x44	; 68
     cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	8f 83       	std	Y+7, r24	; 0x07
     cd8:	98 87       	std	Y+8, r25	; 0x08
     cda:	a9 87       	std	Y+9, r26	; 0x09
     cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cf2:	88 23       	and	r24, r24
     cf4:	2c f4       	brge	.+10     	; 0xd00 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9e 83       	std	Y+6, r25	; 0x06
     cfc:	8d 83       	std	Y+5, r24	; 0x05
     cfe:	3f c0       	rjmp	.+126    	; 0xd7e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d00:	6f 81       	ldd	r22, Y+7	; 0x07
     d02:	78 85       	ldd	r23, Y+8	; 0x08
     d04:	89 85       	ldd	r24, Y+9	; 0x09
     d06:	9a 85       	ldd	r25, Y+10	; 0x0a
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d14:	18 16       	cp	r1, r24
     d16:	4c f5       	brge	.+82     	; 0xd6a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d18:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
     d40:	0f c0       	rjmp	.+30     	; 0xd60 <CLCD_voidSendData+0xee>
     d42:	88 ec       	ldi	r24, 0xC8	; 200
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8b 83       	std	Y+3, r24	; 0x03
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <CLCD_voidSendData+0xdc>
     d52:	9c 83       	std	Y+4, r25	; 0x04
     d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	69 f7       	brne	.-38     	; 0xd42 <CLCD_voidSendData+0xd0>
     d68:	14 c0       	rjmp	.+40     	; 0xd92 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6a:	6f 81       	ldd	r22, Y+7	; 0x07
     d6c:	78 85       	ldd	r23, Y+8	; 0x08
     d6e:	89 85       	ldd	r24, Y+9	; 0x09
     d70:	9a 85       	ldd	r25, Y+10	; 0x0a
     d72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <CLCD_voidSendData+0x118>
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	62 e0       	ldi	r22, 0x02	; 2
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_u8SetPinValue>

}
     d9c:	2f 96       	adiw	r28, 0x0f	; 15
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <CLCD_voidInit>:

void CLCD_voidInit(u8 Copy_u8Display,u8 Copy_u8Function)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	64 97       	sbiw	r28, 0x14	; 20
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	8f 87       	std	Y+15, r24	; 0x0f
     dc4:	68 8b       	std	Y+16, r22	; 0x10
	/*Initialize LCD pins direction*/
	DIO_u8SetPortDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	6f ef       	ldi	r22, 0xFF	; 255
     dca:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	41 e0       	ldi	r20, 0x01	; 1
     dd4:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	62 e0       	ldi	r22, 0x02	; 2
     de6:	41 e0       	ldi	r20, 0x01	; 1
     de8:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinDirection>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e2       	ldi	r26, 0x20	; 32
     df2:	b2 e4       	ldi	r27, 0x42	; 66
     df4:	8b 87       	std	Y+11, r24	; 0x0b
     df6:	9c 87       	std	Y+12, r25	; 0x0c
     df8:	ad 87       	std	Y+13, r26	; 0x0d
     dfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     e00:	8d 85       	ldd	r24, Y+13	; 0x0d
     e02:	9e 85       	ldd	r25, Y+14	; 0x0e
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	4a ef       	ldi	r20, 0xFA	; 250
     e0a:	54 e4       	ldi	r21, 0x44	; 68
     e0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	8f 83       	std	Y+7, r24	; 0x07
     e16:	98 87       	std	Y+8, r25	; 0x08
     e18:	a9 87       	std	Y+9, r26	; 0x09
     e1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e1c:	6f 81       	ldd	r22, Y+7	; 0x07
     e1e:	78 85       	ldd	r23, Y+8	; 0x08
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e8       	ldi	r20, 0x80	; 128
     e2a:	5f e3       	ldi	r21, 0x3F	; 63
     e2c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e30:	88 23       	and	r24, r24
     e32:	2c f4       	brge	.+10     	; 0xe3e <CLCD_voidInit+0x90>
		__ticks = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9e 83       	std	Y+6, r25	; 0x06
     e3a:	8d 83       	std	Y+5, r24	; 0x05
     e3c:	3f c0       	rjmp	.+126    	; 0xebc <CLCD_voidInit+0x10e>
	else if (__tmp > 65535)
     e3e:	6f 81       	ldd	r22, Y+7	; 0x07
     e40:	78 85       	ldd	r23, Y+8	; 0x08
     e42:	89 85       	ldd	r24, Y+9	; 0x09
     e44:	9a 85       	ldd	r25, Y+10	; 0x0a
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	3f ef       	ldi	r19, 0xFF	; 255
     e4a:	4f e7       	ldi	r20, 0x7F	; 127
     e4c:	57 e4       	ldi	r21, 0x47	; 71
     e4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e52:	18 16       	cp	r1, r24
     e54:	4c f5       	brge	.+82     	; 0xea8 <CLCD_voidInit+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e56:	6b 85       	ldd	r22, Y+11	; 0x0b
     e58:	7c 85       	ldd	r23, Y+12	; 0x0c
     e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e2       	ldi	r20, 0x20	; 32
     e64:	51 e4       	ldi	r21, 0x41	; 65
     e66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9e 83       	std	Y+6, r25	; 0x06
     e7c:	8d 83       	std	Y+5, r24	; 0x05
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <CLCD_voidInit+0xf0>
     e80:	88 ec       	ldi	r24, 0xC8	; 200
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9c 83       	std	Y+4, r25	; 0x04
     e86:	8b 83       	std	Y+3, r24	; 0x03
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	9c 81       	ldd	r25, Y+4	; 0x04
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <CLCD_voidInit+0xde>
     e90:	9c 83       	std	Y+4, r25	; 0x04
     e92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	9e 83       	std	Y+6, r25	; 0x06
     e9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f7       	brne	.-38     	; 0xe80 <CLCD_voidInit+0xd2>
     ea6:	14 c0       	rjmp	.+40     	; 0xed0 <CLCD_voidInit+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea8:	6f 81       	ldd	r22, Y+7	; 0x07
     eaa:	78 85       	ldd	r23, Y+8	; 0x08
     eac:	89 85       	ldd	r24, Y+9	; 0x09
     eae:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	9e 83       	std	Y+6, r25	; 0x06
     eba:	8d 83       	std	Y+5, r24	; 0x05
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	9a 83       	std	Y+2, r25	; 0x02
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <CLCD_voidInit+0x11a>
     ecc:	9a 83       	std	Y+2, r25	; 0x02
     ece:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set command: Choose lines, Choose Font size*/
	switch(Copy_u8Function)
     ed0:	88 89       	ldd	r24, Y+16	; 0x10
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3c 8b       	std	Y+20, r19	; 0x14
     ed8:	2b 8b       	std	Y+19, r18	; 0x13
     eda:	8b 89       	ldd	r24, Y+19	; 0x13
     edc:	9c 89       	ldd	r25, Y+20	; 0x14
     ede:	8e 30       	cpi	r24, 0x0E	; 14
     ee0:	91 05       	cpc	r25, r1
     ee2:	71 f0       	breq	.+28     	; 0xf00 <CLCD_voidInit+0x152>
     ee4:	2b 89       	ldd	r18, Y+19	; 0x13
     ee6:	3c 89       	ldd	r19, Y+20	; 0x14
     ee8:	2f 30       	cpi	r18, 0x0F	; 15
     eea:	31 05       	cpc	r19, r1
     eec:	69 f0       	breq	.+26     	; 0xf08 <CLCD_voidInit+0x15a>
     eee:	8b 89       	ldd	r24, Y+19	; 0x13
     ef0:	9c 89       	ldd	r25, Y+20	; 0x14
     ef2:	8c 30       	cpi	r24, 0x0C	; 12
     ef4:	91 05       	cpc	r25, r1
     ef6:	59 f4       	brne	.+22     	; 0xf0e <CLCD_voidInit+0x160>
    {
        case CLCD_Curser_OFF:
            CLCD_voidSendCommand(CLCD_Curser_OFF);
     ef8:	8c e0       	ldi	r24, 0x0C	; 12
     efa:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
     efe:	07 c0       	rjmp	.+14     	; 0xf0e <CLCD_voidInit+0x160>
            break;
        case CLCD_Curser_ON_NoBlinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_NoBlinking);
     f00:	8e e0       	ldi	r24, 0x0E	; 14
     f02:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
     f06:	03 c0       	rjmp	.+6      	; 0xf0e <CLCD_voidInit+0x160>
            break;
        case CLCD_Curser_ON_Blinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_Blinking);
     f08:	8f e0       	ldi	r24, 0x0F	; 15
     f0a:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
            break;
    }

	/*Display on off control: display enable, disable/enable cursor, no/ blink cursor*/
	switch(Copy_u8Display)
     f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	3a 8b       	std	Y+18, r19	; 0x12
     f16:	29 8b       	std	Y+17, r18	; 0x11
     f18:	89 89       	ldd	r24, Y+17	; 0x11
     f1a:	9a 89       	ldd	r25, Y+18	; 0x12
     f1c:	84 33       	cpi	r24, 0x34	; 52
     f1e:	91 05       	cpc	r25, r1
     f20:	11 f1       	breq	.+68     	; 0xf66 <CLCD_voidInit+0x1b8>
     f22:	29 89       	ldd	r18, Y+17	; 0x11
     f24:	3a 89       	ldd	r19, Y+18	; 0x12
     f26:	25 33       	cpi	r18, 0x35	; 53
     f28:	31 05       	cpc	r19, r1
     f2a:	34 f4       	brge	.+12     	; 0xf38 <CLCD_voidInit+0x18a>
     f2c:	89 89       	ldd	r24, Y+17	; 0x11
     f2e:	9a 89       	ldd	r25, Y+18	; 0x12
     f30:	80 33       	cpi	r24, 0x30	; 48
     f32:	91 05       	cpc	r25, r1
     f34:	a1 f0       	breq	.+40     	; 0xf5e <CLCD_voidInit+0x1b0>
     f36:	1a c0       	rjmp	.+52     	; 0xf6c <CLCD_voidInit+0x1be>
     f38:	29 89       	ldd	r18, Y+17	; 0x11
     f3a:	3a 89       	ldd	r19, Y+18	; 0x12
     f3c:	28 33       	cpi	r18, 0x38	; 56
     f3e:	31 05       	cpc	r19, r1
     f40:	31 f0       	breq	.+12     	; 0xf4e <CLCD_voidInit+0x1a0>
     f42:	89 89       	ldd	r24, Y+17	; 0x11
     f44:	9a 89       	ldd	r25, Y+18	; 0x12
     f46:	8c 33       	cpi	r24, 0x3C	; 60
     f48:	91 05       	cpc	r25, r1
     f4a:	29 f0       	breq	.+10     	; 0xf56 <CLCD_voidInit+0x1a8>
     f4c:	0f c0       	rjmp	.+30     	; 0xf6c <CLCD_voidInit+0x1be>
    {
        case CLCD_2Lines_5x8Fontsize:
            CLCD_voidSendCommand(CLCD_2Lines_5x8Fontsize);
     f4e:	88 e3       	ldi	r24, 0x38	; 56
     f50:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
     f54:	0b c0       	rjmp	.+22     	; 0xf6c <CLCD_voidInit+0x1be>
            break;
        case CLCD_2Lines_5x11Fontsize:
            CLCD_voidSendCommand(CLCD_2Lines_5x11Fontsize);
     f56:	8c e3       	ldi	r24, 0x3C	; 60
     f58:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
     f5c:	07 c0       	rjmp	.+14     	; 0xf6c <CLCD_voidInit+0x1be>
            break;
        case CLCD_1Lines_5x8Fontsize:
            CLCD_voidSendCommand(CLCD_1Lines_5x11Fontsize);
     f5e:	84 e3       	ldi	r24, 0x34	; 52
     f60:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <CLCD_voidInit+0x1be>
            break;
        case CLCD_1Lines_5x11Fontsize:
            CLCD_voidSendCommand(CLCD_1Lines_5x11Fontsize);
     f66:	84 e3       	ldi	r24, 0x34	; 52
     f68:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
            break;
    }

	/*Clear display*/
	CLCD_voidSendCommand(1);
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>

}
     f72:	64 96       	adiw	r28, 0x14	; 20
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <CLCD_voidSendString+0x6>
     f8a:	0f 92       	push	r0
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	9b 83       	std	Y+3, r25	; 0x03
     f92:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
     f94:	19 82       	std	Y+1, r1	; 0x01
     f96:	0e c0       	rjmp	.+28     	; 0xfb4 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	9b 81       	ldd	r25, Y+3	; 0x03
     fa2:	fc 01       	movw	r30, r24
     fa4:	e2 0f       	add	r30, r18
     fa6:	f3 1f       	adc	r31, r19
     fa8:	80 81       	ld	r24, Z
     faa:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
		Local_u8Counter++;
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	fc 01       	movw	r30, r24
     fc0:	e2 0f       	add	r30, r18
     fc2:	f3 1f       	adc	r31, r19
     fc4:	80 81       	ld	r24, Z
     fc6:	88 23       	and	r24, r24
     fc8:	39 f7       	brne	.-50     	; 0xf98 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <CLCD_voidGoToXY+0x6>
     fdc:	0f 92       	push	r0
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	8a 83       	std	Y+2, r24	; 0x02
     fe4:	6b 83       	std	Y+3, r22	; 0x03
	/*Calculating the Address of the DDRAM by the coordinates X and Y*/
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	88 23       	and	r24, r24
     fea:	19 f4       	brne	.+6      	; 0xff2 <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at the first line*/
		Local_u8Address=Copy_u8YPos;
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	06 c0       	rjmp	.+12     	; 0xffe <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	19 f4       	brne	.+6      	; 0xffe <CLCD_voidGoToXY+0x28>
	{
		/*Location is at the second line*/
		Local_u8Address=Copy_u8YPos+0x40;
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	80 5c       	subi	r24, 0xC0	; 192
     ffc:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Send the DDRAM Address to point on the location on the screen you want to write on it with setting bit 7*/
	CLCD_voidSendCommand(Local_u8Address+128);
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	80 58       	subi	r24, 0x80	; 128
    1002:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8arr,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	27 97       	sbiw	r28, 0x07	; 7
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	9c 83       	std	Y+4, r25	; 0x04
    1028:	8b 83       	std	Y+3, r24	; 0x03
    102a:	6d 83       	std	Y+5, r22	; 0x05
    102c:	4e 83       	std	Y+6, r20	; 0x06
    102e:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Counter,Local_u8CGRAM_Address;

	/*Calculating the Address of the CGRAM whose block is 8 bytes*/
	Local_u8CGRAM_Address=Copy_u8PatternNumber*8;
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	89 83       	std	Y+1, r24	; 0x01

	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	80 5c       	subi	r24, 0xC0	; 192
    1048:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    104c:	1a 82       	std	Y+2, r1	; 0x02
    104e:	0e c0       	rjmp	.+28     	; 0x106c <CLCD_voidWriteSpecialCharacter+0x5a>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	fc 01       	movw	r30, r24
    105c:	e2 0f       	add	r30, r18
    105e:	f3 1f       	adc	r31, r19
    1060:	80 81       	ld	r24, Z
    1062:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	8f 5f       	subi	r24, 0xFF	; 255
    106a:	8a 83       	std	Y+2, r24	; 0x02
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	88 30       	cpi	r24, 0x08	; 8
    1070:	78 f3       	brcs	.-34     	; 0x1050 <CLCD_voidWriteSpecialCharacter+0x3e>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
		}

	/*go back to the DDRAM to display the pattern in the selected position*/
		CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1072:	8e 81       	ldd	r24, Y+6	; 0x06
    1074:	6f 81       	ldd	r22, Y+7	; 0x07
    1076:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <CLCD_voidGoToXY>

	/*The DDRAM accessing the CGRAM by block to Displaying the pattern*/
		CLCD_voidSendData(Copy_u8PatternNumber);
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
}
    1080:	27 96       	adiw	r28, 0x07	; 7
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	6b 97       	sbiw	r28, 0x1b	; 27
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	6c 8b       	std	Y+20, r22	; 0x14
    10ac:	7d 8b       	std	Y+21, r23	; 0x15
    10ae:	8e 8b       	std	Y+22, r24	; 0x16
    10b0:	9f 8b       	std	Y+23, r25	; 0x17
	/*define local counter and local itrator and temp variable for the swapping*/
	u8 i,temp;
	u8 Local_u8Counter,arr[16]={48};
    10b2:	80 e1       	ldi	r24, 0x10	; 16
    10b4:	fe 01       	movw	r30, r28
    10b6:	34 96       	adiw	r30, 0x04	; 4
    10b8:	df 01       	movw	r26, r30
    10ba:	28 2f       	mov	r18, r24
    10bc:	1d 92       	st	X+, r1
    10be:	2a 95       	dec	r18
    10c0:	e9 f7       	brne	.-6      	; 0x10bc <CLCD_voidWriteNumber+0x2a>
    10c2:	80 e3       	ldi	r24, 0x30	; 48
    10c4:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8Counter=0;
    10c6:	19 82       	std	Y+1, r1	; 0x01
    10c8:	2e c0       	rjmp	.+92     	; 0x1126 <CLCD_voidWriteNumber+0x94>

	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	08 2f       	mov	r16, r24
    10ce:	10 e0       	ldi	r17, 0x00	; 0
    10d0:	8c 89       	ldd	r24, Y+20	; 0x14
    10d2:	9d 89       	ldd	r25, Y+21	; 0x15
    10d4:	ae 89       	ldd	r26, Y+22	; 0x16
    10d6:	bf 89       	ldd	r27, Y+23	; 0x17
    10d8:	2a e0       	ldi	r18, 0x0A	; 10
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	bc 01       	movw	r22, r24
    10e2:	cd 01       	movw	r24, r26
    10e4:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__udivmodsi4>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	28 2f       	mov	r18, r24
    10ee:	20 5d       	subi	r18, 0xD0	; 208
    10f0:	ce 01       	movw	r24, r28
    10f2:	04 96       	adiw	r24, 0x04	; 4
    10f4:	fc 01       	movw	r30, r24
    10f6:	e0 0f       	add	r30, r16
    10f8:	f1 1f       	adc	r31, r17
    10fa:	20 83       	st	Z, r18
		Copy_u32Number/=10;
    10fc:	8c 89       	ldd	r24, Y+20	; 0x14
    10fe:	9d 89       	ldd	r25, Y+21	; 0x15
    1100:	ae 89       	ldd	r26, Y+22	; 0x16
    1102:	bf 89       	ldd	r27, Y+23	; 0x17
    1104:	2a e0       	ldi	r18, 0x0A	; 10
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	bc 01       	movw	r22, r24
    110e:	cd 01       	movw	r24, r26
    1110:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__udivmodsi4>
    1114:	da 01       	movw	r26, r20
    1116:	c9 01       	movw	r24, r18
    1118:	8c 8b       	std	Y+20, r24	; 0x14
    111a:	9d 8b       	std	Y+21, r25	; 0x15
    111c:	ae 8b       	std	Y+22, r26	; 0x16
    111e:	bf 8b       	std	Y+23, r27	; 0x17
		Local_u8Counter++;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	8f 5f       	subi	r24, 0xFF	; 255
    1124:	89 83       	std	Y+1, r24	; 0x01
	u8 i,temp;
	u8 Local_u8Counter,arr[16]={48};
	Local_u8Counter=0;

	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
    1126:	8c 89       	ldd	r24, Y+20	; 0x14
    1128:	9d 89       	ldd	r25, Y+21	; 0x15
    112a:	ae 89       	ldd	r26, Y+22	; 0x16
    112c:	bf 89       	ldd	r27, Y+23	; 0x17
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	a1 05       	cpc	r26, r1
    1132:	b1 05       	cpc	r27, r1
    1134:	51 f6       	brne	.-108    	; 0x10ca <CLCD_voidWriteNumber+0x38>
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
		Copy_u32Number/=10;
		Local_u8Counter++;
	}
	arr[Local_u8Counter]='\0';
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	ce 01       	movw	r24, r28
    113e:	04 96       	adiw	r24, 0x04	; 4
    1140:	fc 01       	movw	r30, r24
    1142:	e2 0f       	add	r30, r18
    1144:	f3 1f       	adc	r31, r19
    1146:	10 82       	st	Z, r1

	/*Loop to reverse the array*/
	Local_u8Counter--;
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	81 50       	subi	r24, 0x01	; 1
    114c:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    114e:	1b 82       	std	Y+3, r1	; 0x03
    1150:	33 c0       	rjmp	.+102    	; 0x11b8 <CLCD_voidWriteNumber+0x126>
	{
		temp=arr[i];
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	ce 01       	movw	r24, r28
    115a:	04 96       	adiw	r24, 0x04	; 4
    115c:	fc 01       	movw	r30, r24
    115e:	e2 0f       	add	r30, r18
    1160:	f3 1f       	adc	r31, r19
    1162:	80 81       	ld	r24, Z
    1164:	8a 83       	std	Y+2, r24	; 0x02
		arr[i]=arr[Local_u8Counter-i];
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	48 2f       	mov	r20, r24
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	28 1b       	sub	r18, r24
    117a:	39 0b       	sbc	r19, r25
    117c:	ce 01       	movw	r24, r28
    117e:	04 96       	adiw	r24, 0x04	; 4
    1180:	fc 01       	movw	r30, r24
    1182:	e2 0f       	add	r30, r18
    1184:	f3 1f       	adc	r31, r19
    1186:	20 81       	ld	r18, Z
    1188:	ce 01       	movw	r24, r28
    118a:	04 96       	adiw	r24, 0x04	; 4
    118c:	fc 01       	movw	r30, r24
    118e:	e4 0f       	add	r30, r20
    1190:	f5 1f       	adc	r31, r21
    1192:	20 83       	st	Z, r18
		arr[Local_u8Counter-i]=temp;
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	28 1b       	sub	r18, r24
    11a2:	39 0b       	sbc	r19, r25
    11a4:	ce 01       	movw	r24, r28
    11a6:	04 96       	adiw	r24, 0x04	; 4
    11a8:	fc 01       	movw	r30, r24
    11aa:	e2 0f       	add	r30, r18
    11ac:	f3 1f       	adc	r31, r19
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	80 83       	st	Z, r24
	}
	arr[Local_u8Counter]='\0';

	/*Loop to reverse the array*/
	Local_u8Counter--;
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	8b 83       	std	Y+3, r24	; 0x03
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	a8 2f       	mov	r26, r24
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	b9 8f       	std	Y+25, r27	; 0x19
    11c0:	a8 8f       	std	Y+24, r26	; 0x18
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	9b 8f       	std	Y+27, r25	; 0x1b
    11cc:	8a 8f       	std	Y+26, r24	; 0x1a
    11ce:	2a 8d       	ldd	r18, Y+26	; 0x1a
    11d0:	3b 8d       	ldd	r19, Y+27	; 0x1b
    11d2:	33 23       	and	r19, r19
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <CLCD_voidWriteNumber+0x14e>
    11d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	9b 8f       	std	Y+27, r25	; 0x1b
    11de:	8a 8f       	std	Y+26, r24	; 0x1a
    11e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11e4:	95 95       	asr	r25
    11e6:	87 95       	ror	r24
    11e8:	a8 8d       	ldd	r26, Y+24	; 0x18
    11ea:	b9 8d       	ldd	r27, Y+25	; 0x19
    11ec:	a8 17       	cp	r26, r24
    11ee:	b9 07       	cpc	r27, r25
    11f0:	0c f4       	brge	.+2      	; 0x11f4 <CLCD_voidWriteNumber+0x162>
    11f2:	af cf       	rjmp	.-162    	; 0x1152 <CLCD_voidWriteNumber+0xc0>
		arr[i]=arr[Local_u8Counter-i];
		arr[Local_u8Counter-i]=temp;
	}

	/*displaying the array on the screen*/
	CLCD_voidSendString(arr);
    11f4:	ce 01       	movw	r24, r28
    11f6:	04 96       	adiw	r24, 0x04	; 4
    11f8:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendString>
}
    11fc:	6b 96       	adiw	r28, 0x1b	; 27
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	08 95       	ret

00001212 <DIO_u8SetPinDirection>:




u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	28 97       	sbiw	r28, 0x08	; 8
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	8a 83       	std	Y+2, r24	; 0x02
    1228:	6b 83       	std	Y+3, r22	; 0x03
    122a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    122c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	88 30       	cpi	r24, 0x08	; 8
    1232:	08 f0       	brcs	.+2      	; 0x1236 <DIO_u8SetPinDirection+0x24>
    1234:	f4 c0       	rjmp	.+488    	; 0x141e <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	88 23       	and	r24, r24
    123a:	09 f0       	breq	.+2      	; 0x123e <DIO_u8SetPinDirection+0x2c>
    123c:	77 c0       	rjmp	.+238    	; 0x132c <DIO_u8SetPinDirection+0x11a>
			switch(Copy_u8Port)
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	38 87       	std	Y+8, r19	; 0x08
    1246:	2f 83       	std	Y+7, r18	; 0x07
    1248:	8f 81       	ldd	r24, Y+7	; 0x07
    124a:	98 85       	ldd	r25, Y+8	; 0x08
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	91 05       	cpc	r25, r1
    1250:	59 f1       	breq	.+86     	; 0x12a8 <DIO_u8SetPinDirection+0x96>
    1252:	2f 81       	ldd	r18, Y+7	; 0x07
    1254:	38 85       	ldd	r19, Y+8	; 0x08
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	2c f4       	brge	.+10     	; 0x1266 <DIO_u8SetPinDirection+0x54>
    125c:	8f 81       	ldd	r24, Y+7	; 0x07
    125e:	98 85       	ldd	r25, Y+8	; 0x08
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	69 f0       	breq	.+26     	; 0x127e <DIO_u8SetPinDirection+0x6c>
    1264:	60 c0       	rjmp	.+192    	; 0x1326 <DIO_u8SetPinDirection+0x114>
    1266:	2f 81       	ldd	r18, Y+7	; 0x07
    1268:	38 85       	ldd	r19, Y+8	; 0x08
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	89 f1       	breq	.+98     	; 0x12d2 <DIO_u8SetPinDirection+0xc0>
    1270:	8f 81       	ldd	r24, Y+7	; 0x07
    1272:	98 85       	ldd	r25, Y+8	; 0x08
    1274:	83 30       	cpi	r24, 0x03	; 3
    1276:	91 05       	cpc	r25, r1
    1278:	09 f4       	brne	.+2      	; 0x127c <DIO_u8SetPinDirection+0x6a>
    127a:	40 c0       	rjmp	.+128    	; 0x12fc <DIO_u8SetPinDirection+0xea>
    127c:	54 c0       	rjmp	.+168    	; 0x1326 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
    127e:	aa e3       	ldi	r26, 0x3A	; 58
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	ea e3       	ldi	r30, 0x3A	; 58
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <DIO_u8SetPinDirection+0x8a>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <DIO_u8SetPinDirection+0x86>
    12a0:	80 95       	com	r24
    12a2:	84 23       	and	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	bd c0       	rjmp	.+378    	; 0x1422 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
    12a8:	a7 e3       	ldi	r26, 0x37	; 55
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e7 e3       	ldi	r30, 0x37	; 55
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_u8SetPinDirection+0xb4>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_u8SetPinDirection+0xb0>
    12ca:	80 95       	com	r24
    12cc:	84 23       	and	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	a8 c0       	rjmp	.+336    	; 0x1422 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
    12d2:	a4 e3       	ldi	r26, 0x34	; 52
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e4 e3       	ldi	r30, 0x34	; 52
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_u8SetPinDirection+0xde>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_u8SetPinDirection+0xda>
    12f4:	80 95       	com	r24
    12f6:	84 23       	and	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	93 c0       	rjmp	.+294    	; 0x1422 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
    12fc:	a1 e3       	ldi	r26, 0x31	; 49
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e1 e3       	ldi	r30, 0x31	; 49
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_u8SetPinDirection+0x108>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_u8SetPinDirection+0x104>
    131e:	80 95       	com	r24
    1320:	84 23       	and	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	7e c0       	rjmp	.+252    	; 0x1422 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	7b c0       	rjmp	.+246    	; 0x1422 <DIO_u8SetPinDirection+0x210>
			}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	09 f0       	breq	.+2      	; 0x1334 <DIO_u8SetPinDirection+0x122>
    1332:	72 c0       	rjmp	.+228    	; 0x1418 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	3e 83       	std	Y+6, r19	; 0x06
    133c:	2d 83       	std	Y+5, r18	; 0x05
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	91 05       	cpc	r25, r1
    1346:	49 f1       	breq	.+82     	; 0x139a <DIO_u8SetPinDirection+0x188>
    1348:	2d 81       	ldd	r18, Y+5	; 0x05
    134a:	3e 81       	ldd	r19, Y+6	; 0x06
    134c:	22 30       	cpi	r18, 0x02	; 2
    134e:	31 05       	cpc	r19, r1
    1350:	2c f4       	brge	.+10     	; 0x135c <DIO_u8SetPinDirection+0x14a>
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	9e 81       	ldd	r25, Y+6	; 0x06
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	61 f0       	breq	.+24     	; 0x1372 <DIO_u8SetPinDirection+0x160>
    135a:	5b c0       	rjmp	.+182    	; 0x1412 <DIO_u8SetPinDirection+0x200>
    135c:	2d 81       	ldd	r18, Y+5	; 0x05
    135e:	3e 81       	ldd	r19, Y+6	; 0x06
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	71 f1       	breq	.+92     	; 0x13c2 <DIO_u8SetPinDirection+0x1b0>
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	91 05       	cpc	r25, r1
    136e:	e9 f1       	breq	.+122    	; 0x13ea <DIO_u8SetPinDirection+0x1d8>
    1370:	50 c0       	rjmp	.+160    	; 0x1412 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
    1372:	aa e3       	ldi	r26, 0x3A	; 58
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ea e3       	ldi	r30, 0x3A	; 58
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_u8SetPinDirection+0x17e>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_u8SetPinDirection+0x17a>
    1394:	84 2b       	or	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	44 c0       	rjmp	.+136    	; 0x1422 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
    139a:	a7 e3       	ldi	r26, 0x37	; 55
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e7 e3       	ldi	r30, 0x37	; 55
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_u8SetPinDirection+0x1a6>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_u8SetPinDirection+0x1a2>
    13bc:	84 2b       	or	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	30 c0       	rjmp	.+96     	; 0x1422 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
    13c2:	a4 e3       	ldi	r26, 0x34	; 52
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e4 e3       	ldi	r30, 0x34	; 52
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_u8SetPinDirection+0x1ce>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_u8SetPinDirection+0x1ca>
    13e4:	84 2b       	or	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	1c c0       	rjmp	.+56     	; 0x1422 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
    13ea:	a1 e3       	ldi	r26, 0x31	; 49
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e1 e3       	ldi	r30, 0x31	; 49
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_u8SetPinDirection+0x1f6>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_u8SetPinDirection+0x1f2>
    140c:	84 2b       	or	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	08 c0       	rjmp	.+16     	; 0x1422 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1422:	89 81       	ldd	r24, Y+1	; 0x01
}
    1424:	28 96       	adiw	r28, 0x08	; 8
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <DIO_u8SetPortDirection+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <DIO_u8SetPortDirection+0x8>
    143e:	0f 92       	push	r0
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	8a 83       	std	Y+2, r24	; 0x02
    1446:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1448:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	3d 83       	std	Y+5, r19	; 0x05
    1452:	2c 83       	std	Y+4, r18	; 0x04
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	9d 81       	ldd	r25, Y+5	; 0x05
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	91 05       	cpc	r25, r1
    145c:	d1 f0       	breq	.+52     	; 0x1492 <DIO_u8SetPortDirection+0x5c>
    145e:	2c 81       	ldd	r18, Y+4	; 0x04
    1460:	3d 81       	ldd	r19, Y+5	; 0x05
    1462:	22 30       	cpi	r18, 0x02	; 2
    1464:	31 05       	cpc	r19, r1
    1466:	2c f4       	brge	.+10     	; 0x1472 <DIO_u8SetPortDirection+0x3c>
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	9d 81       	ldd	r25, Y+5	; 0x05
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	61 f0       	breq	.+24     	; 0x1488 <DIO_u8SetPortDirection+0x52>
    1470:	1f c0       	rjmp	.+62     	; 0x14b0 <DIO_u8SetPortDirection+0x7a>
    1472:	2c 81       	ldd	r18, Y+4	; 0x04
    1474:	3d 81       	ldd	r19, Y+5	; 0x05
    1476:	22 30       	cpi	r18, 0x02	; 2
    1478:	31 05       	cpc	r19, r1
    147a:	81 f0       	breq	.+32     	; 0x149c <DIO_u8SetPortDirection+0x66>
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	9d 81       	ldd	r25, Y+5	; 0x05
    1480:	83 30       	cpi	r24, 0x03	; 3
    1482:	91 05       	cpc	r25, r1
    1484:	81 f0       	breq	.+32     	; 0x14a6 <DIO_u8SetPortDirection+0x70>
    1486:	14 c0       	rjmp	.+40     	; 0x14b0 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
    1488:	ea e3       	ldi	r30, 0x3A	; 58
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	80 83       	st	Z, r24
    1490:	11 c0       	rjmp	.+34     	; 0x14b4 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
    1492:	e7 e3       	ldi	r30, 0x37	; 55
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	80 83       	st	Z, r24
    149a:	0c c0       	rjmp	.+24     	; 0x14b4 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
    149c:	e4 e3       	ldi	r30, 0x34	; 52
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	80 83       	st	Z, r24
    14a4:	07 c0       	rjmp	.+14     	; 0x14b4 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
    14a6:	e1 e3       	ldi	r30, 0x31	; 49
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	80 83       	st	Z, r24
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	28 97       	sbiw	r28, 0x08	; 8
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	8a 83       	std	Y+2, r24	; 0x02
    14dc:	6b 83       	std	Y+3, r22	; 0x03
    14de:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    14e0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	88 30       	cpi	r24, 0x08	; 8
    14e6:	08 f0       	brcs	.+2      	; 0x14ea <DIO_u8SetPinValue+0x24>
    14e8:	f4 c0       	rjmp	.+488    	; 0x16d2 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	88 23       	and	r24, r24
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <DIO_u8SetPinValue+0x2c>
    14f0:	77 c0       	rjmp	.+238    	; 0x15e0 <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port)
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	38 87       	std	Y+8, r19	; 0x08
    14fa:	2f 83       	std	Y+7, r18	; 0x07
    14fc:	8f 81       	ldd	r24, Y+7	; 0x07
    14fe:	98 85       	ldd	r25, Y+8	; 0x08
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	59 f1       	breq	.+86     	; 0x155c <DIO_u8SetPinValue+0x96>
    1506:	2f 81       	ldd	r18, Y+7	; 0x07
    1508:	38 85       	ldd	r19, Y+8	; 0x08
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <DIO_u8SetPinValue+0x54>
    1510:	8f 81       	ldd	r24, Y+7	; 0x07
    1512:	98 85       	ldd	r25, Y+8	; 0x08
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	69 f0       	breq	.+26     	; 0x1532 <DIO_u8SetPinValue+0x6c>
    1518:	60 c0       	rjmp	.+192    	; 0x15da <DIO_u8SetPinValue+0x114>
    151a:	2f 81       	ldd	r18, Y+7	; 0x07
    151c:	38 85       	ldd	r19, Y+8	; 0x08
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	89 f1       	breq	.+98     	; 0x1586 <DIO_u8SetPinValue+0xc0>
    1524:	8f 81       	ldd	r24, Y+7	; 0x07
    1526:	98 85       	ldd	r25, Y+8	; 0x08
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	09 f4       	brne	.+2      	; 0x1530 <DIO_u8SetPinValue+0x6a>
    152e:	40 c0       	rjmp	.+128    	; 0x15b0 <DIO_u8SetPinValue+0xea>
    1530:	54 c0       	rjmp	.+168    	; 0x15da <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
    1532:	ab e3       	ldi	r26, 0x3B	; 59
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	eb e3       	ldi	r30, 0x3B	; 59
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <DIO_u8SetPinValue+0x8a>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <DIO_u8SetPinValue+0x86>
    1554:	80 95       	com	r24
    1556:	84 23       	and	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	bd c0       	rjmp	.+378    	; 0x16d6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
    155c:	a8 e3       	ldi	r26, 0x38	; 56
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e8 e3       	ldi	r30, 0x38	; 56
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <DIO_u8SetPinValue+0xb4>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <DIO_u8SetPinValue+0xb0>
    157e:	80 95       	com	r24
    1580:	84 23       	and	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	a8 c0       	rjmp	.+336    	; 0x16d6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
    1586:	a5 e3       	ldi	r26, 0x35	; 53
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e5 e3       	ldi	r30, 0x35	; 53
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_u8SetPinValue+0xde>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <DIO_u8SetPinValue+0xda>
    15a8:	80 95       	com	r24
    15aa:	84 23       	and	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	93 c0       	rjmp	.+294    	; 0x16d6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
    15b0:	a2 e3       	ldi	r26, 0x32	; 50
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e2 e3       	ldi	r30, 0x32	; 50
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 2e       	mov	r0, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <DIO_u8SetPinValue+0x108>
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <DIO_u8SetPinValue+0x104>
    15d2:	80 95       	com	r24
    15d4:	84 23       	and	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	7e c0       	rjmp	.+252    	; 0x16d6 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	7b c0       	rjmp	.+246    	; 0x16d6 <DIO_u8SetPinValue+0x210>
			}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <DIO_u8SetPinValue+0x122>
    15e6:	72 c0       	rjmp	.+228    	; 0x16cc <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	3e 83       	std	Y+6, r19	; 0x06
    15f0:	2d 83       	std	Y+5, r18	; 0x05
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	91 05       	cpc	r25, r1
    15fa:	49 f1       	breq	.+82     	; 0x164e <DIO_u8SetPinValue+0x188>
    15fc:	2d 81       	ldd	r18, Y+5	; 0x05
    15fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1600:	22 30       	cpi	r18, 0x02	; 2
    1602:	31 05       	cpc	r19, r1
    1604:	2c f4       	brge	.+10     	; 0x1610 <DIO_u8SetPinValue+0x14a>
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	61 f0       	breq	.+24     	; 0x1626 <DIO_u8SetPinValue+0x160>
    160e:	5b c0       	rjmp	.+182    	; 0x16c6 <DIO_u8SetPinValue+0x200>
    1610:	2d 81       	ldd	r18, Y+5	; 0x05
    1612:	3e 81       	ldd	r19, Y+6	; 0x06
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	71 f1       	breq	.+92     	; 0x1676 <DIO_u8SetPinValue+0x1b0>
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	91 05       	cpc	r25, r1
    1622:	e9 f1       	breq	.+122    	; 0x169e <DIO_u8SetPinValue+0x1d8>
    1624:	50 c0       	rjmp	.+160    	; 0x16c6 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
    1626:	ab e3       	ldi	r26, 0x3B	; 59
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	eb e3       	ldi	r30, 0x3B	; 59
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_u8SetPinValue+0x17e>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_u8SetPinValue+0x17a>
    1648:	84 2b       	or	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	44 c0       	rjmp	.+136    	; 0x16d6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
    164e:	a8 e3       	ldi	r26, 0x38	; 56
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e8 e3       	ldi	r30, 0x38	; 56
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 2e       	mov	r0, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <DIO_u8SetPinValue+0x1a6>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <DIO_u8SetPinValue+0x1a2>
    1670:	84 2b       	or	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	30 c0       	rjmp	.+96     	; 0x16d6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
    1676:	a5 e3       	ldi	r26, 0x35	; 53
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e5 e3       	ldi	r30, 0x35	; 53
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_u8SetPinValue+0x1ce>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <DIO_u8SetPinValue+0x1ca>
    1698:	84 2b       	or	r24, r20
    169a:	8c 93       	st	X, r24
    169c:	1c c0       	rjmp	.+56     	; 0x16d6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
    169e:	a2 e3       	ldi	r26, 0x32	; 50
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e2 e3       	ldi	r30, 0x32	; 50
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_u8SetPinValue+0x1f6>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <DIO_u8SetPinValue+0x1f2>
    16c0:	84 2b       	or	r24, r20
    16c2:	8c 93       	st	X, r24
    16c4:	08 c0       	rjmp	.+16     	; 0x16d6 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	05 c0       	rjmp	.+10     	; 0x16d6 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d8:	28 96       	adiw	r28, 0x08	; 8
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <DIO_u8SetPortValue+0x6>
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <DIO_u8SetPortValue+0x8>
    16f2:	0f 92       	push	r0
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	8a 83       	std	Y+2, r24	; 0x02
    16fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    16fc:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	3d 83       	std	Y+5, r19	; 0x05
    1706:	2c 83       	std	Y+4, r18	; 0x04
    1708:	8c 81       	ldd	r24, Y+4	; 0x04
    170a:	9d 81       	ldd	r25, Y+5	; 0x05
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	91 05       	cpc	r25, r1
    1710:	d1 f0       	breq	.+52     	; 0x1746 <DIO_u8SetPortValue+0x5c>
    1712:	2c 81       	ldd	r18, Y+4	; 0x04
    1714:	3d 81       	ldd	r19, Y+5	; 0x05
    1716:	22 30       	cpi	r18, 0x02	; 2
    1718:	31 05       	cpc	r19, r1
    171a:	2c f4       	brge	.+10     	; 0x1726 <DIO_u8SetPortValue+0x3c>
    171c:	8c 81       	ldd	r24, Y+4	; 0x04
    171e:	9d 81       	ldd	r25, Y+5	; 0x05
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	61 f0       	breq	.+24     	; 0x173c <DIO_u8SetPortValue+0x52>
    1724:	1f c0       	rjmp	.+62     	; 0x1764 <DIO_u8SetPortValue+0x7a>
    1726:	2c 81       	ldd	r18, Y+4	; 0x04
    1728:	3d 81       	ldd	r19, Y+5	; 0x05
    172a:	22 30       	cpi	r18, 0x02	; 2
    172c:	31 05       	cpc	r19, r1
    172e:	81 f0       	breq	.+32     	; 0x1750 <DIO_u8SetPortValue+0x66>
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	9d 81       	ldd	r25, Y+5	; 0x05
    1734:	83 30       	cpi	r24, 0x03	; 3
    1736:	91 05       	cpc	r25, r1
    1738:	81 f0       	breq	.+32     	; 0x175a <DIO_u8SetPortValue+0x70>
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value;break;
    173c:	eb e3       	ldi	r30, 0x3B	; 59
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	80 83       	st	Z, r24
    1744:	11 c0       	rjmp	.+34     	; 0x1768 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value;break;
    1746:	e8 e3       	ldi	r30, 0x38	; 56
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	80 83       	st	Z, r24
    174e:	0c c0       	rjmp	.+24     	; 0x1768 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value;break;
    1750:	e5 e3       	ldi	r30, 0x35	; 53
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	80 83       	st	Z, r24
    1758:	07 c0       	rjmp	.+14     	; 0x1768 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value;break;
    175a:	e2 e3       	ldi	r30, 0x32	; 50
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	80 83       	st	Z, r24
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
}
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	27 97       	sbiw	r28, 0x07	; 7
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	8a 83       	std	Y+2, r24	; 0x02
    1790:	6b 83       	std	Y+3, r22	; 0x03
    1792:	5d 83       	std	Y+5, r21	; 0x05
    1794:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1796:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=0) && (Copy_u8Pin<=DIO_u8PIN7))
    1798:	8c 81       	ldd	r24, Y+4	; 0x04
    179a:	9d 81       	ldd	r25, Y+5	; 0x05
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	09 f4       	brne	.+2      	; 0x17a2 <DIO_u8GetPinValue+0x28>
    17a0:	78 c0       	rjmp	.+240    	; 0x1892 <DIO_u8GetPinValue+0x118>
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	88 30       	cpi	r24, 0x08	; 8
    17a6:	08 f0       	brcs	.+2      	; 0x17aa <DIO_u8GetPinValue+0x30>
    17a8:	74 c0       	rjmp	.+232    	; 0x1892 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	3f 83       	std	Y+7, r19	; 0x07
    17b2:	2e 83       	std	Y+6, r18	; 0x06
    17b4:	4e 81       	ldd	r20, Y+6	; 0x06
    17b6:	5f 81       	ldd	r21, Y+7	; 0x07
    17b8:	41 30       	cpi	r20, 0x01	; 1
    17ba:	51 05       	cpc	r21, r1
    17bc:	59 f1       	breq	.+86     	; 0x1814 <DIO_u8GetPinValue+0x9a>
    17be:	8e 81       	ldd	r24, Y+6	; 0x06
    17c0:	9f 81       	ldd	r25, Y+7	; 0x07
    17c2:	82 30       	cpi	r24, 0x02	; 2
    17c4:	91 05       	cpc	r25, r1
    17c6:	34 f4       	brge	.+12     	; 0x17d4 <DIO_u8GetPinValue+0x5a>
    17c8:	2e 81       	ldd	r18, Y+6	; 0x06
    17ca:	3f 81       	ldd	r19, Y+7	; 0x07
    17cc:	21 15       	cp	r18, r1
    17ce:	31 05       	cpc	r19, r1
    17d0:	69 f0       	breq	.+26     	; 0x17ec <DIO_u8GetPinValue+0x72>
    17d2:	5c c0       	rjmp	.+184    	; 0x188c <DIO_u8GetPinValue+0x112>
    17d4:	4e 81       	ldd	r20, Y+6	; 0x06
    17d6:	5f 81       	ldd	r21, Y+7	; 0x07
    17d8:	42 30       	cpi	r20, 0x02	; 2
    17da:	51 05       	cpc	r21, r1
    17dc:	79 f1       	breq	.+94     	; 0x183c <DIO_u8GetPinValue+0xc2>
    17de:	8e 81       	ldd	r24, Y+6	; 0x06
    17e0:	9f 81       	ldd	r25, Y+7	; 0x07
    17e2:	83 30       	cpi	r24, 0x03	; 3
    17e4:	91 05       	cpc	r25, r1
    17e6:	09 f4       	brne	.+2      	; 0x17ea <DIO_u8GetPinValue+0x70>
    17e8:	3d c0       	rjmp	.+122    	; 0x1864 <DIO_u8GetPinValue+0xea>
    17ea:	50 c0       	rjmp	.+160    	; 0x188c <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    17ec:	e9 e3       	ldi	r30, 0x39	; 57
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a9 01       	movw	r20, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_u8GetPinValue+0x8a>
    1800:	55 95       	asr	r21
    1802:	47 95       	ror	r20
    1804:	8a 95       	dec	r24
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_u8GetPinValue+0x86>
    1808:	ca 01       	movw	r24, r20
    180a:	81 70       	andi	r24, 0x01	; 1
    180c:	ec 81       	ldd	r30, Y+4	; 0x04
    180e:	fd 81       	ldd	r31, Y+5	; 0x05
    1810:	80 83       	st	Z, r24
    1812:	41 c0       	rjmp	.+130    	; 0x1896 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    1814:	e6 e3       	ldi	r30, 0x36	; 54
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a9 01       	movw	r20, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_u8GetPinValue+0xb2>
    1828:	55 95       	asr	r21
    182a:	47 95       	ror	r20
    182c:	8a 95       	dec	r24
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_u8GetPinValue+0xae>
    1830:	ca 01       	movw	r24, r20
    1832:	81 70       	andi	r24, 0x01	; 1
    1834:	ec 81       	ldd	r30, Y+4	; 0x04
    1836:	fd 81       	ldd	r31, Y+5	; 0x05
    1838:	80 83       	st	Z, r24
    183a:	2d c0       	rjmp	.+90     	; 0x1896 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    183c:	e3 e3       	ldi	r30, 0x33	; 51
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	88 2f       	mov	r24, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a9 01       	movw	r20, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_u8GetPinValue+0xda>
    1850:	55 95       	asr	r21
    1852:	47 95       	ror	r20
    1854:	8a 95       	dec	r24
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_u8GetPinValue+0xd6>
    1858:	ca 01       	movw	r24, r20
    185a:	81 70       	andi	r24, 0x01	; 1
    185c:	ec 81       	ldd	r30, Y+4	; 0x04
    185e:	fd 81       	ldd	r31, Y+5	; 0x05
    1860:	80 83       	st	Z, r24
    1862:	19 c0       	rjmp	.+50     	; 0x1896 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    1864:	e0 e3       	ldi	r30, 0x30	; 48
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	88 2f       	mov	r24, r24
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a9 01       	movw	r20, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_u8GetPinValue+0x102>
    1878:	55 95       	asr	r21
    187a:	47 95       	ror	r20
    187c:	8a 95       	dec	r24
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <DIO_u8GetPinValue+0xfe>
    1880:	ca 01       	movw	r24, r20
    1882:	81 70       	andi	r24, 0x01	; 1
    1884:	ec 81       	ldd	r30, Y+4	; 0x04
    1886:	fd 81       	ldd	r31, Y+5	; 0x05
    1888:	80 83       	st	Z, r24
    188a:	05 c0       	rjmp	.+10     	; 0x1896 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState=1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_u8GetPinValue+0x11c>
			}
		}
	else
	{
		Local_u8ErrorState=1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_u8ErrorState;
    1896:	89 81       	ldd	r24, Y+1	; 0x01
}
    1898:	27 96       	adiw	r28, 0x07	; 7
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <main>:

#include "CLCD_interface.h"
#include "DIO_interface.h"

void main(void)
{
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	c1 5d       	subi	r28, 0xD1	; 209
    18b8:	d0 40       	sbci	r29, 0x00	; 0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
	/*Initialize LCD pins direction*/
	CLCD_voidInit(CLCD_2Lines_5x11Fontsize,CLCD_Curser_OFF);
    18c4:	8c e3       	ldi	r24, 0x3C	; 60
    18c6:	6c e0       	ldi	r22, 0x0C	; 12
    18c8:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidInit>
			,0b00001010
			,0b00000100
			,0b00001110
			,0b00010101
			,0b00001010
			,0b00010001};
    18cc:	ce 01       	movw	r24, r28
    18ce:	86 55       	subi	r24, 0x56	; 86
    18d0:	9f 4f       	sbci	r25, 0xFF	; 255
    18d2:	28 e0       	ldi	r18, 0x08	; 8
    18d4:	fc 01       	movw	r30, r24
    18d6:	df 01       	movw	r26, r30
    18d8:	62 2f       	mov	r22, r18
    18da:	1d 92       	st	X+, r1
    18dc:	6a 95       	dec	r22
    18de:	e9 f7       	brne	.-6      	; 0x18da <main+0x30>
    18e0:	fe 01       	movw	r30, r28
    18e2:	e6 55       	subi	r30, 0x56	; 86
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	84 e0       	ldi	r24, 0x04	; 4
    18e8:	80 83       	st	Z, r24
    18ea:	fe 01       	movw	r30, r28
    18ec:	e6 55       	subi	r30, 0x56	; 86
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	8a e0       	ldi	r24, 0x0A	; 10
    18f2:	81 83       	std	Z+1, r24	; 0x01
    18f4:	fe 01       	movw	r30, r28
    18f6:	e6 55       	subi	r30, 0x56	; 86
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	84 e0       	ldi	r24, 0x04	; 4
    18fc:	82 83       	std	Z+2, r24	; 0x02
    18fe:	fe 01       	movw	r30, r28
    1900:	e6 55       	subi	r30, 0x56	; 86
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	8e e0       	ldi	r24, 0x0E	; 14
    1906:	83 83       	std	Z+3, r24	; 0x03
    1908:	fe 01       	movw	r30, r28
    190a:	e6 55       	subi	r30, 0x56	; 86
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	85 e1       	ldi	r24, 0x15	; 21
    1910:	84 83       	std	Z+4, r24	; 0x04
    1912:	fe 01       	movw	r30, r28
    1914:	e6 55       	subi	r30, 0x56	; 86
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	8a e0       	ldi	r24, 0x0A	; 10
    191a:	85 83       	std	Z+5, r24	; 0x05
    191c:	fe 01       	movw	r30, r28
    191e:	e6 55       	subi	r30, 0x56	; 86
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	81 e1       	ldi	r24, 0x11	; 17
    1924:	86 83       	std	Z+6, r24	; 0x06
			,0b00001010
			,0b00000100
			,0b00001110
			,0b00000100
			,0b00001010
			,0b00010001};
    1926:	ce 01       	movw	r24, r28
    1928:	8e 54       	subi	r24, 0x4E	; 78
    192a:	9f 4f       	sbci	r25, 0xFF	; 255
    192c:	28 e0       	ldi	r18, 0x08	; 8
    192e:	fc 01       	movw	r30, r24
    1930:	df 01       	movw	r26, r30
    1932:	62 2f       	mov	r22, r18
    1934:	1d 92       	st	X+, r1
    1936:	6a 95       	dec	r22
    1938:	e9 f7       	brne	.-6      	; 0x1934 <main+0x8a>
    193a:	fe 01       	movw	r30, r28
    193c:	ee 54       	subi	r30, 0x4E	; 78
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	84 e0       	ldi	r24, 0x04	; 4
    1942:	80 83       	st	Z, r24
    1944:	fe 01       	movw	r30, r28
    1946:	ee 54       	subi	r30, 0x4E	; 78
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	8a e0       	ldi	r24, 0x0A	; 10
    194c:	81 83       	std	Z+1, r24	; 0x01
    194e:	fe 01       	movw	r30, r28
    1950:	ee 54       	subi	r30, 0x4E	; 78
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	84 e0       	ldi	r24, 0x04	; 4
    1956:	82 83       	std	Z+2, r24	; 0x02
    1958:	fe 01       	movw	r30, r28
    195a:	ee 54       	subi	r30, 0x4E	; 78
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	8e e0       	ldi	r24, 0x0E	; 14
    1960:	83 83       	std	Z+3, r24	; 0x03
    1962:	fe 01       	movw	r30, r28
    1964:	ee 54       	subi	r30, 0x4E	; 78
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	84 e0       	ldi	r24, 0x04	; 4
    196a:	84 83       	std	Z+4, r24	; 0x04
    196c:	fe 01       	movw	r30, r28
    196e:	ee 54       	subi	r30, 0x4E	; 78
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	8a e0       	ldi	r24, 0x0A	; 10
    1974:	85 83       	std	Z+5, r24	; 0x05
    1976:	fe 01       	movw	r30, r28
    1978:	ee 54       	subi	r30, 0x4E	; 78
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	81 e1       	ldi	r24, 0x11	; 17
    197e:	86 83       	std	Z+6, r24	; 0x06
			,0b00001010
			,0b00000101
			,0b00001110
			,0b00010100
			,0b00001100
			,0b00010100};
    1980:	ce 01       	movw	r24, r28
    1982:	86 54       	subi	r24, 0x46	; 70
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	28 e0       	ldi	r18, 0x08	; 8
    1988:	fc 01       	movw	r30, r24
    198a:	df 01       	movw	r26, r30
    198c:	62 2f       	mov	r22, r18
    198e:	1d 92       	st	X+, r1
    1990:	6a 95       	dec	r22
    1992:	e9 f7       	brne	.-6      	; 0x198e <main+0xe4>
    1994:	fe 01       	movw	r30, r28
    1996:	e6 54       	subi	r30, 0x46	; 70
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	84 e0       	ldi	r24, 0x04	; 4
    199c:	80 83       	st	Z, r24
    199e:	fe 01       	movw	r30, r28
    19a0:	e6 54       	subi	r30, 0x46	; 70
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	8a e0       	ldi	r24, 0x0A	; 10
    19a6:	81 83       	std	Z+1, r24	; 0x01
    19a8:	fe 01       	movw	r30, r28
    19aa:	e6 54       	subi	r30, 0x46	; 70
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	85 e0       	ldi	r24, 0x05	; 5
    19b0:	82 83       	std	Z+2, r24	; 0x02
    19b2:	fe 01       	movw	r30, r28
    19b4:	e6 54       	subi	r30, 0x46	; 70
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	8e e0       	ldi	r24, 0x0E	; 14
    19ba:	83 83       	std	Z+3, r24	; 0x03
    19bc:	fe 01       	movw	r30, r28
    19be:	e6 54       	subi	r30, 0x46	; 70
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	84 e1       	ldi	r24, 0x14	; 20
    19c4:	84 83       	std	Z+4, r24	; 0x04
    19c6:	fe 01       	movw	r30, r28
    19c8:	e6 54       	subi	r30, 0x46	; 70
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	8c e0       	ldi	r24, 0x0C	; 12
    19ce:	85 83       	std	Z+5, r24	; 0x05
    19d0:	fe 01       	movw	r30, r28
    19d2:	e6 54       	subi	r30, 0x46	; 70
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	84 e1       	ldi	r24, 0x14	; 20
    19d8:	86 83       	std	Z+6, r24	; 0x06
			,0b00001010
			,0b00010100
			,0b00001110
			,0b00000101
			,0b00000110
			,0b00000101};
    19da:	ce 01       	movw	r24, r28
    19dc:	8e 53       	subi	r24, 0x3E	; 62
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	28 e0       	ldi	r18, 0x08	; 8
    19e2:	fc 01       	movw	r30, r24
    19e4:	df 01       	movw	r26, r30
    19e6:	62 2f       	mov	r22, r18
    19e8:	1d 92       	st	X+, r1
    19ea:	6a 95       	dec	r22
    19ec:	e9 f7       	brne	.-6      	; 0x19e8 <main+0x13e>
    19ee:	fe 01       	movw	r30, r28
    19f0:	ee 53       	subi	r30, 0x3E	; 62
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	84 e0       	ldi	r24, 0x04	; 4
    19f6:	80 83       	st	Z, r24
    19f8:	fe 01       	movw	r30, r28
    19fa:	ee 53       	subi	r30, 0x3E	; 62
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	8a e0       	ldi	r24, 0x0A	; 10
    1a00:	81 83       	std	Z+1, r24	; 0x01
    1a02:	fe 01       	movw	r30, r28
    1a04:	ee 53       	subi	r30, 0x3E	; 62
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	84 e1       	ldi	r24, 0x14	; 20
    1a0a:	82 83       	std	Z+2, r24	; 0x02
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	ee 53       	subi	r30, 0x3E	; 62
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	8e e0       	ldi	r24, 0x0E	; 14
    1a14:	83 83       	std	Z+3, r24	; 0x03
    1a16:	fe 01       	movw	r30, r28
    1a18:	ee 53       	subi	r30, 0x3E	; 62
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	85 e0       	ldi	r24, 0x05	; 5
    1a1e:	84 83       	std	Z+4, r24	; 0x04
    1a20:	fe 01       	movw	r30, r28
    1a22:	ee 53       	subi	r30, 0x3E	; 62
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	86 e0       	ldi	r24, 0x06	; 6
    1a28:	85 83       	std	Z+5, r24	; 0x05
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	ee 53       	subi	r30, 0x3E	; 62
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	85 e0       	ldi	r24, 0x05	; 5
    1a32:	86 83       	std	Z+6, r24	; 0x06
			,0b00000000
			,0b00000000
			,0b00000000
			,0b00010001
			,0b00010001
			,0b00011111};
    1a34:	ce 01       	movw	r24, r28
    1a36:	86 53       	subi	r24, 0x36	; 54
    1a38:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3a:	28 e0       	ldi	r18, 0x08	; 8
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	df 01       	movw	r26, r30
    1a40:	62 2f       	mov	r22, r18
    1a42:	1d 92       	st	X+, r1
    1a44:	6a 95       	dec	r22
    1a46:	e9 f7       	brne	.-6      	; 0x1a42 <main+0x198>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e6 53       	subi	r30, 0x36	; 54
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	81 e1       	ldi	r24, 0x11	; 17
    1a50:	84 83       	std	Z+4, r24	; 0x04
    1a52:	fe 01       	movw	r30, r28
    1a54:	e6 53       	subi	r30, 0x36	; 54
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	81 e1       	ldi	r24, 0x11	; 17
    1a5a:	85 83       	std	Z+5, r24	; 0x05
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e6 53       	subi	r30, 0x36	; 54
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	8f e1       	ldi	r24, 0x1F	; 31
    1a64:	86 83       	std	Z+6, r24	; 0x06

	CLCD_voidWriteSpecialCharacter(arr_hamoksha,0,0,0);
    1a66:	ce 01       	movw	r24, r28
    1a68:	86 55       	subi	r24, 0x56	; 86
    1a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6c:	60 e0       	ldi	r22, 0x00	; 0
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidWriteSpecialCharacter>
	CLCD_voidGoToXY(0,3);
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	63 e0       	ldi	r22, 0x03	; 3
    1a7a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <CLCD_voidGoToXY>
	CLCD_voidSendString("Hello Iam");
    1a7e:	80 e6       	ldi	r24, 0x60	; 96
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,5);
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	65 e0       	ldi	r22, 0x05	; 5
    1a8a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <CLCD_voidGoToXY>
	CLCD_voidSendString("Hamoksha");
    1a8e:	8a e6       	ldi	r24, 0x6A	; 106
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendString>
    1a96:	fe 01       	movw	r30, r28
    1a98:	eb 55       	subi	r30, 0x5B	; 91
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	aa e7       	ldi	r26, 0x7A	; 122
    1aa2:	b4 e4       	ldi	r27, 0x44	; 68
    1aa4:	80 83       	st	Z, r24
    1aa6:	91 83       	std	Z+1, r25	; 0x01
    1aa8:	a2 83       	std	Z+2, r26	; 0x02
    1aaa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aac:	8e 01       	movw	r16, r28
    1aae:	0f 55       	subi	r16, 0x5F	; 95
    1ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	eb 55       	subi	r30, 0x5B	; 91
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	60 81       	ld	r22, Z
    1aba:	71 81       	ldd	r23, Z+1	; 0x01
    1abc:	82 81       	ldd	r24, Z+2	; 0x02
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	4a ef       	ldi	r20, 0xFA	; 250
    1ac6:	54 e4       	ldi	r21, 0x44	; 68
    1ac8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	80 83       	st	Z, r24
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	a2 83       	std	Z+2, r26	; 0x02
    1ad8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ada:	fe 01       	movw	r30, r28
    1adc:	ef 55       	subi	r30, 0x5F	; 95
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	60 81       	ld	r22, Z
    1ae2:	71 81       	ldd	r23, Z+1	; 0x01
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e8       	ldi	r20, 0x80	; 128
    1aee:	5f e3       	ldi	r21, 0x3F	; 63
    1af0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1af4:	88 23       	and	r24, r24
    1af6:	44 f4       	brge	.+16     	; 0x1b08 <main+0x25e>
		__ticks = 1;
    1af8:	fe 01       	movw	r30, r28
    1afa:	e1 56       	subi	r30, 0x61	; 97
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
    1b06:	64 c0       	rjmp	.+200    	; 0x1bd0 <main+0x326>
	else if (__tmp > 65535)
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ef 55       	subi	r30, 0x5F	; 95
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	3f ef       	ldi	r19, 0xFF	; 255
    1b1a:	4f e7       	ldi	r20, 0x7F	; 127
    1b1c:	57 e4       	ldi	r21, 0x47	; 71
    1b1e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b22:	18 16       	cp	r1, r24
    1b24:	0c f0       	brlt	.+2      	; 0x1b28 <main+0x27e>
    1b26:	43 c0       	rjmp	.+134    	; 0x1bae <main+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b28:	fe 01       	movw	r30, r28
    1b2a:	eb 55       	subi	r30, 0x5B	; 91
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	93 81       	ldd	r25, Z+3	; 0x03
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e2       	ldi	r20, 0x20	; 32
    1b3c:	51 e4       	ldi	r21, 0x41	; 65
    1b3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	8e 01       	movw	r16, r28
    1b48:	01 56       	subi	r16, 0x61	; 97
    1b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	f8 01       	movw	r30, r16
    1b5a:	91 83       	std	Z+1, r25	; 0x01
    1b5c:	80 83       	st	Z, r24
    1b5e:	1f c0       	rjmp	.+62     	; 0x1b9e <main+0x2f4>
    1b60:	fe 01       	movw	r30, r28
    1b62:	e3 56       	subi	r30, 0x63	; 99
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	88 ec       	ldi	r24, 0xC8	; 200
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	80 83       	st	Z, r24
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e3 56       	subi	r30, 0x63	; 99
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	80 81       	ld	r24, Z
    1b76:	91 81       	ldd	r25, Z+1	; 0x01
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <main+0x2ce>
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e3 56       	subi	r30, 0x63	; 99
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b86:	de 01       	movw	r26, r28
    1b88:	a1 56       	subi	r26, 0x61	; 97
    1b8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e1 56       	subi	r30, 0x61	; 97
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	11 96       	adiw	r26, 0x01	; 1
    1b9a:	9c 93       	st	X, r25
    1b9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e1 56       	subi	r30, 0x61	; 97
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	91 81       	ldd	r25, Z+1	; 0x01
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	d1 f6       	brne	.-76     	; 0x1b60 <main+0x2b6>
    1bac:	27 c0       	rjmp	.+78     	; 0x1bfc <main+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bae:	8e 01       	movw	r16, r28
    1bb0:	01 56       	subi	r16, 0x61	; 97
    1bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	ef 55       	subi	r30, 0x5F	; 95
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	60 81       	ld	r22, Z
    1bbc:	71 81       	ldd	r23, Z+1	; 0x01
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	f8 01       	movw	r30, r16
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	80 83       	st	Z, r24
    1bd0:	de 01       	movw	r26, r28
    1bd2:	a5 56       	subi	r26, 0x65	; 101
    1bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e1 56       	subi	r30, 0x61	; 97
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	8d 93       	st	X+, r24
    1be2:	9c 93       	st	X, r25
    1be4:	fe 01       	movw	r30, r28
    1be6:	e5 56       	subi	r30, 0x65	; 101
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <main+0x344>
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e5 56       	subi	r30, 0x65	; 101
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	91 83       	std	Z+1, r25	; 0x01
    1bfa:	80 83       	st	Z, r24
	_delay_ms(1000);
	CLCD_voidSendCommand(CLCD_Clear_Display);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	CLCD_voidGoToXY(0,3);
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	63 e0       	ldi	r22, 0x03	; 3
    1c06:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <CLCD_voidGoToXY>
	CLCD_voidSendString("I can Play");
    1c0a:	83 e7       	ldi	r24, 0x73	; 115
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,5);
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	65 e0       	ldi	r22, 0x05	; 5
    1c16:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <CLCD_voidGoToXY>
	CLCD_voidSendString("Football");
    1c1a:	8e e7       	ldi	r24, 0x7E	; 126
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendString>

	for(i=0;i<6;i++)
    1c22:	fe 01       	movw	r30, r28
    1c24:	e7 55       	subi	r30, 0x57	; 87
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	10 82       	st	Z, r1
    1c2a:	12 c1       	rjmp	.+548    	; 0x1e50 <main+0x5a6>
	{
		SET_BIT(arr_Foot[5-i],4);
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e7 55       	subi	r30, 0x57	; 87
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 81       	ld	r24, Z
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	85 e0       	ldi	r24, 0x05	; 5
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	ac 01       	movw	r20, r24
    1c3e:	42 1b       	sub	r20, r18
    1c40:	53 0b       	sbc	r21, r19
    1c42:	fe 01       	movw	r30, r28
    1c44:	e7 55       	subi	r30, 0x57	; 87
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	80 81       	ld	r24, Z
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	85 e0       	ldi	r24, 0x05	; 5
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	bc 01       	movw	r22, r24
    1c54:	62 1b       	sub	r22, r18
    1c56:	73 0b       	sbc	r23, r19
    1c58:	9b 01       	movw	r18, r22
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	8e 54       	subi	r24, 0x4E	; 78
    1c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c60:	fc 01       	movw	r30, r24
    1c62:	e2 0f       	add	r30, r18
    1c64:	f3 1f       	adc	r31, r19
    1c66:	80 81       	ld	r24, Z
    1c68:	28 2f       	mov	r18, r24
    1c6a:	20 61       	ori	r18, 0x10	; 16
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	8e 54       	subi	r24, 0x4E	; 78
    1c70:	9f 4f       	sbci	r25, 0xFF	; 255
    1c72:	fc 01       	movw	r30, r24
    1c74:	e4 0f       	add	r30, r20
    1c76:	f5 1f       	adc	r31, r21
    1c78:	20 83       	st	Z, r18
		CLCD_voidWriteSpecialCharacter(arr_Foot,1,1,0);
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	8e 54       	subi	r24, 0x4E	; 78
    1c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c80:	61 e0       	ldi	r22, 0x01	; 1
    1c82:	41 e0       	ldi	r20, 0x01	; 1
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidWriteSpecialCharacter>
		CLR_BIT(arr_Foot[5-i],4);
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e7 55       	subi	r30, 0x57	; 87
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 81       	ld	r24, Z
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	85 e0       	ldi	r24, 0x05	; 5
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	ac 01       	movw	r20, r24
    1c9c:	42 1b       	sub	r20, r18
    1c9e:	53 0b       	sbc	r21, r19
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	e7 55       	subi	r30, 0x57	; 87
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 81       	ld	r24, Z
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	85 e0       	ldi	r24, 0x05	; 5
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	a2 1b       	sub	r26, r18
    1cb4:	b3 0b       	sbc	r27, r19
    1cb6:	9d 01       	movw	r18, r26
    1cb8:	ce 01       	movw	r24, r28
    1cba:	8e 54       	subi	r24, 0x4E	; 78
    1cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	e2 0f       	add	r30, r18
    1cc2:	f3 1f       	adc	r31, r19
    1cc4:	80 81       	ld	r24, Z
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	2f 7e       	andi	r18, 0xEF	; 239
    1cca:	ce 01       	movw	r24, r28
    1ccc:	8e 54       	subi	r24, 0x4E	; 78
    1cce:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	e4 0f       	add	r30, r20
    1cd4:	f5 1f       	adc	r31, r21
    1cd6:	20 83       	st	Z, r18
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e9 56       	subi	r30, 0x69	; 105
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a8 e4       	ldi	r26, 0x48	; 72
    1ce4:	b3 e4       	ldi	r27, 0x43	; 67
    1ce6:	80 83       	st	Z, r24
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	a2 83       	std	Z+2, r26	; 0x02
    1cec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	8e 01       	movw	r16, r28
    1cf0:	0d 56       	subi	r16, 0x6D	; 109
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	e9 56       	subi	r30, 0x69	; 105
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	4a ef       	ldi	r20, 0xFA	; 250
    1d08:	54 e4       	ldi	r21, 0x44	; 68
    1d0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	f8 01       	movw	r30, r16
    1d14:	80 83       	st	Z, r24
    1d16:	91 83       	std	Z+1, r25	; 0x01
    1d18:	a2 83       	std	Z+2, r26	; 0x02
    1d1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	ed 56       	subi	r30, 0x6D	; 109
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	60 81       	ld	r22, Z
    1d24:	71 81       	ldd	r23, Z+1	; 0x01
    1d26:	82 81       	ldd	r24, Z+2	; 0x02
    1d28:	93 81       	ldd	r25, Z+3	; 0x03
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	44 f4       	brge	.+16     	; 0x1d4a <main+0x4a0>
		__ticks = 1;
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	ef 56       	subi	r30, 0x6F	; 111
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	80 83       	st	Z, r24
    1d48:	64 c0       	rjmp	.+200    	; 0x1e12 <main+0x568>
	else if (__tmp > 65535)
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ed 56       	subi	r30, 0x6D	; 109
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	93 81       	ldd	r25, Z+3	; 0x03
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	0c f0       	brlt	.+2      	; 0x1d6a <main+0x4c0>
    1d68:	43 c0       	rjmp	.+134    	; 0x1df0 <main+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	e9 56       	subi	r30, 0x69	; 105
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	60 81       	ld	r22, Z
    1d72:	71 81       	ldd	r23, Z+1	; 0x01
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e2       	ldi	r20, 0x20	; 32
    1d7e:	51 e4       	ldi	r21, 0x41	; 65
    1d80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	8e 01       	movw	r16, r28
    1d8a:	0f 56       	subi	r16, 0x6F	; 111
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
    1da0:	1f c0       	rjmp	.+62     	; 0x1de0 <main+0x536>
    1da2:	fe 01       	movw	r30, r28
    1da4:	e1 57       	subi	r30, 0x71	; 113
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	88 ec       	ldi	r24, 0xC8	; 200
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
    1db0:	fe 01       	movw	r30, r28
    1db2:	e1 57       	subi	r30, 0x71	; 113
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	80 81       	ld	r24, Z
    1db8:	91 81       	ldd	r25, Z+1	; 0x01
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <main+0x510>
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e1 57       	subi	r30, 0x71	; 113
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	de 01       	movw	r26, r28
    1dca:	af 56       	subi	r26, 0x6F	; 111
    1dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dce:	fe 01       	movw	r30, r28
    1dd0:	ef 56       	subi	r30, 0x6F	; 111
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	11 96       	adiw	r26, 0x01	; 1
    1ddc:	9c 93       	st	X, r25
    1dde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de0:	fe 01       	movw	r30, r28
    1de2:	ef 56       	subi	r30, 0x6F	; 111
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	91 81       	ldd	r25, Z+1	; 0x01
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	d1 f6       	brne	.-76     	; 0x1da2 <main+0x4f8>
    1dee:	27 c0       	rjmp	.+78     	; 0x1e3e <main+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df0:	8e 01       	movw	r16, r28
    1df2:	0f 56       	subi	r16, 0x6F	; 111
    1df4:	1f 4f       	sbci	r17, 0xFF	; 255
    1df6:	fe 01       	movw	r30, r28
    1df8:	ed 56       	subi	r30, 0x6D	; 109
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
    1e04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
    1e12:	de 01       	movw	r26, r28
    1e14:	a3 57       	subi	r26, 0x73	; 115
    1e16:	bf 4f       	sbci	r27, 0xFF	; 255
    1e18:	fe 01       	movw	r30, r28
    1e1a:	ef 56       	subi	r30, 0x6F	; 111
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	8d 93       	st	X+, r24
    1e24:	9c 93       	st	X, r25
    1e26:	fe 01       	movw	r30, r28
    1e28:	e3 57       	subi	r30, 0x73	; 115
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <main+0x586>
    1e34:	fe 01       	movw	r30, r28
    1e36:	e3 57       	subi	r30, 0x73	; 115
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
	CLCD_voidGoToXY(0,3);
	CLCD_voidSendString("I can Play");
	CLCD_voidGoToXY(1,5);
	CLCD_voidSendString("Football");

	for(i=0;i<6;i++)
    1e3e:	de 01       	movw	r26, r28
    1e40:	a7 55       	subi	r26, 0x57	; 87
    1e42:	bf 4f       	sbci	r27, 0xFF	; 255
    1e44:	fe 01       	movw	r30, r28
    1e46:	e7 55       	subi	r30, 0x57	; 87
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 81       	ld	r24, Z
    1e4c:	8f 5f       	subi	r24, 0xFF	; 255
    1e4e:	8c 93       	st	X, r24
    1e50:	fe 01       	movw	r30, r28
    1e52:	e7 55       	subi	r30, 0x57	; 87
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	80 81       	ld	r24, Z
    1e58:	86 30       	cpi	r24, 0x06	; 6
    1e5a:	08 f4       	brcc	.+2      	; 0x1e5e <main+0x5b4>
    1e5c:	e7 ce       	rjmp	.-562    	; 0x1c2c <main+0x382>
		SET_BIT(arr_Foot[5-i],4);
		CLCD_voidWriteSpecialCharacter(arr_Foot,1,1,0);
		CLR_BIT(arr_Foot[5-i],4);
		_delay_ms(200);
	}
	for(i=5;i>0;i--)
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e7 55       	subi	r30, 0x57	; 87
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	85 e0       	ldi	r24, 0x05	; 5
    1e66:	80 83       	st	Z, r24
    1e68:	12 c1       	rjmp	.+548    	; 0x208e <main+0x7e4>
	{
		SET_BIT(arr_Foot[5-i],4);
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e7 55       	subi	r30, 0x57	; 87
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	80 81       	ld	r24, Z
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	85 e0       	ldi	r24, 0x05	; 5
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	ac 01       	movw	r20, r24
    1e7c:	42 1b       	sub	r20, r18
    1e7e:	53 0b       	sbc	r21, r19
    1e80:	fe 01       	movw	r30, r28
    1e82:	e7 55       	subi	r30, 0x57	; 87
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 81       	ld	r24, Z
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	85 e0       	ldi	r24, 0x05	; 5
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	bc 01       	movw	r22, r24
    1e92:	62 1b       	sub	r22, r18
    1e94:	73 0b       	sbc	r23, r19
    1e96:	9b 01       	movw	r18, r22
    1e98:	ce 01       	movw	r24, r28
    1e9a:	8e 54       	subi	r24, 0x4E	; 78
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	e2 0f       	add	r30, r18
    1ea2:	f3 1f       	adc	r31, r19
    1ea4:	80 81       	ld	r24, Z
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	20 61       	ori	r18, 0x10	; 16
    1eaa:	ce 01       	movw	r24, r28
    1eac:	8e 54       	subi	r24, 0x4E	; 78
    1eae:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	e4 0f       	add	r30, r20
    1eb4:	f5 1f       	adc	r31, r21
    1eb6:	20 83       	st	Z, r18
		CLCD_voidWriteSpecialCharacter(arr_Foot,1,1,0);
    1eb8:	ce 01       	movw	r24, r28
    1eba:	8e 54       	subi	r24, 0x4E	; 78
    1ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebe:	61 e0       	ldi	r22, 0x01	; 1
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidWriteSpecialCharacter>
		CLR_BIT(arr_Foot[5-i],4);
    1ec8:	fe 01       	movw	r30, r28
    1eca:	e7 55       	subi	r30, 0x57	; 87
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 81       	ld	r24, Z
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	85 e0       	ldi	r24, 0x05	; 5
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	ac 01       	movw	r20, r24
    1eda:	42 1b       	sub	r20, r18
    1edc:	53 0b       	sbc	r21, r19
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e7 55       	subi	r30, 0x57	; 87
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 81       	ld	r24, Z
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	85 e0       	ldi	r24, 0x05	; 5
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	dc 01       	movw	r26, r24
    1ef0:	a2 1b       	sub	r26, r18
    1ef2:	b3 0b       	sbc	r27, r19
    1ef4:	9d 01       	movw	r18, r26
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	8e 54       	subi	r24, 0x4E	; 78
    1efa:	9f 4f       	sbci	r25, 0xFF	; 255
    1efc:	fc 01       	movw	r30, r24
    1efe:	e2 0f       	add	r30, r18
    1f00:	f3 1f       	adc	r31, r19
    1f02:	80 81       	ld	r24, Z
    1f04:	28 2f       	mov	r18, r24
    1f06:	2f 7e       	andi	r18, 0xEF	; 239
    1f08:	ce 01       	movw	r24, r28
    1f0a:	8e 54       	subi	r24, 0x4E	; 78
    1f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0e:	fc 01       	movw	r30, r24
    1f10:	e4 0f       	add	r30, r20
    1f12:	f5 1f       	adc	r31, r21
    1f14:	20 83       	st	Z, r18
    1f16:	fe 01       	movw	r30, r28
    1f18:	e7 57       	subi	r30, 0x77	; 119
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a8 e4       	ldi	r26, 0x48	; 72
    1f22:	b3 e4       	ldi	r27, 0x43	; 67
    1f24:	80 83       	st	Z, r24
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	a2 83       	std	Z+2, r26	; 0x02
    1f2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2c:	8e 01       	movw	r16, r28
    1f2e:	0b 57       	subi	r16, 0x7B	; 123
    1f30:	1f 4f       	sbci	r17, 0xFF	; 255
    1f32:	fe 01       	movw	r30, r28
    1f34:	e7 57       	subi	r30, 0x77	; 119
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	60 81       	ld	r22, Z
    1f3a:	71 81       	ldd	r23, Z+1	; 0x01
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	93 81       	ldd	r25, Z+3	; 0x03
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4a ef       	ldi	r20, 0xFA	; 250
    1f46:	54 e4       	ldi	r21, 0x44	; 68
    1f48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	f8 01       	movw	r30, r16
    1f52:	80 83       	st	Z, r24
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	a2 83       	std	Z+2, r26	; 0x02
    1f58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	eb 57       	subi	r30, 0x7B	; 123
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	44 f4       	brge	.+16     	; 0x1f88 <main+0x6de>
		__ticks = 1;
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ed 57       	subi	r30, 0x7D	; 125
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	80 83       	st	Z, r24
    1f86:	64 c0       	rjmp	.+200    	; 0x2050 <main+0x7a6>
	else if (__tmp > 65535)
    1f88:	fe 01       	movw	r30, r28
    1f8a:	eb 57       	subi	r30, 0x7B	; 123
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	60 81       	ld	r22, Z
    1f90:	71 81       	ldd	r23, Z+1	; 0x01
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	93 81       	ldd	r25, Z+3	; 0x03
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	3f ef       	ldi	r19, 0xFF	; 255
    1f9a:	4f e7       	ldi	r20, 0x7F	; 127
    1f9c:	57 e4       	ldi	r21, 0x47	; 71
    1f9e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fa2:	18 16       	cp	r1, r24
    1fa4:	0c f0       	brlt	.+2      	; 0x1fa8 <main+0x6fe>
    1fa6:	43 c0       	rjmp	.+134    	; 0x202e <main+0x784>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e7 57       	subi	r30, 0x77	; 119
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	60 81       	ld	r22, Z
    1fb0:	71 81       	ldd	r23, Z+1	; 0x01
    1fb2:	82 81       	ldd	r24, Z+2	; 0x02
    1fb4:	93 81       	ldd	r25, Z+3	; 0x03
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e2       	ldi	r20, 0x20	; 32
    1fbc:	51 e4       	ldi	r21, 0x41	; 65
    1fbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8e 01       	movw	r16, r28
    1fc8:	0d 57       	subi	r16, 0x7D	; 125
    1fca:	1f 4f       	sbci	r17, 0xFF	; 255
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	f8 01       	movw	r30, r16
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	80 83       	st	Z, r24
    1fde:	1f c0       	rjmp	.+62     	; 0x201e <main+0x774>
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	ef 57       	subi	r30, 0x7F	; 127
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	88 ec       	ldi	r24, 0xC8	; 200
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	80 83       	st	Z, r24
    1fee:	fe 01       	movw	r30, r28
    1ff0:	ef 57       	subi	r30, 0x7F	; 127
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <main+0x74e>
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	ef 57       	subi	r30, 0x7F	; 127
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2006:	de 01       	movw	r26, r28
    2008:	ad 57       	subi	r26, 0x7D	; 125
    200a:	bf 4f       	sbci	r27, 0xFF	; 255
    200c:	fe 01       	movw	r30, r28
    200e:	ed 57       	subi	r30, 0x7D	; 125
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	80 81       	ld	r24, Z
    2014:	91 81       	ldd	r25, Z+1	; 0x01
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	11 96       	adiw	r26, 0x01	; 1
    201a:	9c 93       	st	X, r25
    201c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201e:	fe 01       	movw	r30, r28
    2020:	ed 57       	subi	r30, 0x7D	; 125
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	d1 f6       	brne	.-76     	; 0x1fe0 <main+0x736>
    202c:	27 c0       	rjmp	.+78     	; 0x207c <main+0x7d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202e:	8e 01       	movw	r16, r28
    2030:	0d 57       	subi	r16, 0x7D	; 125
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	fe 01       	movw	r30, r28
    2036:	eb 57       	subi	r30, 0x7B	; 123
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	f8 01       	movw	r30, r16
    204c:	91 83       	std	Z+1, r25	; 0x01
    204e:	80 83       	st	Z, r24
    2050:	de 01       	movw	r26, r28
    2052:	a1 58       	subi	r26, 0x81	; 129
    2054:	bf 4f       	sbci	r27, 0xFF	; 255
    2056:	fe 01       	movw	r30, r28
    2058:	ed 57       	subi	r30, 0x7D	; 125
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	91 81       	ldd	r25, Z+1	; 0x01
    2060:	8d 93       	st	X+, r24
    2062:	9c 93       	st	X, r25
    2064:	fe 01       	movw	r30, r28
    2066:	e1 58       	subi	r30, 0x81	; 129
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	80 81       	ld	r24, Z
    206c:	91 81       	ldd	r25, Z+1	; 0x01
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <main+0x7c4>
    2072:	fe 01       	movw	r30, r28
    2074:	e1 58       	subi	r30, 0x81	; 129
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	80 83       	st	Z, r24
		SET_BIT(arr_Foot[5-i],4);
		CLCD_voidWriteSpecialCharacter(arr_Foot,1,1,0);
		CLR_BIT(arr_Foot[5-i],4);
		_delay_ms(200);
	}
	for(i=5;i>0;i--)
    207c:	de 01       	movw	r26, r28
    207e:	a7 55       	subi	r26, 0x57	; 87
    2080:	bf 4f       	sbci	r27, 0xFF	; 255
    2082:	fe 01       	movw	r30, r28
    2084:	e7 55       	subi	r30, 0x57	; 87
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 81       	ld	r24, Z
    208a:	81 50       	subi	r24, 0x01	; 1
    208c:	8c 93       	st	X, r24
    208e:	fe 01       	movw	r30, r28
    2090:	e7 55       	subi	r30, 0x57	; 87
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 81       	ld	r24, Z
    2096:	88 23       	and	r24, r24
    2098:	09 f0       	breq	.+2      	; 0x209c <main+0x7f2>
    209a:	e7 ce       	rjmp	.-562    	; 0x1e6a <main+0x5c0>
		SET_BIT(arr_Foot[5-i],4);
		CLCD_voidWriteSpecialCharacter(arr_Foot,1,1,0);
		CLR_BIT(arr_Foot[5-i],4);
		_delay_ms(200);
	}
	CLCD_voidSendCommand(CLCD_Clear_Display);
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	CLCD_voidGoToXY(0,3);
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	63 e0       	ldi	r22, 0x03	; 3
    20a6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <CLCD_voidGoToXY>
	CLCD_voidSendString("I can Play");
    20aa:	83 e7       	ldi	r24, 0x73	; 115
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,5);
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	65 e0       	ldi	r22, 0x05	; 5
    20b6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <CLCD_voidGoToXY>
	CLCD_voidSendString("Run");
    20ba:	87 e8       	ldi	r24, 0x87	; 135
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendString>
    20c2:	fe 01       	movw	r30, r28
    20c4:	e5 58       	subi	r30, 0x85	; 133
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	aa ef       	ldi	r26, 0xFA	; 250
    20ce:	b3 e4       	ldi	r27, 0x43	; 67
    20d0:	80 83       	st	Z, r24
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	a2 83       	std	Z+2, r26	; 0x02
    20d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d8:	8e 01       	movw	r16, r28
    20da:	09 58       	subi	r16, 0x89	; 137
    20dc:	1f 4f       	sbci	r17, 0xFF	; 255
    20de:	fe 01       	movw	r30, r28
    20e0:	e5 58       	subi	r30, 0x85	; 133
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	60 81       	ld	r22, Z
    20e6:	71 81       	ldd	r23, Z+1	; 0x01
    20e8:	82 81       	ldd	r24, Z+2	; 0x02
    20ea:	93 81       	ldd	r25, Z+3	; 0x03
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a ef       	ldi	r20, 0xFA	; 250
    20f2:	54 e4       	ldi	r21, 0x44	; 68
    20f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	f8 01       	movw	r30, r16
    20fe:	80 83       	st	Z, r24
    2100:	91 83       	std	Z+1, r25	; 0x01
    2102:	a2 83       	std	Z+2, r26	; 0x02
    2104:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2106:	fe 01       	movw	r30, r28
    2108:	e9 58       	subi	r30, 0x89	; 137
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	60 81       	ld	r22, Z
    210e:	71 81       	ldd	r23, Z+1	; 0x01
    2110:	82 81       	ldd	r24, Z+2	; 0x02
    2112:	93 81       	ldd	r25, Z+3	; 0x03
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	44 f4       	brge	.+16     	; 0x2134 <main+0x88a>
		__ticks = 1;
    2124:	fe 01       	movw	r30, r28
    2126:	eb 58       	subi	r30, 0x8B	; 139
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	80 83       	st	Z, r24
    2132:	64 c0       	rjmp	.+200    	; 0x21fc <main+0x952>
	else if (__tmp > 65535)
    2134:	fe 01       	movw	r30, r28
    2136:	e9 58       	subi	r30, 0x89	; 137
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	60 81       	ld	r22, Z
    213c:	71 81       	ldd	r23, Z+1	; 0x01
    213e:	82 81       	ldd	r24, Z+2	; 0x02
    2140:	93 81       	ldd	r25, Z+3	; 0x03
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	3f ef       	ldi	r19, 0xFF	; 255
    2146:	4f e7       	ldi	r20, 0x7F	; 127
    2148:	57 e4       	ldi	r21, 0x47	; 71
    214a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    214e:	18 16       	cp	r1, r24
    2150:	0c f0       	brlt	.+2      	; 0x2154 <main+0x8aa>
    2152:	43 c0       	rjmp	.+134    	; 0x21da <main+0x930>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	fe 01       	movw	r30, r28
    2156:	e5 58       	subi	r30, 0x85	; 133
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e2       	ldi	r20, 0x20	; 32
    2168:	51 e4       	ldi	r21, 0x41	; 65
    216a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8e 01       	movw	r16, r28
    2174:	0b 58       	subi	r16, 0x8B	; 139
    2176:	1f 4f       	sbci	r17, 0xFF	; 255
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	f8 01       	movw	r30, r16
    2186:	91 83       	std	Z+1, r25	; 0x01
    2188:	80 83       	st	Z, r24
    218a:	1f c0       	rjmp	.+62     	; 0x21ca <main+0x920>
    218c:	fe 01       	movw	r30, r28
    218e:	ed 58       	subi	r30, 0x8D	; 141
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	88 ec       	ldi	r24, 0xC8	; 200
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	80 83       	st	Z, r24
    219a:	fe 01       	movw	r30, r28
    219c:	ed 58       	subi	r30, 0x8D	; 141
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	91 81       	ldd	r25, Z+1	; 0x01
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <main+0x8fa>
    21a8:	fe 01       	movw	r30, r28
    21aa:	ed 58       	subi	r30, 0x8D	; 141
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b2:	de 01       	movw	r26, r28
    21b4:	ab 58       	subi	r26, 0x8B	; 139
    21b6:	bf 4f       	sbci	r27, 0xFF	; 255
    21b8:	fe 01       	movw	r30, r28
    21ba:	eb 58       	subi	r30, 0x8B	; 139
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	80 81       	ld	r24, Z
    21c0:	91 81       	ldd	r25, Z+1	; 0x01
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	11 96       	adiw	r26, 0x01	; 1
    21c6:	9c 93       	st	X, r25
    21c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ca:	fe 01       	movw	r30, r28
    21cc:	eb 58       	subi	r30, 0x8B	; 139
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	d1 f6       	brne	.-76     	; 0x218c <main+0x8e2>
    21d8:	27 c0       	rjmp	.+78     	; 0x2228 <main+0x97e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21da:	8e 01       	movw	r16, r28
    21dc:	0b 58       	subi	r16, 0x8B	; 139
    21de:	1f 4f       	sbci	r17, 0xFF	; 255
    21e0:	fe 01       	movw	r30, r28
    21e2:	e9 58       	subi	r30, 0x89	; 137
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	f8 01       	movw	r30, r16
    21f8:	91 83       	std	Z+1, r25	; 0x01
    21fa:	80 83       	st	Z, r24
    21fc:	de 01       	movw	r26, r28
    21fe:	af 58       	subi	r26, 0x8F	; 143
    2200:	bf 4f       	sbci	r27, 0xFF	; 255
    2202:	fe 01       	movw	r30, r28
    2204:	eb 58       	subi	r30, 0x8B	; 139
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	80 81       	ld	r24, Z
    220a:	91 81       	ldd	r25, Z+1	; 0x01
    220c:	8d 93       	st	X+, r24
    220e:	9c 93       	st	X, r25
    2210:	fe 01       	movw	r30, r28
    2212:	ef 58       	subi	r30, 0x8F	; 143
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	80 81       	ld	r24, Z
    2218:	91 81       	ldd	r25, Z+1	; 0x01
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <main+0x970>
    221e:	fe 01       	movw	r30, r28
    2220:	ef 58       	subi	r30, 0x8F	; 143
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
	_delay_ms(500);
	CLCD_voidSendCommand(CLCD_Clear_Display);
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	CLCD_voidWriteSpecialCharacter(arr_hamoksha,0,0,0);
    222e:	ce 01       	movw	r24, r28
    2230:	86 55       	subi	r24, 0x56	; 86
    2232:	9f 4f       	sbci	r25, 0xFF	; 255
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidWriteSpecialCharacter>
	for(i=0;i<8;i++)
    223e:	fe 01       	movw	r30, r28
    2240:	e7 55       	subi	r30, 0x57	; 87
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	10 82       	st	Z, r1
    2246:	97 c1       	rjmp	.+814    	; 0x2576 <main+0xccc>
	{
		CLCD_voidSendCommand(CLCD_Clear_Display);
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
		CLCD_voidWriteSpecialCharacter(arr_Run1,2,0,1+2*i);
    224e:	fe 01       	movw	r30, r28
    2250:	e7 55       	subi	r30, 0x57	; 87
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 81       	ld	r24, Z
    2256:	88 2f       	mov	r24, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	28 2f       	mov	r18, r24
    2260:	2f 5f       	subi	r18, 0xFF	; 255
    2262:	ce 01       	movw	r24, r28
    2264:	86 54       	subi	r24, 0x46	; 70
    2266:	9f 4f       	sbci	r25, 0xFF	; 255
    2268:	62 e0       	ldi	r22, 0x02	; 2
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidWriteSpecialCharacter>
    2270:	fe 01       	movw	r30, r28
    2272:	e3 59       	subi	r30, 0x93	; 147
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a8 e4       	ldi	r26, 0x48	; 72
    227c:	b3 e4       	ldi	r27, 0x43	; 67
    227e:	80 83       	st	Z, r24
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	a2 83       	std	Z+2, r26	; 0x02
    2284:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2286:	8e 01       	movw	r16, r28
    2288:	07 59       	subi	r16, 0x97	; 151
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	e3 59       	subi	r30, 0x93	; 147
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a ef       	ldi	r20, 0xFA	; 250
    22a0:	54 e4       	ldi	r21, 0x44	; 68
    22a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	f8 01       	movw	r30, r16
    22ac:	80 83       	st	Z, r24
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	a2 83       	std	Z+2, r26	; 0x02
    22b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b4:	fe 01       	movw	r30, r28
    22b6:	e7 59       	subi	r30, 0x97	; 151
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	44 f4       	brge	.+16     	; 0x22e2 <main+0xa38>
		__ticks = 1;
    22d2:	fe 01       	movw	r30, r28
    22d4:	e9 59       	subi	r30, 0x99	; 153
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
    22e0:	64 c0       	rjmp	.+200    	; 0x23aa <main+0xb00>
	else if (__tmp > 65535)
    22e2:	fe 01       	movw	r30, r28
    22e4:	e7 59       	subi	r30, 0x97	; 151
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	3f ef       	ldi	r19, 0xFF	; 255
    22f4:	4f e7       	ldi	r20, 0x7F	; 127
    22f6:	57 e4       	ldi	r21, 0x47	; 71
    22f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22fc:	18 16       	cp	r1, r24
    22fe:	0c f0       	brlt	.+2      	; 0x2302 <main+0xa58>
    2300:	43 c0       	rjmp	.+134    	; 0x2388 <main+0xade>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2302:	fe 01       	movw	r30, r28
    2304:	e3 59       	subi	r30, 0x93	; 147
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	51 e4       	ldi	r21, 0x41	; 65
    2318:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8e 01       	movw	r16, r28
    2322:	09 59       	subi	r16, 0x99	; 153
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	f8 01       	movw	r30, r16
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
    2338:	1f c0       	rjmp	.+62     	; 0x2378 <main+0xace>
    233a:	fe 01       	movw	r30, r28
    233c:	eb 59       	subi	r30, 0x9B	; 155
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	88 ec       	ldi	r24, 0xC8	; 200
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	80 83       	st	Z, r24
    2348:	fe 01       	movw	r30, r28
    234a:	eb 59       	subi	r30, 0x9B	; 155
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <main+0xaa8>
    2356:	fe 01       	movw	r30, r28
    2358:	eb 59       	subi	r30, 0x9B	; 155
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	de 01       	movw	r26, r28
    2362:	a9 59       	subi	r26, 0x99	; 153
    2364:	bf 4f       	sbci	r27, 0xFF	; 255
    2366:	fe 01       	movw	r30, r28
    2368:	e9 59       	subi	r30, 0x99	; 153
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	11 96       	adiw	r26, 0x01	; 1
    2374:	9c 93       	st	X, r25
    2376:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	fe 01       	movw	r30, r28
    237a:	e9 59       	subi	r30, 0x99	; 153
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	d1 f6       	brne	.-76     	; 0x233a <main+0xa90>
    2386:	27 c0       	rjmp	.+78     	; 0x23d6 <main+0xb2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	8e 01       	movw	r16, r28
    238a:	09 59       	subi	r16, 0x99	; 153
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	fe 01       	movw	r30, r28
    2390:	e7 59       	subi	r30, 0x97	; 151
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	f8 01       	movw	r30, r16
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	80 83       	st	Z, r24
    23aa:	de 01       	movw	r26, r28
    23ac:	ad 59       	subi	r26, 0x9D	; 157
    23ae:	bf 4f       	sbci	r27, 0xFF	; 255
    23b0:	fe 01       	movw	r30, r28
    23b2:	e9 59       	subi	r30, 0x99	; 153
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	8d 93       	st	X+, r24
    23bc:	9c 93       	st	X, r25
    23be:	fe 01       	movw	r30, r28
    23c0:	ed 59       	subi	r30, 0x9D	; 157
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 81       	ld	r24, Z
    23c6:	91 81       	ldd	r25, Z+1	; 0x01
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <main+0xb1e>
    23cc:	fe 01       	movw	r30, r28
    23ce:	ed 59       	subi	r30, 0x9D	; 157
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
		_delay_ms(200);
		CLCD_voidSendCommand(CLCD_Clear_Display);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
		CLCD_voidWriteSpecialCharacter(arr_Run2,2,0,2+2*i);
    23dc:	fe 01       	movw	r30, r28
    23de:	e7 55       	subi	r30, 0x57	; 87
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 81       	ld	r24, Z
    23e4:	88 2f       	mov	r24, r24
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	01 96       	adiw	r24, 0x01	; 1
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	28 2f       	mov	r18, r24
    23f0:	ce 01       	movw	r24, r28
    23f2:	8e 53       	subi	r24, 0x3E	; 62
    23f4:	9f 4f       	sbci	r25, 0xFF	; 255
    23f6:	62 e0       	ldi	r22, 0x02	; 2
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidWriteSpecialCharacter>
    23fe:	fe 01       	movw	r30, r28
    2400:	e1 5a       	subi	r30, 0xA1	; 161
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a8 e4       	ldi	r26, 0x48	; 72
    240a:	b3 e4       	ldi	r27, 0x43	; 67
    240c:	80 83       	st	Z, r24
    240e:	91 83       	std	Z+1, r25	; 0x01
    2410:	a2 83       	std	Z+2, r26	; 0x02
    2412:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2414:	8e 01       	movw	r16, r28
    2416:	05 5a       	subi	r16, 0xA5	; 165
    2418:	1f 4f       	sbci	r17, 0xFF	; 255
    241a:	fe 01       	movw	r30, r28
    241c:	e1 5a       	subi	r30, 0xA1	; 161
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	60 81       	ld	r22, Z
    2422:	71 81       	ldd	r23, Z+1	; 0x01
    2424:	82 81       	ldd	r24, Z+2	; 0x02
    2426:	93 81       	ldd	r25, Z+3	; 0x03
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	4a ef       	ldi	r20, 0xFA	; 250
    242e:	54 e4       	ldi	r21, 0x44	; 68
    2430:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	f8 01       	movw	r30, r16
    243a:	80 83       	st	Z, r24
    243c:	91 83       	std	Z+1, r25	; 0x01
    243e:	a2 83       	std	Z+2, r26	; 0x02
    2440:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2442:	fe 01       	movw	r30, r28
    2444:	e5 5a       	subi	r30, 0xA5	; 165
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	60 81       	ld	r22, Z
    244a:	71 81       	ldd	r23, Z+1	; 0x01
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	93 81       	ldd	r25, Z+3	; 0x03
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    245c:	88 23       	and	r24, r24
    245e:	44 f4       	brge	.+16     	; 0x2470 <main+0xbc6>
		__ticks = 1;
    2460:	fe 01       	movw	r30, r28
    2462:	e7 5a       	subi	r30, 0xA7	; 167
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	80 83       	st	Z, r24
    246e:	64 c0       	rjmp	.+200    	; 0x2538 <main+0xc8e>
	else if (__tmp > 65535)
    2470:	fe 01       	movw	r30, r28
    2472:	e5 5a       	subi	r30, 0xA5	; 165
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	60 81       	ld	r22, Z
    2478:	71 81       	ldd	r23, Z+1	; 0x01
    247a:	82 81       	ldd	r24, Z+2	; 0x02
    247c:	93 81       	ldd	r25, Z+3	; 0x03
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	3f ef       	ldi	r19, 0xFF	; 255
    2482:	4f e7       	ldi	r20, 0x7F	; 127
    2484:	57 e4       	ldi	r21, 0x47	; 71
    2486:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    248a:	18 16       	cp	r1, r24
    248c:	0c f0       	brlt	.+2      	; 0x2490 <main+0xbe6>
    248e:	43 c0       	rjmp	.+134    	; 0x2516 <main+0xc6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2490:	fe 01       	movw	r30, r28
    2492:	e1 5a       	subi	r30, 0xA1	; 161
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	60 81       	ld	r22, Z
    2498:	71 81       	ldd	r23, Z+1	; 0x01
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	93 81       	ldd	r25, Z+3	; 0x03
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e2       	ldi	r20, 0x20	; 32
    24a4:	51 e4       	ldi	r21, 0x41	; 65
    24a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	8e 01       	movw	r16, r28
    24b0:	07 5a       	subi	r16, 0xA7	; 167
    24b2:	1f 4f       	sbci	r17, 0xFF	; 255
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	f8 01       	movw	r30, r16
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	80 83       	st	Z, r24
    24c6:	1f c0       	rjmp	.+62     	; 0x2506 <main+0xc5c>
    24c8:	fe 01       	movw	r30, r28
    24ca:	e9 5a       	subi	r30, 0xA9	; 169
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	88 ec       	ldi	r24, 0xC8	; 200
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	80 83       	st	Z, r24
    24d6:	fe 01       	movw	r30, r28
    24d8:	e9 5a       	subi	r30, 0xA9	; 169
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 81       	ld	r24, Z
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <main+0xc36>
    24e4:	fe 01       	movw	r30, r28
    24e6:	e9 5a       	subi	r30, 0xA9	; 169
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ee:	de 01       	movw	r26, r28
    24f0:	a7 5a       	subi	r26, 0xA7	; 167
    24f2:	bf 4f       	sbci	r27, 0xFF	; 255
    24f4:	fe 01       	movw	r30, r28
    24f6:	e7 5a       	subi	r30, 0xA7	; 167
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	91 81       	ldd	r25, Z+1	; 0x01
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	11 96       	adiw	r26, 0x01	; 1
    2502:	9c 93       	st	X, r25
    2504:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2506:	fe 01       	movw	r30, r28
    2508:	e7 5a       	subi	r30, 0xA7	; 167
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	80 81       	ld	r24, Z
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	d1 f6       	brne	.-76     	; 0x24c8 <main+0xc1e>
    2514:	27 c0       	rjmp	.+78     	; 0x2564 <main+0xcba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	8e 01       	movw	r16, r28
    2518:	07 5a       	subi	r16, 0xA7	; 167
    251a:	1f 4f       	sbci	r17, 0xFF	; 255
    251c:	fe 01       	movw	r30, r28
    251e:	e5 5a       	subi	r30, 0xA5	; 165
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	f8 01       	movw	r30, r16
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	80 83       	st	Z, r24
    2538:	de 01       	movw	r26, r28
    253a:	ab 5a       	subi	r26, 0xAB	; 171
    253c:	bf 4f       	sbci	r27, 0xFF	; 255
    253e:	fe 01       	movw	r30, r28
    2540:	e7 5a       	subi	r30, 0xA7	; 167
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	8d 93       	st	X+, r24
    254a:	9c 93       	st	X, r25
    254c:	fe 01       	movw	r30, r28
    254e:	eb 5a       	subi	r30, 0xAB	; 171
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	80 81       	ld	r24, Z
    2554:	91 81       	ldd	r25, Z+1	; 0x01
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <main+0xcac>
    255a:	fe 01       	movw	r30, r28
    255c:	eb 5a       	subi	r30, 0xAB	; 171
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	91 83       	std	Z+1, r25	; 0x01
    2562:	80 83       	st	Z, r24
	CLCD_voidGoToXY(1,5);
	CLCD_voidSendString("Run");
	_delay_ms(500);
	CLCD_voidSendCommand(CLCD_Clear_Display);
	CLCD_voidWriteSpecialCharacter(arr_hamoksha,0,0,0);
	for(i=0;i<8;i++)
    2564:	de 01       	movw	r26, r28
    2566:	a7 55       	subi	r26, 0x57	; 87
    2568:	bf 4f       	sbci	r27, 0xFF	; 255
    256a:	fe 01       	movw	r30, r28
    256c:	e7 55       	subi	r30, 0x57	; 87
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	8c 93       	st	X, r24
    2576:	fe 01       	movw	r30, r28
    2578:	e7 55       	subi	r30, 0x57	; 87
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	80 81       	ld	r24, Z
    257e:	88 30       	cpi	r24, 0x08	; 8
    2580:	08 f4       	brcc	.+2      	; 0x2584 <main+0xcda>
    2582:	62 ce       	rjmp	.-828    	; 0x2248 <main+0x99e>
		_delay_ms(200);
		CLCD_voidSendCommand(CLCD_Clear_Display);
		CLCD_voidWriteSpecialCharacter(arr_Run2,2,0,2+2*i);
		_delay_ms(200);
	}
	for(i=1;i<8;i++)
    2584:	fe 01       	movw	r30, r28
    2586:	e7 55       	subi	r30, 0x57	; 87
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	80 83       	st	Z, r24
    258e:	6f c1       	rjmp	.+734    	; 0x286e <main+0xfc4>
	{
		CLCD_voidSendCommand(CLCD_Clear_Display);
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
		CLCD_voidWriteSpecialCharacter(arr_Run2,2,0,16-2*i);
    2596:	fe 01       	movw	r30, r28
    2598:	e7 55       	subi	r30, 0x57	; 87
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	88 e0       	ldi	r24, 0x08	; 8
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	82 1b       	sub	r24, r18
    25a8:	93 0b       	sbc	r25, r19
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	28 2f       	mov	r18, r24
    25b0:	ce 01       	movw	r24, r28
    25b2:	8e 53       	subi	r24, 0x3E	; 62
    25b4:	9f 4f       	sbci	r25, 0xFF	; 255
    25b6:	62 e0       	ldi	r22, 0x02	; 2
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidWriteSpecialCharacter>
    25be:	fe 01       	movw	r30, r28
    25c0:	ef 5a       	subi	r30, 0xAF	; 175
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a8 e4       	ldi	r26, 0x48	; 72
    25ca:	b3 e4       	ldi	r27, 0x43	; 67
    25cc:	80 83       	st	Z, r24
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	a2 83       	std	Z+2, r26	; 0x02
    25d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d4:	8e 01       	movw	r16, r28
    25d6:	03 5b       	subi	r16, 0xB3	; 179
    25d8:	1f 4f       	sbci	r17, 0xFF	; 255
    25da:	fe 01       	movw	r30, r28
    25dc:	ef 5a       	subi	r30, 0xAF	; 175
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	60 81       	ld	r22, Z
    25e2:	71 81       	ldd	r23, Z+1	; 0x01
    25e4:	82 81       	ldd	r24, Z+2	; 0x02
    25e6:	93 81       	ldd	r25, Z+3	; 0x03
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a ef       	ldi	r20, 0xFA	; 250
    25ee:	54 e4       	ldi	r21, 0x44	; 68
    25f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	f8 01       	movw	r30, r16
    25fa:	80 83       	st	Z, r24
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	a2 83       	std	Z+2, r26	; 0x02
    2600:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2602:	fe 01       	movw	r30, r28
    2604:	e3 5b       	subi	r30, 0xB3	; 179
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	93 81       	ldd	r25, Z+3	; 0x03
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	44 f4       	brge	.+16     	; 0x2630 <main+0xd86>
		__ticks = 1;
    2620:	fe 01       	movw	r30, r28
    2622:	e5 5b       	subi	r30, 0xB5	; 181
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	80 83       	st	Z, r24
    262e:	64 c0       	rjmp	.+200    	; 0x26f8 <main+0xe4e>
	else if (__tmp > 65535)
    2630:	fe 01       	movw	r30, r28
    2632:	e3 5b       	subi	r30, 0xB3	; 179
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	60 81       	ld	r22, Z
    2638:	71 81       	ldd	r23, Z+1	; 0x01
    263a:	82 81       	ldd	r24, Z+2	; 0x02
    263c:	93 81       	ldd	r25, Z+3	; 0x03
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	3f ef       	ldi	r19, 0xFF	; 255
    2642:	4f e7       	ldi	r20, 0x7F	; 127
    2644:	57 e4       	ldi	r21, 0x47	; 71
    2646:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    264a:	18 16       	cp	r1, r24
    264c:	0c f0       	brlt	.+2      	; 0x2650 <main+0xda6>
    264e:	43 c0       	rjmp	.+134    	; 0x26d6 <main+0xe2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	fe 01       	movw	r30, r28
    2652:	ef 5a       	subi	r30, 0xAF	; 175
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	60 81       	ld	r22, Z
    2658:	71 81       	ldd	r23, Z+1	; 0x01
    265a:	82 81       	ldd	r24, Z+2	; 0x02
    265c:	93 81       	ldd	r25, Z+3	; 0x03
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e2       	ldi	r20, 0x20	; 32
    2664:	51 e4       	ldi	r21, 0x41	; 65
    2666:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	8e 01       	movw	r16, r28
    2670:	05 5b       	subi	r16, 0xB5	; 181
    2672:	1f 4f       	sbci	r17, 0xFF	; 255
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	f8 01       	movw	r30, r16
    2682:	91 83       	std	Z+1, r25	; 0x01
    2684:	80 83       	st	Z, r24
    2686:	1f c0       	rjmp	.+62     	; 0x26c6 <main+0xe1c>
    2688:	fe 01       	movw	r30, r28
    268a:	e7 5b       	subi	r30, 0xB7	; 183
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	88 ec       	ldi	r24, 0xC8	; 200
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	80 83       	st	Z, r24
    2696:	fe 01       	movw	r30, r28
    2698:	e7 5b       	subi	r30, 0xB7	; 183
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	80 81       	ld	r24, Z
    269e:	91 81       	ldd	r25, Z+1	; 0x01
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <main+0xdf6>
    26a4:	fe 01       	movw	r30, r28
    26a6:	e7 5b       	subi	r30, 0xB7	; 183
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	de 01       	movw	r26, r28
    26b0:	a5 5b       	subi	r26, 0xB5	; 181
    26b2:	bf 4f       	sbci	r27, 0xFF	; 255
    26b4:	fe 01       	movw	r30, r28
    26b6:	e5 5b       	subi	r30, 0xB5	; 181
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	91 81       	ldd	r25, Z+1	; 0x01
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	11 96       	adiw	r26, 0x01	; 1
    26c2:	9c 93       	st	X, r25
    26c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c6:	fe 01       	movw	r30, r28
    26c8:	e5 5b       	subi	r30, 0xB5	; 181
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 81       	ld	r24, Z
    26ce:	91 81       	ldd	r25, Z+1	; 0x01
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	d1 f6       	brne	.-76     	; 0x2688 <main+0xdde>
    26d4:	27 c0       	rjmp	.+78     	; 0x2724 <main+0xe7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d6:	8e 01       	movw	r16, r28
    26d8:	05 5b       	subi	r16, 0xB5	; 181
    26da:	1f 4f       	sbci	r17, 0xFF	; 255
    26dc:	fe 01       	movw	r30, r28
    26de:	e3 5b       	subi	r30, 0xB3	; 179
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	60 81       	ld	r22, Z
    26e4:	71 81       	ldd	r23, Z+1	; 0x01
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	f8 01       	movw	r30, r16
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24
    26f8:	de 01       	movw	r26, r28
    26fa:	a9 5b       	subi	r26, 0xB9	; 185
    26fc:	bf 4f       	sbci	r27, 0xFF	; 255
    26fe:	fe 01       	movw	r30, r28
    2700:	e5 5b       	subi	r30, 0xB5	; 181
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	8d 93       	st	X+, r24
    270a:	9c 93       	st	X, r25
    270c:	fe 01       	movw	r30, r28
    270e:	e9 5b       	subi	r30, 0xB9	; 185
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 81       	ld	r24, Z
    2714:	91 81       	ldd	r25, Z+1	; 0x01
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <main+0xe6c>
    271a:	fe 01       	movw	r30, r28
    271c:	e9 5b       	subi	r30, 0xB9	; 185
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
		_delay_ms(200);
		CLCD_voidSendCommand(CLCD_Clear_Display);
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
		CLCD_voidWriteSpecialCharacter(arr_Run1,2,0,15-2*i);
    272a:	fe 01       	movw	r30, r28
    272c:	e7 55       	subi	r30, 0x57	; 87
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	80 81       	ld	r24, Z
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	90 95       	com	r25
    273c:	81 95       	neg	r24
    273e:	9f 4f       	sbci	r25, 0xFF	; 255
    2740:	28 2f       	mov	r18, r24
    2742:	21 5f       	subi	r18, 0xF1	; 241
    2744:	ce 01       	movw	r24, r28
    2746:	86 54       	subi	r24, 0x46	; 70
    2748:	9f 4f       	sbci	r25, 0xFF	; 255
    274a:	62 e0       	ldi	r22, 0x02	; 2
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidWriteSpecialCharacter>
    2752:	fe 01       	movw	r30, r28
    2754:	ed 5b       	subi	r30, 0xBD	; 189
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	a8 e4       	ldi	r26, 0x48	; 72
    275e:	b3 e4       	ldi	r27, 0x43	; 67
    2760:	80 83       	st	Z, r24
    2762:	91 83       	std	Z+1, r25	; 0x01
    2764:	a2 83       	std	Z+2, r26	; 0x02
    2766:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2768:	8e 01       	movw	r16, r28
    276a:	01 5c       	subi	r16, 0xC1	; 193
    276c:	1f 4f       	sbci	r17, 0xFF	; 255
    276e:	fe 01       	movw	r30, r28
    2770:	ed 5b       	subi	r30, 0xBD	; 189
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	60 81       	ld	r22, Z
    2776:	71 81       	ldd	r23, Z+1	; 0x01
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	4a ef       	ldi	r20, 0xFA	; 250
    2782:	54 e4       	ldi	r21, 0x44	; 68
    2784:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	f8 01       	movw	r30, r16
    278e:	80 83       	st	Z, r24
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	a2 83       	std	Z+2, r26	; 0x02
    2794:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2796:	fe 01       	movw	r30, r28
    2798:	ff 96       	adiw	r30, 0x3f	; 63
    279a:	60 81       	ld	r22, Z
    279c:	71 81       	ldd	r23, Z+1	; 0x01
    279e:	82 81       	ldd	r24, Z+2	; 0x02
    27a0:	93 81       	ldd	r25, Z+3	; 0x03
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e8       	ldi	r20, 0x80	; 128
    27a8:	5f e3       	ldi	r21, 0x3F	; 63
    27aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27ae:	88 23       	and	r24, r24
    27b0:	2c f4       	brge	.+10     	; 0x27bc <main+0xf12>
		__ticks = 1;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	9e af       	std	Y+62, r25	; 0x3e
    27b8:	8d af       	std	Y+61, r24	; 0x3d
    27ba:	46 c0       	rjmp	.+140    	; 0x2848 <main+0xf9e>
	else if (__tmp > 65535)
    27bc:	fe 01       	movw	r30, r28
    27be:	ff 96       	adiw	r30, 0x3f	; 63
    27c0:	60 81       	ld	r22, Z
    27c2:	71 81       	ldd	r23, Z+1	; 0x01
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	93 81       	ldd	r25, Z+3	; 0x03
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	3f ef       	ldi	r19, 0xFF	; 255
    27cc:	4f e7       	ldi	r20, 0x7F	; 127
    27ce:	57 e4       	ldi	r21, 0x47	; 71
    27d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27d4:	18 16       	cp	r1, r24
    27d6:	64 f5       	brge	.+88     	; 0x2830 <main+0xf86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d8:	fe 01       	movw	r30, r28
    27da:	ed 5b       	subi	r30, 0xBD	; 189
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	60 81       	ld	r22, Z
    27e0:	71 81       	ldd	r23, Z+1	; 0x01
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	93 81       	ldd	r25, Z+3	; 0x03
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e2       	ldi	r20, 0x20	; 32
    27ec:	51 e4       	ldi	r21, 0x41	; 65
    27ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9e af       	std	Y+62, r25	; 0x3e
    2804:	8d af       	std	Y+61, r24	; 0x3d
    2806:	0f c0       	rjmp	.+30     	; 0x2826 <main+0xf7c>
    2808:	88 ec       	ldi	r24, 0xC8	; 200
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9c af       	std	Y+60, r25	; 0x3c
    280e:	8b af       	std	Y+59, r24	; 0x3b
    2810:	8b ad       	ldd	r24, Y+59	; 0x3b
    2812:	9c ad       	ldd	r25, Y+60	; 0x3c
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	f1 f7       	brne	.-4      	; 0x2814 <main+0xf6a>
    2818:	9c af       	std	Y+60, r25	; 0x3c
    281a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281c:	8d ad       	ldd	r24, Y+61	; 0x3d
    281e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	9e af       	std	Y+62, r25	; 0x3e
    2824:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2826:	8d ad       	ldd	r24, Y+61	; 0x3d
    2828:	9e ad       	ldd	r25, Y+62	; 0x3e
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	69 f7       	brne	.-38     	; 0x2808 <main+0xf5e>
    282e:	16 c0       	rjmp	.+44     	; 0x285c <main+0xfb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2830:	fe 01       	movw	r30, r28
    2832:	ff 96       	adiw	r30, 0x3f	; 63
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9e af       	std	Y+62, r25	; 0x3e
    2846:	8d af       	std	Y+61, r24	; 0x3d
    2848:	8d ad       	ldd	r24, Y+61	; 0x3d
    284a:	9e ad       	ldd	r25, Y+62	; 0x3e
    284c:	9a af       	std	Y+58, r25	; 0x3a
    284e:	89 af       	std	Y+57, r24	; 0x39
    2850:	89 ad       	ldd	r24, Y+57	; 0x39
    2852:	9a ad       	ldd	r25, Y+58	; 0x3a
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <main+0xfaa>
    2858:	9a af       	std	Y+58, r25	; 0x3a
    285a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(200);
		CLCD_voidSendCommand(CLCD_Clear_Display);
		CLCD_voidWriteSpecialCharacter(arr_Run2,2,0,2+2*i);
		_delay_ms(200);
	}
	for(i=1;i<8;i++)
    285c:	de 01       	movw	r26, r28
    285e:	a7 55       	subi	r26, 0x57	; 87
    2860:	bf 4f       	sbci	r27, 0xFF	; 255
    2862:	fe 01       	movw	r30, r28
    2864:	e7 55       	subi	r30, 0x57	; 87
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 81       	ld	r24, Z
    286a:	8f 5f       	subi	r24, 0xFF	; 255
    286c:	8c 93       	st	X, r24
    286e:	fe 01       	movw	r30, r28
    2870:	e7 55       	subi	r30, 0x57	; 87
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 81       	ld	r24, Z
    2876:	88 30       	cpi	r24, 0x08	; 8
    2878:	08 f4       	brcc	.+2      	; 0x287c <main+0xfd2>
    287a:	8a ce       	rjmp	.-748    	; 0x2590 <main+0xce6>
		CLCD_voidSendCommand(CLCD_Clear_Display);
		CLCD_voidWriteSpecialCharacter(arr_Run1,2,0,15-2*i);
		_delay_ms(200);

	}
	CLCD_voidSendCommand(CLCD_Clear_Display);
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	CLCD_voidWriteSpecialCharacter(arr_hamoksha,0,0,0);
    2882:	ce 01       	movw	r24, r28
    2884:	86 55       	subi	r24, 0x56	; 86
    2886:	9f 4f       	sbci	r25, 0xFF	; 255
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	40 e0       	ldi	r20, 0x00	; 0
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidWriteSpecialCharacter>
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	a8 e4       	ldi	r26, 0x48	; 72
    2898:	b3 e4       	ldi	r27, 0x43	; 67
    289a:	8d ab       	std	Y+53, r24	; 0x35
    289c:	9e ab       	std	Y+54, r25	; 0x36
    289e:	af ab       	std	Y+55, r26	; 0x37
    28a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a2:	6d a9       	ldd	r22, Y+53	; 0x35
    28a4:	7e a9       	ldd	r23, Y+54	; 0x36
    28a6:	8f a9       	ldd	r24, Y+55	; 0x37
    28a8:	98 ad       	ldd	r25, Y+56	; 0x38
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	4a ef       	ldi	r20, 0xFA	; 250
    28b0:	54 e4       	ldi	r21, 0x44	; 68
    28b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	89 ab       	std	Y+49, r24	; 0x31
    28bc:	9a ab       	std	Y+50, r25	; 0x32
    28be:	ab ab       	std	Y+51, r26	; 0x33
    28c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28c2:	69 a9       	ldd	r22, Y+49	; 0x31
    28c4:	7a a9       	ldd	r23, Y+50	; 0x32
    28c6:	8b a9       	ldd	r24, Y+51	; 0x33
    28c8:	9c a9       	ldd	r25, Y+52	; 0x34
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e8       	ldi	r20, 0x80	; 128
    28d0:	5f e3       	ldi	r21, 0x3F	; 63
    28d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28d6:	88 23       	and	r24, r24
    28d8:	2c f4       	brge	.+10     	; 0x28e4 <main+0x103a>
		__ticks = 1;
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	98 ab       	std	Y+48, r25	; 0x30
    28e0:	8f a7       	std	Y+47, r24	; 0x2f
    28e2:	3f c0       	rjmp	.+126    	; 0x2962 <main+0x10b8>
	else if (__tmp > 65535)
    28e4:	69 a9       	ldd	r22, Y+49	; 0x31
    28e6:	7a a9       	ldd	r23, Y+50	; 0x32
    28e8:	8b a9       	ldd	r24, Y+51	; 0x33
    28ea:	9c a9       	ldd	r25, Y+52	; 0x34
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	3f ef       	ldi	r19, 0xFF	; 255
    28f0:	4f e7       	ldi	r20, 0x7F	; 127
    28f2:	57 e4       	ldi	r21, 0x47	; 71
    28f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28f8:	18 16       	cp	r1, r24
    28fa:	4c f5       	brge	.+82     	; 0x294e <main+0x10a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fc:	6d a9       	ldd	r22, Y+53	; 0x35
    28fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2900:	8f a9       	ldd	r24, Y+55	; 0x37
    2902:	98 ad       	ldd	r25, Y+56	; 0x38
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	40 e2       	ldi	r20, 0x20	; 32
    290a:	51 e4       	ldi	r21, 0x41	; 65
    290c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	bc 01       	movw	r22, r24
    2916:	cd 01       	movw	r24, r26
    2918:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	98 ab       	std	Y+48, r25	; 0x30
    2922:	8f a7       	std	Y+47, r24	; 0x2f
    2924:	0f c0       	rjmp	.+30     	; 0x2944 <main+0x109a>
    2926:	88 ec       	ldi	r24, 0xC8	; 200
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	9e a7       	std	Y+46, r25	; 0x2e
    292c:	8d a7       	std	Y+45, r24	; 0x2d
    292e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2930:	9e a5       	ldd	r25, Y+46	; 0x2e
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	f1 f7       	brne	.-4      	; 0x2932 <main+0x1088>
    2936:	9e a7       	std	Y+46, r25	; 0x2e
    2938:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    293a:	8f a5       	ldd	r24, Y+47	; 0x2f
    293c:	98 a9       	ldd	r25, Y+48	; 0x30
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	98 ab       	std	Y+48, r25	; 0x30
    2942:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2944:	8f a5       	ldd	r24, Y+47	; 0x2f
    2946:	98 a9       	ldd	r25, Y+48	; 0x30
    2948:	00 97       	sbiw	r24, 0x00	; 0
    294a:	69 f7       	brne	.-38     	; 0x2926 <main+0x107c>
    294c:	14 c0       	rjmp	.+40     	; 0x2976 <main+0x10cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294e:	69 a9       	ldd	r22, Y+49	; 0x31
    2950:	7a a9       	ldd	r23, Y+50	; 0x32
    2952:	8b a9       	ldd	r24, Y+51	; 0x33
    2954:	9c a9       	ldd	r25, Y+52	; 0x34
    2956:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	98 ab       	std	Y+48, r25	; 0x30
    2960:	8f a7       	std	Y+47, r24	; 0x2f
    2962:	8f a5       	ldd	r24, Y+47	; 0x2f
    2964:	98 a9       	ldd	r25, Y+48	; 0x30
    2966:	9c a7       	std	Y+44, r25	; 0x2c
    2968:	8b a7       	std	Y+43, r24	; 0x2b
    296a:	8b a5       	ldd	r24, Y+43	; 0x2b
    296c:	9c a5       	ldd	r25, Y+44	; 0x2c
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <main+0x10c4>
    2972:	9c a7       	std	Y+44, r25	; 0x2c
    2974:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);

	CLCD_voidSendCommand(CLCD_Clear_Display);
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
	CLCD_voidGoToXY(0,3);
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	63 e0       	ldi	r22, 0x03	; 3
    2980:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <CLCD_voidGoToXY>
	CLCD_voidSendString("I can Dance");
    2984:	8b e8       	ldi	r24, 0x8B	; 139
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	0e 94 c2 07 	call	0xf84	; 0xf84 <CLCD_voidSendString>
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	aa ef       	ldi	r26, 0xFA	; 250
    2992:	b3 e4       	ldi	r27, 0x43	; 67
    2994:	8f a3       	std	Y+39, r24	; 0x27
    2996:	98 a7       	std	Y+40, r25	; 0x28
    2998:	a9 a7       	std	Y+41, r26	; 0x29
    299a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299c:	6f a1       	ldd	r22, Y+39	; 0x27
    299e:	78 a5       	ldd	r23, Y+40	; 0x28
    29a0:	89 a5       	ldd	r24, Y+41	; 0x29
    29a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	4a ef       	ldi	r20, 0xFA	; 250
    29aa:	54 e4       	ldi	r21, 0x44	; 68
    29ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	8b a3       	std	Y+35, r24	; 0x23
    29b6:	9c a3       	std	Y+36, r25	; 0x24
    29b8:	ad a3       	std	Y+37, r26	; 0x25
    29ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29bc:	6b a1       	ldd	r22, Y+35	; 0x23
    29be:	7c a1       	ldd	r23, Y+36	; 0x24
    29c0:	8d a1       	ldd	r24, Y+37	; 0x25
    29c2:	9e a1       	ldd	r25, Y+38	; 0x26
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e8       	ldi	r20, 0x80	; 128
    29ca:	5f e3       	ldi	r21, 0x3F	; 63
    29cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29d0:	88 23       	and	r24, r24
    29d2:	2c f4       	brge	.+10     	; 0x29de <main+0x1134>
		__ticks = 1;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	9a a3       	std	Y+34, r25	; 0x22
    29da:	89 a3       	std	Y+33, r24	; 0x21
    29dc:	3f c0       	rjmp	.+126    	; 0x2a5c <main+0x11b2>
	else if (__tmp > 65535)
    29de:	6b a1       	ldd	r22, Y+35	; 0x23
    29e0:	7c a1       	ldd	r23, Y+36	; 0x24
    29e2:	8d a1       	ldd	r24, Y+37	; 0x25
    29e4:	9e a1       	ldd	r25, Y+38	; 0x26
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	3f ef       	ldi	r19, 0xFF	; 255
    29ea:	4f e7       	ldi	r20, 0x7F	; 127
    29ec:	57 e4       	ldi	r21, 0x47	; 71
    29ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29f2:	18 16       	cp	r1, r24
    29f4:	4c f5       	brge	.+82     	; 0x2a48 <main+0x119e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f6:	6f a1       	ldd	r22, Y+39	; 0x27
    29f8:	78 a5       	ldd	r23, Y+40	; 0x28
    29fa:	89 a5       	ldd	r24, Y+41	; 0x29
    29fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e2       	ldi	r20, 0x20	; 32
    2a04:	51 e4       	ldi	r21, 0x41	; 65
    2a06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	bc 01       	movw	r22, r24
    2a10:	cd 01       	movw	r24, r26
    2a12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9a a3       	std	Y+34, r25	; 0x22
    2a1c:	89 a3       	std	Y+33, r24	; 0x21
    2a1e:	0f c0       	rjmp	.+30     	; 0x2a3e <main+0x1194>
    2a20:	88 ec       	ldi	r24, 0xC8	; 200
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	98 a3       	std	Y+32, r25	; 0x20
    2a26:	8f 8f       	std	Y+31, r24	; 0x1f
    2a28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a2a:	98 a1       	ldd	r25, Y+32	; 0x20
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <main+0x1182>
    2a30:	98 a3       	std	Y+32, r25	; 0x20
    2a32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a34:	89 a1       	ldd	r24, Y+33	; 0x21
    2a36:	9a a1       	ldd	r25, Y+34	; 0x22
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	9a a3       	std	Y+34, r25	; 0x22
    2a3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a40:	9a a1       	ldd	r25, Y+34	; 0x22
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	69 f7       	brne	.-38     	; 0x2a20 <main+0x1176>
    2a46:	14 c0       	rjmp	.+40     	; 0x2a70 <main+0x11c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a48:	6b a1       	ldd	r22, Y+35	; 0x23
    2a4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	9a a3       	std	Y+34, r25	; 0x22
    2a5a:	89 a3       	std	Y+33, r24	; 0x21
    2a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a60:	9e 8f       	std	Y+30, r25	; 0x1e
    2a62:	8d 8f       	std	Y+29, r24	; 0x1d
    2a64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	f1 f7       	brne	.-4      	; 0x2a68 <main+0x11be>
    2a6c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a6e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	for(i=1;i<8;i++)
    2a70:	fe 01       	movw	r30, r28
    2a72:	e7 55       	subi	r30, 0x57	; 87
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	80 83       	st	Z, r24
    2a7a:	fd c0       	rjmp	.+506    	; 0x2c76 <main+0x13cc>
	{

		CLCD_voidWriteSpecialCharacter(arr_Run2,2,0,0);
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	8e 53       	subi	r24, 0x3E	; 62
    2a80:	9f 4f       	sbci	r25, 0xFF	; 255
    2a82:	62 e0       	ldi	r22, 0x02	; 2
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidWriteSpecialCharacter>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a8 e4       	ldi	r26, 0x48	; 72
    2a92:	b3 e4       	ldi	r27, 0x43	; 67
    2a94:	89 8f       	std	Y+25, r24	; 0x19
    2a96:	9a 8f       	std	Y+26, r25	; 0x1a
    2a98:	ab 8f       	std	Y+27, r26	; 0x1b
    2a9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a ef       	ldi	r20, 0xFA	; 250
    2aaa:	54 e4       	ldi	r21, 0x44	; 68
    2aac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8d 8b       	std	Y+21, r24	; 0x15
    2ab6:	9e 8b       	std	Y+22, r25	; 0x16
    2ab8:	af 8b       	std	Y+23, r26	; 0x17
    2aba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2abc:	6d 89       	ldd	r22, Y+21	; 0x15
    2abe:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <main+0x1234>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9c 8b       	std	Y+20, r25	; 0x14
    2ada:	8b 8b       	std	Y+19, r24	; 0x13
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <main+0x12b2>
	else if (__tmp > 65535)
    2ade:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <main+0x129e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	69 8d       	ldd	r22, Y+25	; 0x19
    2af8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2afc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9c 8b       	std	Y+20, r25	; 0x14
    2b1c:	8b 8b       	std	Y+19, r24	; 0x13
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <main+0x1294>
    2b20:	88 ec       	ldi	r24, 0xC8	; 200
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9a 8b       	std	Y+18, r25	; 0x12
    2b26:	89 8b       	std	Y+17, r24	; 0x11
    2b28:	89 89       	ldd	r24, Y+17	; 0x11
    2b2a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <main+0x1282>
    2b30:	9a 8b       	std	Y+18, r25	; 0x12
    2b32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8b 89       	ldd	r24, Y+19	; 0x13
    2b36:	9c 89       	ldd	r25, Y+20	; 0x14
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9c 8b       	std	Y+20, r25	; 0x14
    2b3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b40:	9c 89       	ldd	r25, Y+20	; 0x14
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <main+0x1276>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <main+0x12c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9c 8b       	std	Y+20, r25	; 0x14
    2b5a:	8b 8b       	std	Y+19, r24	; 0x13
    2b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b60:	98 8b       	std	Y+16, r25	; 0x10
    2b62:	8f 87       	std	Y+15, r24	; 0x0f
    2b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b66:	98 89       	ldd	r25, Y+16	; 0x10
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <main+0x12be>
    2b6c:	98 8b       	std	Y+16, r25	; 0x10
    2b6e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);

		CLCD_voidWriteSpecialCharacter(arr_Run1,2,0,0);
    2b70:	ce 01       	movw	r24, r28
    2b72:	86 54       	subi	r24, 0x46	; 70
    2b74:	9f 4f       	sbci	r25, 0xFF	; 255
    2b76:	62 e0       	ldi	r22, 0x02	; 2
    2b78:	40 e0       	ldi	r20, 0x00	; 0
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_voidWriteSpecialCharacter>
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	a8 e4       	ldi	r26, 0x48	; 72
    2b86:	b3 e4       	ldi	r27, 0x43	; 67
    2b88:	8b 87       	std	Y+11, r24	; 0x0b
    2b8a:	9c 87       	std	Y+12, r25	; 0x0c
    2b8c:	ad 87       	std	Y+13, r26	; 0x0d
    2b8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	4a ef       	ldi	r20, 0xFA	; 250
    2b9e:	54 e4       	ldi	r21, 0x44	; 68
    2ba0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	8f 83       	std	Y+7, r24	; 0x07
    2baa:	98 87       	std	Y+8, r25	; 0x08
    2bac:	a9 87       	std	Y+9, r26	; 0x09
    2bae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb2:	78 85       	ldd	r23, Y+8	; 0x08
    2bb4:	89 85       	ldd	r24, Y+9	; 0x09
    2bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e8       	ldi	r20, 0x80	; 128
    2bbe:	5f e3       	ldi	r21, 0x3F	; 63
    2bc0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bc4:	88 23       	and	r24, r24
    2bc6:	2c f4       	brge	.+10     	; 0x2bd2 <main+0x1328>
		__ticks = 1;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	9e 83       	std	Y+6, r25	; 0x06
    2bce:	8d 83       	std	Y+5, r24	; 0x05
    2bd0:	3f c0       	rjmp	.+126    	; 0x2c50 <main+0x13a6>
	else if (__tmp > 65535)
    2bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd4:	78 85       	ldd	r23, Y+8	; 0x08
    2bd6:	89 85       	ldd	r24, Y+9	; 0x09
    2bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	3f ef       	ldi	r19, 0xFF	; 255
    2bde:	4f e7       	ldi	r20, 0x7F	; 127
    2be0:	57 e4       	ldi	r21, 0x47	; 71
    2be2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2be6:	18 16       	cp	r1, r24
    2be8:	4c f5       	brge	.+82     	; 0x2c3c <main+0x1392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e2       	ldi	r20, 0x20	; 32
    2bf8:	51 e4       	ldi	r21, 0x41	; 65
    2bfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9e 83       	std	Y+6, r25	; 0x06
    2c10:	8d 83       	std	Y+5, r24	; 0x05
    2c12:	0f c0       	rjmp	.+30     	; 0x2c32 <main+0x1388>
    2c14:	88 ec       	ldi	r24, 0xC8	; 200
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9c 83       	std	Y+4, r25	; 0x04
    2c1a:	8b 83       	std	Y+3, r24	; 0x03
    2c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <main+0x1376>
    2c24:	9c 83       	std	Y+4, r25	; 0x04
    2c26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c28:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	9e 83       	std	Y+6, r25	; 0x06
    2c30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c32:	8d 81       	ldd	r24, Y+5	; 0x05
    2c34:	9e 81       	ldd	r25, Y+6	; 0x06
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	69 f7       	brne	.-38     	; 0x2c14 <main+0x136a>
    2c3a:	14 c0       	rjmp	.+40     	; 0x2c64 <main+0x13ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3e:	78 85       	ldd	r23, Y+8	; 0x08
    2c40:	89 85       	ldd	r24, Y+9	; 0x09
    2c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	9e 83       	std	Y+6, r25	; 0x06
    2c4e:	8d 83       	std	Y+5, r24	; 0x05
    2c50:	8d 81       	ldd	r24, Y+5	; 0x05
    2c52:	9e 81       	ldd	r25, Y+6	; 0x06
    2c54:	9a 83       	std	Y+2, r25	; 0x02
    2c56:	89 83       	std	Y+1, r24	; 0x01
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <main+0x13b2>
    2c60:	9a 83       	std	Y+2, r25	; 0x02
    2c62:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSendCommand(CLCD_Clear_Display);
	CLCD_voidGoToXY(0,3);
	CLCD_voidSendString("I can Dance");
	_delay_ms(500);
	for(i=1;i<8;i++)
    2c64:	de 01       	movw	r26, r28
    2c66:	a7 55       	subi	r26, 0x57	; 87
    2c68:	bf 4f       	sbci	r27, 0xFF	; 255
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e7 55       	subi	r30, 0x57	; 87
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	80 81       	ld	r24, Z
    2c72:	8f 5f       	subi	r24, 0xFF	; 255
    2c74:	8c 93       	st	X, r24
    2c76:	fe 01       	movw	r30, r28
    2c78:	e7 55       	subi	r30, 0x57	; 87
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	80 81       	ld	r24, Z
    2c7e:	88 30       	cpi	r24, 0x08	; 8
    2c80:	08 f4       	brcc	.+2      	; 0x2c84 <main+0x13da>
    2c82:	fc ce       	rjmp	.-520    	; 0x2a7c <main+0x11d2>
    2c84:	ff cf       	rjmp	.-2      	; 0x2c84 <main+0x13da>

00002c86 <__udivmodsi4>:
    2c86:	a1 e2       	ldi	r26, 0x21	; 33
    2c88:	1a 2e       	mov	r1, r26
    2c8a:	aa 1b       	sub	r26, r26
    2c8c:	bb 1b       	sub	r27, r27
    2c8e:	fd 01       	movw	r30, r26
    2c90:	0d c0       	rjmp	.+26     	; 0x2cac <__udivmodsi4_ep>

00002c92 <__udivmodsi4_loop>:
    2c92:	aa 1f       	adc	r26, r26
    2c94:	bb 1f       	adc	r27, r27
    2c96:	ee 1f       	adc	r30, r30
    2c98:	ff 1f       	adc	r31, r31
    2c9a:	a2 17       	cp	r26, r18
    2c9c:	b3 07       	cpc	r27, r19
    2c9e:	e4 07       	cpc	r30, r20
    2ca0:	f5 07       	cpc	r31, r21
    2ca2:	20 f0       	brcs	.+8      	; 0x2cac <__udivmodsi4_ep>
    2ca4:	a2 1b       	sub	r26, r18
    2ca6:	b3 0b       	sbc	r27, r19
    2ca8:	e4 0b       	sbc	r30, r20
    2caa:	f5 0b       	sbc	r31, r21

00002cac <__udivmodsi4_ep>:
    2cac:	66 1f       	adc	r22, r22
    2cae:	77 1f       	adc	r23, r23
    2cb0:	88 1f       	adc	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	1a 94       	dec	r1
    2cb6:	69 f7       	brne	.-38     	; 0x2c92 <__udivmodsi4_loop>
    2cb8:	60 95       	com	r22
    2cba:	70 95       	com	r23
    2cbc:	80 95       	com	r24
    2cbe:	90 95       	com	r25
    2cc0:	9b 01       	movw	r18, r22
    2cc2:	ac 01       	movw	r20, r24
    2cc4:	bd 01       	movw	r22, r26
    2cc6:	cf 01       	movw	r24, r30
    2cc8:	08 95       	ret

00002cca <__prologue_saves__>:
    2cca:	2f 92       	push	r2
    2ccc:	3f 92       	push	r3
    2cce:	4f 92       	push	r4
    2cd0:	5f 92       	push	r5
    2cd2:	6f 92       	push	r6
    2cd4:	7f 92       	push	r7
    2cd6:	8f 92       	push	r8
    2cd8:	9f 92       	push	r9
    2cda:	af 92       	push	r10
    2cdc:	bf 92       	push	r11
    2cde:	cf 92       	push	r12
    2ce0:	df 92       	push	r13
    2ce2:	ef 92       	push	r14
    2ce4:	ff 92       	push	r15
    2ce6:	0f 93       	push	r16
    2ce8:	1f 93       	push	r17
    2cea:	cf 93       	push	r28
    2cec:	df 93       	push	r29
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	ca 1b       	sub	r28, r26
    2cf4:	db 0b       	sbc	r29, r27
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	09 94       	ijmp

00002d02 <__epilogue_restores__>:
    2d02:	2a 88       	ldd	r2, Y+18	; 0x12
    2d04:	39 88       	ldd	r3, Y+17	; 0x11
    2d06:	48 88       	ldd	r4, Y+16	; 0x10
    2d08:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d10:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d12:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d14:	b9 84       	ldd	r11, Y+9	; 0x09
    2d16:	c8 84       	ldd	r12, Y+8	; 0x08
    2d18:	df 80       	ldd	r13, Y+7	; 0x07
    2d1a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d1c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d1e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d20:	1b 81       	ldd	r17, Y+3	; 0x03
    2d22:	aa 81       	ldd	r26, Y+2	; 0x02
    2d24:	b9 81       	ldd	r27, Y+1	; 0x01
    2d26:	ce 0f       	add	r28, r30
    2d28:	d1 1d       	adc	r29, r1
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	de bf       	out	0x3e, r29	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	ed 01       	movw	r28, r26
    2d36:	08 95       	ret

00002d38 <_exit>:
    2d38:	f8 94       	cli

00002d3a <__stop_program>:
    2d3a:	ff cf       	rjmp	.-2      	; 0x2d3a <__stop_program>
