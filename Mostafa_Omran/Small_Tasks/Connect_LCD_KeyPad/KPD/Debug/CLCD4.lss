
CLCD4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000025e8  0000265c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ad0  00000000  00000000  0000266c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a2c  00000000  00000000  0000413c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000794c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000086fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000885c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000092b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 8a 12 	call	0x2514	; 0x2514 <main>
      7a:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	6d 97       	sbiw	r28, 0x1d	; 29
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8d 8f       	std	Y+29, r24	; 0x1d


	/*Set RS pin to low for command*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
#ifdef _FOUR_BIT

	/*Send The first Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Command,7)==1)
     b60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b62:	88 1f       	adc	r24, r24
     b64:	88 27       	eor	r24, r24
     b66:	88 1f       	adc	r24, r24
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	31 f4       	brne	.+12     	; 0xb78 <CLCD_voidSendCommand+0x42>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	67 e0       	ldi	r22, 0x07	; 7
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     b76:	05 c0       	rjmp	.+10     	; 0xb82 <CLCD_voidSendCommand+0x4c>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	67 e0       	ldi	r22, 0x07	; 7
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,6)==1)
     b82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b84:	82 95       	swap	r24
     b86:	86 95       	lsr	r24
     b88:	86 95       	lsr	r24
     b8a:	83 70       	andi	r24, 0x03	; 3
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	81 70       	andi	r24, 0x01	; 1
     b92:	90 70       	andi	r25, 0x00	; 0
     b94:	88 23       	and	r24, r24
     b96:	31 f0       	breq	.+12     	; 0xba4 <CLCD_voidSendCommand+0x6e>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	66 e0       	ldi	r22, 0x06	; 6
     b9c:	41 e0       	ldi	r20, 0x01	; 1
     b9e:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <CLCD_voidSendCommand+0x78>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	66 e0       	ldi	r22, 0x06	; 6
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,5)==1)
     bae:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bb0:	82 95       	swap	r24
     bb2:	86 95       	lsr	r24
     bb4:	87 70       	andi	r24, 0x07	; 7
     bb6:	88 2f       	mov	r24, r24
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	81 70       	andi	r24, 0x01	; 1
     bbc:	90 70       	andi	r25, 0x00	; 0
     bbe:	88 23       	and	r24, r24
     bc0:	31 f0       	breq	.+12     	; 0xbce <CLCD_voidSendCommand+0x98>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	65 e0       	ldi	r22, 0x05	; 5
     bc6:	41 e0       	ldi	r20, 0x01	; 1
     bc8:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <CLCD_voidSendCommand+0xa2>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	65 e0       	ldi	r22, 0x05	; 5
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,4)==1)
     bd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bda:	82 95       	swap	r24
     bdc:	8f 70       	andi	r24, 0x0F	; 15
     bde:	88 2f       	mov	r24, r24
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	81 70       	andi	r24, 0x01	; 1
     be4:	90 70       	andi	r25, 0x00	; 0
     be6:	88 23       	and	r24, r24
     be8:	31 f0       	breq	.+12     	; 0xbf6 <CLCD_voidSendCommand+0xc0>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	64 e0       	ldi	r22, 0x04	; 4
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <CLCD_voidSendCommand+0xca>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	64 e0       	ldi	r22, 0x04	; 4
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	62 e0       	ldi	r22, 0x02	; 2
     c04:	41 e0       	ldi	r20, 0x01	; 1
     c06:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a0 e0       	ldi	r26, 0x00	; 0
     c10:	b0 e4       	ldi	r27, 0x40	; 64
     c12:	89 8f       	std	Y+25, r24	; 0x19
     c14:	9a 8f       	std	Y+26, r25	; 0x1a
     c16:	ab 8f       	std	Y+27, r26	; 0x1b
     c18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c1a:	69 8d       	ldd	r22, Y+25	; 0x19
     c1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c20:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	4a ef       	ldi	r20, 0xFA	; 250
     c28:	54 e4       	ldi	r21, 0x44	; 68
     c2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	8d 8b       	std	Y+21, r24	; 0x15
     c34:	9e 8b       	std	Y+22, r25	; 0x16
     c36:	af 8b       	std	Y+23, r26	; 0x17
     c38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c3a:	6d 89       	ldd	r22, Y+21	; 0x15
     c3c:	7e 89       	ldd	r23, Y+22	; 0x16
     c3e:	8f 89       	ldd	r24, Y+23	; 0x17
     c40:	98 8d       	ldd	r25, Y+24	; 0x18
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e8       	ldi	r20, 0x80	; 128
     c48:	5f e3       	ldi	r21, 0x3F	; 63
     c4a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c4e:	88 23       	and	r24, r24
     c50:	2c f4       	brge	.+10     	; 0xc5c <CLCD_voidSendCommand+0x126>
		__ticks = 1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	9c 8b       	std	Y+20, r25	; 0x14
     c58:	8b 8b       	std	Y+19, r24	; 0x13
     c5a:	3f c0       	rjmp	.+126    	; 0xcda <CLCD_voidSendCommand+0x1a4>
	else if (__tmp > 65535)
     c5c:	6d 89       	ldd	r22, Y+21	; 0x15
     c5e:	7e 89       	ldd	r23, Y+22	; 0x16
     c60:	8f 89       	ldd	r24, Y+23	; 0x17
     c62:	98 8d       	ldd	r25, Y+24	; 0x18
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	3f ef       	ldi	r19, 0xFF	; 255
     c68:	4f e7       	ldi	r20, 0x7F	; 127
     c6a:	57 e4       	ldi	r21, 0x47	; 71
     c6c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c70:	18 16       	cp	r1, r24
     c72:	4c f5       	brge	.+82     	; 0xcc6 <CLCD_voidSendCommand+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c74:	69 8d       	ldd	r22, Y+25	; 0x19
     c76:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c78:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 e2       	ldi	r20, 0x20	; 32
     c82:	51 e4       	ldi	r21, 0x41	; 65
     c84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	bc 01       	movw	r22, r24
     c8e:	cd 01       	movw	r24, r26
     c90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	9c 8b       	std	Y+20, r25	; 0x14
     c9a:	8b 8b       	std	Y+19, r24	; 0x13
     c9c:	0f c0       	rjmp	.+30     	; 0xcbc <CLCD_voidSendCommand+0x186>
     c9e:	88 ec       	ldi	r24, 0xC8	; 200
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	9a 8b       	std	Y+18, r25	; 0x12
     ca4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ca6:	89 89       	ldd	r24, Y+17	; 0x11
     ca8:	9a 89       	ldd	r25, Y+18	; 0x12
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	f1 f7       	brne	.-4      	; 0xcaa <CLCD_voidSendCommand+0x174>
     cae:	9a 8b       	std	Y+18, r25	; 0x12
     cb0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb2:	8b 89       	ldd	r24, Y+19	; 0x13
     cb4:	9c 89       	ldd	r25, Y+20	; 0x14
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	9c 8b       	std	Y+20, r25	; 0x14
     cba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cbc:	8b 89       	ldd	r24, Y+19	; 0x13
     cbe:	9c 89       	ldd	r25, Y+20	; 0x14
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	69 f7       	brne	.-38     	; 0xc9e <CLCD_voidSendCommand+0x168>
     cc4:	14 c0       	rjmp	.+40     	; 0xcee <CLCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc6:	6d 89       	ldd	r22, Y+21	; 0x15
     cc8:	7e 89       	ldd	r23, Y+22	; 0x16
     cca:	8f 89       	ldd	r24, Y+23	; 0x17
     ccc:	98 8d       	ldd	r25, Y+24	; 0x18
     cce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	9c 8b       	std	Y+20, r25	; 0x14
     cd8:	8b 8b       	std	Y+19, r24	; 0x13
     cda:	8b 89       	ldd	r24, Y+19	; 0x13
     cdc:	9c 89       	ldd	r25, Y+20	; 0x14
     cde:	98 8b       	std	Y+16, r25	; 0x10
     ce0:	8f 87       	std	Y+15, r24	; 0x0f
     ce2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce4:	98 89       	ldd	r25, Y+16	; 0x10
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <CLCD_voidSendCommand+0x1b0>
     cea:	98 8b       	std	Y+16, r25	; 0x10
     cec:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	62 e0       	ldi	r22, 0x02	; 2
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

	/*Send The Second Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Command,3)==1)
     cf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cfa:	86 95       	lsr	r24
     cfc:	86 95       	lsr	r24
     cfe:	86 95       	lsr	r24
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	81 70       	andi	r24, 0x01	; 1
     d06:	90 70       	andi	r25, 0x00	; 0
     d08:	88 23       	and	r24, r24
     d0a:	31 f0       	breq	.+12     	; 0xd18 <CLCD_voidSendCommand+0x1e2>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	67 e0       	ldi	r22, 0x07	; 7
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <CLCD_voidSendCommand+0x1ec>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	67 e0       	ldi	r22, 0x07	; 7
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,2)==1)
     d22:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d24:	86 95       	lsr	r24
     d26:	86 95       	lsr	r24
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	81 70       	andi	r24, 0x01	; 1
     d2e:	90 70       	andi	r25, 0x00	; 0
     d30:	88 23       	and	r24, r24
     d32:	31 f0       	breq	.+12     	; 0xd40 <CLCD_voidSendCommand+0x20a>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	66 e0       	ldi	r22, 0x06	; 6
     d38:	41 e0       	ldi	r20, 0x01	; 1
     d3a:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <CLCD_voidSendCommand+0x214>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	66 e0       	ldi	r22, 0x06	; 6
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,1)==1)
     d4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d4c:	86 95       	lsr	r24
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	81 70       	andi	r24, 0x01	; 1
     d54:	90 70       	andi	r25, 0x00	; 0
     d56:	88 23       	and	r24, r24
     d58:	31 f0       	breq	.+12     	; 0xd66 <CLCD_voidSendCommand+0x230>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	65 e0       	ldi	r22, 0x05	; 5
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     d64:	05 c0       	rjmp	.+10     	; 0xd70 <CLCD_voidSendCommand+0x23a>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	65 e0       	ldi	r22, 0x05	; 5
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Command,0)==1)
     d70:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	81 70       	andi	r24, 0x01	; 1
     d78:	90 70       	andi	r25, 0x00	; 0
     d7a:	88 23       	and	r24, r24
     d7c:	31 f0       	breq	.+12     	; 0xd8a <CLCD_voidSendCommand+0x254>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	64 e0       	ldi	r22, 0x04	; 4
     d82:	41 e0       	ldi	r20, 0x01	; 1
     d84:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <CLCD_voidSendCommand+0x25e>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	64 e0       	ldi	r22, 0x04	; 4
     d8e:	40 e0       	ldi	r20, 0x00	; 0
     d90:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	62 e0       	ldi	r22, 0x02	; 2
     d98:	41 e0       	ldi	r20, 0x01	; 1
     d9a:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	a0 e0       	ldi	r26, 0x00	; 0
     da4:	b0 e4       	ldi	r27, 0x40	; 64
     da6:	8b 87       	std	Y+11, r24	; 0x0b
     da8:	9c 87       	std	Y+12, r25	; 0x0c
     daa:	ad 87       	std	Y+13, r26	; 0x0d
     dac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dae:	6b 85       	ldd	r22, Y+11	; 0x0b
     db0:	7c 85       	ldd	r23, Y+12	; 0x0c
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	4a ef       	ldi	r20, 0xFA	; 250
     dbc:	54 e4       	ldi	r21, 0x44	; 68
     dbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	8f 83       	std	Y+7, r24	; 0x07
     dc8:	98 87       	std	Y+8, r25	; 0x08
     dca:	a9 87       	std	Y+9, r26	; 0x09
     dcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dce:	6f 81       	ldd	r22, Y+7	; 0x07
     dd0:	78 85       	ldd	r23, Y+8	; 0x08
     dd2:	89 85       	ldd	r24, Y+9	; 0x09
     dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e8       	ldi	r20, 0x80	; 128
     ddc:	5f e3       	ldi	r21, 0x3F	; 63
     dde:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     de2:	88 23       	and	r24, r24
     de4:	2c f4       	brge	.+10     	; 0xdf0 <CLCD_voidSendCommand+0x2ba>
		__ticks = 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	9e 83       	std	Y+6, r25	; 0x06
     dec:	8d 83       	std	Y+5, r24	; 0x05
     dee:	3f c0       	rjmp	.+126    	; 0xe6e <CLCD_voidSendCommand+0x338>
	else if (__tmp > 65535)
     df0:	6f 81       	ldd	r22, Y+7	; 0x07
     df2:	78 85       	ldd	r23, Y+8	; 0x08
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	3f ef       	ldi	r19, 0xFF	; 255
     dfc:	4f e7       	ldi	r20, 0x7F	; 127
     dfe:	57 e4       	ldi	r21, 0x47	; 71
     e00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e04:	18 16       	cp	r1, r24
     e06:	4c f5       	brge	.+82     	; 0xe5a <CLCD_voidSendCommand+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e08:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e2       	ldi	r20, 0x20	; 32
     e16:	51 e4       	ldi	r21, 0x41	; 65
     e18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	bc 01       	movw	r22, r24
     e22:	cd 01       	movw	r24, r26
     e24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	9e 83       	std	Y+6, r25	; 0x06
     e2e:	8d 83       	std	Y+5, r24	; 0x05
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <CLCD_voidSendCommand+0x31a>
     e32:	88 ec       	ldi	r24, 0xC8	; 200
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	9c 83       	std	Y+4, r25	; 0x04
     e38:	8b 83       	std	Y+3, r24	; 0x03
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <CLCD_voidSendCommand+0x308>
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	9e 81       	ldd	r25, Y+6	; 0x06
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	69 f7       	brne	.-38     	; 0xe32 <CLCD_voidSendCommand+0x2fc>
     e58:	14 c0       	rjmp	.+40     	; 0xe82 <CLCD_voidSendCommand+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5a:	6f 81       	ldd	r22, Y+7	; 0x07
     e5c:	78 85       	ldd	r23, Y+8	; 0x08
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	9e 83       	std	Y+6, r25	; 0x06
     e6c:	8d 83       	std	Y+5, r24	; 0x05
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <CLCD_voidSendCommand+0x344>
     e7e:	9a 83       	std	Y+2, r25	; 0x02
     e80:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	62 e0       	ldi	r22, 0x02	; 2
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

	#endif


}
     e8c:	6d 96       	adiw	r28, 0x1d	; 29
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	6d 97       	sbiw	r28, 0x1d	; 29
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set RS pin to High for Data*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

    /*Set RW pin to low for write*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	61 e0       	ldi	r22, 0x01	; 1
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
	#ifdef _FOUR_BIT

	/*Send The first Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Data,7)==1)
     ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eca:	88 1f       	adc	r24, r24
     ecc:	88 27       	eor	r24, r24
     ece:	88 1f       	adc	r24, r24
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	31 f4       	brne	.+12     	; 0xee0 <CLCD_voidSendData+0x42>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	67 e0       	ldi	r22, 0x07	; 7
     ed8:	41 e0       	ldi	r20, 0x01	; 1
     eda:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     ede:	05 c0       	rjmp	.+10     	; 0xeea <CLCD_voidSendData+0x4c>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	67 e0       	ldi	r22, 0x07	; 7
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,6)==1)
     eea:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eec:	82 95       	swap	r24
     eee:	86 95       	lsr	r24
     ef0:	86 95       	lsr	r24
     ef2:	83 70       	andi	r24, 0x03	; 3
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	81 70       	andi	r24, 0x01	; 1
     efa:	90 70       	andi	r25, 0x00	; 0
     efc:	88 23       	and	r24, r24
     efe:	31 f0       	breq	.+12     	; 0xf0c <CLCD_voidSendData+0x6e>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	66 e0       	ldi	r22, 0x06	; 6
     f04:	41 e0       	ldi	r20, 0x01	; 1
     f06:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <CLCD_voidSendData+0x78>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	66 e0       	ldi	r22, 0x06	; 6
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,5)==1)
     f16:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f18:	82 95       	swap	r24
     f1a:	86 95       	lsr	r24
     f1c:	87 70       	andi	r24, 0x07	; 7
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	81 70       	andi	r24, 0x01	; 1
     f24:	90 70       	andi	r25, 0x00	; 0
     f26:	88 23       	and	r24, r24
     f28:	31 f0       	breq	.+12     	; 0xf36 <CLCD_voidSendData+0x98>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	65 e0       	ldi	r22, 0x05	; 5
     f2e:	41 e0       	ldi	r20, 0x01	; 1
     f30:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     f34:	05 c0       	rjmp	.+10     	; 0xf40 <CLCD_voidSendData+0xa2>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	65 e0       	ldi	r22, 0x05	; 5
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,4)==1)
     f40:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f42:	82 95       	swap	r24
     f44:	8f 70       	andi	r24, 0x0F	; 15
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	81 70       	andi	r24, 0x01	; 1
     f4c:	90 70       	andi	r25, 0x00	; 0
     f4e:	88 23       	and	r24, r24
     f50:	31 f0       	breq	.+12     	; 0xf5e <CLCD_voidSendData+0xc0>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	64 e0       	ldi	r22, 0x04	; 4
     f56:	41 e0       	ldi	r20, 0x01	; 1
     f58:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     f5c:	05 c0       	rjmp	.+10     	; 0xf68 <CLCD_voidSendData+0xca>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	64 e0       	ldi	r22, 0x04	; 4
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	62 e0       	ldi	r22, 0x02	; 2
     f6c:	41 e0       	ldi	r20, 0x01	; 1
     f6e:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e4       	ldi	r27, 0x40	; 64
     f7a:	89 8f       	std	Y+25, r24	; 0x19
     f7c:	9a 8f       	std	Y+26, r25	; 0x1a
     f7e:	ab 8f       	std	Y+27, r26	; 0x1b
     f80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f82:	69 8d       	ldd	r22, Y+25	; 0x19
     f84:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	4a ef       	ldi	r20, 0xFA	; 250
     f90:	54 e4       	ldi	r21, 0x44	; 68
     f92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	8d 8b       	std	Y+21, r24	; 0x15
     f9c:	9e 8b       	std	Y+22, r25	; 0x16
     f9e:	af 8b       	std	Y+23, r26	; 0x17
     fa0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fa2:	6d 89       	ldd	r22, Y+21	; 0x15
     fa4:	7e 89       	ldd	r23, Y+22	; 0x16
     fa6:	8f 89       	ldd	r24, Y+23	; 0x17
     fa8:	98 8d       	ldd	r25, Y+24	; 0x18
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e8       	ldi	r20, 0x80	; 128
     fb0:	5f e3       	ldi	r21, 0x3F	; 63
     fb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fb6:	88 23       	and	r24, r24
     fb8:	2c f4       	brge	.+10     	; 0xfc4 <CLCD_voidSendData+0x126>
		__ticks = 1;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	9c 8b       	std	Y+20, r25	; 0x14
     fc0:	8b 8b       	std	Y+19, r24	; 0x13
     fc2:	3f c0       	rjmp	.+126    	; 0x1042 <CLCD_voidSendData+0x1a4>
	else if (__tmp > 65535)
     fc4:	6d 89       	ldd	r22, Y+21	; 0x15
     fc6:	7e 89       	ldd	r23, Y+22	; 0x16
     fc8:	8f 89       	ldd	r24, Y+23	; 0x17
     fca:	98 8d       	ldd	r25, Y+24	; 0x18
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	3f ef       	ldi	r19, 0xFF	; 255
     fd0:	4f e7       	ldi	r20, 0x7F	; 127
     fd2:	57 e4       	ldi	r21, 0x47	; 71
     fd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fd8:	18 16       	cp	r1, r24
     fda:	4c f5       	brge	.+82     	; 0x102e <CLCD_voidSendData+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fdc:	69 8d       	ldd	r22, Y+25	; 0x19
     fde:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e2       	ldi	r20, 0x20	; 32
     fea:	51 e4       	ldi	r21, 0x41	; 65
     fec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	bc 01       	movw	r22, r24
     ff6:	cd 01       	movw	r24, r26
     ff8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	9c 8b       	std	Y+20, r25	; 0x14
    1002:	8b 8b       	std	Y+19, r24	; 0x13
    1004:	0f c0       	rjmp	.+30     	; 0x1024 <CLCD_voidSendData+0x186>
    1006:	88 ec       	ldi	r24, 0xC8	; 200
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	9a 8b       	std	Y+18, r25	; 0x12
    100c:	89 8b       	std	Y+17, r24	; 0x11
    100e:	89 89       	ldd	r24, Y+17	; 0x11
    1010:	9a 89       	ldd	r25, Y+18	; 0x12
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <CLCD_voidSendData+0x174>
    1016:	9a 8b       	std	Y+18, r25	; 0x12
    1018:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    101a:	8b 89       	ldd	r24, Y+19	; 0x13
    101c:	9c 89       	ldd	r25, Y+20	; 0x14
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	9c 8b       	std	Y+20, r25	; 0x14
    1022:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1024:	8b 89       	ldd	r24, Y+19	; 0x13
    1026:	9c 89       	ldd	r25, Y+20	; 0x14
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	69 f7       	brne	.-38     	; 0x1006 <CLCD_voidSendData+0x168>
    102c:	14 c0       	rjmp	.+40     	; 0x1056 <CLCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    102e:	6d 89       	ldd	r22, Y+21	; 0x15
    1030:	7e 89       	ldd	r23, Y+22	; 0x16
    1032:	8f 89       	ldd	r24, Y+23	; 0x17
    1034:	98 8d       	ldd	r25, Y+24	; 0x18
    1036:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	9c 8b       	std	Y+20, r25	; 0x14
    1040:	8b 8b       	std	Y+19, r24	; 0x13
    1042:	8b 89       	ldd	r24, Y+19	; 0x13
    1044:	9c 89       	ldd	r25, Y+20	; 0x14
    1046:	98 8b       	std	Y+16, r25	; 0x10
    1048:	8f 87       	std	Y+15, r24	; 0x0f
    104a:	8f 85       	ldd	r24, Y+15	; 0x0f
    104c:	98 89       	ldd	r25, Y+16	; 0x10
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <CLCD_voidSendData+0x1b0>
    1052:	98 8b       	std	Y+16, r25	; 0x10
    1054:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1056:	82 e0       	ldi	r24, 0x02	; 2
    1058:	62 e0       	ldi	r22, 0x02	; 2
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

	/*Send The Second Nibble*/

	/*Set command to data pins*/
    if(GET_BIT(Copy_u8Data,3)==1)
    1060:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1062:	86 95       	lsr	r24
    1064:	86 95       	lsr	r24
    1066:	86 95       	lsr	r24
    1068:	88 2f       	mov	r24, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	81 70       	andi	r24, 0x01	; 1
    106e:	90 70       	andi	r25, 0x00	; 0
    1070:	88 23       	and	r24, r24
    1072:	31 f0       	breq	.+12     	; 0x1080 <CLCD_voidSendData+0x1e2>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	67 e0       	ldi	r22, 0x07	; 7
    1078:	41 e0       	ldi	r20, 0x01	; 1
    107a:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    107e:	05 c0       	rjmp	.+10     	; 0x108a <CLCD_voidSendData+0x1ec>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	67 e0       	ldi	r22, 0x07	; 7
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,2)==1)
    108a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    108c:	86 95       	lsr	r24
    108e:	86 95       	lsr	r24
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	81 70       	andi	r24, 0x01	; 1
    1096:	90 70       	andi	r25, 0x00	; 0
    1098:	88 23       	and	r24, r24
    109a:	31 f0       	breq	.+12     	; 0x10a8 <CLCD_voidSendData+0x20a>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	66 e0       	ldi	r22, 0x06	; 6
    10a0:	41 e0       	ldi	r20, 0x01	; 1
    10a2:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    10a6:	05 c0       	rjmp	.+10     	; 0x10b2 <CLCD_voidSendData+0x214>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	66 e0       	ldi	r22, 0x06	; 6
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,1)==1)
    10b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10b4:	86 95       	lsr	r24
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	81 70       	andi	r24, 0x01	; 1
    10bc:	90 70       	andi	r25, 0x00	; 0
    10be:	88 23       	and	r24, r24
    10c0:	31 f0       	breq	.+12     	; 0x10ce <CLCD_voidSendData+0x230>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	65 e0       	ldi	r22, 0x05	; 5
    10c6:	41 e0       	ldi	r20, 0x01	; 1
    10c8:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    10cc:	05 c0       	rjmp	.+10     	; 0x10d8 <CLCD_voidSendData+0x23a>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_LOW);
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	65 e0       	ldi	r22, 0x05	; 5
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

    if(GET_BIT(Copy_u8Data,0)==1)
    10d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	81 70       	andi	r24, 0x01	; 1
    10e0:	90 70       	andi	r25, 0x00	; 0
    10e2:	88 23       	and	r24, r24
    10e4:	31 f0       	breq	.+12     	; 0x10f2 <CLCD_voidSendData+0x254>
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_HIGH);
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	64 e0       	ldi	r22, 0x04	; 4
    10ea:	41 e0       	ldi	r20, 0x01	; 1
    10ec:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    10f0:	05 c0       	rjmp	.+10     	; 0x10fc <CLCD_voidSendData+0x25e>
    }
    else
    {
    	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	64 e0       	ldi	r22, 0x04	; 4
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    }

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    10fc:	82 e0       	ldi	r24, 0x02	; 2
    10fe:	62 e0       	ldi	r22, 0x02	; 2
    1100:	41 e0       	ldi	r20, 0x01	; 1
    1102:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 e0       	ldi	r26, 0x00	; 0
    110c:	b0 e4       	ldi	r27, 0x40	; 64
    110e:	8b 87       	std	Y+11, r24	; 0x0b
    1110:	9c 87       	std	Y+12, r25	; 0x0c
    1112:	ad 87       	std	Y+13, r26	; 0x0d
    1114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1116:	6b 85       	ldd	r22, Y+11	; 0x0b
    1118:	7c 85       	ldd	r23, Y+12	; 0x0c
    111a:	8d 85       	ldd	r24, Y+13	; 0x0d
    111c:	9e 85       	ldd	r25, Y+14	; 0x0e
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4a ef       	ldi	r20, 0xFA	; 250
    1124:	54 e4       	ldi	r21, 0x44	; 68
    1126:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8f 83       	std	Y+7, r24	; 0x07
    1130:	98 87       	std	Y+8, r25	; 0x08
    1132:	a9 87       	std	Y+9, r26	; 0x09
    1134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	5f e3       	ldi	r21, 0x3F	; 63
    1146:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    114a:	88 23       	and	r24, r24
    114c:	2c f4       	brge	.+10     	; 0x1158 <CLCD_voidSendData+0x2ba>
		__ticks = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9e 83       	std	Y+6, r25	; 0x06
    1154:	8d 83       	std	Y+5, r24	; 0x05
    1156:	3f c0       	rjmp	.+126    	; 0x11d6 <CLCD_voidSendData+0x338>
	else if (__tmp > 65535)
    1158:	6f 81       	ldd	r22, Y+7	; 0x07
    115a:	78 85       	ldd	r23, Y+8	; 0x08
    115c:	89 85       	ldd	r24, Y+9	; 0x09
    115e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	4f e7       	ldi	r20, 0x7F	; 127
    1166:	57 e4       	ldi	r21, 0x47	; 71
    1168:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    116c:	18 16       	cp	r1, r24
    116e:	4c f5       	brge	.+82     	; 0x11c2 <CLCD_voidSendData+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1170:	6b 85       	ldd	r22, Y+11	; 0x0b
    1172:	7c 85       	ldd	r23, Y+12	; 0x0c
    1174:	8d 85       	ldd	r24, Y+13	; 0x0d
    1176:	9e 85       	ldd	r25, Y+14	; 0x0e
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e2       	ldi	r20, 0x20	; 32
    117e:	51 e4       	ldi	r21, 0x41	; 65
    1180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	8d 83       	std	Y+5, r24	; 0x05
    1198:	0f c0       	rjmp	.+30     	; 0x11b8 <CLCD_voidSendData+0x31a>
    119a:	88 ec       	ldi	r24, 0xC8	; 200
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <CLCD_voidSendData+0x308>
    11aa:	9c 83       	std	Y+4, r25	; 0x04
    11ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	69 f7       	brne	.-38     	; 0x119a <CLCD_voidSendData+0x2fc>
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <CLCD_voidSendData+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	89 85       	ldd	r24, Y+9	; 0x09
    11c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <CLCD_voidSendData+0x344>
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	62 e0       	ldi	r22, 0x02	; 2
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

	#endif

}
    11f4:	6d 96       	adiw	r28, 0x1d	; 29
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <CLCD_voidInit>:

void CLCD_voidInit(u8 Copy_u8Function,u8 Copy_u8Display)
{
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	c8 56       	subi	r28, 0x68	; 104
    1214:	d0 40       	sbci	r29, 0x00	; 0
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	fe 01       	movw	r30, r28
    1222:	ed 59       	subi	r30, 0x9D	; 157
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 83       	st	Z, r24
    1228:	fe 01       	movw	r30, r28
    122a:	ec 59       	subi	r30, 0x9C	; 156
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	60 83       	st	Z, r22
    1230:	fe 01       	movw	r30, r28
    1232:	e1 5a       	subi	r30, 0xA1	; 161
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a0 e2       	ldi	r26, 0x20	; 32
    123c:	b2 e4       	ldi	r27, 0x42	; 66
    123e:	80 83       	st	Z, r24
    1240:	91 83       	std	Z+1, r25	; 0x01
    1242:	a2 83       	std	Z+2, r26	; 0x02
    1244:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1246:	8e 01       	movw	r16, r28
    1248:	05 5a       	subi	r16, 0xA5	; 165
    124a:	1f 4f       	sbci	r17, 0xFF	; 255
    124c:	fe 01       	movw	r30, r28
    124e:	e1 5a       	subi	r30, 0xA1	; 161
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	60 81       	ld	r22, Z
    1254:	71 81       	ldd	r23, Z+1	; 0x01
    1256:	82 81       	ldd	r24, Z+2	; 0x02
    1258:	93 81       	ldd	r25, Z+3	; 0x03
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	4a ef       	ldi	r20, 0xFA	; 250
    1260:	54 e4       	ldi	r21, 0x44	; 68
    1262:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	f8 01       	movw	r30, r16
    126c:	80 83       	st	Z, r24
    126e:	91 83       	std	Z+1, r25	; 0x01
    1270:	a2 83       	std	Z+2, r26	; 0x02
    1272:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1274:	fe 01       	movw	r30, r28
    1276:	e5 5a       	subi	r30, 0xA5	; 165
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	60 81       	ld	r22, Z
    127c:	71 81       	ldd	r23, Z+1	; 0x01
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	93 81       	ldd	r25, Z+3	; 0x03
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e8       	ldi	r20, 0x80	; 128
    1288:	5f e3       	ldi	r21, 0x3F	; 63
    128a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    128e:	88 23       	and	r24, r24
    1290:	44 f4       	brge	.+16     	; 0x12a2 <CLCD_voidInit+0x9c>
		__ticks = 1;
    1292:	fe 01       	movw	r30, r28
    1294:	e7 5a       	subi	r30, 0xA7	; 167
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	91 83       	std	Z+1, r25	; 0x01
    129e:	80 83       	st	Z, r24
    12a0:	64 c0       	rjmp	.+200    	; 0x136a <CLCD_voidInit+0x164>
	else if (__tmp > 65535)
    12a2:	fe 01       	movw	r30, r28
    12a4:	e5 5a       	subi	r30, 0xA5	; 165
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	4f e7       	ldi	r20, 0x7F	; 127
    12b6:	57 e4       	ldi	r21, 0x47	; 71
    12b8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12bc:	18 16       	cp	r1, r24
    12be:	0c f0       	brlt	.+2      	; 0x12c2 <CLCD_voidInit+0xbc>
    12c0:	43 c0       	rjmp	.+134    	; 0x1348 <CLCD_voidInit+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c2:	fe 01       	movw	r30, r28
    12c4:	e1 5a       	subi	r30, 0xA1	; 161
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	60 81       	ld	r22, Z
    12ca:	71 81       	ldd	r23, Z+1	; 0x01
    12cc:	82 81       	ldd	r24, Z+2	; 0x02
    12ce:	93 81       	ldd	r25, Z+3	; 0x03
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e2       	ldi	r20, 0x20	; 32
    12d6:	51 e4       	ldi	r21, 0x41	; 65
    12d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	8e 01       	movw	r16, r28
    12e2:	07 5a       	subi	r16, 0xA7	; 167
    12e4:	1f 4f       	sbci	r17, 0xFF	; 255
    12e6:	bc 01       	movw	r22, r24
    12e8:	cd 01       	movw	r24, r26
    12ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	f8 01       	movw	r30, r16
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	80 83       	st	Z, r24
    12f8:	1f c0       	rjmp	.+62     	; 0x1338 <CLCD_voidInit+0x132>
    12fa:	fe 01       	movw	r30, r28
    12fc:	e9 5a       	subi	r30, 0xA9	; 169
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	88 ec       	ldi	r24, 0xC8	; 200
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	91 83       	std	Z+1, r25	; 0x01
    1306:	80 83       	st	Z, r24
    1308:	fe 01       	movw	r30, r28
    130a:	e9 5a       	subi	r30, 0xA9	; 169
    130c:	ff 4f       	sbci	r31, 0xFF	; 255
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <CLCD_voidInit+0x10c>
    1316:	fe 01       	movw	r30, r28
    1318:	e9 5a       	subi	r30, 0xA9	; 169
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	91 83       	std	Z+1, r25	; 0x01
    131e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1320:	de 01       	movw	r26, r28
    1322:	a7 5a       	subi	r26, 0xA7	; 167
    1324:	bf 4f       	sbci	r27, 0xFF	; 255
    1326:	fe 01       	movw	r30, r28
    1328:	e7 5a       	subi	r30, 0xA7	; 167
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	80 81       	ld	r24, Z
    132e:	91 81       	ldd	r25, Z+1	; 0x01
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	11 96       	adiw	r26, 0x01	; 1
    1334:	9c 93       	st	X, r25
    1336:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1338:	fe 01       	movw	r30, r28
    133a:	e7 5a       	subi	r30, 0xA7	; 167
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	d1 f6       	brne	.-76     	; 0x12fa <CLCD_voidInit+0xf4>
    1346:	27 c0       	rjmp	.+78     	; 0x1396 <CLCD_voidInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1348:	8e 01       	movw	r16, r28
    134a:	07 5a       	subi	r16, 0xA7	; 167
    134c:	1f 4f       	sbci	r17, 0xFF	; 255
    134e:	fe 01       	movw	r30, r28
    1350:	e5 5a       	subi	r30, 0xA5	; 165
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	60 81       	ld	r22, Z
    1356:	71 81       	ldd	r23, Z+1	; 0x01
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	f8 01       	movw	r30, r16
    1366:	91 83       	std	Z+1, r25	; 0x01
    1368:	80 83       	st	Z, r24
    136a:	de 01       	movw	r26, r28
    136c:	ab 5a       	subi	r26, 0xAB	; 171
    136e:	bf 4f       	sbci	r27, 0xFF	; 255
    1370:	fe 01       	movw	r30, r28
    1372:	e7 5a       	subi	r30, 0xA7	; 167
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	80 81       	ld	r24, Z
    1378:	91 81       	ldd	r25, Z+1	; 0x01
    137a:	8d 93       	st	X+, r24
    137c:	9c 93       	st	X, r25
    137e:	fe 01       	movw	r30, r28
    1380:	eb 5a       	subi	r30, 0xAB	; 171
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	80 81       	ld	r24, Z
    1386:	91 81       	ldd	r25, Z+1	; 0x01
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <CLCD_voidInit+0x182>
    138c:	fe 01       	movw	r30, r28
    138e:	eb 5a       	subi	r30, 0xAB	; 171
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	91 83       	std	Z+1, r25	; 0x01
    1394:	80 83       	st	Z, r24
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);*/

	/*Wait for more than 30 ms*/
	_delay_ms(40);

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

	/*Set command to data pins*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	67 e0       	ldi	r22, 0x07	; 7
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	66 e0       	ldi	r22, 0x06	; 6
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	65 e0       	ldi	r22, 0x05	; 5
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	64 e0       	ldi	r22, 0x04	; 4
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	62 e0       	ldi	r22, 0x02	; 2
    13d6:	41 e0       	ldi	r20, 0x01	; 1
    13d8:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    13dc:	fe 01       	movw	r30, r28
    13de:	ef 5a       	subi	r30, 0xAF	; 175
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	a0 e0       	ldi	r26, 0x00	; 0
    13e8:	b0 e4       	ldi	r27, 0x40	; 64
    13ea:	80 83       	st	Z, r24
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	a2 83       	std	Z+2, r26	; 0x02
    13f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f2:	8e 01       	movw	r16, r28
    13f4:	03 5b       	subi	r16, 0xB3	; 179
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
    13f8:	fe 01       	movw	r30, r28
    13fa:	ef 5a       	subi	r30, 0xAF	; 175
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	60 81       	ld	r22, Z
    1400:	71 81       	ldd	r23, Z+1	; 0x01
    1402:	82 81       	ldd	r24, Z+2	; 0x02
    1404:	93 81       	ldd	r25, Z+3	; 0x03
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	4a ef       	ldi	r20, 0xFA	; 250
    140c:	54 e4       	ldi	r21, 0x44	; 68
    140e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	f8 01       	movw	r30, r16
    1418:	80 83       	st	Z, r24
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	a2 83       	std	Z+2, r26	; 0x02
    141e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1420:	fe 01       	movw	r30, r28
    1422:	e3 5b       	subi	r30, 0xB3	; 179
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e8       	ldi	r20, 0x80	; 128
    1434:	5f e3       	ldi	r21, 0x3F	; 63
    1436:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    143a:	88 23       	and	r24, r24
    143c:	44 f4       	brge	.+16     	; 0x144e <CLCD_voidInit+0x248>
		__ticks = 1;
    143e:	fe 01       	movw	r30, r28
    1440:	e5 5b       	subi	r30, 0xB5	; 181
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	91 83       	std	Z+1, r25	; 0x01
    144a:	80 83       	st	Z, r24
    144c:	64 c0       	rjmp	.+200    	; 0x1516 <CLCD_voidInit+0x310>
	else if (__tmp > 65535)
    144e:	fe 01       	movw	r30, r28
    1450:	e3 5b       	subi	r30, 0xB3	; 179
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	60 81       	ld	r22, Z
    1456:	71 81       	ldd	r23, Z+1	; 0x01
    1458:	82 81       	ldd	r24, Z+2	; 0x02
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	3f ef       	ldi	r19, 0xFF	; 255
    1460:	4f e7       	ldi	r20, 0x7F	; 127
    1462:	57 e4       	ldi	r21, 0x47	; 71
    1464:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1468:	18 16       	cp	r1, r24
    146a:	0c f0       	brlt	.+2      	; 0x146e <CLCD_voidInit+0x268>
    146c:	43 c0       	rjmp	.+134    	; 0x14f4 <CLCD_voidInit+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146e:	fe 01       	movw	r30, r28
    1470:	ef 5a       	subi	r30, 0xAF	; 175
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	60 81       	ld	r22, Z
    1476:	71 81       	ldd	r23, Z+1	; 0x01
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e2       	ldi	r20, 0x20	; 32
    1482:	51 e4       	ldi	r21, 0x41	; 65
    1484:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	8e 01       	movw	r16, r28
    148e:	05 5b       	subi	r16, 0xB5	; 181
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	f8 01       	movw	r30, r16
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	80 83       	st	Z, r24
    14a4:	1f c0       	rjmp	.+62     	; 0x14e4 <CLCD_voidInit+0x2de>
    14a6:	fe 01       	movw	r30, r28
    14a8:	e7 5b       	subi	r30, 0xB7	; 183
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	88 ec       	ldi	r24, 0xC8	; 200
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	80 83       	st	Z, r24
    14b4:	fe 01       	movw	r30, r28
    14b6:	e7 5b       	subi	r30, 0xB7	; 183
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	80 81       	ld	r24, Z
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <CLCD_voidInit+0x2b8>
    14c2:	fe 01       	movw	r30, r28
    14c4:	e7 5b       	subi	r30, 0xB7	; 183
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	91 83       	std	Z+1, r25	; 0x01
    14ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	de 01       	movw	r26, r28
    14ce:	a5 5b       	subi	r26, 0xB5	; 181
    14d0:	bf 4f       	sbci	r27, 0xFF	; 255
    14d2:	fe 01       	movw	r30, r28
    14d4:	e5 5b       	subi	r30, 0xB5	; 181
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	80 81       	ld	r24, Z
    14da:	91 81       	ldd	r25, Z+1	; 0x01
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	11 96       	adiw	r26, 0x01	; 1
    14e0:	9c 93       	st	X, r25
    14e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e4:	fe 01       	movw	r30, r28
    14e6:	e5 5b       	subi	r30, 0xB5	; 181
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	d1 f6       	brne	.-76     	; 0x14a6 <CLCD_voidInit+0x2a0>
    14f2:	27 c0       	rjmp	.+78     	; 0x1542 <CLCD_voidInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f4:	8e 01       	movw	r16, r28
    14f6:	05 5b       	subi	r16, 0xB5	; 181
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	fe 01       	movw	r30, r28
    14fc:	e3 5b       	subi	r30, 0xB3	; 179
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	60 81       	ld	r22, Z
    1502:	71 81       	ldd	r23, Z+1	; 0x01
    1504:	82 81       	ldd	r24, Z+2	; 0x02
    1506:	93 81       	ldd	r25, Z+3	; 0x03
    1508:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	f8 01       	movw	r30, r16
    1512:	91 83       	std	Z+1, r25	; 0x01
    1514:	80 83       	st	Z, r24
    1516:	de 01       	movw	r26, r28
    1518:	a9 5b       	subi	r26, 0xB9	; 185
    151a:	bf 4f       	sbci	r27, 0xFF	; 255
    151c:	fe 01       	movw	r30, r28
    151e:	e5 5b       	subi	r30, 0xB5	; 181
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	8d 93       	st	X+, r24
    1528:	9c 93       	st	X, r25
    152a:	fe 01       	movw	r30, r28
    152c:	e9 5b       	subi	r30, 0xB9	; 185
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <CLCD_voidInit+0x32e>
    1538:	fe 01       	movw	r30, r28
    153a:	e9 5b       	subi	r30, 0xB9	; 185
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	91 83       	std	Z+1, r25	; 0x01
    1540:	80 83       	st	Z, r24
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1542:	82 e0       	ldi	r24, 0x02	; 2
    1544:	62 e0       	ldi	r22, 0x02	; 2
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

	/*Set command to data pins*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	67 e0       	ldi	r22, 0x07	; 7
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	66 e0       	ldi	r22, 0x06	; 6
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN5,DIO_u8PIN_HIGH);
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	65 e0       	ldi	r22, 0x05	; 5
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN4,DIO_u8PIN_LOW);
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	64 e0       	ldi	r22, 0x04	; 4
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

	/*Send enable pulse*/
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	62 e0       	ldi	r22, 0x02	; 2
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    157e:	fe 01       	movw	r30, r28
    1580:	ed 5b       	subi	r30, 0xBD	; 189
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a0 e0       	ldi	r26, 0x00	; 0
    158a:	b0 e4       	ldi	r27, 0x40	; 64
    158c:	80 83       	st	Z, r24
    158e:	91 83       	std	Z+1, r25	; 0x01
    1590:	a2 83       	std	Z+2, r26	; 0x02
    1592:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1594:	8e 01       	movw	r16, r28
    1596:	01 5c       	subi	r16, 0xC1	; 193
    1598:	1f 4f       	sbci	r17, 0xFF	; 255
    159a:	fe 01       	movw	r30, r28
    159c:	ed 5b       	subi	r30, 0xBD	; 189
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	82 81       	ldd	r24, Z+2	; 0x02
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	4a ef       	ldi	r20, 0xFA	; 250
    15ae:	54 e4       	ldi	r21, 0x44	; 68
    15b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	f8 01       	movw	r30, r16
    15ba:	80 83       	st	Z, r24
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	a2 83       	std	Z+2, r26	; 0x02
    15c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15c2:	fe 01       	movw	r30, r28
    15c4:	ff 96       	adiw	r30, 0x3f	; 63
    15c6:	60 81       	ld	r22, Z
    15c8:	71 81       	ldd	r23, Z+1	; 0x01
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e8       	ldi	r20, 0x80	; 128
    15d4:	5f e3       	ldi	r21, 0x3F	; 63
    15d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15da:	88 23       	and	r24, r24
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <CLCD_voidInit+0x3e2>
		__ticks = 1;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9e af       	std	Y+62, r25	; 0x3e
    15e4:	8d af       	std	Y+61, r24	; 0x3d
    15e6:	46 c0       	rjmp	.+140    	; 0x1674 <CLCD_voidInit+0x46e>
	else if (__tmp > 65535)
    15e8:	fe 01       	movw	r30, r28
    15ea:	ff 96       	adiw	r30, 0x3f	; 63
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	82 81       	ldd	r24, Z+2	; 0x02
    15f2:	93 81       	ldd	r25, Z+3	; 0x03
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	3f ef       	ldi	r19, 0xFF	; 255
    15f8:	4f e7       	ldi	r20, 0x7F	; 127
    15fa:	57 e4       	ldi	r21, 0x47	; 71
    15fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1600:	18 16       	cp	r1, r24
    1602:	64 f5       	brge	.+88     	; 0x165c <CLCD_voidInit+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1604:	fe 01       	movw	r30, r28
    1606:	ed 5b       	subi	r30, 0xBD	; 189
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	60 81       	ld	r22, Z
    160c:	71 81       	ldd	r23, Z+1	; 0x01
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e2       	ldi	r20, 0x20	; 32
    1618:	51 e4       	ldi	r21, 0x41	; 65
    161a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9e af       	std	Y+62, r25	; 0x3e
    1630:	8d af       	std	Y+61, r24	; 0x3d
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <CLCD_voidInit+0x44c>
    1634:	88 ec       	ldi	r24, 0xC8	; 200
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	9c af       	std	Y+60, r25	; 0x3c
    163a:	8b af       	std	Y+59, r24	; 0x3b
    163c:	8b ad       	ldd	r24, Y+59	; 0x3b
    163e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <CLCD_voidInit+0x43a>
    1644:	9c af       	std	Y+60, r25	; 0x3c
    1646:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1648:	8d ad       	ldd	r24, Y+61	; 0x3d
    164a:	9e ad       	ldd	r25, Y+62	; 0x3e
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	9e af       	std	Y+62, r25	; 0x3e
    1650:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1652:	8d ad       	ldd	r24, Y+61	; 0x3d
    1654:	9e ad       	ldd	r25, Y+62	; 0x3e
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	69 f7       	brne	.-38     	; 0x1634 <CLCD_voidInit+0x42e>
    165a:	16 c0       	rjmp	.+44     	; 0x1688 <CLCD_voidInit+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165c:	fe 01       	movw	r30, r28
    165e:	ff 96       	adiw	r30, 0x3f	; 63
    1660:	60 81       	ld	r22, Z
    1662:	71 81       	ldd	r23, Z+1	; 0x01
    1664:	82 81       	ldd	r24, Z+2	; 0x02
    1666:	93 81       	ldd	r25, Z+3	; 0x03
    1668:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	9e af       	std	Y+62, r25	; 0x3e
    1672:	8d af       	std	Y+61, r24	; 0x3d
    1674:	8d ad       	ldd	r24, Y+61	; 0x3d
    1676:	9e ad       	ldd	r25, Y+62	; 0x3e
    1678:	9a af       	std	Y+58, r25	; 0x3a
    167a:	89 af       	std	Y+57, r24	; 0x39
    167c:	89 ad       	ldd	r24, Y+57	; 0x39
    167e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <CLCD_voidInit+0x47a>
    1684:	9a af       	std	Y+58, r25	; 0x3a
    1686:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(2);
    DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	62 e0       	ldi	r22, 0x02	; 2
    168c:	40 e0       	ldi	r20, 0x00	; 0
    168e:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

	switch(Copy_u8Function)
    1692:	fe 01       	movw	r30, r28
    1694:	ed 59       	subi	r30, 0x9D	; 157
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	80 81       	ld	r24, Z
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	a9 96       	adiw	r28, 0x29	; 41
    16a0:	3f af       	std	Y+63, r19	; 0x3f
    16a2:	2e af       	std	Y+62, r18	; 0x3e
    16a4:	a9 97       	sbiw	r28, 0x29	; 41
    16a6:	a9 96       	adiw	r28, 0x29	; 41
    16a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    16ac:	a9 97       	sbiw	r28, 0x29	; 41
    16ae:	84 33       	cpi	r24, 0x34	; 52
    16b0:	91 05       	cpc	r25, r1
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <CLCD_voidInit+0x4b0>
    16b4:	b5 c1       	rjmp	.+874    	; 0x1a20 <CLCD_voidInit+0x81a>
    16b6:	a9 96       	adiw	r28, 0x29	; 41
    16b8:	ee ad       	ldd	r30, Y+62	; 0x3e
    16ba:	ff ad       	ldd	r31, Y+63	; 0x3f
    16bc:	a9 97       	sbiw	r28, 0x29	; 41
    16be:	e5 33       	cpi	r30, 0x35	; 53
    16c0:	f1 05       	cpc	r31, r1
    16c2:	4c f4       	brge	.+18     	; 0x16d6 <CLCD_voidInit+0x4d0>
    16c4:	a9 96       	adiw	r28, 0x29	; 41
    16c6:	2e ad       	ldd	r18, Y+62	; 0x3e
    16c8:	3f ad       	ldd	r19, Y+63	; 0x3f
    16ca:	a9 97       	sbiw	r28, 0x29	; 41
    16cc:	20 33       	cpi	r18, 0x30	; 48
    16ce:	31 05       	cpc	r19, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <CLCD_voidInit+0x4ce>
    16d2:	1f c1       	rjmp	.+574    	; 0x1912 <CLCD_voidInit+0x70c>
    16d4:	2b c2       	rjmp	.+1110   	; 0x1b2c <CLCD_voidInit+0x926>
    16d6:	a9 96       	adiw	r28, 0x29	; 41
    16d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16da:	9f ad       	ldd	r25, Y+63	; 0x3f
    16dc:	a9 97       	sbiw	r28, 0x29	; 41
    16de:	88 33       	cpi	r24, 0x38	; 56
    16e0:	91 05       	cpc	r25, r1
    16e2:	49 f0       	breq	.+18     	; 0x16f6 <CLCD_voidInit+0x4f0>
    16e4:	a9 96       	adiw	r28, 0x29	; 41
    16e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    16e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    16ea:	a9 97       	sbiw	r28, 0x29	; 41
    16ec:	ec 33       	cpi	r30, 0x3C	; 60
    16ee:	f1 05       	cpc	r31, r1
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <CLCD_voidInit+0x4ee>
    16f2:	88 c0       	rjmp	.+272    	; 0x1804 <CLCD_voidInit+0x5fe>
    16f4:	1b c2       	rjmp	.+1078   	; 0x1b2c <CLCD_voidInit+0x926>
    {
		case CLCD_2Lines_5x8Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	67 e0       	ldi	r22, 0x07	; 7
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	66 e0       	ldi	r22, 0x06	; 6
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 e0       	ldi	r26, 0x00	; 0
    171a:	b0 e4       	ldi	r27, 0x40	; 64
    171c:	8d ab       	std	Y+53, r24	; 0x35
    171e:	9e ab       	std	Y+54, r25	; 0x36
    1720:	af ab       	std	Y+55, r26	; 0x37
    1722:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1724:	6d a9       	ldd	r22, Y+53	; 0x35
    1726:	7e a9       	ldd	r23, Y+54	; 0x36
    1728:	8f a9       	ldd	r24, Y+55	; 0x37
    172a:	98 ad       	ldd	r25, Y+56	; 0x38
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4a ef       	ldi	r20, 0xFA	; 250
    1732:	54 e4       	ldi	r21, 0x44	; 68
    1734:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	89 ab       	std	Y+49, r24	; 0x31
    173e:	9a ab       	std	Y+50, r25	; 0x32
    1740:	ab ab       	std	Y+51, r26	; 0x33
    1742:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1744:	69 a9       	ldd	r22, Y+49	; 0x31
    1746:	7a a9       	ldd	r23, Y+50	; 0x32
    1748:	8b a9       	ldd	r24, Y+51	; 0x33
    174a:	9c a9       	ldd	r25, Y+52	; 0x34
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5f e3       	ldi	r21, 0x3F	; 63
    1754:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1758:	88 23       	and	r24, r24
    175a:	2c f4       	brge	.+10     	; 0x1766 <CLCD_voidInit+0x560>
		__ticks = 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	98 ab       	std	Y+48, r25	; 0x30
    1762:	8f a7       	std	Y+47, r24	; 0x2f
    1764:	3f c0       	rjmp	.+126    	; 0x17e4 <CLCD_voidInit+0x5de>
	else if (__tmp > 65535)
    1766:	69 a9       	ldd	r22, Y+49	; 0x31
    1768:	7a a9       	ldd	r23, Y+50	; 0x32
    176a:	8b a9       	ldd	r24, Y+51	; 0x33
    176c:	9c a9       	ldd	r25, Y+52	; 0x34
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	4f e7       	ldi	r20, 0x7F	; 127
    1774:	57 e4       	ldi	r21, 0x47	; 71
    1776:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    177a:	18 16       	cp	r1, r24
    177c:	4c f5       	brge	.+82     	; 0x17d0 <CLCD_voidInit+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	6d a9       	ldd	r22, Y+53	; 0x35
    1780:	7e a9       	ldd	r23, Y+54	; 0x36
    1782:	8f a9       	ldd	r24, Y+55	; 0x37
    1784:	98 ad       	ldd	r25, Y+56	; 0x38
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	98 ab       	std	Y+48, r25	; 0x30
    17a4:	8f a7       	std	Y+47, r24	; 0x2f
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <CLCD_voidInit+0x5c0>
    17a8:	88 ec       	ldi	r24, 0xC8	; 200
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9e a7       	std	Y+46, r25	; 0x2e
    17ae:	8d a7       	std	Y+45, r24	; 0x2d
    17b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    17b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <CLCD_voidInit+0x5ae>
    17b8:	9e a7       	std	Y+46, r25	; 0x2e
    17ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17be:	98 a9       	ldd	r25, Y+48	; 0x30
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	98 ab       	std	Y+48, r25	; 0x30
    17c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	69 f7       	brne	.-38     	; 0x17a8 <CLCD_voidInit+0x5a2>
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <CLCD_voidInit+0x5f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d0:	69 a9       	ldd	r22, Y+49	; 0x31
    17d2:	7a a9       	ldd	r23, Y+50	; 0x32
    17d4:	8b a9       	ldd	r24, Y+51	; 0x33
    17d6:	9c a9       	ldd	r25, Y+52	; 0x34
    17d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	98 ab       	std	Y+48, r25	; 0x30
    17e2:	8f a7       	std	Y+47, r24	; 0x2f
    17e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e6:	98 a9       	ldd	r25, Y+48	; 0x30
    17e8:	9c a7       	std	Y+44, r25	; 0x2c
    17ea:	8b a7       	std	Y+43, r24	; 0x2b
    17ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <CLCD_voidInit+0x5ea>
    17f4:	9c a7       	std	Y+44, r25	; 0x2c
    17f6:	8b a7       	std	Y+43, r24	; 0x2b
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    17f8:	82 e0       	ldi	r24, 0x02	; 2
    17fa:	62 e0       	ldi	r22, 0x02	; 2
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    1802:	94 c1       	rjmp	.+808    	; 0x1b2c <CLCD_voidInit+0x926>
            break;
        case CLCD_2Lines_5x11Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_HIGH);
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	67 e0       	ldi	r22, 0x07	; 7
    1808:	41 e0       	ldi	r20, 0x01	; 1
    180a:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	66 e0       	ldi	r22, 0x06	; 6
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	62 e0       	ldi	r22, 0x02	; 2
    181c:	41 e0       	ldi	r20, 0x01	; 1
    181e:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a0 e0       	ldi	r26, 0x00	; 0
    1828:	b0 e4       	ldi	r27, 0x40	; 64
    182a:	8f a3       	std	Y+39, r24	; 0x27
    182c:	98 a7       	std	Y+40, r25	; 0x28
    182e:	a9 a7       	std	Y+41, r26	; 0x29
    1830:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1832:	6f a1       	ldd	r22, Y+39	; 0x27
    1834:	78 a5       	ldd	r23, Y+40	; 0x28
    1836:	89 a5       	ldd	r24, Y+41	; 0x29
    1838:	9a a5       	ldd	r25, Y+42	; 0x2a
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	4a ef       	ldi	r20, 0xFA	; 250
    1840:	54 e4       	ldi	r21, 0x44	; 68
    1842:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	8b a3       	std	Y+35, r24	; 0x23
    184c:	9c a3       	std	Y+36, r25	; 0x24
    184e:	ad a3       	std	Y+37, r26	; 0x25
    1850:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1852:	6b a1       	ldd	r22, Y+35	; 0x23
    1854:	7c a1       	ldd	r23, Y+36	; 0x24
    1856:	8d a1       	ldd	r24, Y+37	; 0x25
    1858:	9e a1       	ldd	r25, Y+38	; 0x26
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e8       	ldi	r20, 0x80	; 128
    1860:	5f e3       	ldi	r21, 0x3F	; 63
    1862:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1866:	88 23       	and	r24, r24
    1868:	2c f4       	brge	.+10     	; 0x1874 <CLCD_voidInit+0x66e>
		__ticks = 1;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	9a a3       	std	Y+34, r25	; 0x22
    1870:	89 a3       	std	Y+33, r24	; 0x21
    1872:	3f c0       	rjmp	.+126    	; 0x18f2 <CLCD_voidInit+0x6ec>
	else if (__tmp > 65535)
    1874:	6b a1       	ldd	r22, Y+35	; 0x23
    1876:	7c a1       	ldd	r23, Y+36	; 0x24
    1878:	8d a1       	ldd	r24, Y+37	; 0x25
    187a:	9e a1       	ldd	r25, Y+38	; 0x26
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	3f ef       	ldi	r19, 0xFF	; 255
    1880:	4f e7       	ldi	r20, 0x7F	; 127
    1882:	57 e4       	ldi	r21, 0x47	; 71
    1884:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1888:	18 16       	cp	r1, r24
    188a:	4c f5       	brge	.+82     	; 0x18de <CLCD_voidInit+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188c:	6f a1       	ldd	r22, Y+39	; 0x27
    188e:	78 a5       	ldd	r23, Y+40	; 0x28
    1890:	89 a5       	ldd	r24, Y+41	; 0x29
    1892:	9a a5       	ldd	r25, Y+42	; 0x2a
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e2       	ldi	r20, 0x20	; 32
    189a:	51 e4       	ldi	r21, 0x41	; 65
    189c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	bc 01       	movw	r22, r24
    18a6:	cd 01       	movw	r24, r26
    18a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	9a a3       	std	Y+34, r25	; 0x22
    18b2:	89 a3       	std	Y+33, r24	; 0x21
    18b4:	0f c0       	rjmp	.+30     	; 0x18d4 <CLCD_voidInit+0x6ce>
    18b6:	88 ec       	ldi	r24, 0xC8	; 200
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	98 a3       	std	Y+32, r25	; 0x20
    18bc:	8f 8f       	std	Y+31, r24	; 0x1f
    18be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18c0:	98 a1       	ldd	r25, Y+32	; 0x20
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <CLCD_voidInit+0x6bc>
    18c6:	98 a3       	std	Y+32, r25	; 0x20
    18c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ca:	89 a1       	ldd	r24, Y+33	; 0x21
    18cc:	9a a1       	ldd	r25, Y+34	; 0x22
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	9a a3       	std	Y+34, r25	; 0x22
    18d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	69 f7       	brne	.-38     	; 0x18b6 <CLCD_voidInit+0x6b0>
    18dc:	14 c0       	rjmp	.+40     	; 0x1906 <CLCD_voidInit+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18de:	6b a1       	ldd	r22, Y+35	; 0x23
    18e0:	7c a1       	ldd	r23, Y+36	; 0x24
    18e2:	8d a1       	ldd	r24, Y+37	; 0x25
    18e4:	9e a1       	ldd	r25, Y+38	; 0x26
    18e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9a a3       	std	Y+34, r25	; 0x22
    18f0:	89 a3       	std	Y+33, r24	; 0x21
    18f2:	89 a1       	ldd	r24, Y+33	; 0x21
    18f4:	9a a1       	ldd	r25, Y+34	; 0x22
    18f6:	9e 8f       	std	Y+30, r25	; 0x1e
    18f8:	8d 8f       	std	Y+29, r24	; 0x1d
    18fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <CLCD_voidInit+0x6f8>
    1902:	9e 8f       	std	Y+30, r25	; 0x1e
    1904:	8d 8f       	std	Y+29, r24	; 0x1d
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	62 e0       	ldi	r22, 0x02	; 2
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    1910:	0d c1       	rjmp	.+538    	; 0x1b2c <CLCD_voidInit+0x926>
            break;
        case CLCD_1Lines_5x8Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	67 e0       	ldi	r22, 0x07	; 7
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_LOW);
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	66 e0       	ldi	r22, 0x06	; 6
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	62 e0       	ldi	r22, 0x02	; 2
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a0 e0       	ldi	r26, 0x00	; 0
    1936:	b0 e4       	ldi	r27, 0x40	; 64
    1938:	89 8f       	std	Y+25, r24	; 0x19
    193a:	9a 8f       	std	Y+26, r25	; 0x1a
    193c:	ab 8f       	std	Y+27, r26	; 0x1b
    193e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	69 8d       	ldd	r22, Y+25	; 0x19
    1942:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1944:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1946:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	4a ef       	ldi	r20, 0xFA	; 250
    194e:	54 e4       	ldi	r21, 0x44	; 68
    1950:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	8d 8b       	std	Y+21, r24	; 0x15
    195a:	9e 8b       	std	Y+22, r25	; 0x16
    195c:	af 8b       	std	Y+23, r26	; 0x17
    195e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1960:	6d 89       	ldd	r22, Y+21	; 0x15
    1962:	7e 89       	ldd	r23, Y+22	; 0x16
    1964:	8f 89       	ldd	r24, Y+23	; 0x17
    1966:	98 8d       	ldd	r25, Y+24	; 0x18
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e8       	ldi	r20, 0x80	; 128
    196e:	5f e3       	ldi	r21, 0x3F	; 63
    1970:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1974:	88 23       	and	r24, r24
    1976:	2c f4       	brge	.+10     	; 0x1982 <CLCD_voidInit+0x77c>
		__ticks = 1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9c 8b       	std	Y+20, r25	; 0x14
    197e:	8b 8b       	std	Y+19, r24	; 0x13
    1980:	3f c0       	rjmp	.+126    	; 0x1a00 <CLCD_voidInit+0x7fa>
	else if (__tmp > 65535)
    1982:	6d 89       	ldd	r22, Y+21	; 0x15
    1984:	7e 89       	ldd	r23, Y+22	; 0x16
    1986:	8f 89       	ldd	r24, Y+23	; 0x17
    1988:	98 8d       	ldd	r25, Y+24	; 0x18
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	57 e4       	ldi	r21, 0x47	; 71
    1992:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1996:	18 16       	cp	r1, r24
    1998:	4c f5       	brge	.+82     	; 0x19ec <CLCD_voidInit+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199a:	69 8d       	ldd	r22, Y+25	; 0x19
    199c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    199e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e2       	ldi	r20, 0x20	; 32
    19a8:	51 e4       	ldi	r21, 0x41	; 65
    19aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	9c 8b       	std	Y+20, r25	; 0x14
    19c0:	8b 8b       	std	Y+19, r24	; 0x13
    19c2:	0f c0       	rjmp	.+30     	; 0x19e2 <CLCD_voidInit+0x7dc>
    19c4:	88 ec       	ldi	r24, 0xC8	; 200
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9a 8b       	std	Y+18, r25	; 0x12
    19ca:	89 8b       	std	Y+17, r24	; 0x11
    19cc:	89 89       	ldd	r24, Y+17	; 0x11
    19ce:	9a 89       	ldd	r25, Y+18	; 0x12
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <CLCD_voidInit+0x7ca>
    19d4:	9a 8b       	std	Y+18, r25	; 0x12
    19d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d8:	8b 89       	ldd	r24, Y+19	; 0x13
    19da:	9c 89       	ldd	r25, Y+20	; 0x14
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	9c 8b       	std	Y+20, r25	; 0x14
    19e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e2:	8b 89       	ldd	r24, Y+19	; 0x13
    19e4:	9c 89       	ldd	r25, Y+20	; 0x14
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	69 f7       	brne	.-38     	; 0x19c4 <CLCD_voidInit+0x7be>
    19ea:	14 c0       	rjmp	.+40     	; 0x1a14 <CLCD_voidInit+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ec:	6d 89       	ldd	r22, Y+21	; 0x15
    19ee:	7e 89       	ldd	r23, Y+22	; 0x16
    19f0:	8f 89       	ldd	r24, Y+23	; 0x17
    19f2:	98 8d       	ldd	r25, Y+24	; 0x18
    19f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9c 8b       	std	Y+20, r25	; 0x14
    19fe:	8b 8b       	std	Y+19, r24	; 0x13
    1a00:	8b 89       	ldd	r24, Y+19	; 0x13
    1a02:	9c 89       	ldd	r25, Y+20	; 0x14
    1a04:	98 8b       	std	Y+16, r25	; 0x10
    1a06:	8f 87       	std	Y+15, r24	; 0x0f
    1a08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a0a:	98 89       	ldd	r25, Y+16	; 0x10
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <CLCD_voidInit+0x806>
    1a10:	98 8b       	std	Y+16, r25	; 0x10
    1a12:	8f 87       	std	Y+15, r24	; 0x0f
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	62 e0       	ldi	r22, 0x02	; 2
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    1a1e:	86 c0       	rjmp	.+268    	; 0x1b2c <CLCD_voidInit+0x926>
            break;
        case CLCD_1Lines_5x11Fontsize:
            DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN7,DIO_u8PIN_LOW);
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	67 e0       	ldi	r22, 0x07	; 7
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_DATA_PIN6,DIO_u8PIN_HIGH);
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	66 e0       	ldi	r22, 0x06	; 6
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>

			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	62 e0       	ldi	r22, 0x02	; 2
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	a0 e0       	ldi	r26, 0x00	; 0
    1a44:	b0 e4       	ldi	r27, 0x40	; 64
    1a46:	8b 87       	std	Y+11, r24	; 0x0b
    1a48:	9c 87       	std	Y+12, r25	; 0x0c
    1a4a:	ad 87       	std	Y+13, r26	; 0x0d
    1a4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	4a ef       	ldi	r20, 0xFA	; 250
    1a5c:	54 e4       	ldi	r21, 0x44	; 68
    1a5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	8f 83       	std	Y+7, r24	; 0x07
    1a68:	98 87       	std	Y+8, r25	; 0x08
    1a6a:	a9 87       	std	Y+9, r26	; 0x09
    1a6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a70:	78 85       	ldd	r23, Y+8	; 0x08
    1a72:	89 85       	ldd	r24, Y+9	; 0x09
    1a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e8       	ldi	r20, 0x80	; 128
    1a7c:	5f e3       	ldi	r21, 0x3F	; 63
    1a7e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a82:	88 23       	and	r24, r24
    1a84:	2c f4       	brge	.+10     	; 0x1a90 <CLCD_voidInit+0x88a>
		__ticks = 1;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
    1a8e:	3f c0       	rjmp	.+126    	; 0x1b0e <CLCD_voidInit+0x908>
	else if (__tmp > 65535)
    1a90:	6f 81       	ldd	r22, Y+7	; 0x07
    1a92:	78 85       	ldd	r23, Y+8	; 0x08
    1a94:	89 85       	ldd	r24, Y+9	; 0x09
    1a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	3f ef       	ldi	r19, 0xFF	; 255
    1a9c:	4f e7       	ldi	r20, 0x7F	; 127
    1a9e:	57 e4       	ldi	r21, 0x47	; 71
    1aa0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1aa4:	18 16       	cp	r1, r24
    1aa6:	4c f5       	brge	.+82     	; 0x1afa <CLCD_voidInit+0x8f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e2       	ldi	r20, 0x20	; 32
    1ab6:	51 e4       	ldi	r21, 0x41	; 65
    1ab8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	bc 01       	movw	r22, r24
    1ac2:	cd 01       	movw	r24, r26
    1ac4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	9e 83       	std	Y+6, r25	; 0x06
    1ace:	8d 83       	std	Y+5, r24	; 0x05
    1ad0:	0f c0       	rjmp	.+30     	; 0x1af0 <CLCD_voidInit+0x8ea>
    1ad2:	88 ec       	ldi	r24, 0xC8	; 200
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <CLCD_voidInit+0x8d8>
    1ae2:	9c 83       	std	Y+4, r25	; 0x04
    1ae4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	9e 83       	std	Y+6, r25	; 0x06
    1aee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	69 f7       	brne	.-38     	; 0x1ad2 <CLCD_voidInit+0x8cc>
    1af8:	14 c0       	rjmp	.+40     	; 0x1b22 <CLCD_voidInit+0x91c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afa:	6f 81       	ldd	r22, Y+7	; 0x07
    1afc:	78 85       	ldd	r23, Y+8	; 0x08
    1afe:	89 85       	ldd	r24, Y+9	; 0x09
    1b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	9e 83       	std	Y+6, r25	; 0x06
    1b0c:	8d 83       	std	Y+5, r24	; 0x05
    1b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b10:	9e 81       	ldd	r25, Y+6	; 0x06
    1b12:	9a 83       	std	Y+2, r25	; 0x02
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <CLCD_voidInit+0x914>
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	89 83       	std	Y+1, r24	; 0x01
    		_delay_ms(2);
  			DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	62 e0       	ldi	r22, 0x02	; 2
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	0e 94 98 10 	call	0x2130	; 0x2130 <DIO_u8SetPinValue>
            break;

    }

	/*Display on off control: display enable, disable/enable cursor, no/ blink cursor*/
	switch(Copy_u8Display)
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	ec 59       	subi	r30, 0x9C	; 156
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	80 81       	ld	r24, Z
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	a7 96       	adiw	r28, 0x27	; 39
    1b3a:	3f af       	std	Y+63, r19	; 0x3f
    1b3c:	2e af       	std	Y+62, r18	; 0x3e
    1b3e:	a7 97       	sbiw	r28, 0x27	; 39
    1b40:	a7 96       	adiw	r28, 0x27	; 39
    1b42:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b44:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b46:	a7 97       	sbiw	r28, 0x27	; 39
    1b48:	8e 30       	cpi	r24, 0x0E	; 14
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	91 f0       	breq	.+36     	; 0x1b72 <CLCD_voidInit+0x96c>
    1b4e:	a7 96       	adiw	r28, 0x27	; 39
    1b50:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b52:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b54:	a7 97       	sbiw	r28, 0x27	; 39
    1b56:	ef 30       	cpi	r30, 0x0F	; 15
    1b58:	f1 05       	cpc	r31, r1
    1b5a:	79 f0       	breq	.+30     	; 0x1b7a <CLCD_voidInit+0x974>
    1b5c:	a7 96       	adiw	r28, 0x27	; 39
    1b5e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b60:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b62:	a7 97       	sbiw	r28, 0x27	; 39
    1b64:	2c 30       	cpi	r18, 0x0C	; 12
    1b66:	31 05       	cpc	r19, r1
    1b68:	59 f4       	brne	.+22     	; 0x1b80 <CLCD_voidInit+0x97a>
    {

        case CLCD_Curser_OFF:
            CLCD_voidSendCommand(CLCD_Curser_OFF);
    1b6a:	8c e0       	ldi	r24, 0x0C	; 12
    1b6c:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
    1b70:	07 c0       	rjmp	.+14     	; 0x1b80 <CLCD_voidInit+0x97a>
            break;
        case CLCD_Curser_ON_NoBlinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_NoBlinking);
    1b72:	8e e0       	ldi	r24, 0x0E	; 14
    1b74:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
    1b78:	03 c0       	rjmp	.+6      	; 0x1b80 <CLCD_voidInit+0x97a>
            break;
        case CLCD_Curser_ON_Blinking:
            CLCD_voidSendCommand(CLCD_Curser_ON_Blinking);
    1b7a:	8f e0       	ldi	r24, 0x0F	; 15
    1b7c:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
            break;

    }

	/*Clear display*/
	CLCD_voidSendCommand(1);
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>

	#endif


}
    1b86:	c8 59       	subi	r28, 0x98	; 152
    1b88:	df 4f       	sbci	r29, 0xFF	; 255
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	08 95       	ret

00001b9e <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <CLCD_voidSendString+0x6>
    1ba4:	0f 92       	push	r0
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	9b 83       	std	Y+3, r25	; 0x03
    1bac:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    1bae:	19 82       	std	Y+1, r1	; 0x01
    1bb0:	15 c0       	rjmp	.+42     	; 0x1bdc <CLCD_voidSendString+0x3e>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	e2 0f       	add	r30, r18
    1bc0:	f3 1f       	adc	r31, r19
    1bc2:	80 81       	ld	r24, Z
    1bc4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <CLCD_voidSendData>
		Local_u8Counter++;
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	8f 5f       	subi	r24, 0xFF	; 255
    1bcc:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u8Counter==16)
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	80 31       	cpi	r24, 0x10	; 16
    1bd2:	21 f4       	brne	.+8      	; 0x1bdc <CLCD_voidSendString+0x3e>
			CLCD_voidGoToXY(1,0);
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	9b 81       	ldd	r25, Y+3	; 0x03
    1be6:	fc 01       	movw	r30, r24
    1be8:	e2 0f       	add	r30, r18
    1bea:	f3 1f       	adc	r31, r19
    1bec:	80 81       	ld	r24, Z
    1bee:	88 23       	and	r24, r24
    1bf0:	01 f7       	brne	.-64     	; 0x1bb2 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
		if(Local_u8Counter==16)
			CLCD_voidGoToXY(1,0);
	}
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <CLCD_voidGoToXY+0x6>
    1c04:	0f 92       	push	r0
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	8a 83       	std	Y+2, r24	; 0x02
    1c0c:	6b 83       	std	Y+3, r22	; 0x03
	/*Calculating the Address of the DDRAM by the coordinates X and Y*/
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	88 23       	and	r24, r24
    1c12:	19 f4       	brne	.+6      	; 0x1c1a <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at the first line*/
		Local_u8Address=Copy_u8YPos;
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	06 c0       	rjmp	.+12     	; 0x1c26 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	19 f4       	brne	.+6      	; 0x1c26 <CLCD_voidGoToXY+0x28>
	{
		/*Location is at the second line*/
		Local_u8Address=Copy_u8YPos+0x40;
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	80 5c       	subi	r24, 0xC0	; 192
    1c24:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Send the DDRAM Address to point on the location on the screen you want to write on it with setting bit 7*/
	CLCD_voidSendCommand(Local_u8Address+128);
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	80 58       	subi	r24, 0x80	; 128
    1c2a:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8arr,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	27 97       	sbiw	r28, 0x07	; 7
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	9c 83       	std	Y+4, r25	; 0x04
    1c50:	8b 83       	std	Y+3, r24	; 0x03
    1c52:	6d 83       	std	Y+5, r22	; 0x05
    1c54:	4e 83       	std	Y+6, r20	; 0x06
    1c56:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Counter,Local_u8CGRAM_Address;

	/*Calculating the Address of the CGRAM whose block is 8 bytes*/
	Local_u8CGRAM_Address=Copy_u8PatternNumber*8;
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	89 83       	std	Y+1, r24	; 0x01

	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	80 5c       	subi	r24, 0xC0	; 192
    1c70:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1c74:	1a 82       	std	Y+2, r1	; 0x02
    1c76:	0e c0       	rjmp	.+28     	; 0x1c94 <CLCD_voidWriteSpecialCharacter+0x5a>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	fc 01       	movw	r30, r24
    1c84:	e2 0f       	add	r30, r18
    1c86:	f3 1f       	adc	r31, r19
    1c88:	80 81       	ld	r24, Z
    1c8a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <CLCD_voidSendData>
	/*Send the CGRAM Address to point on the first location then the address counter will continue to increment
	 * 1 with setting bit 6 and clearing the bit 7*/
		CLCD_voidSendCommand(Local_u8CGRAM_Address+64);

	/*Loop to the start inserting the pattern into the CGRAM Byte by Byte*/
		for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	8f 5f       	subi	r24, 0xFF	; 255
    1c92:	8a 83       	std	Y+2, r24	; 0x02
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	88 30       	cpi	r24, 0x08	; 8
    1c98:	78 f3       	brcs	.-34     	; 0x1c78 <CLCD_voidWriteSpecialCharacter+0x3e>
		{
			CLCD_voidSendData(Copy_pu8arr[Local_u8Counter]);
		}

	/*go back to the DDRAM to display the pattern in the selected position*/
		CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1c9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9e:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>

	/*The DDRAM accessing the CGRAM by block to Displaying the pattern*/
		CLCD_voidSendData(Copy_u8PatternNumber);
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <CLCD_voidSendData>
}
    1ca8:	27 96       	adiw	r28, 0x07	; 7
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	6b 97       	sbiw	r28, 0x1b	; 27
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	6c 8b       	std	Y+20, r22	; 0x14
    1cd4:	7d 8b       	std	Y+21, r23	; 0x15
    1cd6:	8e 8b       	std	Y+22, r24	; 0x16
    1cd8:	9f 8b       	std	Y+23, r25	; 0x17
	/*define local counter and local itrator and temp variable for the swapping*/
	u8 i,temp;
	u8 Local_u8Counter,arr[16]={48};
    1cda:	80 e1       	ldi	r24, 0x10	; 16
    1cdc:	fe 01       	movw	r30, r28
    1cde:	34 96       	adiw	r30, 0x04	; 4
    1ce0:	df 01       	movw	r26, r30
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	1d 92       	st	X+, r1
    1ce6:	2a 95       	dec	r18
    1ce8:	e9 f7       	brne	.-6      	; 0x1ce4 <CLCD_voidWriteNumber+0x2a>
    1cea:	80 e3       	ldi	r24, 0x30	; 48
    1cec:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8Counter=0;
    1cee:	19 82       	std	Y+1, r1	; 0x01
    1cf0:	2e c0       	rjmp	.+92     	; 0x1d4e <CLCD_voidWriteNumber+0x94>

	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	08 2f       	mov	r16, r24
    1cf6:	10 e0       	ldi	r17, 0x00	; 0
    1cf8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cfa:	9d 89       	ldd	r25, Y+21	; 0x15
    1cfc:	ae 89       	ldd	r26, Y+22	; 0x16
    1cfe:	bf 89       	ldd	r27, Y+23	; 0x17
    1d00:	2a e0       	ldi	r18, 0x0A	; 10
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e0       	ldi	r20, 0x00	; 0
    1d06:	50 e0       	ldi	r21, 0x00	; 0
    1d08:	bc 01       	movw	r22, r24
    1d0a:	cd 01       	movw	r24, r26
    1d0c:	0e 94 99 12 	call	0x2532	; 0x2532 <__udivmodsi4>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	28 2f       	mov	r18, r24
    1d16:	20 5d       	subi	r18, 0xD0	; 208
    1d18:	ce 01       	movw	r24, r28
    1d1a:	04 96       	adiw	r24, 0x04	; 4
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	e0 0f       	add	r30, r16
    1d20:	f1 1f       	adc	r31, r17
    1d22:	20 83       	st	Z, r18
		Copy_u32Number/=10;
    1d24:	8c 89       	ldd	r24, Y+20	; 0x14
    1d26:	9d 89       	ldd	r25, Y+21	; 0x15
    1d28:	ae 89       	ldd	r26, Y+22	; 0x16
    1d2a:	bf 89       	ldd	r27, Y+23	; 0x17
    1d2c:	2a e0       	ldi	r18, 0x0A	; 10
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	0e 94 99 12 	call	0x2532	; 0x2532 <__udivmodsi4>
    1d3c:	da 01       	movw	r26, r20
    1d3e:	c9 01       	movw	r24, r18
    1d40:	8c 8b       	std	Y+20, r24	; 0x14
    1d42:	9d 8b       	std	Y+21, r25	; 0x15
    1d44:	ae 8b       	std	Y+22, r26	; 0x16
    1d46:	bf 8b       	std	Y+23, r27	; 0x17
		Local_u8Counter++;
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	8f 5f       	subi	r24, 0xFF	; 255
    1d4c:	89 83       	std	Y+1, r24	; 0x01
	u8 i,temp;
	u8 Local_u8Counter,arr[16]={48};
	Local_u8Counter=0;

	/*Loop to turn the number to string and storing it in array*/
	while(Copy_u32Number!=0)
    1d4e:	8c 89       	ldd	r24, Y+20	; 0x14
    1d50:	9d 89       	ldd	r25, Y+21	; 0x15
    1d52:	ae 89       	ldd	r26, Y+22	; 0x16
    1d54:	bf 89       	ldd	r27, Y+23	; 0x17
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	a1 05       	cpc	r26, r1
    1d5a:	b1 05       	cpc	r27, r1
    1d5c:	51 f6       	brne	.-108    	; 0x1cf2 <CLCD_voidWriteNumber+0x38>
	{
		arr[Local_u8Counter]=Copy_u32Number%10+48;
		Copy_u32Number/=10;
		Local_u8Counter++;
	}
	arr[Local_u8Counter]='\0';
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	ce 01       	movw	r24, r28
    1d66:	04 96       	adiw	r24, 0x04	; 4
    1d68:	fc 01       	movw	r30, r24
    1d6a:	e2 0f       	add	r30, r18
    1d6c:	f3 1f       	adc	r31, r19
    1d6e:	10 82       	st	Z, r1

	/*Loop to reverse the array*/
	Local_u8Counter--;
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	81 50       	subi	r24, 0x01	; 1
    1d74:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    1d76:	1b 82       	std	Y+3, r1	; 0x03
    1d78:	33 c0       	rjmp	.+102    	; 0x1de0 <CLCD_voidWriteNumber+0x126>
	{
		temp=arr[i];
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	ce 01       	movw	r24, r28
    1d82:	04 96       	adiw	r24, 0x04	; 4
    1d84:	fc 01       	movw	r30, r24
    1d86:	e2 0f       	add	r30, r18
    1d88:	f3 1f       	adc	r31, r19
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8a 83       	std	Y+2, r24	; 0x02
		arr[i]=arr[Local_u8Counter-i];
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	48 2f       	mov	r20, r24
    1d92:	50 e0       	ldi	r21, 0x00	; 0
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	28 1b       	sub	r18, r24
    1da2:	39 0b       	sbc	r19, r25
    1da4:	ce 01       	movw	r24, r28
    1da6:	04 96       	adiw	r24, 0x04	; 4
    1da8:	fc 01       	movw	r30, r24
    1daa:	e2 0f       	add	r30, r18
    1dac:	f3 1f       	adc	r31, r19
    1dae:	20 81       	ld	r18, Z
    1db0:	ce 01       	movw	r24, r28
    1db2:	04 96       	adiw	r24, 0x04	; 4
    1db4:	fc 01       	movw	r30, r24
    1db6:	e4 0f       	add	r30, r20
    1db8:	f5 1f       	adc	r31, r21
    1dba:	20 83       	st	Z, r18
		arr[Local_u8Counter-i]=temp;
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	88 2f       	mov	r24, r24
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	28 1b       	sub	r18, r24
    1dca:	39 0b       	sbc	r19, r25
    1dcc:	ce 01       	movw	r24, r28
    1dce:	04 96       	adiw	r24, 0x04	; 4
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	e2 0f       	add	r30, r18
    1dd4:	f3 1f       	adc	r31, r19
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	80 83       	st	Z, r24
	}
	arr[Local_u8Counter]='\0';

	/*Loop to reverse the array*/
	Local_u8Counter--;
	for(i=0;i<(Local_u8Counter+1)/2;i++)
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	8f 5f       	subi	r24, 0xFF	; 255
    1dde:	8b 83       	std	Y+3, r24	; 0x03
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	a8 2f       	mov	r26, r24
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	b9 8f       	std	Y+25, r27	; 0x19
    1de8:	a8 8f       	std	Y+24, r26	; 0x18
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	01 96       	adiw	r24, 0x01	; 1
    1df2:	9b 8f       	std	Y+27, r25	; 0x1b
    1df4:	8a 8f       	std	Y+26, r24	; 0x1a
    1df6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1df8:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1dfa:	33 23       	and	r19, r19
    1dfc:	2c f4       	brge	.+10     	; 0x1e08 <CLCD_voidWriteNumber+0x14e>
    1dfe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e00:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e02:	01 96       	adiw	r24, 0x01	; 1
    1e04:	9b 8f       	std	Y+27, r25	; 0x1b
    1e06:	8a 8f       	std	Y+26, r24	; 0x1a
    1e08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e0c:	95 95       	asr	r25
    1e0e:	87 95       	ror	r24
    1e10:	a8 8d       	ldd	r26, Y+24	; 0x18
    1e12:	b9 8d       	ldd	r27, Y+25	; 0x19
    1e14:	a8 17       	cp	r26, r24
    1e16:	b9 07       	cpc	r27, r25
    1e18:	0c f4       	brge	.+2      	; 0x1e1c <CLCD_voidWriteNumber+0x162>
    1e1a:	af cf       	rjmp	.-162    	; 0x1d7a <CLCD_voidWriteNumber+0xc0>
		arr[i]=arr[Local_u8Counter-i];
		arr[Local_u8Counter-i]=temp;
	}

	/*displaying the array on the screen*/
	CLCD_voidSendString(arr);
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	04 96       	adiw	r24, 0x04	; 4
    1e20:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <CLCD_voidSendString>
}
    1e24:	6b 96       	adiw	r28, 0x1b	; 27
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	08 95       	ret

00001e3a <PORT_voidInit>:




void PORT_voidInit(void)
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
	/*SET THE PORT Direction*/
	DDRA=PORTA_DIR;
    1e42:	ea e3       	ldi	r30, 0x3A	; 58
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 ef       	ldi	r24, 0xF0	; 240
    1e48:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    1e4a:	e7 e3       	ldi	r30, 0x37	; 55
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
    1e50:	e4 e3       	ldi	r30, 0x34	; 52
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	87 e0       	ldi	r24, 0x07	; 7
    1e56:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    1e58:	e1 e3       	ldi	r30, 0x31	; 49
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	10 82       	st	Z, r1

	/*SET THE PORT Value*/
	PORTA=PORTA_INT;
    1e5e:	eb e3       	ldi	r30, 0x3B	; 59
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	10 82       	st	Z, r1
	PORTB=PORTB_INT;
    1e64:	e8 e3       	ldi	r30, 0x38	; 56
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	10 82       	st	Z, r1
	PORTC=PORTC_INT;
    1e6a:	e5 e3       	ldi	r30, 0x35	; 53
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	10 82       	st	Z, r1
	PORTD=PORTD_INT;
    1e70:	e2 e3       	ldi	r30, 0x32	; 50
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	10 82       	st	Z, r1
}
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	28 97       	sbiw	r28, 0x08	; 8
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	8a 83       	std	Y+2, r24	; 0x02
    1e92:	6b 83       	std	Y+3, r22	; 0x03
    1e94:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1e96:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	88 30       	cpi	r24, 0x08	; 8
    1e9c:	08 f0       	brcs	.+2      	; 0x1ea0 <DIO_u8SetPinDirection+0x24>
    1e9e:	f4 c0       	rjmp	.+488    	; 0x2088 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    1ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea2:	88 23       	and	r24, r24
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <DIO_u8SetPinDirection+0x2c>
    1ea6:	77 c0       	rjmp	.+238    	; 0x1f96 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	38 87       	std	Y+8, r19	; 0x08
    1eb0:	2f 83       	std	Y+7, r18	; 0x07
    1eb2:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb4:	98 85       	ldd	r25, Y+8	; 0x08
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	91 05       	cpc	r25, r1
    1eba:	59 f1       	breq	.+86     	; 0x1f12 <DIO_u8SetPinDirection+0x96>
    1ebc:	2f 81       	ldd	r18, Y+7	; 0x07
    1ebe:	38 85       	ldd	r19, Y+8	; 0x08
    1ec0:	22 30       	cpi	r18, 0x02	; 2
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	2c f4       	brge	.+10     	; 0x1ed0 <DIO_u8SetPinDirection+0x54>
    1ec6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec8:	98 85       	ldd	r25, Y+8	; 0x08
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	69 f0       	breq	.+26     	; 0x1ee8 <DIO_u8SetPinDirection+0x6c>
    1ece:	60 c0       	rjmp	.+192    	; 0x1f90 <DIO_u8SetPinDirection+0x114>
    1ed0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ed2:	38 85       	ldd	r19, Y+8	; 0x08
    1ed4:	22 30       	cpi	r18, 0x02	; 2
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	89 f1       	breq	.+98     	; 0x1f3c <DIO_u8SetPinDirection+0xc0>
    1eda:	8f 81       	ldd	r24, Y+7	; 0x07
    1edc:	98 85       	ldd	r25, Y+8	; 0x08
    1ede:	83 30       	cpi	r24, 0x03	; 3
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <DIO_u8SetPinDirection+0x6a>
    1ee4:	40 c0       	rjmp	.+128    	; 0x1f66 <DIO_u8SetPinDirection+0xea>
    1ee6:	54 c0       	rjmp	.+168    	; 0x1f90 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
    1ee8:	aa e3       	ldi	r26, 0x3A	; 58
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	ea e3       	ldi	r30, 0x3A	; 58
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	02 2e       	mov	r0, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <DIO_u8SetPinDirection+0x8a>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <DIO_u8SetPinDirection+0x86>
    1f0a:	80 95       	com	r24
    1f0c:	84 23       	and	r24, r20
    1f0e:	8c 93       	st	X, r24
    1f10:	bd c0       	rjmp	.+378    	; 0x208c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
    1f12:	a7 e3       	ldi	r26, 0x37	; 55
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e7 e3       	ldi	r30, 0x37	; 55
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	02 2e       	mov	r0, r18
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <DIO_u8SetPinDirection+0xb4>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	0a 94       	dec	r0
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <DIO_u8SetPinDirection+0xb0>
    1f34:	80 95       	com	r24
    1f36:	84 23       	and	r24, r20
    1f38:	8c 93       	st	X, r24
    1f3a:	a8 c0       	rjmp	.+336    	; 0x208c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
    1f3c:	a4 e3       	ldi	r26, 0x34	; 52
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e4 e3       	ldi	r30, 0x34	; 52
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	48 2f       	mov	r20, r24
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	02 2e       	mov	r0, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <DIO_u8SetPinDirection+0xde>
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	0a 94       	dec	r0
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <DIO_u8SetPinDirection+0xda>
    1f5e:	80 95       	com	r24
    1f60:	84 23       	and	r24, r20
    1f62:	8c 93       	st	X, r24
    1f64:	93 c0       	rjmp	.+294    	; 0x208c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
    1f66:	a1 e3       	ldi	r26, 0x31	; 49
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e1 e3       	ldi	r30, 0x31	; 49
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	48 2f       	mov	r20, r24
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	02 2e       	mov	r0, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_u8SetPinDirection+0x108>
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	0a 94       	dec	r0
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <DIO_u8SetPinDirection+0x104>
    1f88:	80 95       	com	r24
    1f8a:	84 23       	and	r24, r20
    1f8c:	8c 93       	st	X, r24
    1f8e:	7e c0       	rjmp	.+252    	; 0x208c <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	7b c0       	rjmp	.+246    	; 0x208c <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    1f96:	8c 81       	ldd	r24, Y+4	; 0x04
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	09 f0       	breq	.+2      	; 0x1f9e <DIO_u8SetPinDirection+0x122>
    1f9c:	72 c0       	rjmp	.+228    	; 0x2082 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	3e 83       	std	Y+6, r19	; 0x06
    1fa6:	2d 83       	std	Y+5, r18	; 0x05
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	91 05       	cpc	r25, r1
    1fb0:	49 f1       	breq	.+82     	; 0x2004 <DIO_u8SetPinDirection+0x188>
    1fb2:	2d 81       	ldd	r18, Y+5	; 0x05
    1fb4:	3e 81       	ldd	r19, Y+6	; 0x06
    1fb6:	22 30       	cpi	r18, 0x02	; 2
    1fb8:	31 05       	cpc	r19, r1
    1fba:	2c f4       	brge	.+10     	; 0x1fc6 <DIO_u8SetPinDirection+0x14a>
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	61 f0       	breq	.+24     	; 0x1fdc <DIO_u8SetPinDirection+0x160>
    1fc4:	5b c0       	rjmp	.+182    	; 0x207c <DIO_u8SetPinDirection+0x200>
    1fc6:	2d 81       	ldd	r18, Y+5	; 0x05
    1fc8:	3e 81       	ldd	r19, Y+6	; 0x06
    1fca:	22 30       	cpi	r18, 0x02	; 2
    1fcc:	31 05       	cpc	r19, r1
    1fce:	71 f1       	breq	.+92     	; 0x202c <DIO_u8SetPinDirection+0x1b0>
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	83 30       	cpi	r24, 0x03	; 3
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	e9 f1       	breq	.+122    	; 0x2054 <DIO_u8SetPinDirection+0x1d8>
    1fda:	50 c0       	rjmp	.+160    	; 0x207c <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
    1fdc:	aa e3       	ldi	r26, 0x3A	; 58
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	ea e3       	ldi	r30, 0x3A	; 58
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	48 2f       	mov	r20, r24
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	02 2e       	mov	r0, r18
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <DIO_u8SetPinDirection+0x17e>
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	0a 94       	dec	r0
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <DIO_u8SetPinDirection+0x17a>
    1ffe:	84 2b       	or	r24, r20
    2000:	8c 93       	st	X, r24
    2002:	44 c0       	rjmp	.+136    	; 0x208c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
    2004:	a7 e3       	ldi	r26, 0x37	; 55
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e7 e3       	ldi	r30, 0x37	; 55
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	48 2f       	mov	r20, r24
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	02 2e       	mov	r0, r18
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <DIO_u8SetPinDirection+0x1a6>
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	0a 94       	dec	r0
    2024:	e2 f7       	brpl	.-8      	; 0x201e <DIO_u8SetPinDirection+0x1a2>
    2026:	84 2b       	or	r24, r20
    2028:	8c 93       	st	X, r24
    202a:	30 c0       	rjmp	.+96     	; 0x208c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
    202c:	a4 e3       	ldi	r26, 0x34	; 52
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e4 e3       	ldi	r30, 0x34	; 52
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	48 2f       	mov	r20, r24
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	02 2e       	mov	r0, r18
    2044:	02 c0       	rjmp	.+4      	; 0x204a <DIO_u8SetPinDirection+0x1ce>
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	0a 94       	dec	r0
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <DIO_u8SetPinDirection+0x1ca>
    204e:	84 2b       	or	r24, r20
    2050:	8c 93       	st	X, r24
    2052:	1c c0       	rjmp	.+56     	; 0x208c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
    2054:	a1 e3       	ldi	r26, 0x31	; 49
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e1 e3       	ldi	r30, 0x31	; 49
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	48 2f       	mov	r20, r24
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	02 2e       	mov	r0, r18
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <DIO_u8SetPinDirection+0x1f6>
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	0a 94       	dec	r0
    2074:	e2 f7       	brpl	.-8      	; 0x206e <DIO_u8SetPinDirection+0x1f2>
    2076:	84 2b       	or	r24, r20
    2078:	8c 93       	st	X, r24
    207a:	08 c0       	rjmp	.+16     	; 0x208c <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	05 c0       	rjmp	.+10     	; 0x208c <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	02 c0       	rjmp	.+4      	; 0x208c <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    208c:	89 81       	ldd	r24, Y+1	; 0x01
}
    208e:	28 96       	adiw	r28, 0x08	; 8
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <DIO_u8SetPortDirection+0x6>
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <DIO_u8SetPortDirection+0x8>
    20a8:	0f 92       	push	r0
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	8a 83       	std	Y+2, r24	; 0x02
    20b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    20b2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	3d 83       	std	Y+5, r19	; 0x05
    20bc:	2c 83       	std	Y+4, r18	; 0x04
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	81 30       	cpi	r24, 0x01	; 1
    20c4:	91 05       	cpc	r25, r1
    20c6:	d1 f0       	breq	.+52     	; 0x20fc <DIO_u8SetPortDirection+0x5c>
    20c8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ca:	3d 81       	ldd	r19, Y+5	; 0x05
    20cc:	22 30       	cpi	r18, 0x02	; 2
    20ce:	31 05       	cpc	r19, r1
    20d0:	2c f4       	brge	.+10     	; 0x20dc <DIO_u8SetPortDirection+0x3c>
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
    20d4:	9d 81       	ldd	r25, Y+5	; 0x05
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	61 f0       	breq	.+24     	; 0x20f2 <DIO_u8SetPortDirection+0x52>
    20da:	1f c0       	rjmp	.+62     	; 0x211a <DIO_u8SetPortDirection+0x7a>
    20dc:	2c 81       	ldd	r18, Y+4	; 0x04
    20de:	3d 81       	ldd	r19, Y+5	; 0x05
    20e0:	22 30       	cpi	r18, 0x02	; 2
    20e2:	31 05       	cpc	r19, r1
    20e4:	81 f0       	breq	.+32     	; 0x2106 <DIO_u8SetPortDirection+0x66>
    20e6:	8c 81       	ldd	r24, Y+4	; 0x04
    20e8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ea:	83 30       	cpi	r24, 0x03	; 3
    20ec:	91 05       	cpc	r25, r1
    20ee:	81 f0       	breq	.+32     	; 0x2110 <DIO_u8SetPortDirection+0x70>
    20f0:	14 c0       	rjmp	.+40     	; 0x211a <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
    20f2:	ea e3       	ldi	r30, 0x3A	; 58
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	80 83       	st	Z, r24
    20fa:	11 c0       	rjmp	.+34     	; 0x211e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
    20fc:	e7 e3       	ldi	r30, 0x37	; 55
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	80 83       	st	Z, r24
    2104:	0c c0       	rjmp	.+24     	; 0x211e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
    2106:	e4 e3       	ldi	r30, 0x34	; 52
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	80 83       	st	Z, r24
    210e:	07 c0       	rjmp	.+14     	; 0x211e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
    2110:	e1 e3       	ldi	r30, 0x31	; 49
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	80 83       	st	Z, r24
    2118:	02 c0       	rjmp	.+4      	; 0x211e <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    211e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	28 97       	sbiw	r28, 0x08	; 8
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	de bf       	out	0x3e, r29	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	cd bf       	out	0x3d, r28	; 61
    2144:	8a 83       	std	Y+2, r24	; 0x02
    2146:	6b 83       	std	Y+3, r22	; 0x03
    2148:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    214a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	88 30       	cpi	r24, 0x08	; 8
    2150:	08 f0       	brcs	.+2      	; 0x2154 <DIO_u8SetPinValue+0x24>
    2152:	f4 c0       	rjmp	.+488    	; 0x233c <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	88 23       	and	r24, r24
    2158:	09 f0       	breq	.+2      	; 0x215c <DIO_u8SetPinValue+0x2c>
    215a:	77 c0       	rjmp	.+238    	; 0x224a <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	38 87       	std	Y+8, r19	; 0x08
    2164:	2f 83       	std	Y+7, r18	; 0x07
    2166:	8f 81       	ldd	r24, Y+7	; 0x07
    2168:	98 85       	ldd	r25, Y+8	; 0x08
    216a:	81 30       	cpi	r24, 0x01	; 1
    216c:	91 05       	cpc	r25, r1
    216e:	59 f1       	breq	.+86     	; 0x21c6 <DIO_u8SetPinValue+0x96>
    2170:	2f 81       	ldd	r18, Y+7	; 0x07
    2172:	38 85       	ldd	r19, Y+8	; 0x08
    2174:	22 30       	cpi	r18, 0x02	; 2
    2176:	31 05       	cpc	r19, r1
    2178:	2c f4       	brge	.+10     	; 0x2184 <DIO_u8SetPinValue+0x54>
    217a:	8f 81       	ldd	r24, Y+7	; 0x07
    217c:	98 85       	ldd	r25, Y+8	; 0x08
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	69 f0       	breq	.+26     	; 0x219c <DIO_u8SetPinValue+0x6c>
    2182:	60 c0       	rjmp	.+192    	; 0x2244 <DIO_u8SetPinValue+0x114>
    2184:	2f 81       	ldd	r18, Y+7	; 0x07
    2186:	38 85       	ldd	r19, Y+8	; 0x08
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	31 05       	cpc	r19, r1
    218c:	89 f1       	breq	.+98     	; 0x21f0 <DIO_u8SetPinValue+0xc0>
    218e:	8f 81       	ldd	r24, Y+7	; 0x07
    2190:	98 85       	ldd	r25, Y+8	; 0x08
    2192:	83 30       	cpi	r24, 0x03	; 3
    2194:	91 05       	cpc	r25, r1
    2196:	09 f4       	brne	.+2      	; 0x219a <DIO_u8SetPinValue+0x6a>
    2198:	40 c0       	rjmp	.+128    	; 0x221a <DIO_u8SetPinValue+0xea>
    219a:	54 c0       	rjmp	.+168    	; 0x2244 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
    219c:	ab e3       	ldi	r26, 0x3B	; 59
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	eb e3       	ldi	r30, 0x3B	; 59
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	48 2f       	mov	r20, r24
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	02 2e       	mov	r0, r18
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <DIO_u8SetPinValue+0x8a>
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	0a 94       	dec	r0
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <DIO_u8SetPinValue+0x86>
    21be:	80 95       	com	r24
    21c0:	84 23       	and	r24, r20
    21c2:	8c 93       	st	X, r24
    21c4:	bd c0       	rjmp	.+378    	; 0x2340 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
    21c6:	a8 e3       	ldi	r26, 0x38	; 56
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e8 e3       	ldi	r30, 0x38	; 56
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	48 2f       	mov	r20, r24
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	02 2e       	mov	r0, r18
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <DIO_u8SetPinValue+0xb4>
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	0a 94       	dec	r0
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <DIO_u8SetPinValue+0xb0>
    21e8:	80 95       	com	r24
    21ea:	84 23       	and	r24, r20
    21ec:	8c 93       	st	X, r24
    21ee:	a8 c0       	rjmp	.+336    	; 0x2340 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
    21f0:	a5 e3       	ldi	r26, 0x35	; 53
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e5 e3       	ldi	r30, 0x35	; 53
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	48 2f       	mov	r20, r24
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	02 2e       	mov	r0, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <DIO_u8SetPinValue+0xde>
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	0a 94       	dec	r0
    2210:	e2 f7       	brpl	.-8      	; 0x220a <DIO_u8SetPinValue+0xda>
    2212:	80 95       	com	r24
    2214:	84 23       	and	r24, r20
    2216:	8c 93       	st	X, r24
    2218:	93 c0       	rjmp	.+294    	; 0x2340 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
    221a:	a2 e3       	ldi	r26, 0x32	; 50
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e2 e3       	ldi	r30, 0x32	; 50
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	48 2f       	mov	r20, r24
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	02 2e       	mov	r0, r18
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <DIO_u8SetPinValue+0x108>
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	0a 94       	dec	r0
    223a:	e2 f7       	brpl	.-8      	; 0x2234 <DIO_u8SetPinValue+0x104>
    223c:	80 95       	com	r24
    223e:	84 23       	and	r24, r20
    2240:	8c 93       	st	X, r24
    2242:	7e c0       	rjmp	.+252    	; 0x2340 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	7b c0       	rjmp	.+246    	; 0x2340 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    224a:	8c 81       	ldd	r24, Y+4	; 0x04
    224c:	81 30       	cpi	r24, 0x01	; 1
    224e:	09 f0       	breq	.+2      	; 0x2252 <DIO_u8SetPinValue+0x122>
    2250:	72 c0       	rjmp	.+228    	; 0x2336 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	3e 83       	std	Y+6, r19	; 0x06
    225a:	2d 83       	std	Y+5, r18	; 0x05
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	91 05       	cpc	r25, r1
    2264:	49 f1       	breq	.+82     	; 0x22b8 <DIO_u8SetPinValue+0x188>
    2266:	2d 81       	ldd	r18, Y+5	; 0x05
    2268:	3e 81       	ldd	r19, Y+6	; 0x06
    226a:	22 30       	cpi	r18, 0x02	; 2
    226c:	31 05       	cpc	r19, r1
    226e:	2c f4       	brge	.+10     	; 0x227a <DIO_u8SetPinValue+0x14a>
    2270:	8d 81       	ldd	r24, Y+5	; 0x05
    2272:	9e 81       	ldd	r25, Y+6	; 0x06
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	61 f0       	breq	.+24     	; 0x2290 <DIO_u8SetPinValue+0x160>
    2278:	5b c0       	rjmp	.+182    	; 0x2330 <DIO_u8SetPinValue+0x200>
    227a:	2d 81       	ldd	r18, Y+5	; 0x05
    227c:	3e 81       	ldd	r19, Y+6	; 0x06
    227e:	22 30       	cpi	r18, 0x02	; 2
    2280:	31 05       	cpc	r19, r1
    2282:	71 f1       	breq	.+92     	; 0x22e0 <DIO_u8SetPinValue+0x1b0>
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	83 30       	cpi	r24, 0x03	; 3
    228a:	91 05       	cpc	r25, r1
    228c:	e9 f1       	breq	.+122    	; 0x2308 <DIO_u8SetPinValue+0x1d8>
    228e:	50 c0       	rjmp	.+160    	; 0x2330 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
    2290:	ab e3       	ldi	r26, 0x3B	; 59
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	eb e3       	ldi	r30, 0x3B	; 59
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	48 2f       	mov	r20, r24
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	02 2e       	mov	r0, r18
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <DIO_u8SetPinValue+0x17e>
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	0a 94       	dec	r0
    22b0:	e2 f7       	brpl	.-8      	; 0x22aa <DIO_u8SetPinValue+0x17a>
    22b2:	84 2b       	or	r24, r20
    22b4:	8c 93       	st	X, r24
    22b6:	44 c0       	rjmp	.+136    	; 0x2340 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
    22b8:	a8 e3       	ldi	r26, 0x38	; 56
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e8 e3       	ldi	r30, 0x38	; 56
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	48 2f       	mov	r20, r24
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	02 2e       	mov	r0, r18
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <DIO_u8SetPinValue+0x1a6>
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	0a 94       	dec	r0
    22d8:	e2 f7       	brpl	.-8      	; 0x22d2 <DIO_u8SetPinValue+0x1a2>
    22da:	84 2b       	or	r24, r20
    22dc:	8c 93       	st	X, r24
    22de:	30 c0       	rjmp	.+96     	; 0x2340 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
    22e0:	a5 e3       	ldi	r26, 0x35	; 53
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e5 e3       	ldi	r30, 0x35	; 53
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	48 2f       	mov	r20, r24
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	02 2e       	mov	r0, r18
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <DIO_u8SetPinValue+0x1ce>
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	0a 94       	dec	r0
    2300:	e2 f7       	brpl	.-8      	; 0x22fa <DIO_u8SetPinValue+0x1ca>
    2302:	84 2b       	or	r24, r20
    2304:	8c 93       	st	X, r24
    2306:	1c c0       	rjmp	.+56     	; 0x2340 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
    2308:	a2 e3       	ldi	r26, 0x32	; 50
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e2 e3       	ldi	r30, 0x32	; 50
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	48 2f       	mov	r20, r24
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	02 2e       	mov	r0, r18
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <DIO_u8SetPinValue+0x1f6>
    2322:	88 0f       	add	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	0a 94       	dec	r0
    2328:	e2 f7       	brpl	.-8      	; 0x2322 <DIO_u8SetPinValue+0x1f2>
    232a:	84 2b       	or	r24, r20
    232c:	8c 93       	st	X, r24
    232e:	08 c0       	rjmp	.+16     	; 0x2340 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	05 c0       	rjmp	.+10     	; 0x2340 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2340:	89 81       	ldd	r24, Y+1	; 0x01
}
    2342:	28 96       	adiw	r28, 0x08	; 8
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	00 d0       	rcall	.+0      	; 0x235a <DIO_u8SetPortValue+0x6>
    235a:	00 d0       	rcall	.+0      	; 0x235c <DIO_u8SetPortValue+0x8>
    235c:	0f 92       	push	r0
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	8a 83       	std	Y+2, r24	; 0x02
    2364:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2366:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	3d 83       	std	Y+5, r19	; 0x05
    2370:	2c 83       	std	Y+4, r18	; 0x04
    2372:	8c 81       	ldd	r24, Y+4	; 0x04
    2374:	9d 81       	ldd	r25, Y+5	; 0x05
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	91 05       	cpc	r25, r1
    237a:	d1 f0       	breq	.+52     	; 0x23b0 <DIO_u8SetPortValue+0x5c>
    237c:	2c 81       	ldd	r18, Y+4	; 0x04
    237e:	3d 81       	ldd	r19, Y+5	; 0x05
    2380:	22 30       	cpi	r18, 0x02	; 2
    2382:	31 05       	cpc	r19, r1
    2384:	2c f4       	brge	.+10     	; 0x2390 <DIO_u8SetPortValue+0x3c>
    2386:	8c 81       	ldd	r24, Y+4	; 0x04
    2388:	9d 81       	ldd	r25, Y+5	; 0x05
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	61 f0       	breq	.+24     	; 0x23a6 <DIO_u8SetPortValue+0x52>
    238e:	1f c0       	rjmp	.+62     	; 0x23ce <DIO_u8SetPortValue+0x7a>
    2390:	2c 81       	ldd	r18, Y+4	; 0x04
    2392:	3d 81       	ldd	r19, Y+5	; 0x05
    2394:	22 30       	cpi	r18, 0x02	; 2
    2396:	31 05       	cpc	r19, r1
    2398:	81 f0       	breq	.+32     	; 0x23ba <DIO_u8SetPortValue+0x66>
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	83 30       	cpi	r24, 0x03	; 3
    23a0:	91 05       	cpc	r25, r1
    23a2:	81 f0       	breq	.+32     	; 0x23c4 <DIO_u8SetPortValue+0x70>
    23a4:	14 c0       	rjmp	.+40     	; 0x23ce <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value;break;
    23a6:	eb e3       	ldi	r30, 0x3B	; 59
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	80 83       	st	Z, r24
    23ae:	11 c0       	rjmp	.+34     	; 0x23d2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value;break;
    23b0:	e8 e3       	ldi	r30, 0x38	; 56
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	80 83       	st	Z, r24
    23b8:	0c c0       	rjmp	.+24     	; 0x23d2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value;break;
    23ba:	e5 e3       	ldi	r30, 0x35	; 53
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	80 83       	st	Z, r24
    23c2:	07 c0       	rjmp	.+14     	; 0x23d2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value;break;
    23c4:	e2 e3       	ldi	r30, 0x32	; 50
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	80 83       	st	Z, r24
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	27 97       	sbiw	r28, 0x07	; 7
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	8a 83       	std	Y+2, r24	; 0x02
    23fa:	6b 83       	std	Y+3, r22	; 0x03
    23fc:	5d 83       	std	Y+5, r21	; 0x05
    23fe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2400:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=0) && (Copy_u8Pin<=DIO_u8PIN7))
    2402:	8c 81       	ldd	r24, Y+4	; 0x04
    2404:	9d 81       	ldd	r25, Y+5	; 0x05
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	09 f4       	brne	.+2      	; 0x240c <DIO_u8GetPinValue+0x28>
    240a:	78 c0       	rjmp	.+240    	; 0x24fc <DIO_u8GetPinValue+0x118>
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	88 30       	cpi	r24, 0x08	; 8
    2410:	08 f0       	brcs	.+2      	; 0x2414 <DIO_u8GetPinValue+0x30>
    2412:	74 c0       	rjmp	.+232    	; 0x24fc <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	3f 83       	std	Y+7, r19	; 0x07
    241c:	2e 83       	std	Y+6, r18	; 0x06
    241e:	4e 81       	ldd	r20, Y+6	; 0x06
    2420:	5f 81       	ldd	r21, Y+7	; 0x07
    2422:	41 30       	cpi	r20, 0x01	; 1
    2424:	51 05       	cpc	r21, r1
    2426:	59 f1       	breq	.+86     	; 0x247e <DIO_u8GetPinValue+0x9a>
    2428:	8e 81       	ldd	r24, Y+6	; 0x06
    242a:	9f 81       	ldd	r25, Y+7	; 0x07
    242c:	82 30       	cpi	r24, 0x02	; 2
    242e:	91 05       	cpc	r25, r1
    2430:	34 f4       	brge	.+12     	; 0x243e <DIO_u8GetPinValue+0x5a>
    2432:	2e 81       	ldd	r18, Y+6	; 0x06
    2434:	3f 81       	ldd	r19, Y+7	; 0x07
    2436:	21 15       	cp	r18, r1
    2438:	31 05       	cpc	r19, r1
    243a:	69 f0       	breq	.+26     	; 0x2456 <DIO_u8GetPinValue+0x72>
    243c:	5c c0       	rjmp	.+184    	; 0x24f6 <DIO_u8GetPinValue+0x112>
    243e:	4e 81       	ldd	r20, Y+6	; 0x06
    2440:	5f 81       	ldd	r21, Y+7	; 0x07
    2442:	42 30       	cpi	r20, 0x02	; 2
    2444:	51 05       	cpc	r21, r1
    2446:	79 f1       	breq	.+94     	; 0x24a6 <DIO_u8GetPinValue+0xc2>
    2448:	8e 81       	ldd	r24, Y+6	; 0x06
    244a:	9f 81       	ldd	r25, Y+7	; 0x07
    244c:	83 30       	cpi	r24, 0x03	; 3
    244e:	91 05       	cpc	r25, r1
    2450:	09 f4       	brne	.+2      	; 0x2454 <DIO_u8GetPinValue+0x70>
    2452:	3d c0       	rjmp	.+122    	; 0x24ce <DIO_u8GetPinValue+0xea>
    2454:	50 c0       	rjmp	.+160    	; 0x24f6 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    2456:	e9 e3       	ldi	r30, 0x39	; 57
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	88 2f       	mov	r24, r24
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a9 01       	movw	r20, r18
    2468:	02 c0       	rjmp	.+4      	; 0x246e <DIO_u8GetPinValue+0x8a>
    246a:	55 95       	asr	r21
    246c:	47 95       	ror	r20
    246e:	8a 95       	dec	r24
    2470:	e2 f7       	brpl	.-8      	; 0x246a <DIO_u8GetPinValue+0x86>
    2472:	ca 01       	movw	r24, r20
    2474:	81 70       	andi	r24, 0x01	; 1
    2476:	ec 81       	ldd	r30, Y+4	; 0x04
    2478:	fd 81       	ldd	r31, Y+5	; 0x05
    247a:	80 83       	st	Z, r24
    247c:	41 c0       	rjmp	.+130    	; 0x2500 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    247e:	e6 e3       	ldi	r30, 0x36	; 54
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	88 2f       	mov	r24, r24
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	a9 01       	movw	r20, r18
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <DIO_u8GetPinValue+0xb2>
    2492:	55 95       	asr	r21
    2494:	47 95       	ror	r20
    2496:	8a 95       	dec	r24
    2498:	e2 f7       	brpl	.-8      	; 0x2492 <DIO_u8GetPinValue+0xae>
    249a:	ca 01       	movw	r24, r20
    249c:	81 70       	andi	r24, 0x01	; 1
    249e:	ec 81       	ldd	r30, Y+4	; 0x04
    24a0:	fd 81       	ldd	r31, Y+5	; 0x05
    24a2:	80 83       	st	Z, r24
    24a4:	2d c0       	rjmp	.+90     	; 0x2500 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    24a6:	e3 e3       	ldi	r30, 0x33	; 51
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	28 2f       	mov	r18, r24
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	88 2f       	mov	r24, r24
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	a9 01       	movw	r20, r18
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <DIO_u8GetPinValue+0xda>
    24ba:	55 95       	asr	r21
    24bc:	47 95       	ror	r20
    24be:	8a 95       	dec	r24
    24c0:	e2 f7       	brpl	.-8      	; 0x24ba <DIO_u8GetPinValue+0xd6>
    24c2:	ca 01       	movw	r24, r20
    24c4:	81 70       	andi	r24, 0x01	; 1
    24c6:	ec 81       	ldd	r30, Y+4	; 0x04
    24c8:	fd 81       	ldd	r31, Y+5	; 0x05
    24ca:	80 83       	st	Z, r24
    24cc:	19 c0       	rjmp	.+50     	; 0x2500 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    24ce:	e0 e3       	ldi	r30, 0x30	; 48
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	88 2f       	mov	r24, r24
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a9 01       	movw	r20, r18
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <DIO_u8GetPinValue+0x102>
    24e2:	55 95       	asr	r21
    24e4:	47 95       	ror	r20
    24e6:	8a 95       	dec	r24
    24e8:	e2 f7       	brpl	.-8      	; 0x24e2 <DIO_u8GetPinValue+0xfe>
    24ea:	ca 01       	movw	r24, r20
    24ec:	81 70       	andi	r24, 0x01	; 1
    24ee:	ec 81       	ldd	r30, Y+4	; 0x04
    24f0:	fd 81       	ldd	r31, Y+5	; 0x05
    24f2:	80 83       	st	Z, r24
    24f4:	05 c0       	rjmp	.+10     	; 0x2500 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState=1;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <DIO_u8GetPinValue+0x11c>
			}
		}
	else
	{
		Local_u8ErrorState=1;
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_u8ErrorState;
    2500:	89 81       	ldd	r24, Y+1	; 0x01
}
    2502:	27 96       	adiw	r28, 0x07	; 7
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <main>:

#include "CLCD_interface.h"
#include "DIO_interface.h"

void main(void)
{
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    251c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <PORT_voidInit>

	/*Initialize LCD pins direction*/
	CLCD_voidInit(CLCD_2Lines_5x8Fontsize,CLCD_Curser_OFF);
    2520:	88 e3       	ldi	r24, 0x38	; 56
    2522:	6c e0       	ldi	r22, 0x0C	; 12
    2524:	0e 94 03 09 	call	0x1206	; 0x1206 <CLCD_voidInit>
	CLCD_voidSendString("MOSTAFA");
    2528:	80 e6       	ldi	r24, 0x60	; 96
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <CLCD_voidSendString>
    2530:	ff cf       	rjmp	.-2      	; 0x2530 <main+0x1c>

00002532 <__udivmodsi4>:
    2532:	a1 e2       	ldi	r26, 0x21	; 33
    2534:	1a 2e       	mov	r1, r26
    2536:	aa 1b       	sub	r26, r26
    2538:	bb 1b       	sub	r27, r27
    253a:	fd 01       	movw	r30, r26
    253c:	0d c0       	rjmp	.+26     	; 0x2558 <__udivmodsi4_ep>

0000253e <__udivmodsi4_loop>:
    253e:	aa 1f       	adc	r26, r26
    2540:	bb 1f       	adc	r27, r27
    2542:	ee 1f       	adc	r30, r30
    2544:	ff 1f       	adc	r31, r31
    2546:	a2 17       	cp	r26, r18
    2548:	b3 07       	cpc	r27, r19
    254a:	e4 07       	cpc	r30, r20
    254c:	f5 07       	cpc	r31, r21
    254e:	20 f0       	brcs	.+8      	; 0x2558 <__udivmodsi4_ep>
    2550:	a2 1b       	sub	r26, r18
    2552:	b3 0b       	sbc	r27, r19
    2554:	e4 0b       	sbc	r30, r20
    2556:	f5 0b       	sbc	r31, r21

00002558 <__udivmodsi4_ep>:
    2558:	66 1f       	adc	r22, r22
    255a:	77 1f       	adc	r23, r23
    255c:	88 1f       	adc	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	1a 94       	dec	r1
    2562:	69 f7       	brne	.-38     	; 0x253e <__udivmodsi4_loop>
    2564:	60 95       	com	r22
    2566:	70 95       	com	r23
    2568:	80 95       	com	r24
    256a:	90 95       	com	r25
    256c:	9b 01       	movw	r18, r22
    256e:	ac 01       	movw	r20, r24
    2570:	bd 01       	movw	r22, r26
    2572:	cf 01       	movw	r24, r30
    2574:	08 95       	ret

00002576 <__prologue_saves__>:
    2576:	2f 92       	push	r2
    2578:	3f 92       	push	r3
    257a:	4f 92       	push	r4
    257c:	5f 92       	push	r5
    257e:	6f 92       	push	r6
    2580:	7f 92       	push	r7
    2582:	8f 92       	push	r8
    2584:	9f 92       	push	r9
    2586:	af 92       	push	r10
    2588:	bf 92       	push	r11
    258a:	cf 92       	push	r12
    258c:	df 92       	push	r13
    258e:	ef 92       	push	r14
    2590:	ff 92       	push	r15
    2592:	0f 93       	push	r16
    2594:	1f 93       	push	r17
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	ca 1b       	sub	r28, r26
    25a0:	db 0b       	sbc	r29, r27
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	09 94       	ijmp

000025ae <__epilogue_restores__>:
    25ae:	2a 88       	ldd	r2, Y+18	; 0x12
    25b0:	39 88       	ldd	r3, Y+17	; 0x11
    25b2:	48 88       	ldd	r4, Y+16	; 0x10
    25b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    25b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    25b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    25ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    25bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    25be:	aa 84       	ldd	r10, Y+10	; 0x0a
    25c0:	b9 84       	ldd	r11, Y+9	; 0x09
    25c2:	c8 84       	ldd	r12, Y+8	; 0x08
    25c4:	df 80       	ldd	r13, Y+7	; 0x07
    25c6:	ee 80       	ldd	r14, Y+6	; 0x06
    25c8:	fd 80       	ldd	r15, Y+5	; 0x05
    25ca:	0c 81       	ldd	r16, Y+4	; 0x04
    25cc:	1b 81       	ldd	r17, Y+3	; 0x03
    25ce:	aa 81       	ldd	r26, Y+2	; 0x02
    25d0:	b9 81       	ldd	r27, Y+1	; 0x01
    25d2:	ce 0f       	add	r28, r30
    25d4:	d1 1d       	adc	r29, r1
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	ed 01       	movw	r28, r26
    25e2:	08 95       	ret

000025e4 <_exit>:
    25e4:	f8 94       	cli

000025e6 <__stop_program>:
    25e6:	ff cf       	rjmp	.-2      	; 0x25e6 <__stop_program>
