
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000c0c  00000ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080006a  0080006a  00000caa  2**0
                  ALLOC
  3 .stab         00001098  00000000  00000000  00000cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000696  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <main>
  8a:	0c 94 04 06 	jmp	0xc08	; 0xc08 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PORT_voidInit>:




void PORT_voidInit(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	/*SET THE PORT Direction*/
	DDRA=PORTA_DIR;
  9a:	ea e3       	ldi	r30, 0x3A	; 58
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
  a0:	e7 e3       	ldi	r30, 0x37	; 55
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
  a6:	e4 e3       	ldi	r30, 0x34	; 52
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
  ae:	e1 e3       	ldi	r30, 0x31	; 49
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	80 83       	st	Z, r24

	/*SET THE PORT Value*/
	PORTA=PORTA_INT;
  b6:	eb e3       	ldi	r30, 0x3B	; 59
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
	PORTB=PORTB_INT;
  bc:	e8 e3       	ldi	r30, 0x38	; 56
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	10 82       	st	Z, r1
	PORTC=PORTC_INT;
  c2:	e5 e3       	ldi	r30, 0x35	; 53
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
	PORTD=PORTD_INT;
  c8:	e2 e3       	ldi	r30, 0x32	; 50
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	10 82       	st	Z, r1
}
  ce:	cf 91       	pop	r28
  d0:	df 91       	pop	r29
  d2:	08 95       	ret

000000d4 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
  d4:	df 93       	push	r29
  d6:	cf 93       	push	r28
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	28 97       	sbiw	r28, 0x08	; 8
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
  e8:	8a 83       	std	Y+2, r24	; 0x02
  ea:	6b 83       	std	Y+3, r22	; 0x03
  ec:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
  ee:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
  f0:	8b 81       	ldd	r24, Y+3	; 0x03
  f2:	88 30       	cpi	r24, 0x08	; 8
  f4:	08 f0       	brcs	.+2      	; 0xf8 <DIO_u8SetPinDirection+0x24>
  f6:	f4 c0       	rjmp	.+488    	; 0x2e0 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
  f8:	8c 81       	ldd	r24, Y+4	; 0x04
  fa:	88 23       	and	r24, r24
  fc:	09 f0       	breq	.+2      	; 0x100 <DIO_u8SetPinDirection+0x2c>
  fe:	77 c0       	rjmp	.+238    	; 0x1ee <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	28 2f       	mov	r18, r24
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	38 87       	std	Y+8, r19	; 0x08
 108:	2f 83       	std	Y+7, r18	; 0x07
 10a:	8f 81       	ldd	r24, Y+7	; 0x07
 10c:	98 85       	ldd	r25, Y+8	; 0x08
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 05       	cpc	r25, r1
 112:	59 f1       	breq	.+86     	; 0x16a <DIO_u8SetPinDirection+0x96>
 114:	2f 81       	ldd	r18, Y+7	; 0x07
 116:	38 85       	ldd	r19, Y+8	; 0x08
 118:	22 30       	cpi	r18, 0x02	; 2
 11a:	31 05       	cpc	r19, r1
 11c:	2c f4       	brge	.+10     	; 0x128 <DIO_u8SetPinDirection+0x54>
 11e:	8f 81       	ldd	r24, Y+7	; 0x07
 120:	98 85       	ldd	r25, Y+8	; 0x08
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	69 f0       	breq	.+26     	; 0x140 <DIO_u8SetPinDirection+0x6c>
 126:	60 c0       	rjmp	.+192    	; 0x1e8 <DIO_u8SetPinDirection+0x114>
 128:	2f 81       	ldd	r18, Y+7	; 0x07
 12a:	38 85       	ldd	r19, Y+8	; 0x08
 12c:	22 30       	cpi	r18, 0x02	; 2
 12e:	31 05       	cpc	r19, r1
 130:	89 f1       	breq	.+98     	; 0x194 <DIO_u8SetPinDirection+0xc0>
 132:	8f 81       	ldd	r24, Y+7	; 0x07
 134:	98 85       	ldd	r25, Y+8	; 0x08
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	91 05       	cpc	r25, r1
 13a:	09 f4       	brne	.+2      	; 0x13e <DIO_u8SetPinDirection+0x6a>
 13c:	40 c0       	rjmp	.+128    	; 0x1be <DIO_u8SetPinDirection+0xea>
 13e:	54 c0       	rjmp	.+168    	; 0x1e8 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
 140:	aa e3       	ldi	r26, 0x3A	; 58
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	ea e3       	ldi	r30, 0x3A	; 58
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_u8SetPinDirection+0x8a>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_u8SetPinDirection+0x86>
 162:	80 95       	com	r24
 164:	84 23       	and	r24, r20
 166:	8c 93       	st	X, r24
 168:	bd c0       	rjmp	.+378    	; 0x2e4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
 16a:	a7 e3       	ldi	r26, 0x37	; 55
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e7 e3       	ldi	r30, 0x37	; 55
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	48 2f       	mov	r20, r24
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 2e       	mov	r0, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_u8SetPinDirection+0xb4>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_u8SetPinDirection+0xb0>
 18c:	80 95       	com	r24
 18e:	84 23       	and	r24, r20
 190:	8c 93       	st	X, r24
 192:	a8 c0       	rjmp	.+336    	; 0x2e4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
 194:	a4 e3       	ldi	r26, 0x34	; 52
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	e4 e3       	ldi	r30, 0x34	; 52
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	48 2f       	mov	r20, r24
 1a0:	8b 81       	ldd	r24, Y+3	; 0x03
 1a2:	28 2f       	mov	r18, r24
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 2e       	mov	r0, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_u8SetPinDirection+0xde>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	0a 94       	dec	r0
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_u8SetPinDirection+0xda>
 1b6:	80 95       	com	r24
 1b8:	84 23       	and	r24, r20
 1ba:	8c 93       	st	X, r24
 1bc:	93 c0       	rjmp	.+294    	; 0x2e4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
 1be:	a1 e3       	ldi	r26, 0x31	; 49
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	e1 e3       	ldi	r30, 0x31	; 49
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	48 2f       	mov	r20, r24
 1ca:	8b 81       	ldd	r24, Y+3	; 0x03
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 2e       	mov	r0, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_u8SetPinDirection+0x108>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_u8SetPinDirection+0x104>
 1e0:	80 95       	com	r24
 1e2:	84 23       	and	r24, r20
 1e4:	8c 93       	st	X, r24
 1e6:	7e c0       	rjmp	.+252    	; 0x2e4 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	7b c0       	rjmp	.+246    	; 0x2e4 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
 1ee:	8c 81       	ldd	r24, Y+4	; 0x04
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <DIO_u8SetPinDirection+0x122>
 1f4:	72 c0       	rjmp	.+228    	; 0x2da <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
 1f6:	8a 81       	ldd	r24, Y+2	; 0x02
 1f8:	28 2f       	mov	r18, r24
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	3e 83       	std	Y+6, r19	; 0x06
 1fe:	2d 83       	std	Y+5, r18	; 0x05
 200:	8d 81       	ldd	r24, Y+5	; 0x05
 202:	9e 81       	ldd	r25, Y+6	; 0x06
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	91 05       	cpc	r25, r1
 208:	49 f1       	breq	.+82     	; 0x25c <DIO_u8SetPinDirection+0x188>
 20a:	2d 81       	ldd	r18, Y+5	; 0x05
 20c:	3e 81       	ldd	r19, Y+6	; 0x06
 20e:	22 30       	cpi	r18, 0x02	; 2
 210:	31 05       	cpc	r19, r1
 212:	2c f4       	brge	.+10     	; 0x21e <DIO_u8SetPinDirection+0x14a>
 214:	8d 81       	ldd	r24, Y+5	; 0x05
 216:	9e 81       	ldd	r25, Y+6	; 0x06
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	61 f0       	breq	.+24     	; 0x234 <DIO_u8SetPinDirection+0x160>
 21c:	5b c0       	rjmp	.+182    	; 0x2d4 <DIO_u8SetPinDirection+0x200>
 21e:	2d 81       	ldd	r18, Y+5	; 0x05
 220:	3e 81       	ldd	r19, Y+6	; 0x06
 222:	22 30       	cpi	r18, 0x02	; 2
 224:	31 05       	cpc	r19, r1
 226:	71 f1       	breq	.+92     	; 0x284 <DIO_u8SetPinDirection+0x1b0>
 228:	8d 81       	ldd	r24, Y+5	; 0x05
 22a:	9e 81       	ldd	r25, Y+6	; 0x06
 22c:	83 30       	cpi	r24, 0x03	; 3
 22e:	91 05       	cpc	r25, r1
 230:	e9 f1       	breq	.+122    	; 0x2ac <DIO_u8SetPinDirection+0x1d8>
 232:	50 c0       	rjmp	.+160    	; 0x2d4 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
 234:	aa e3       	ldi	r26, 0x3A	; 58
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	ea e3       	ldi	r30, 0x3A	; 58
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	48 2f       	mov	r20, r24
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	28 2f       	mov	r18, r24
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 2e       	mov	r0, r18
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_u8SetPinDirection+0x17e>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_u8SetPinDirection+0x17a>
 256:	84 2b       	or	r24, r20
 258:	8c 93       	st	X, r24
 25a:	44 c0       	rjmp	.+136    	; 0x2e4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
 25c:	a7 e3       	ldi	r26, 0x37	; 55
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	e7 e3       	ldi	r30, 0x37	; 55
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	48 2f       	mov	r20, r24
 268:	8b 81       	ldd	r24, Y+3	; 0x03
 26a:	28 2f       	mov	r18, r24
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 2e       	mov	r0, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_u8SetPinDirection+0x1a6>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	0a 94       	dec	r0
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_u8SetPinDirection+0x1a2>
 27e:	84 2b       	or	r24, r20
 280:	8c 93       	st	X, r24
 282:	30 c0       	rjmp	.+96     	; 0x2e4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
 284:	a4 e3       	ldi	r26, 0x34	; 52
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	e4 e3       	ldi	r30, 0x34	; 52
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	48 2f       	mov	r20, r24
 290:	8b 81       	ldd	r24, Y+3	; 0x03
 292:	28 2f       	mov	r18, r24
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 2e       	mov	r0, r18
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8SetPinDirection+0x1ce>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_u8SetPinDirection+0x1ca>
 2a6:	84 2b       	or	r24, r20
 2a8:	8c 93       	st	X, r24
 2aa:	1c c0       	rjmp	.+56     	; 0x2e4 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
 2ac:	a1 e3       	ldi	r26, 0x31	; 49
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	e1 e3       	ldi	r30, 0x31	; 49
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	48 2f       	mov	r20, r24
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	28 2f       	mov	r18, r24
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 2e       	mov	r0, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_u8SetPinDirection+0x1f6>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	0a 94       	dec	r0
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_u8SetPinDirection+0x1f2>
 2ce:	84 2b       	or	r24, r20
 2d0:	8c 93       	st	X, r24
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	89 83       	std	Y+1, r24	; 0x01
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	89 83       	std	Y+1, r24	; 0x01
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
}
 2e6:	28 96       	adiw	r28, 0x08	; 8
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
 2f2:	cf 91       	pop	r28
 2f4:	df 91       	pop	r29
 2f6:	08 95       	ret

000002f8 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
 2f8:	df 93       	push	r29
 2fa:	cf 93       	push	r28
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <DIO_u8SetPortDirection+0x6>
 2fe:	00 d0       	rcall	.+0      	; 0x300 <DIO_u8SetPortDirection+0x8>
 300:	0f 92       	push	r0
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	8a 83       	std	Y+2, r24	; 0x02
 308:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 30a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 30c:	8a 81       	ldd	r24, Y+2	; 0x02
 30e:	28 2f       	mov	r18, r24
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	3d 83       	std	Y+5, r19	; 0x05
 314:	2c 83       	std	Y+4, r18	; 0x04
 316:	8c 81       	ldd	r24, Y+4	; 0x04
 318:	9d 81       	ldd	r25, Y+5	; 0x05
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	91 05       	cpc	r25, r1
 31e:	d1 f0       	breq	.+52     	; 0x354 <DIO_u8SetPortDirection+0x5c>
 320:	2c 81       	ldd	r18, Y+4	; 0x04
 322:	3d 81       	ldd	r19, Y+5	; 0x05
 324:	22 30       	cpi	r18, 0x02	; 2
 326:	31 05       	cpc	r19, r1
 328:	2c f4       	brge	.+10     	; 0x334 <DIO_u8SetPortDirection+0x3c>
 32a:	8c 81       	ldd	r24, Y+4	; 0x04
 32c:	9d 81       	ldd	r25, Y+5	; 0x05
 32e:	00 97       	sbiw	r24, 0x00	; 0
 330:	61 f0       	breq	.+24     	; 0x34a <DIO_u8SetPortDirection+0x52>
 332:	1f c0       	rjmp	.+62     	; 0x372 <DIO_u8SetPortDirection+0x7a>
 334:	2c 81       	ldd	r18, Y+4	; 0x04
 336:	3d 81       	ldd	r19, Y+5	; 0x05
 338:	22 30       	cpi	r18, 0x02	; 2
 33a:	31 05       	cpc	r19, r1
 33c:	81 f0       	breq	.+32     	; 0x35e <DIO_u8SetPortDirection+0x66>
 33e:	8c 81       	ldd	r24, Y+4	; 0x04
 340:	9d 81       	ldd	r25, Y+5	; 0x05
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	91 05       	cpc	r25, r1
 346:	81 f0       	breq	.+32     	; 0x368 <DIO_u8SetPortDirection+0x70>
 348:	14 c0       	rjmp	.+40     	; 0x372 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
 34a:	ea e3       	ldi	r30, 0x3A	; 58
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	80 83       	st	Z, r24
 352:	11 c0       	rjmp	.+34     	; 0x376 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
 354:	e7 e3       	ldi	r30, 0x37	; 55
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	8b 81       	ldd	r24, Y+3	; 0x03
 35a:	80 83       	st	Z, r24
 35c:	0c c0       	rjmp	.+24     	; 0x376 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
 35e:	e4 e3       	ldi	r30, 0x34	; 52
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	8b 81       	ldd	r24, Y+3	; 0x03
 364:	80 83       	st	Z, r24
 366:	07 c0       	rjmp	.+14     	; 0x376 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
 368:	e1 e3       	ldi	r30, 0x31	; 49
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	80 83       	st	Z, r24
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 376:	89 81       	ldd	r24, Y+1	; 0x01
}
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	cf 91       	pop	r28
 384:	df 91       	pop	r29
 386:	08 95       	ret

00000388 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 388:	df 93       	push	r29
 38a:	cf 93       	push	r28
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	28 97       	sbiw	r28, 0x08	; 8
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
 39c:	8a 83       	std	Y+2, r24	; 0x02
 39e:	6b 83       	std	Y+3, r22	; 0x03
 3a0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 3a2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
 3a4:	8b 81       	ldd	r24, Y+3	; 0x03
 3a6:	88 30       	cpi	r24, 0x08	; 8
 3a8:	08 f0       	brcs	.+2      	; 0x3ac <DIO_u8SetPinValue+0x24>
 3aa:	f4 c0       	rjmp	.+488    	; 0x594 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
 3ac:	8c 81       	ldd	r24, Y+4	; 0x04
 3ae:	88 23       	and	r24, r24
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <DIO_u8SetPinValue+0x2c>
 3b2:	77 c0       	rjmp	.+238    	; 0x4a2 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
 3b4:	8a 81       	ldd	r24, Y+2	; 0x02
 3b6:	28 2f       	mov	r18, r24
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	38 87       	std	Y+8, r19	; 0x08
 3bc:	2f 83       	std	Y+7, r18	; 0x07
 3be:	8f 81       	ldd	r24, Y+7	; 0x07
 3c0:	98 85       	ldd	r25, Y+8	; 0x08
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	91 05       	cpc	r25, r1
 3c6:	59 f1       	breq	.+86     	; 0x41e <DIO_u8SetPinValue+0x96>
 3c8:	2f 81       	ldd	r18, Y+7	; 0x07
 3ca:	38 85       	ldd	r19, Y+8	; 0x08
 3cc:	22 30       	cpi	r18, 0x02	; 2
 3ce:	31 05       	cpc	r19, r1
 3d0:	2c f4       	brge	.+10     	; 0x3dc <DIO_u8SetPinValue+0x54>
 3d2:	8f 81       	ldd	r24, Y+7	; 0x07
 3d4:	98 85       	ldd	r25, Y+8	; 0x08
 3d6:	00 97       	sbiw	r24, 0x00	; 0
 3d8:	69 f0       	breq	.+26     	; 0x3f4 <DIO_u8SetPinValue+0x6c>
 3da:	60 c0       	rjmp	.+192    	; 0x49c <DIO_u8SetPinValue+0x114>
 3dc:	2f 81       	ldd	r18, Y+7	; 0x07
 3de:	38 85       	ldd	r19, Y+8	; 0x08
 3e0:	22 30       	cpi	r18, 0x02	; 2
 3e2:	31 05       	cpc	r19, r1
 3e4:	89 f1       	breq	.+98     	; 0x448 <DIO_u8SetPinValue+0xc0>
 3e6:	8f 81       	ldd	r24, Y+7	; 0x07
 3e8:	98 85       	ldd	r25, Y+8	; 0x08
 3ea:	83 30       	cpi	r24, 0x03	; 3
 3ec:	91 05       	cpc	r25, r1
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <DIO_u8SetPinValue+0x6a>
 3f0:	40 c0       	rjmp	.+128    	; 0x472 <DIO_u8SetPinValue+0xea>
 3f2:	54 c0       	rjmp	.+168    	; 0x49c <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
 3f4:	ab e3       	ldi	r26, 0x3B	; 59
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	eb e3       	ldi	r30, 0x3B	; 59
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	48 2f       	mov	r20, r24
 400:	8b 81       	ldd	r24, Y+3	; 0x03
 402:	28 2f       	mov	r18, r24
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 2e       	mov	r0, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_u8SetPinValue+0x8a>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_u8SetPinValue+0x86>
 416:	80 95       	com	r24
 418:	84 23       	and	r24, r20
 41a:	8c 93       	st	X, r24
 41c:	bd c0       	rjmp	.+378    	; 0x598 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
 41e:	a8 e3       	ldi	r26, 0x38	; 56
 420:	b0 e0       	ldi	r27, 0x00	; 0
 422:	e8 e3       	ldi	r30, 0x38	; 56
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	48 2f       	mov	r20, r24
 42a:	8b 81       	ldd	r24, Y+3	; 0x03
 42c:	28 2f       	mov	r18, r24
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 2e       	mov	r0, r18
 436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_u8SetPinValue+0xb4>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	0a 94       	dec	r0
 43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_u8SetPinValue+0xb0>
 440:	80 95       	com	r24
 442:	84 23       	and	r24, r20
 444:	8c 93       	st	X, r24
 446:	a8 c0       	rjmp	.+336    	; 0x598 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
 448:	a5 e3       	ldi	r26, 0x35	; 53
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	e5 e3       	ldi	r30, 0x35	; 53
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	48 2f       	mov	r20, r24
 454:	8b 81       	ldd	r24, Y+3	; 0x03
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 2e       	mov	r0, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_u8SetPinValue+0xde>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	0a 94       	dec	r0
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_u8SetPinValue+0xda>
 46a:	80 95       	com	r24
 46c:	84 23       	and	r24, r20
 46e:	8c 93       	st	X, r24
 470:	93 c0       	rjmp	.+294    	; 0x598 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
 472:	a2 e3       	ldi	r26, 0x32	; 50
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	e2 e3       	ldi	r30, 0x32	; 50
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	48 2f       	mov	r20, r24
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	28 2f       	mov	r18, r24
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 2e       	mov	r0, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_u8SetPinValue+0x108>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	0a 94       	dec	r0
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_u8SetPinValue+0x104>
 494:	80 95       	com	r24
 496:	84 23       	and	r24, r20
 498:	8c 93       	st	X, r24
 49a:	7e c0       	rjmp	.+252    	; 0x598 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	89 83       	std	Y+1, r24	; 0x01
 4a0:	7b c0       	rjmp	.+246    	; 0x598 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
 4a2:	8c 81       	ldd	r24, Y+4	; 0x04
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	09 f0       	breq	.+2      	; 0x4aa <DIO_u8SetPinValue+0x122>
 4a8:	72 c0       	rjmp	.+228    	; 0x58e <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
 4aa:	8a 81       	ldd	r24, Y+2	; 0x02
 4ac:	28 2f       	mov	r18, r24
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	3e 83       	std	Y+6, r19	; 0x06
 4b2:	2d 83       	std	Y+5, r18	; 0x05
 4b4:	8d 81       	ldd	r24, Y+5	; 0x05
 4b6:	9e 81       	ldd	r25, Y+6	; 0x06
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	91 05       	cpc	r25, r1
 4bc:	49 f1       	breq	.+82     	; 0x510 <DIO_u8SetPinValue+0x188>
 4be:	2d 81       	ldd	r18, Y+5	; 0x05
 4c0:	3e 81       	ldd	r19, Y+6	; 0x06
 4c2:	22 30       	cpi	r18, 0x02	; 2
 4c4:	31 05       	cpc	r19, r1
 4c6:	2c f4       	brge	.+10     	; 0x4d2 <DIO_u8SetPinValue+0x14a>
 4c8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ca:	9e 81       	ldd	r25, Y+6	; 0x06
 4cc:	00 97       	sbiw	r24, 0x00	; 0
 4ce:	61 f0       	breq	.+24     	; 0x4e8 <DIO_u8SetPinValue+0x160>
 4d0:	5b c0       	rjmp	.+182    	; 0x588 <DIO_u8SetPinValue+0x200>
 4d2:	2d 81       	ldd	r18, Y+5	; 0x05
 4d4:	3e 81       	ldd	r19, Y+6	; 0x06
 4d6:	22 30       	cpi	r18, 0x02	; 2
 4d8:	31 05       	cpc	r19, r1
 4da:	71 f1       	breq	.+92     	; 0x538 <DIO_u8SetPinValue+0x1b0>
 4dc:	8d 81       	ldd	r24, Y+5	; 0x05
 4de:	9e 81       	ldd	r25, Y+6	; 0x06
 4e0:	83 30       	cpi	r24, 0x03	; 3
 4e2:	91 05       	cpc	r25, r1
 4e4:	e9 f1       	breq	.+122    	; 0x560 <DIO_u8SetPinValue+0x1d8>
 4e6:	50 c0       	rjmp	.+160    	; 0x588 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
 4e8:	ab e3       	ldi	r26, 0x3B	; 59
 4ea:	b0 e0       	ldi	r27, 0x00	; 0
 4ec:	eb e3       	ldi	r30, 0x3B	; 59
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	48 2f       	mov	r20, r24
 4f4:	8b 81       	ldd	r24, Y+3	; 0x03
 4f6:	28 2f       	mov	r18, r24
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 2e       	mov	r0, r18
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_u8SetPinValue+0x17e>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	0a 94       	dec	r0
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_u8SetPinValue+0x17a>
 50a:	84 2b       	or	r24, r20
 50c:	8c 93       	st	X, r24
 50e:	44 c0       	rjmp	.+136    	; 0x598 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
 510:	a8 e3       	ldi	r26, 0x38	; 56
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	e8 e3       	ldi	r30, 0x38	; 56
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	48 2f       	mov	r20, r24
 51c:	8b 81       	ldd	r24, Y+3	; 0x03
 51e:	28 2f       	mov	r18, r24
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 2e       	mov	r0, r18
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_u8SetPinValue+0x1a6>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	0a 94       	dec	r0
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_u8SetPinValue+0x1a2>
 532:	84 2b       	or	r24, r20
 534:	8c 93       	st	X, r24
 536:	30 c0       	rjmp	.+96     	; 0x598 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
 538:	a5 e3       	ldi	r26, 0x35	; 53
 53a:	b0 e0       	ldi	r27, 0x00	; 0
 53c:	e5 e3       	ldi	r30, 0x35	; 53
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	48 2f       	mov	r20, r24
 544:	8b 81       	ldd	r24, Y+3	; 0x03
 546:	28 2f       	mov	r18, r24
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 2e       	mov	r0, r18
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_u8SetPinValue+0x1ce>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	0a 94       	dec	r0
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_u8SetPinValue+0x1ca>
 55a:	84 2b       	or	r24, r20
 55c:	8c 93       	st	X, r24
 55e:	1c c0       	rjmp	.+56     	; 0x598 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
 560:	a2 e3       	ldi	r26, 0x32	; 50
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	e2 e3       	ldi	r30, 0x32	; 50
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	48 2f       	mov	r20, r24
 56c:	8b 81       	ldd	r24, Y+3	; 0x03
 56e:	28 2f       	mov	r18, r24
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 2e       	mov	r0, r18
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_u8SetPinValue+0x1f6>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	0a 94       	dec	r0
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_u8SetPinValue+0x1f2>
 582:	84 2b       	or	r24, r20
 584:	8c 93       	st	X, r24
 586:	08 c0       	rjmp	.+16     	; 0x598 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	89 83       	std	Y+1, r24	; 0x01
 58c:	05 c0       	rjmp	.+10     	; 0x598 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	89 83       	std	Y+1, r24	; 0x01
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 598:	89 81       	ldd	r24, Y+1	; 0x01
}
 59a:	28 96       	adiw	r28, 0x08	; 8
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	f8 94       	cli
 5a0:	de bf       	out	0x3e, r29	; 62
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	cd bf       	out	0x3d, r28	; 61
 5a6:	cf 91       	pop	r28
 5a8:	df 91       	pop	r29
 5aa:	08 95       	ret

000005ac <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 5ac:	df 93       	push	r29
 5ae:	cf 93       	push	r28
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <DIO_u8SetPortValue+0x6>
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <DIO_u8SetPortValue+0x8>
 5b4:	0f 92       	push	r0
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
 5ba:	8a 83       	std	Y+2, r24	; 0x02
 5bc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 5be:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 5c0:	8a 81       	ldd	r24, Y+2	; 0x02
 5c2:	28 2f       	mov	r18, r24
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	3d 83       	std	Y+5, r19	; 0x05
 5c8:	2c 83       	std	Y+4, r18	; 0x04
 5ca:	8c 81       	ldd	r24, Y+4	; 0x04
 5cc:	9d 81       	ldd	r25, Y+5	; 0x05
 5ce:	81 30       	cpi	r24, 0x01	; 1
 5d0:	91 05       	cpc	r25, r1
 5d2:	d1 f0       	breq	.+52     	; 0x608 <DIO_u8SetPortValue+0x5c>
 5d4:	2c 81       	ldd	r18, Y+4	; 0x04
 5d6:	3d 81       	ldd	r19, Y+5	; 0x05
 5d8:	22 30       	cpi	r18, 0x02	; 2
 5da:	31 05       	cpc	r19, r1
 5dc:	2c f4       	brge	.+10     	; 0x5e8 <DIO_u8SetPortValue+0x3c>
 5de:	8c 81       	ldd	r24, Y+4	; 0x04
 5e0:	9d 81       	ldd	r25, Y+5	; 0x05
 5e2:	00 97       	sbiw	r24, 0x00	; 0
 5e4:	61 f0       	breq	.+24     	; 0x5fe <DIO_u8SetPortValue+0x52>
 5e6:	1f c0       	rjmp	.+62     	; 0x626 <DIO_u8SetPortValue+0x7a>
 5e8:	2c 81       	ldd	r18, Y+4	; 0x04
 5ea:	3d 81       	ldd	r19, Y+5	; 0x05
 5ec:	22 30       	cpi	r18, 0x02	; 2
 5ee:	31 05       	cpc	r19, r1
 5f0:	81 f0       	breq	.+32     	; 0x612 <DIO_u8SetPortValue+0x66>
 5f2:	8c 81       	ldd	r24, Y+4	; 0x04
 5f4:	9d 81       	ldd	r25, Y+5	; 0x05
 5f6:	83 30       	cpi	r24, 0x03	; 3
 5f8:	91 05       	cpc	r25, r1
 5fa:	81 f0       	breq	.+32     	; 0x61c <DIO_u8SetPortValue+0x70>
 5fc:	14 c0       	rjmp	.+40     	; 0x626 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value;break;
 5fe:	eb e3       	ldi	r30, 0x3B	; 59
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	8b 81       	ldd	r24, Y+3	; 0x03
 604:	80 83       	st	Z, r24
 606:	11 c0       	rjmp	.+34     	; 0x62a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value;break;
 608:	e8 e3       	ldi	r30, 0x38	; 56
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	80 83       	st	Z, r24
 610:	0c c0       	rjmp	.+24     	; 0x62a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value;break;
 612:	e5 e3       	ldi	r30, 0x35	; 53
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	8b 81       	ldd	r24, Y+3	; 0x03
 618:	80 83       	st	Z, r24
 61a:	07 c0       	rjmp	.+14     	; 0x62a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value;break;
 61c:	e2 e3       	ldi	r30, 0x32	; 50
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	8b 81       	ldd	r24, Y+3	; 0x03
 622:	80 83       	st	Z, r24
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 62a:	89 81       	ldd	r24, Y+1	; 0x01
}
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
 632:	0f 90       	pop	r0
 634:	0f 90       	pop	r0
 636:	cf 91       	pop	r28
 638:	df 91       	pop	r29
 63a:	08 95       	ret

0000063c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
 63c:	df 93       	push	r29
 63e:	cf 93       	push	r28
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
 644:	27 97       	sbiw	r28, 0x07	; 7
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	f8 94       	cli
 64a:	de bf       	out	0x3e, r29	; 62
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	cd bf       	out	0x3d, r28	; 61
 650:	8a 83       	std	Y+2, r24	; 0x02
 652:	6b 83       	std	Y+3, r22	; 0x03
 654:	5d 83       	std	Y+5, r21	; 0x05
 656:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 658:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=0) && (Copy_u8Pin<=DIO_u8PIN7))
 65a:	8c 81       	ldd	r24, Y+4	; 0x04
 65c:	9d 81       	ldd	r25, Y+5	; 0x05
 65e:	00 97       	sbiw	r24, 0x00	; 0
 660:	09 f4       	brne	.+2      	; 0x664 <DIO_u8GetPinValue+0x28>
 662:	78 c0       	rjmp	.+240    	; 0x754 <DIO_u8GetPinValue+0x118>
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	88 30       	cpi	r24, 0x08	; 8
 668:	08 f0       	brcs	.+2      	; 0x66c <DIO_u8GetPinValue+0x30>
 66a:	74 c0       	rjmp	.+232    	; 0x754 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
 66c:	8a 81       	ldd	r24, Y+2	; 0x02
 66e:	28 2f       	mov	r18, r24
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	3f 83       	std	Y+7, r19	; 0x07
 674:	2e 83       	std	Y+6, r18	; 0x06
 676:	4e 81       	ldd	r20, Y+6	; 0x06
 678:	5f 81       	ldd	r21, Y+7	; 0x07
 67a:	41 30       	cpi	r20, 0x01	; 1
 67c:	51 05       	cpc	r21, r1
 67e:	59 f1       	breq	.+86     	; 0x6d6 <DIO_u8GetPinValue+0x9a>
 680:	8e 81       	ldd	r24, Y+6	; 0x06
 682:	9f 81       	ldd	r25, Y+7	; 0x07
 684:	82 30       	cpi	r24, 0x02	; 2
 686:	91 05       	cpc	r25, r1
 688:	34 f4       	brge	.+12     	; 0x696 <DIO_u8GetPinValue+0x5a>
 68a:	2e 81       	ldd	r18, Y+6	; 0x06
 68c:	3f 81       	ldd	r19, Y+7	; 0x07
 68e:	21 15       	cp	r18, r1
 690:	31 05       	cpc	r19, r1
 692:	69 f0       	breq	.+26     	; 0x6ae <DIO_u8GetPinValue+0x72>
 694:	5c c0       	rjmp	.+184    	; 0x74e <DIO_u8GetPinValue+0x112>
 696:	4e 81       	ldd	r20, Y+6	; 0x06
 698:	5f 81       	ldd	r21, Y+7	; 0x07
 69a:	42 30       	cpi	r20, 0x02	; 2
 69c:	51 05       	cpc	r21, r1
 69e:	79 f1       	breq	.+94     	; 0x6fe <DIO_u8GetPinValue+0xc2>
 6a0:	8e 81       	ldd	r24, Y+6	; 0x06
 6a2:	9f 81       	ldd	r25, Y+7	; 0x07
 6a4:	83 30       	cpi	r24, 0x03	; 3
 6a6:	91 05       	cpc	r25, r1
 6a8:	09 f4       	brne	.+2      	; 0x6ac <DIO_u8GetPinValue+0x70>
 6aa:	3d c0       	rjmp	.+122    	; 0x726 <DIO_u8GetPinValue+0xea>
 6ac:	50 c0       	rjmp	.+160    	; 0x74e <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
 6ae:	e9 e3       	ldi	r30, 0x39	; 57
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	28 2f       	mov	r18, r24
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ba:	88 2f       	mov	r24, r24
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	a9 01       	movw	r20, r18
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_u8GetPinValue+0x8a>
 6c2:	55 95       	asr	r21
 6c4:	47 95       	ror	r20
 6c6:	8a 95       	dec	r24
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_u8GetPinValue+0x86>
 6ca:	ca 01       	movw	r24, r20
 6cc:	81 70       	andi	r24, 0x01	; 1
 6ce:	ec 81       	ldd	r30, Y+4	; 0x04
 6d0:	fd 81       	ldd	r31, Y+5	; 0x05
 6d2:	80 83       	st	Z, r24
 6d4:	41 c0       	rjmp	.+130    	; 0x758 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
 6d6:	e6 e3       	ldi	r30, 0x36	; 54
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	28 2f       	mov	r18, r24
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	8b 81       	ldd	r24, Y+3	; 0x03
 6e2:	88 2f       	mov	r24, r24
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	a9 01       	movw	r20, r18
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DIO_u8GetPinValue+0xb2>
 6ea:	55 95       	asr	r21
 6ec:	47 95       	ror	r20
 6ee:	8a 95       	dec	r24
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <DIO_u8GetPinValue+0xae>
 6f2:	ca 01       	movw	r24, r20
 6f4:	81 70       	andi	r24, 0x01	; 1
 6f6:	ec 81       	ldd	r30, Y+4	; 0x04
 6f8:	fd 81       	ldd	r31, Y+5	; 0x05
 6fa:	80 83       	st	Z, r24
 6fc:	2d c0       	rjmp	.+90     	; 0x758 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
 6fe:	e3 e3       	ldi	r30, 0x33	; 51
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	28 2f       	mov	r18, r24
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	8b 81       	ldd	r24, Y+3	; 0x03
 70a:	88 2f       	mov	r24, r24
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	a9 01       	movw	r20, r18
 710:	02 c0       	rjmp	.+4      	; 0x716 <DIO_u8GetPinValue+0xda>
 712:	55 95       	asr	r21
 714:	47 95       	ror	r20
 716:	8a 95       	dec	r24
 718:	e2 f7       	brpl	.-8      	; 0x712 <DIO_u8GetPinValue+0xd6>
 71a:	ca 01       	movw	r24, r20
 71c:	81 70       	andi	r24, 0x01	; 1
 71e:	ec 81       	ldd	r30, Y+4	; 0x04
 720:	fd 81       	ldd	r31, Y+5	; 0x05
 722:	80 83       	st	Z, r24
 724:	19 c0       	rjmp	.+50     	; 0x758 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
 726:	e0 e3       	ldi	r30, 0x30	; 48
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	28 2f       	mov	r18, r24
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	8b 81       	ldd	r24, Y+3	; 0x03
 732:	88 2f       	mov	r24, r24
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	a9 01       	movw	r20, r18
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_u8GetPinValue+0x102>
 73a:	55 95       	asr	r21
 73c:	47 95       	ror	r20
 73e:	8a 95       	dec	r24
 740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_u8GetPinValue+0xfe>
 742:	ca 01       	movw	r24, r20
 744:	81 70       	andi	r24, 0x01	; 1
 746:	ec 81       	ldd	r30, Y+4	; 0x04
 748:	fd 81       	ldd	r31, Y+5	; 0x05
 74a:	80 83       	st	Z, r24
 74c:	05 c0       	rjmp	.+10     	; 0x758 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState=1;
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	89 83       	std	Y+1, r24	; 0x01
 752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_u8GetPinValue+0x11c>
			}
		}
	else
	{
		Local_u8ErrorState=1;
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_u8ErrorState;
 758:	89 81       	ldd	r24, Y+1	; 0x01
}
 75a:	27 96       	adiw	r28, 0x07	; 7
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	f8 94       	cli
 760:	de bf       	out	0x3e, r29	; 62
 762:	0f be       	out	0x3f, r0	; 63
 764:	cd bf       	out	0x3d, r28	; 61
 766:	cf 91       	pop	r28
 768:	df 91       	pop	r29
 76a:	08 95       	ret

0000076c <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
 76c:	df 93       	push	r29
 76e:	cf 93       	push	r28
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
 774:	af e5       	ldi	r26, 0x5F	; 95
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	ef e5       	ldi	r30, 0x5F	; 95
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	80 68       	ori	r24, 0x80	; 128
 780:	8c 93       	st	X, r24
}
 782:	cf 91       	pop	r28
 784:	df 91       	pop	r29
 786:	08 95       	ret

00000788 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
 788:	df 93       	push	r29
 78a:	cf 93       	push	r28
 78c:	cd b7       	in	r28, 0x3d	; 61
 78e:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,SREG_I);   
 790:	af e5       	ldi	r26, 0x5F	; 95
 792:	b0 e0       	ldi	r27, 0x00	; 0
 794:	ef e5       	ldi	r30, 0x5F	; 95
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	8f 77       	andi	r24, 0x7F	; 127
 79c:	8c 93       	st	X, r24
 79e:	cf 91       	pop	r28
 7a0:	df 91       	pop	r29
 7a2:	08 95       	ret

000007a4 <main>:
static u8 Global_u8Counter=0;
SSD_t*gptr;
SSD_t*gptr1;

void main (void)
{
 7a4:	df 93       	push	r29
 7a6:	cf 93       	push	r28
 7a8:	cd b7       	in	r28, 0x3d	; 61
 7aa:	de b7       	in	r29, 0x3e	; 62
 7ac:	28 97       	sbiw	r28, 0x08	; 8
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	f8 94       	cli
 7b2:	de bf       	out	0x3e, r29	; 62
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	cd bf       	out	0x3d, r28	; 61

	PORT_voidInit();
 7b8:	0e 94 49 00 	call	0x92	; 0x92 <PORT_voidInit>
	TIMER0_voidInit();
 7bc:	0e 94 6b 05 	call	0xad6	; 0xad6 <TIMER0_voidInit>
	TIMER0_u8SetCallBack(&LED);
 7c0:	86 e0       	ldi	r24, 0x06	; 6
 7c2:	94 e0       	ldi	r25, 0x04	; 4
 7c4:	0e 94 a0 05 	call	0xb40	; 0xb40 <TIMER0_u8SetCallBack>
	GIE_voidEnable();
 7c8:	0e 94 b6 03 	call	0x76c	; 0x76c <GIE_voidEnable>

	SSD_t SSD={Cathode,DIO_u8PORTC,DIO_u8PORTD,DIO_u8PIN0};
 7cc:	19 82       	std	Y+1, r1	; 0x01
 7ce:	82 e0       	ldi	r24, 0x02	; 2
 7d0:	8a 83       	std	Y+2, r24	; 0x02
 7d2:	83 e0       	ldi	r24, 0x03	; 3
 7d4:	8b 83       	std	Y+3, r24	; 0x03
 7d6:	1c 82       	std	Y+4, r1	; 0x04
	SSD_t SSD1={Cathode,DIO_u8PORTC,DIO_u8PORTD,DIO_u8PIN1};
 7d8:	1d 82       	std	Y+5, r1	; 0x05
 7da:	82 e0       	ldi	r24, 0x02	; 2
 7dc:	8e 83       	std	Y+6, r24	; 0x06
 7de:	83 e0       	ldi	r24, 0x03	; 3
 7e0:	8f 83       	std	Y+7, r24	; 0x07
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	88 87       	std	Y+8, r24	; 0x08
	gptr=&SSD;
 7e6:	ce 01       	movw	r24, r28
 7e8:	01 96       	adiw	r24, 0x01	; 1
 7ea:	90 93 70 00 	sts	0x0070, r25
 7ee:	80 93 6f 00 	sts	0x006F, r24
	gptr1=&SSD1;
 7f2:	ce 01       	movw	r24, r28
 7f4:	05 96       	adiw	r24, 0x05	; 5
 7f6:	90 93 72 00 	sts	0x0072, r25
 7fa:	80 93 71 00 	sts	0x0071, r24
	while(1)
	{
		if(Global_u8Counter==10)
 7fe:	80 91 6a 00 	lds	r24, 0x006A
 802:	8a 30       	cpi	r24, 0x0A	; 10
 804:	e1 f7       	brne	.-8      	; 0x7fe <main+0x5a>
		Global_u8Counter=0;
 806:	10 92 6a 00 	sts	0x006A, r1
 80a:	f9 cf       	rjmp	.-14     	; 0x7fe <main+0x5a>

0000080c <LED>:
	}

}

void LED(void)
{
 80c:	df 93       	push	r29
 80e:	cf 93       	push	r28
 810:	cd b7       	in	r28, 0x3d	; 61
 812:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter=0;
	Local_u16Counter++;
 814:	80 91 6b 00 	lds	r24, 0x006B
 818:	90 91 6c 00 	lds	r25, 0x006C
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	90 93 6c 00 	sts	0x006C, r25
 822:	80 93 6b 00 	sts	0x006B, r24
	if(Local_u16Counter%40 == 0)
 826:	80 91 6b 00 	lds	r24, 0x006B
 82a:	90 91 6c 00 	lds	r25, 0x006C
 82e:	28 e2       	ldi	r18, 0x28	; 40
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	b9 01       	movw	r22, r18
 834:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__udivmodhi4>
 838:	00 97       	sbiw	r24, 0x00	; 0
 83a:	a9 f4       	brne	.+42     	; 0x866 <__stack+0x7>
	{
		SSD_Enable(gptr);
 83c:	80 91 6f 00 	lds	r24, 0x006F
 840:	90 91 70 00 	lds	r25, 0x0070
 844:	0e 94 07 05 	call	0xa0e	; 0xa0e <SSD_Enable>
		SSD_Set_Number(Global_u8Counter,gptr);
 848:	80 91 6a 00 	lds	r24, 0x006A
 84c:	20 91 6f 00 	lds	r18, 0x006F
 850:	30 91 70 00 	lds	r19, 0x0070
 854:	b9 01       	movw	r22, r18
 856:	0e 94 69 04 	call	0x8d2	; 0x8d2 <SSD_Set_Number>
		SSD_Disable(gptr1);
 85a:	80 91 71 00 	lds	r24, 0x0071
 85e:	90 91 72 00 	lds	r25, 0x0072
 862:	0e 94 39 05 	call	0xa72	; 0xa72 <SSD_Disable>
	}
	if(Local_u16Counter%80 == 0)
 866:	80 91 6b 00 	lds	r24, 0x006B
 86a:	90 91 6c 00 	lds	r25, 0x006C
 86e:	20 e5       	ldi	r18, 0x50	; 80
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	b9 01       	movw	r22, r18
 874:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__udivmodhi4>
 878:	00 97       	sbiw	r24, 0x00	; 0
 87a:	b9 f4       	brne	.+46     	; 0x8aa <__stack+0x4b>
	{
		SSD_Enable(gptr1);
 87c:	80 91 71 00 	lds	r24, 0x0071
 880:	90 91 72 00 	lds	r25, 0x0072
 884:	0e 94 07 05 	call	0xa0e	; 0xa0e <SSD_Enable>
		SSD_Set_Number(9-Global_u8Counter,gptr);
 888:	90 91 6a 00 	lds	r25, 0x006A
 88c:	89 e0       	ldi	r24, 0x09	; 9
 88e:	89 1b       	sub	r24, r25
 890:	20 91 6f 00 	lds	r18, 0x006F
 894:	30 91 70 00 	lds	r19, 0x0070
 898:	b9 01       	movw	r22, r18
 89a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <SSD_Set_Number>
		SSD_Disable(gptr);
 89e:	80 91 6f 00 	lds	r24, 0x006F
 8a2:	90 91 70 00 	lds	r25, 0x0070
 8a6:	0e 94 39 05 	call	0xa72	; 0xa72 <SSD_Disable>
	}

	if(Local_u16Counter==4000)
 8aa:	80 91 6b 00 	lds	r24, 0x006B
 8ae:	90 91 6c 00 	lds	r25, 0x006C
 8b2:	2f e0       	ldi	r18, 0x0F	; 15
 8b4:	80 3a       	cpi	r24, 0xA0	; 160
 8b6:	92 07       	cpc	r25, r18
 8b8:	49 f4       	brne	.+18     	; 0x8cc <__stack+0x6d>
	{
		Global_u8Counter++;
 8ba:	80 91 6a 00 	lds	r24, 0x006A
 8be:	8f 5f       	subi	r24, 0xFF	; 255
 8c0:	80 93 6a 00 	sts	0x006A, r24
		Local_u16Counter=0;
 8c4:	10 92 6c 00 	sts	0x006C, r1
 8c8:	10 92 6b 00 	sts	0x006B, r1
	}
}
 8cc:	cf 91       	pop	r28
 8ce:	df 91       	pop	r29
 8d0:	08 95       	ret

000008d2 <SSD_Set_Number>:
#include "DIO_private.h"
#include "DIO_config.h"
#include "SSD_interface.h"

u8 SSD_Set_Number(u8 Number, SSD_t*SSD)
{
 8d2:	df 93       	push	r29
 8d4:	cf 93       	push	r28
 8d6:	cd b7       	in	r28, 0x3d	; 61
 8d8:	de b7       	in	r29, 0x3e	; 62
 8da:	63 97       	sbiw	r28, 0x13	; 19
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	f8 94       	cli
 8e0:	de bf       	out	0x3e, r29	; 62
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	cd bf       	out	0x3d, r28	; 61
 8e6:	8c 87       	std	Y+12, r24	; 0x0c
 8e8:	7e 87       	std	Y+14, r23	; 0x0e
 8ea:	6d 87       	std	Y+13, r22	; 0x0d
	u8 sevenSeg[10]={Digit_0,Digit_1,Digit_2,Digit_3,Digit_4,Digit_5,Digit_6,Digit_7,Digit_8,Digit_9};
 8ec:	ce 01       	movw	r24, r28
 8ee:	02 96       	adiw	r24, 0x02	; 2
 8f0:	98 8b       	std	Y+16, r25	; 0x10
 8f2:	8f 87       	std	Y+15, r24	; 0x0f
 8f4:	e0 e6       	ldi	r30, 0x60	; 96
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	fa 8b       	std	Y+18, r31	; 0x12
 8fa:	e9 8b       	std	Y+17, r30	; 0x11
 8fc:	fa e0       	ldi	r31, 0x0A	; 10
 8fe:	fb 8b       	std	Y+19, r31	; 0x13
 900:	e9 89       	ldd	r30, Y+17	; 0x11
 902:	fa 89       	ldd	r31, Y+18	; 0x12
 904:	00 80       	ld	r0, Z
 906:	89 89       	ldd	r24, Y+17	; 0x11
 908:	9a 89       	ldd	r25, Y+18	; 0x12
 90a:	01 96       	adiw	r24, 0x01	; 1
 90c:	9a 8b       	std	Y+18, r25	; 0x12
 90e:	89 8b       	std	Y+17, r24	; 0x11
 910:	ef 85       	ldd	r30, Y+15	; 0x0f
 912:	f8 89       	ldd	r31, Y+16	; 0x10
 914:	00 82       	st	Z, r0
 916:	8f 85       	ldd	r24, Y+15	; 0x0f
 918:	98 89       	ldd	r25, Y+16	; 0x10
 91a:	01 96       	adiw	r24, 0x01	; 1
 91c:	98 8b       	std	Y+16, r25	; 0x10
 91e:	8f 87       	std	Y+15, r24	; 0x0f
 920:	9b 89       	ldd	r25, Y+19	; 0x13
 922:	91 50       	subi	r25, 0x01	; 1
 924:	9b 8b       	std	Y+19, r25	; 0x13
 926:	eb 89       	ldd	r30, Y+19	; 0x13
 928:	ee 23       	and	r30, r30
 92a:	51 f7       	brne	.-44     	; 0x900 <SSD_Set_Number+0x2e>
	u8 Local_u8ErrorState=0;
 92c:	19 82       	std	Y+1, r1	; 0x01
	if(SSD!=NULL)
 92e:	8d 85       	ldd	r24, Y+13	; 0x0d
 930:	9e 85       	ldd	r25, Y+14	; 0x0e
 932:	00 97       	sbiw	r24, 0x00	; 0
 934:	09 f4       	brne	.+2      	; 0x938 <SSD_Set_Number+0x66>
 936:	5f c0       	rjmp	.+190    	; 0x9f6 <SSD_Set_Number+0x124>
	{
		if(Number<=9&&Number>=0)
 938:	8c 85       	ldd	r24, Y+12	; 0x0c
 93a:	8a 30       	cpi	r24, 0x0A	; 10
 93c:	08 f0       	brcs	.+2      	; 0x940 <SSD_Set_Number+0x6e>
 93e:	58 c0       	rjmp	.+176    	; 0x9f0 <SSD_Set_Number+0x11e>
		{
			if(SSD->COM_TYPE==Anode)
 940:	ed 85       	ldd	r30, Y+13	; 0x0d
 942:	fe 85       	ldd	r31, Y+14	; 0x0e
 944:	80 81       	ld	r24, Z
 946:	81 30       	cpi	r24, 0x01	; 1
 948:	69 f5       	brne	.+90     	; 0x9a4 <SSD_Set_Number+0xd2>
			{
				DIO_u8SetPortDirection(SSD->PORT,DIO_u8PORT_OUTPUT);
 94a:	ed 85       	ldd	r30, Y+13	; 0x0d
 94c:	fe 85       	ldd	r31, Y+14	; 0x0e
 94e:	81 81       	ldd	r24, Z+1	; 0x01
 950:	6f ef       	ldi	r22, 0xFF	; 255
 952:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_u8SetPortDirection>
				DIO_u8SetPinDirection(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_OUTPUT);
 956:	ed 85       	ldd	r30, Y+13	; 0x0d
 958:	fe 85       	ldd	r31, Y+14	; 0x0e
 95a:	82 81       	ldd	r24, Z+2	; 0x02
 95c:	ed 85       	ldd	r30, Y+13	; 0x0d
 95e:	fe 85       	ldd	r31, Y+14	; 0x0e
 960:	93 81       	ldd	r25, Z+3	; 0x03
 962:	69 2f       	mov	r22, r25
 964:	41 e0       	ldi	r20, 0x01	; 1
 966:	0e 94 6a 00 	call	0xd4	; 0xd4 <DIO_u8SetPinDirection>
				DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_HIGH);
 96a:	ed 85       	ldd	r30, Y+13	; 0x0d
 96c:	fe 85       	ldd	r31, Y+14	; 0x0e
 96e:	82 81       	ldd	r24, Z+2	; 0x02
 970:	ed 85       	ldd	r30, Y+13	; 0x0d
 972:	fe 85       	ldd	r31, Y+14	; 0x0e
 974:	93 81       	ldd	r25, Z+3	; 0x03
 976:	69 2f       	mov	r22, r25
 978:	41 e0       	ldi	r20, 0x01	; 1
 97a:	0e 94 c4 01 	call	0x388	; 0x388 <DIO_u8SetPinValue>
				DIO_u8SetPortValue(SSD->PORT,~sevenSeg[Number]);
 97e:	ed 85       	ldd	r30, Y+13	; 0x0d
 980:	fe 85       	ldd	r31, Y+14	; 0x0e
 982:	41 81       	ldd	r20, Z+1	; 0x01
 984:	8c 85       	ldd	r24, Y+12	; 0x0c
 986:	28 2f       	mov	r18, r24
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	ce 01       	movw	r24, r28
 98c:	02 96       	adiw	r24, 0x02	; 2
 98e:	fc 01       	movw	r30, r24
 990:	e2 0f       	add	r30, r18
 992:	f3 1f       	adc	r31, r19
 994:	80 81       	ld	r24, Z
 996:	98 2f       	mov	r25, r24
 998:	90 95       	com	r25
 99a:	84 2f       	mov	r24, r20
 99c:	69 2f       	mov	r22, r25
 99e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <DIO_u8SetPortValue>
 9a2:	2b c0       	rjmp	.+86     	; 0x9fa <SSD_Set_Number+0x128>
			}
			else if(SSD->COM_TYPE==Cathode)
 9a4:	ed 85       	ldd	r30, Y+13	; 0x0d
 9a6:	fe 85       	ldd	r31, Y+14	; 0x0e
 9a8:	80 81       	ld	r24, Z
 9aa:	88 23       	and	r24, r24
 9ac:	31 f5       	brne	.+76     	; 0x9fa <SSD_Set_Number+0x128>
			{
				DIO_u8SetPinDirection(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_OUTPUT);
 9ae:	ed 85       	ldd	r30, Y+13	; 0x0d
 9b0:	fe 85       	ldd	r31, Y+14	; 0x0e
 9b2:	82 81       	ldd	r24, Z+2	; 0x02
 9b4:	ed 85       	ldd	r30, Y+13	; 0x0d
 9b6:	fe 85       	ldd	r31, Y+14	; 0x0e
 9b8:	93 81       	ldd	r25, Z+3	; 0x03
 9ba:	69 2f       	mov	r22, r25
 9bc:	41 e0       	ldi	r20, 0x01	; 1
 9be:	0e 94 6a 00 	call	0xd4	; 0xd4 <DIO_u8SetPinDirection>
				DIO_u8SetPortDirection(SSD->PORT,DIO_u8PORT_OUTPUT);
 9c2:	ed 85       	ldd	r30, Y+13	; 0x0d
 9c4:	fe 85       	ldd	r31, Y+14	; 0x0e
 9c6:	81 81       	ldd	r24, Z+1	; 0x01
 9c8:	6f ef       	ldi	r22, 0xFF	; 255
 9ca:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_u8SetPortDirection>
				//DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_LOW);
				DIO_u8SetPortValue(SSD->PORT,sevenSeg[Number]);
 9ce:	ed 85       	ldd	r30, Y+13	; 0x0d
 9d0:	fe 85       	ldd	r31, Y+14	; 0x0e
 9d2:	41 81       	ldd	r20, Z+1	; 0x01
 9d4:	8c 85       	ldd	r24, Y+12	; 0x0c
 9d6:	28 2f       	mov	r18, r24
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	ce 01       	movw	r24, r28
 9dc:	02 96       	adiw	r24, 0x02	; 2
 9de:	fc 01       	movw	r30, r24
 9e0:	e2 0f       	add	r30, r18
 9e2:	f3 1f       	adc	r31, r19
 9e4:	90 81       	ld	r25, Z
 9e6:	84 2f       	mov	r24, r20
 9e8:	69 2f       	mov	r22, r25
 9ea:	0e 94 d6 02 	call	0x5ac	; 0x5ac <DIO_u8SetPortValue>
 9ee:	05 c0       	rjmp	.+10     	; 0x9fa <SSD_Set_Number+0x128>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	89 83       	std	Y+1, r24	; 0x01
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <SSD_Set_Number+0x128>
		}

	}
	else
	{
		Local_u8ErrorState=1;
 9f6:	81 e0       	ldi	r24, 0x01	; 1
 9f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 9fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 9fc:	63 96       	adiw	r28, 0x13	; 19
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	f8 94       	cli
 a02:	de bf       	out	0x3e, r29	; 62
 a04:	0f be       	out	0x3f, r0	; 63
 a06:	cd bf       	out	0x3d, r28	; 61
 a08:	cf 91       	pop	r28
 a0a:	df 91       	pop	r29
 a0c:	08 95       	ret

00000a0e <SSD_Enable>:
u8 SSD_Enable(SSD_t*SSD)
{
 a0e:	df 93       	push	r29
 a10:	cf 93       	push	r28
 a12:	00 d0       	rcall	.+0      	; 0xa14 <SSD_Enable+0x6>
 a14:	0f 92       	push	r0
 a16:	cd b7       	in	r28, 0x3d	; 61
 a18:	de b7       	in	r29, 0x3e	; 62
 a1a:	9b 83       	std	Y+3, r25	; 0x03
 a1c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
 a1e:	19 82       	std	Y+1, r1	; 0x01
	if(SSD->COM_TYPE==Anode)
 a20:	ea 81       	ldd	r30, Y+2	; 0x02
 a22:	fb 81       	ldd	r31, Y+3	; 0x03
 a24:	80 81       	ld	r24, Z
 a26:	81 30       	cpi	r24, 0x01	; 1
 a28:	59 f4       	brne	.+22     	; 0xa40 <SSD_Enable+0x32>
	{
		DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_HIGH);
 a2a:	ea 81       	ldd	r30, Y+2	; 0x02
 a2c:	fb 81       	ldd	r31, Y+3	; 0x03
 a2e:	82 81       	ldd	r24, Z+2	; 0x02
 a30:	ea 81       	ldd	r30, Y+2	; 0x02
 a32:	fb 81       	ldd	r31, Y+3	; 0x03
 a34:	93 81       	ldd	r25, Z+3	; 0x03
 a36:	69 2f       	mov	r22, r25
 a38:	41 e0       	ldi	r20, 0x01	; 1
 a3a:	0e 94 c4 01 	call	0x388	; 0x388 <DIO_u8SetPinValue>
 a3e:	12 c0       	rjmp	.+36     	; 0xa64 <SSD_Enable+0x56>
	}
	else if(SSD->COM_TYPE==Cathode)
 a40:	ea 81       	ldd	r30, Y+2	; 0x02
 a42:	fb 81       	ldd	r31, Y+3	; 0x03
 a44:	80 81       	ld	r24, Z
 a46:	88 23       	and	r24, r24
 a48:	59 f4       	brne	.+22     	; 0xa60 <SSD_Enable+0x52>
	{
		DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_LOW);
 a4a:	ea 81       	ldd	r30, Y+2	; 0x02
 a4c:	fb 81       	ldd	r31, Y+3	; 0x03
 a4e:	82 81       	ldd	r24, Z+2	; 0x02
 a50:	ea 81       	ldd	r30, Y+2	; 0x02
 a52:	fb 81       	ldd	r31, Y+3	; 0x03
 a54:	93 81       	ldd	r25, Z+3	; 0x03
 a56:	69 2f       	mov	r22, r25
 a58:	40 e0       	ldi	r20, 0x00	; 0
 a5a:	0e 94 c4 01 	call	0x388	; 0x388 <DIO_u8SetPinValue>
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <SSD_Enable+0x56>
	}
	else
	{
		Local_u8ErrorState=1;
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 a64:	89 81       	ldd	r24, Y+1	; 0x01
}
 a66:	0f 90       	pop	r0
 a68:	0f 90       	pop	r0
 a6a:	0f 90       	pop	r0
 a6c:	cf 91       	pop	r28
 a6e:	df 91       	pop	r29
 a70:	08 95       	ret

00000a72 <SSD_Disable>:
u8 SSD_Disable(SSD_t*SSD)
{
 a72:	df 93       	push	r29
 a74:	cf 93       	push	r28
 a76:	00 d0       	rcall	.+0      	; 0xa78 <SSD_Disable+0x6>
 a78:	0f 92       	push	r0
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
 a7e:	9b 83       	std	Y+3, r25	; 0x03
 a80:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
 a82:	19 82       	std	Y+1, r1	; 0x01
	if(SSD->COM_TYPE==Anode)
 a84:	ea 81       	ldd	r30, Y+2	; 0x02
 a86:	fb 81       	ldd	r31, Y+3	; 0x03
 a88:	80 81       	ld	r24, Z
 a8a:	81 30       	cpi	r24, 0x01	; 1
 a8c:	59 f4       	brne	.+22     	; 0xaa4 <SSD_Disable+0x32>
	{
		DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_LOW);
 a8e:	ea 81       	ldd	r30, Y+2	; 0x02
 a90:	fb 81       	ldd	r31, Y+3	; 0x03
 a92:	82 81       	ldd	r24, Z+2	; 0x02
 a94:	ea 81       	ldd	r30, Y+2	; 0x02
 a96:	fb 81       	ldd	r31, Y+3	; 0x03
 a98:	93 81       	ldd	r25, Z+3	; 0x03
 a9a:	69 2f       	mov	r22, r25
 a9c:	40 e0       	ldi	r20, 0x00	; 0
 a9e:	0e 94 c4 01 	call	0x388	; 0x388 <DIO_u8SetPinValue>
 aa2:	12 c0       	rjmp	.+36     	; 0xac8 <SSD_Disable+0x56>
	}
	else if(SSD->COM_TYPE==Cathode)
 aa4:	ea 81       	ldd	r30, Y+2	; 0x02
 aa6:	fb 81       	ldd	r31, Y+3	; 0x03
 aa8:	80 81       	ld	r24, Z
 aaa:	88 23       	and	r24, r24
 aac:	59 f4       	brne	.+22     	; 0xac4 <SSD_Disable+0x52>
	{
		DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,DIO_u8PIN_HIGH);
 aae:	ea 81       	ldd	r30, Y+2	; 0x02
 ab0:	fb 81       	ldd	r31, Y+3	; 0x03
 ab2:	82 81       	ldd	r24, Z+2	; 0x02
 ab4:	ea 81       	ldd	r30, Y+2	; 0x02
 ab6:	fb 81       	ldd	r31, Y+3	; 0x03
 ab8:	93 81       	ldd	r25, Z+3	; 0x03
 aba:	69 2f       	mov	r22, r25
 abc:	41 e0       	ldi	r20, 0x01	; 1
 abe:	0e 94 c4 01 	call	0x388	; 0x388 <DIO_u8SetPinValue>
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <SSD_Disable+0x56>
	}
	else
	{
		Local_u8ErrorState=1;
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 ac8:	89 81       	ldd	r24, Y+1	; 0x01
}
 aca:	0f 90       	pop	r0
 acc:	0f 90       	pop	r0
 ace:	0f 90       	pop	r0
 ad0:	cf 91       	pop	r28
 ad2:	df 91       	pop	r29
 ad4:	08 95       	ret

00000ad6 <TIMER0_voidInit>:
#include "TIMER_config.h"

static void (*TIMER0_pvCallBackFunc)(void)=NULL;

void TIMER0_voidInit(void)
{
 ad6:	df 93       	push	r29
 ad8:	cf 93       	push	r28
 ada:	cd b7       	in	r28, 0x3d	; 61
 adc:	de b7       	in	r29, 0x3e	; 62
	/*Choose CTC mode*/
	CLR_BIT(TCCR0,TCCR0_WGM00);
 ade:	a3 e5       	ldi	r26, 0x53	; 83
 ae0:	b0 e0       	ldi	r27, 0x00	; 0
 ae2:	e3 e5       	ldi	r30, 0x53	; 83
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	80 81       	ld	r24, Z
 ae8:	8f 7b       	andi	r24, 0xBF	; 191
 aea:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
 aec:	a3 e5       	ldi	r26, 0x53	; 83
 aee:	b0 e0       	ldi	r27, 0x00	; 0
 af0:	e3 e5       	ldi	r30, 0x53	; 83
 af2:	f0 e0       	ldi	r31, 0x00	; 0
 af4:	80 81       	ld	r24, Z
 af6:	88 60       	ori	r24, 0x08	; 8
 af8:	8c 93       	st	X, r24

	/*output compare match interrupt  enable */
	SET_BIT(TIMSK,TIMSK_OCIE0);
 afa:	a9 e5       	ldi	r26, 0x59	; 89
 afc:	b0 e0       	ldi	r27, 0x00	; 0
 afe:	e9 e5       	ldi	r30, 0x59	; 89
 b00:	f0 e0       	ldi	r31, 0x00	; 0
 b02:	80 81       	ld	r24, Z
 b04:	82 60       	ori	r24, 0x02	; 2
 b06:	8c 93       	st	X, r24

	/*Set compare match value to 255*/
	OCR0=250;
 b08:	ec e5       	ldi	r30, 0x5C	; 92
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	8a ef       	ldi	r24, 0xFA	; 250
 b0e:	80 83       	st	Z, r24

	/*Prescaler: Division by 8*/
	CLR_BIT(TCCR0,TCCR0_CS00);
 b10:	a3 e5       	ldi	r26, 0x53	; 83
 b12:	b0 e0       	ldi	r27, 0x00	; 0
 b14:	e3 e5       	ldi	r30, 0x53	; 83
 b16:	f0 e0       	ldi	r31, 0x00	; 0
 b18:	80 81       	ld	r24, Z
 b1a:	8e 7f       	andi	r24, 0xFE	; 254
 b1c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
 b1e:	a3 e5       	ldi	r26, 0x53	; 83
 b20:	b0 e0       	ldi	r27, 0x00	; 0
 b22:	e3 e5       	ldi	r30, 0x53	; 83
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	80 81       	ld	r24, Z
 b28:	82 60       	ori	r24, 0x02	; 2
 b2a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
 b2c:	a3 e5       	ldi	r26, 0x53	; 83
 b2e:	b0 e0       	ldi	r27, 0x00	; 0
 b30:	e3 e5       	ldi	r30, 0x53	; 83
 b32:	f0 e0       	ldi	r31, 0x00	; 0
 b34:	80 81       	ld	r24, Z
 b36:	8b 7f       	andi	r24, 0xFB	; 251
 b38:	8c 93       	st	X, r24

}
 b3a:	cf 91       	pop	r28
 b3c:	df 91       	pop	r29
 b3e:	08 95       	ret

00000b40 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
 b40:	df 93       	push	r29
 b42:	cf 93       	push	r28
 b44:	00 d0       	rcall	.+0      	; 0xb46 <TIMER0_u8SetCallBack+0x6>
 b46:	0f 92       	push	r0
 b48:	cd b7       	in	r28, 0x3d	; 61
 b4a:	de b7       	in	r29, 0x3e	; 62
 b4c:	9b 83       	std	Y+3, r25	; 0x03
 b4e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorStatus=0;
 b50:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_pvCallBackFunc != NULL)
 b52:	8a 81       	ldd	r24, Y+2	; 0x02
 b54:	9b 81       	ldd	r25, Y+3	; 0x03
 b56:	00 97       	sbiw	r24, 0x00	; 0
 b58:	39 f0       	breq	.+14     	; 0xb68 <TIMER0_u8SetCallBack+0x28>
    {
    	TIMER0_pvCallBackFunc=Copy_pvCallBackFunc;
 b5a:	8a 81       	ldd	r24, Y+2	; 0x02
 b5c:	9b 81       	ldd	r25, Y+3	; 0x03
 b5e:	90 93 6e 00 	sts	0x006E, r25
 b62:	80 93 6d 00 	sts	0x006D, r24
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <TIMER0_u8SetCallBack+0x2c>
    }
    else
    {
    	Local_u8ErrorStatus=2;
 b68:	82 e0       	ldi	r24, 0x02	; 2
 b6a:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorStatus;
 b6c:	89 81       	ldd	r24, Y+1	; 0x01
}
 b6e:	0f 90       	pop	r0
 b70:	0f 90       	pop	r0
 b72:	0f 90       	pop	r0
 b74:	cf 91       	pop	r28
 b76:	df 91       	pop	r29
 b78:	08 95       	ret

00000b7a <__vector_10>:

void(__vector_10)(void) __attribute__((signal));
void(__vector_10)(void)
{
 b7a:	1f 92       	push	r1
 b7c:	0f 92       	push	r0
 b7e:	0f b6       	in	r0, 0x3f	; 63
 b80:	0f 92       	push	r0
 b82:	11 24       	eor	r1, r1
 b84:	2f 93       	push	r18
 b86:	3f 93       	push	r19
 b88:	4f 93       	push	r20
 b8a:	5f 93       	push	r21
 b8c:	6f 93       	push	r22
 b8e:	7f 93       	push	r23
 b90:	8f 93       	push	r24
 b92:	9f 93       	push	r25
 b94:	af 93       	push	r26
 b96:	bf 93       	push	r27
 b98:	ef 93       	push	r30
 b9a:	ff 93       	push	r31
 b9c:	df 93       	push	r29
 b9e:	cf 93       	push	r28
 ba0:	cd b7       	in	r28, 0x3d	; 61
 ba2:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
 ba4:	80 91 6d 00 	lds	r24, 0x006D
 ba8:	90 91 6e 00 	lds	r25, 0x006E
 bac:	00 97       	sbiw	r24, 0x00	; 0
 bae:	29 f0       	breq	.+10     	; 0xbba <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
 bb0:	e0 91 6d 00 	lds	r30, 0x006D
 bb4:	f0 91 6e 00 	lds	r31, 0x006E
 bb8:	09 95       	icall
	}
}
 bba:	cf 91       	pop	r28
 bbc:	df 91       	pop	r29
 bbe:	ff 91       	pop	r31
 bc0:	ef 91       	pop	r30
 bc2:	bf 91       	pop	r27
 bc4:	af 91       	pop	r26
 bc6:	9f 91       	pop	r25
 bc8:	8f 91       	pop	r24
 bca:	7f 91       	pop	r23
 bcc:	6f 91       	pop	r22
 bce:	5f 91       	pop	r21
 bd0:	4f 91       	pop	r20
 bd2:	3f 91       	pop	r19
 bd4:	2f 91       	pop	r18
 bd6:	0f 90       	pop	r0
 bd8:	0f be       	out	0x3f, r0	; 63
 bda:	0f 90       	pop	r0
 bdc:	1f 90       	pop	r1
 bde:	18 95       	reti

00000be0 <__udivmodhi4>:
 be0:	aa 1b       	sub	r26, r26
 be2:	bb 1b       	sub	r27, r27
 be4:	51 e1       	ldi	r21, 0x11	; 17
 be6:	07 c0       	rjmp	.+14     	; 0xbf6 <__udivmodhi4_ep>

00000be8 <__udivmodhi4_loop>:
 be8:	aa 1f       	adc	r26, r26
 bea:	bb 1f       	adc	r27, r27
 bec:	a6 17       	cp	r26, r22
 bee:	b7 07       	cpc	r27, r23
 bf0:	10 f0       	brcs	.+4      	; 0xbf6 <__udivmodhi4_ep>
 bf2:	a6 1b       	sub	r26, r22
 bf4:	b7 0b       	sbc	r27, r23

00000bf6 <__udivmodhi4_ep>:
 bf6:	88 1f       	adc	r24, r24
 bf8:	99 1f       	adc	r25, r25
 bfa:	5a 95       	dec	r21
 bfc:	a9 f7       	brne	.-22     	; 0xbe8 <__udivmodhi4_loop>
 bfe:	80 95       	com	r24
 c00:	90 95       	com	r25
 c02:	bc 01       	movw	r22, r24
 c04:	cd 01       	movw	r24, r26
 c06:	08 95       	ret

00000c08 <_exit>:
 c08:	f8 94       	cli

00000c0a <__stop_program>:
 c0a:	ff cf       	rjmp	.-2      	; 0xc0a <__stop_program>
