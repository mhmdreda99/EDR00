#include <stdio.h>
#include "string.h"

struct SEquation
{
    int num;
    char sign;
};
struct SEquation exp[10];


int main()
{
    int i,k,l;
    char temptext[10];
    int flag=0;
    int count=0;

    printf("\n\n\n\t\t\t\t\t\t calculator");
    printf("\nnotes:\n1.Numbers should be < 10 digits.");
    printf("\n2.Only Integer numbers allowed.");
    printf("\n3.Only operations allowed are:+ - * /.");
    printf("\n4.Only 5 operations allowed.");
    printf("\n\nEnter equation:");

    ///Storing Equation
    //the storing process is continued unless number of operation is violated
    while (count<5)
    {
        for (i=0; i<10; i++ )
        {
            //user enter the number and it'll be stored as string
            temptext[i]=getche();
            //the number entry process will end either by
            //1.entering a sign(equation not finished)
            if ((temptext[i] == '+') || (temptext[i] == '-') || (temptext[i] == '*') || (temptext[i] == '/'))
            {
                //the count of signs stored is less than count of numbers stored
                if (count<4)
                {
                    //storing the sign
                    exp[count].sign=temptext[i];
                }
                break;
            }
            //2.or using Enter key(at end of equation)
            else if (temptext[i] == 13)
            {
                exp[count].num=atoi(temptext);
                count++;
                goto endEquation;
            }
        }
        //storing the number after being ended by either the tow ways
        exp[count].num=atoi(temptext);
        count++;
    }
endEquation:
    printf("\ncount=%d",count);
    printf("\nyour Equation=");
    for (k=0; k<count; k++)
    {
        printf("%d",exp[k].num);
        printf("%c",exp[k].sign);
    }
    printf("\n");

    ///processing Equation
    //multiplication and Division should be done first.

    for (k=0; k<count-1; k++)
    {
        //a linear search is supposed find either first * or /
        //and execute the operation between first op (before sign) and second op (after sign)
        if (exp[k].sign == '*')
        {
            switch(exp[k].sign)
            {
            case '*':
                //store the result in the first operand
                exp[k].num=exp[k].num*exp[k+1].num;

                //remove the second operand and rewrite the numbers
                for (l=k; l<count;l++)
                {
                    exp[l+1].num=exp[l+2].num;
                    strcpy(exp[l].sign, exp[l+1].sign);
                }
                ///printf("result=%d",exp[k].num*exp[k+1].num);
                count--;
                break;
            case '/':
                exp[k].num=exp[k].num/exp[k+1].num;
                for (l=k; l<count;l++)
                {
                    exp[l+1].num=exp[l+2].num;
                    strcpy(exp[l].sign, exp[l+1].sign);
                }
                ///printf("result=%d",exp[k].num*exp[k+1].num);
                count--;
                break;
            }
        }
    }

    printf("\nyour Equation=");
    for (k=0; k<count; k++)
    {
        printf("%d",exp[k].num);
        printf("%c",exp[k].sign);
    }

}
