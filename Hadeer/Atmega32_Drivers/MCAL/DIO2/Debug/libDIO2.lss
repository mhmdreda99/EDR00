In archive libDIO2.a:

Delay.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000001f8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000034f  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.softwareDelayMs 0000006c  00000000  00000000  0000057b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.softwareDelayMs:

00000000 <softwareDelayMs>:
/************************************************************************/
/*                        Software Delay functions                      */
/************************************************************************/

void softwareDelayMs(uint32 u32_delay_in_ms)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <softwareDelayMs+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <softwareDelayMs+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <softwareDelayMs+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	6b 83       	std	Y+3, r22	; 0x03
  10:	7c 83       	std	Y+4, r23	; 0x04
  12:	8d 83       	std	Y+5, r24	; 0x05
  14:	9e 83       	std	Y+6, r25	; 0x06
  16:	00 c0       	rjmp	.+0      	; 0x18 <softwareDelayMs+0x18>
	/*looping for number of counts that each count is 1ms approximately*/
	while(u32_delay_in_ms > 0)
	{
		for (uint16 i = 0 ; i < 4000 ; i++);
  18:	1a 82       	std	Y+2, r1	; 0x02
  1a:	19 82       	std	Y+1, r1	; 0x01
  1c:	00 c0       	rjmp	.+0      	; 0x1e <softwareDelayMs+0x1e>
  1e:	89 81       	ldd	r24, Y+1	; 0x01
  20:	9a 81       	ldd	r25, Y+2	; 0x02
  22:	01 96       	adiw	r24, 0x01	; 1
  24:	9a 83       	std	Y+2, r25	; 0x02
  26:	89 83       	std	Y+1, r24	; 0x01
  28:	89 81       	ldd	r24, Y+1	; 0x01
  2a:	9a 81       	ldd	r25, Y+2	; 0x02
  2c:	2f e0       	ldi	r18, 0x0F	; 15
  2e:	80 3a       	cpi	r24, 0xA0	; 160
  30:	92 07       	cpc	r25, r18
  32:	00 f0       	brcs	.+0      	; 0x34 <softwareDelayMs+0x34>
		u32_delay_in_ms--;
  34:	8b 81       	ldd	r24, Y+3	; 0x03
  36:	9c 81       	ldd	r25, Y+4	; 0x04
  38:	ad 81       	ldd	r26, Y+5	; 0x05
  3a:	be 81       	ldd	r27, Y+6	; 0x06
  3c:	01 97       	sbiw	r24, 0x01	; 1
  3e:	a1 09       	sbc	r26, r1
  40:	b1 09       	sbc	r27, r1
  42:	8b 83       	std	Y+3, r24	; 0x03
  44:	9c 83       	std	Y+4, r25	; 0x04
  46:	ad 83       	std	Y+5, r26	; 0x05
  48:	be 83       	std	Y+6, r27	; 0x06
/************************************************************************/

void softwareDelayMs(uint32 u32_delay_in_ms)
{
	/*looping for number of counts that each count is 1ms approximately*/
	while(u32_delay_in_ms > 0)
  4a:	8b 81       	ldd	r24, Y+3	; 0x03
  4c:	9c 81       	ldd	r25, Y+4	; 0x04
  4e:	ad 81       	ldd	r26, Y+5	; 0x05
  50:	be 81       	ldd	r27, Y+6	; 0x06
  52:	00 97       	sbiw	r24, 0x00	; 0
  54:	a1 05       	cpc	r26, r1
  56:	b1 05       	cpc	r27, r1
  58:	01 f4       	brne	.+0      	; 0x5a <softwareDelayMs+0x5a>
	{
		for (uint16 i = 0 ; i < 4000 ; i++);
		u32_delay_in_ms--;
	}
	return;
  5a:	26 96       	adiw	r28, 0x06	; 6
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	f8 94       	cli
  60:	de bf       	out	0x3e, r29	; 62
  62:	0f be       	out	0x3f, r0	; 63
  64:	cd bf       	out	0x3d, r28	; 61
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	08 95       	ret
