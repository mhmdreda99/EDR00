
External_Intrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c66  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000cda  2**0
                  ALLOC
  2 .stab         000010d4  00000000  00000000  00000cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b5c  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__vector_1>
   8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_2>
   c:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <main>
  74:	0c 94 31 06 	jmp	0xc62	; 0xc62 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <softwareDelayMs>:
/************************************************************************/
/*                        Software Delay functions                      */
/************************************************************************/

void softwareDelayMs(uint32 u32_delay_in_ms)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <softwareDelayMs+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <softwareDelayMs+0x8>
  84:	00 d0       	rcall	.+0      	; 0x86 <softwareDelayMs+0xa>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	6b 83       	std	Y+3, r22	; 0x03
  8c:	7c 83       	std	Y+4, r23	; 0x04
  8e:	8d 83       	std	Y+5, r24	; 0x05
  90:	9e 83       	std	Y+6, r25	; 0x06
  92:	19 c0       	rjmp	.+50     	; 0xc6 <softwareDelayMs+0x4a>
	/*looping for number of counts that each count is 1ms approximately*/
	while(u32_delay_in_ms > 0)
	{
		for (uint16 i = 0 ; i < 4000 ; i++);
  94:	1a 82       	std	Y+2, r1	; 0x02
  96:	19 82       	std	Y+1, r1	; 0x01
  98:	05 c0       	rjmp	.+10     	; 0xa4 <softwareDelayMs+0x28>
  9a:	89 81       	ldd	r24, Y+1	; 0x01
  9c:	9a 81       	ldd	r25, Y+2	; 0x02
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	9a 83       	std	Y+2, r25	; 0x02
  a2:	89 83       	std	Y+1, r24	; 0x01
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	9a 81       	ldd	r25, Y+2	; 0x02
  a8:	2f e0       	ldi	r18, 0x0F	; 15
  aa:	80 3a       	cpi	r24, 0xA0	; 160
  ac:	92 07       	cpc	r25, r18
  ae:	a8 f3       	brcs	.-22     	; 0x9a <softwareDelayMs+0x1e>
		u32_delay_in_ms--;
  b0:	8b 81       	ldd	r24, Y+3	; 0x03
  b2:	9c 81       	ldd	r25, Y+4	; 0x04
  b4:	ad 81       	ldd	r26, Y+5	; 0x05
  b6:	be 81       	ldd	r27, Y+6	; 0x06
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	a1 09       	sbc	r26, r1
  bc:	b1 09       	sbc	r27, r1
  be:	8b 83       	std	Y+3, r24	; 0x03
  c0:	9c 83       	std	Y+4, r25	; 0x04
  c2:	ad 83       	std	Y+5, r26	; 0x05
  c4:	be 83       	std	Y+6, r27	; 0x06
/************************************************************************/

void softwareDelayMs(uint32 u32_delay_in_ms)
{
	/*looping for number of counts that each count is 1ms approximately*/
	while(u32_delay_in_ms > 0)
  c6:	8b 81       	ldd	r24, Y+3	; 0x03
  c8:	9c 81       	ldd	r25, Y+4	; 0x04
  ca:	ad 81       	ldd	r26, Y+5	; 0x05
  cc:	be 81       	ldd	r27, Y+6	; 0x06
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	a1 05       	cpc	r26, r1
  d2:	b1 05       	cpc	r27, r1
  d4:	f9 f6       	brne	.-66     	; 0x94 <softwareDelayMs+0x18>
	{
		for (uint16 i = 0 ; i < 4000 ; i++);
		u32_delay_in_ms--;
	}
	return;
  d6:	26 96       	adiw	r28, 0x06	; 6
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	de bf       	out	0x3e, r29	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	cd bf       	out	0x3d, r28	; 61
  e2:	cf 91       	pop	r28
  e4:	df 91       	pop	r29
  e6:	08 95       	ret

000000e8 <GIE_INT_ENABLE>:
static void (*INT2_Func_Address) (void)=0;



StdReturn GIE_INT_ENABLE( GLOBAL_INT_ENABLE_t state )
{
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	00 d0       	rcall	.+0      	; 0xee <GIE_INT_ENABLE+0x6>
  ee:	00 d0       	rcall	.+0      	; 0xf0 <GIE_INT_ENABLE+0x8>
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	89 83       	std	Y+1, r24	; 0x01
	switch (state)
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	28 2f       	mov	r18, r24
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	3b 83       	std	Y+3, r19	; 0x03
  fe:	2a 83       	std	Y+2, r18	; 0x02
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	9b 81       	ldd	r25, Y+3	; 0x03
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	31 f0       	breq	.+12     	; 0x114 <GIE_INT_ENABLE+0x2c>
 108:	2a 81       	ldd	r18, Y+2	; 0x02
 10a:	3b 81       	ldd	r19, Y+3	; 0x03
 10c:	21 30       	cpi	r18, 0x01	; 1
 10e:	31 05       	cpc	r19, r1
 110:	49 f0       	breq	.+18     	; 0x124 <GIE_INT_ENABLE+0x3c>
 112:	0f c0       	rjmp	.+30     	; 0x132 <GIE_INT_ENABLE+0x4a>
	{
	case  GLOBAL_INT_DISABLE :
	{
		CLR_BIT(SREG,GIE);
 114:	af e5       	ldi	r26, 0x5F	; 95
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	ef e5       	ldi	r30, 0x5F	; 95
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8f 77       	andi	r24, 0x7F	; 127
 120:	8c 93       	st	X, r24
 122:	07 c0       	rjmp	.+14     	; 0x132 <GIE_INT_ENABLE+0x4a>
	}
	break;
	case  GLOBAL_INT_ENABLE :
	{
		SET_BIT(SREG,GIE);
 124:	af e5       	ldi	r26, 0x5F	; 95
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	ef e5       	ldi	r30, 0x5F	; 95
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	8c 93       	st	X, r24
	}
	break;
	}
}
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	cf 91       	pop	r28
 13c:	df 91       	pop	r29
 13e:	08 95       	ret

00000140 <GENERAL_INT_CONTROL>:
StdReturn GENERAL_INT_CONTROL(GENERAL_INT_CONTROL_t control,GICR_ENABLE_t enable)
{
 140:	df 93       	push	r29
 142:	cf 93       	push	r28
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	2b 97       	sbiw	r28, 0x0b	; 11
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	89 83       	std	Y+1, r24	; 0x01
 156:	6a 83       	std	Y+2, r22	; 0x02
	switch (control)
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	3a 87       	std	Y+10, r19	; 0x0a
 160:	29 87       	std	Y+9, r18	; 0x09
 162:	89 85       	ldd	r24, Y+9	; 0x09
 164:	9a 85       	ldd	r25, Y+10	; 0x0a
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	91 05       	cpc	r25, r1
 16a:	51 f1       	breq	.+84     	; 0x1c0 <GENERAL_INT_CONTROL+0x80>
 16c:	29 85       	ldd	r18, Y+9	; 0x09
 16e:	3a 85       	ldd	r19, Y+10	; 0x0a
 170:	22 30       	cpi	r18, 0x02	; 2
 172:	31 05       	cpc	r19, r1
 174:	09 f4       	brne	.+2      	; 0x178 <GENERAL_INT_CONTROL+0x38>
 176:	43 c0       	rjmp	.+134    	; 0x1fe <GENERAL_INT_CONTROL+0xbe>
 178:	89 85       	ldd	r24, Y+9	; 0x09
 17a:	9a 85       	ldd	r25, Y+10	; 0x0a
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	09 f0       	breq	.+2      	; 0x182 <GENERAL_INT_CONTROL+0x42>
 180:	5c c0       	rjmp	.+184    	; 0x23a <GENERAL_INT_CONTROL+0xfa>
	{
	case GENERAL_INT0 :
	{
		switch (enable)
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	28 2f       	mov	r18, r24
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	38 87       	std	Y+8, r19	; 0x08
 18a:	2f 83       	std	Y+7, r18	; 0x07
 18c:	8f 81       	ldd	r24, Y+7	; 0x07
 18e:	98 85       	ldd	r25, Y+8	; 0x08
 190:	00 97       	sbiw	r24, 0x00	; 0
 192:	31 f0       	breq	.+12     	; 0x1a0 <GENERAL_INT_CONTROL+0x60>
 194:	2f 81       	ldd	r18, Y+7	; 0x07
 196:	38 85       	ldd	r19, Y+8	; 0x08
 198:	21 30       	cpi	r18, 0x01	; 1
 19a:	31 05       	cpc	r19, r1
 19c:	49 f0       	breq	.+18     	; 0x1b0 <GENERAL_INT_CONTROL+0x70>
 19e:	4d c0       	rjmp	.+154    	; 0x23a <GENERAL_INT_CONTROL+0xfa>
		{
		case GICR_DISABLE :
		{
			CLR_BIT(GICR,INT0);
 1a0:	ab e5       	ldi	r26, 0x5B	; 91
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	eb e5       	ldi	r30, 0x5B	; 91
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 7b       	andi	r24, 0xBF	; 191
 1ac:	8c 93       	st	X, r24
 1ae:	45 c0       	rjmp	.+138    	; 0x23a <GENERAL_INT_CONTROL+0xfa>
		}
		break;
		case GICR_ENABLE :
		{
			SET_BIT(GICR,INT0);
 1b0:	ab e5       	ldi	r26, 0x5B	; 91
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	eb e5       	ldi	r30, 0x5B	; 91
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 64       	ori	r24, 0x40	; 64
 1bc:	8c 93       	st	X, r24
 1be:	3d c0       	rjmp	.+122    	; 0x23a <GENERAL_INT_CONTROL+0xfa>
	}
	break;
	//int1
	case GENERAL_INT1 :
	{
		switch (enable)
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	28 2f       	mov	r18, r24
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	3e 83       	std	Y+6, r19	; 0x06
 1c8:	2d 83       	std	Y+5, r18	; 0x05
 1ca:	8d 81       	ldd	r24, Y+5	; 0x05
 1cc:	9e 81       	ldd	r25, Y+6	; 0x06
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	31 f0       	breq	.+12     	; 0x1de <GENERAL_INT_CONTROL+0x9e>
 1d2:	2d 81       	ldd	r18, Y+5	; 0x05
 1d4:	3e 81       	ldd	r19, Y+6	; 0x06
 1d6:	21 30       	cpi	r18, 0x01	; 1
 1d8:	31 05       	cpc	r19, r1
 1da:	49 f0       	breq	.+18     	; 0x1ee <GENERAL_INT_CONTROL+0xae>
 1dc:	2e c0       	rjmp	.+92     	; 0x23a <GENERAL_INT_CONTROL+0xfa>
		{
		case GICR_DISABLE :
		{
			CLR_BIT(GICR,INT1);
 1de:	ab e5       	ldi	r26, 0x5B	; 91
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	eb e5       	ldi	r30, 0x5B	; 91
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	8f 77       	andi	r24, 0x7F	; 127
 1ea:	8c 93       	st	X, r24
 1ec:	26 c0       	rjmp	.+76     	; 0x23a <GENERAL_INT_CONTROL+0xfa>
		}
		break;
		case GICR_ENABLE :
		{
			SET_BIT(GICR,INT1);
 1ee:	ab e5       	ldi	r26, 0x5B	; 91
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	eb e5       	ldi	r30, 0x5B	; 91
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	8c 93       	st	X, r24
 1fc:	1e c0       	rjmp	.+60     	; 0x23a <GENERAL_INT_CONTROL+0xfa>
	}
	break;
	//int2
	case GENERAL_INT2 :
	{
		switch (enable)
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	28 2f       	mov	r18, r24
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	3c 83       	std	Y+4, r19	; 0x04
 206:	2b 83       	std	Y+3, r18	; 0x03
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	9c 81       	ldd	r25, Y+4	; 0x04
 20c:	00 97       	sbiw	r24, 0x00	; 0
 20e:	31 f0       	breq	.+12     	; 0x21c <GENERAL_INT_CONTROL+0xdc>
 210:	2b 81       	ldd	r18, Y+3	; 0x03
 212:	3c 81       	ldd	r19, Y+4	; 0x04
 214:	21 30       	cpi	r18, 0x01	; 1
 216:	31 05       	cpc	r19, r1
 218:	49 f0       	breq	.+18     	; 0x22c <GENERAL_INT_CONTROL+0xec>
 21a:	0f c0       	rjmp	.+30     	; 0x23a <GENERAL_INT_CONTROL+0xfa>
		{
		case GICR_DISABLE :
		{
			CLR_BIT(GICR,INT2);
 21c:	ab e5       	ldi	r26, 0x5B	; 91
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	eb e5       	ldi	r30, 0x5B	; 91
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	8f 7d       	andi	r24, 0xDF	; 223
 228:	8c 93       	st	X, r24
 22a:	07 c0       	rjmp	.+14     	; 0x23a <GENERAL_INT_CONTROL+0xfa>
		}
		break;
		case GICR_ENABLE :
		{
			SET_BIT(GICR,INT2);
 22c:	ab e5       	ldi	r26, 0x5B	; 91
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	eb e5       	ldi	r30, 0x5B	; 91
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	80 62       	ori	r24, 0x20	; 32
 238:	8c 93       	st	X, r24
	}
	break;
	}


}
 23a:	2b 96       	adiw	r28, 0x0b	; 11
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	cf 91       	pop	r28
 248:	df 91       	pop	r29
 24a:	08 95       	ret

0000024c <EXT_INT_SENSE_CONTROL>:
/*******************************************************************************************/
StdReturn EXT_INT_SENSE_CONTROL (GENERAL_INT_CONTROL_t INT, EXT_INT_SENSE_CONTROL_t sense)

{
 24c:	df 93       	push	r29
 24e:	cf 93       	push	r28
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	2b 97       	sbiw	r28, 0x0b	; 11
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	de bf       	out	0x3e, r29	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	cd bf       	out	0x3d, r28	; 61
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	6a 83       	std	Y+2, r22	; 0x02
	switch (INT)
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	28 2f       	mov	r18, r24
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	3a 87       	std	Y+10, r19	; 0x0a
 26c:	29 87       	std	Y+9, r18	; 0x09
 26e:	89 85       	ldd	r24, Y+9	; 0x09
 270:	9a 85       	ldd	r25, Y+10	; 0x0a
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	91 05       	cpc	r25, r1
 276:	c1 f1       	breq	.+112    	; 0x2e8 <EXT_INT_SENSE_CONTROL+0x9c>
 278:	29 85       	ldd	r18, Y+9	; 0x09
 27a:	3a 85       	ldd	r19, Y+10	; 0x0a
 27c:	22 30       	cpi	r18, 0x02	; 2
 27e:	31 05       	cpc	r19, r1
 280:	09 f4       	brne	.+2      	; 0x284 <EXT_INT_SENSE_CONTROL+0x38>
 282:	5e c0       	rjmp	.+188    	; 0x340 <EXT_INT_SENSE_CONTROL+0xf4>
 284:	89 85       	ldd	r24, Y+9	; 0x09
 286:	9a 85       	ldd	r25, Y+10	; 0x0a
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	09 f0       	breq	.+2      	; 0x28e <EXT_INT_SENSE_CONTROL+0x42>
 28c:	76 c0       	rjmp	.+236    	; 0x37a <EXT_INT_SENSE_CONTROL+0x12e>
	{
	//int0
	case GENERAL_INT0 :
	{
		switch (sense)
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	28 2f       	mov	r18, r24
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	38 87       	std	Y+8, r19	; 0x08
 296:	2f 83       	std	Y+7, r18	; 0x07
 298:	8f 81       	ldd	r24, Y+7	; 0x07
 29a:	98 85       	ldd	r25, Y+8	; 0x08
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	a9 f0       	breq	.+42     	; 0x2ca <EXT_INT_SENSE_CONTROL+0x7e>
 2a0:	2f 81       	ldd	r18, Y+7	; 0x07
 2a2:	38 85       	ldd	r19, Y+8	; 0x08
 2a4:	21 30       	cpi	r18, 0x01	; 1
 2a6:	31 05       	cpc	r19, r1
 2a8:	09 f0       	breq	.+2      	; 0x2ac <EXT_INT_SENSE_CONTROL+0x60>
 2aa:	67 c0       	rjmp	.+206    	; 0x37a <EXT_INT_SENSE_CONTROL+0x12e>
		{
		case INT_RISING :
		{
			SET_BIT(MCUCR,ISC00);
 2ac:	a5 e5       	ldi	r26, 0x55	; 85
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	e5 e5       	ldi	r30, 0x55	; 85
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
 2ba:	a5 e5       	ldi	r26, 0x55	; 85
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	e5 e5       	ldi	r30, 0x55	; 85
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	82 60       	ori	r24, 0x02	; 2
 2c6:	8c 93       	st	X, r24
 2c8:	58 c0       	rjmp	.+176    	; 0x37a <EXT_INT_SENSE_CONTROL+0x12e>
		}break;

		case INT_FALLING :
		{
			CLR_BIT(MCUCR,ISC00);
 2ca:	a5 e5       	ldi	r26, 0x55	; 85
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	e5 e5       	ldi	r30, 0x55	; 85
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	8e 7f       	andi	r24, 0xFE	; 254
 2d6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
 2d8:	a5 e5       	ldi	r26, 0x55	; 85
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	e5 e5       	ldi	r30, 0x55	; 85
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	8c 93       	st	X, r24
 2e6:	49 c0       	rjmp	.+146    	; 0x37a <EXT_INT_SENSE_CONTROL+0x12e>
	}break;

	//int1
	case GENERAL_INT1 :
	{
		switch (sense)
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	3e 83       	std	Y+6, r19	; 0x06
 2f0:	2d 83       	std	Y+5, r18	; 0x05
 2f2:	8d 81       	ldd	r24, Y+5	; 0x05
 2f4:	9e 81       	ldd	r25, Y+6	; 0x06
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	a1 f0       	breq	.+40     	; 0x322 <EXT_INT_SENSE_CONTROL+0xd6>
 2fa:	2d 81       	ldd	r18, Y+5	; 0x05
 2fc:	3e 81       	ldd	r19, Y+6	; 0x06
 2fe:	21 30       	cpi	r18, 0x01	; 1
 300:	31 05       	cpc	r19, r1
 302:	d9 f5       	brne	.+118    	; 0x37a <EXT_INT_SENSE_CONTROL+0x12e>
		{
		case INT_RISING :
		{
			SET_BIT(MCUCR,ISC10);
 304:	a5 e5       	ldi	r26, 0x55	; 85
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	e5 e5       	ldi	r30, 0x55	; 85
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	84 60       	ori	r24, 0x04	; 4
 310:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
 312:	a5 e5       	ldi	r26, 0x55	; 85
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	e5 e5       	ldi	r30, 0x55	; 85
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	88 60       	ori	r24, 0x08	; 8
 31e:	8c 93       	st	X, r24
 320:	2c c0       	rjmp	.+88     	; 0x37a <EXT_INT_SENSE_CONTROL+0x12e>
		}break;

		case INT_FALLING :
		{
			CLR_BIT(MCUCR,ISC10);
 322:	a5 e5       	ldi	r26, 0x55	; 85
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	e5 e5       	ldi	r30, 0x55	; 85
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	8b 7f       	andi	r24, 0xFB	; 251
 32e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
 330:	a5 e5       	ldi	r26, 0x55	; 85
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	e5 e5       	ldi	r30, 0x55	; 85
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	88 60       	ori	r24, 0x08	; 8
 33c:	8c 93       	st	X, r24
 33e:	1d c0       	rjmp	.+58     	; 0x37a <EXT_INT_SENSE_CONTROL+0x12e>
	}break;

	//int2
	case GENERAL_INT2 :
	{
		switch (sense)
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	28 2f       	mov	r18, r24
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	3c 83       	std	Y+4, r19	; 0x04
 348:	2b 83       	std	Y+3, r18	; 0x03
 34a:	8b 81       	ldd	r24, Y+3	; 0x03
 34c:	9c 81       	ldd	r25, Y+4	; 0x04
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	69 f0       	breq	.+26     	; 0x36c <EXT_INT_SENSE_CONTROL+0x120>
 352:	2b 81       	ldd	r18, Y+3	; 0x03
 354:	3c 81       	ldd	r19, Y+4	; 0x04
 356:	21 30       	cpi	r18, 0x01	; 1
 358:	31 05       	cpc	r19, r1
 35a:	79 f4       	brne	.+30     	; 0x37a <EXT_INT_SENSE_CONTROL+0x12e>
		{
		case INT_RISING :
		{
			SET_BIT(MCUCSR,ISC2);
 35c:	a4 e5       	ldi	r26, 0x54	; 84
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	e4 e5       	ldi	r30, 0x54	; 84
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	80 64       	ori	r24, 0x40	; 64
 368:	8c 93       	st	X, r24
 36a:	07 c0       	rjmp	.+14     	; 0x37a <EXT_INT_SENSE_CONTROL+0x12e>

		}break;

		case INT_FALLING :
		{
			CLR_BIT(MCUCSR,ISC2);
 36c:	a4 e5       	ldi	r26, 0x54	; 84
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	e4 e5       	ldi	r30, 0x54	; 84
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	8f 7b       	andi	r24, 0xBF	; 191
 378:	8c 93       	st	X, r24



	}

}
 37a:	2b 96       	adiw	r28, 0x0b	; 11
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	de bf       	out	0x3e, r29	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	cd bf       	out	0x3d, r28	; 61
 386:	cf 91       	pop	r28
 388:	df 91       	pop	r29
 38a:	08 95       	ret

0000038c <EXT_INT_CLEAR_FLAG>:
/*******************************************************************************************/

StdReturn EXT_INT_CLEAR_FLAG (GENERAL_INT_CONTROL_t INT)
{
 38c:	df 93       	push	r29
 38e:	cf 93       	push	r28
 390:	00 d0       	rcall	.+0      	; 0x392 <EXT_INT_CLEAR_FLAG+0x6>
 392:	00 d0       	rcall	.+0      	; 0x394 <EXT_INT_CLEAR_FLAG+0x8>
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	89 83       	std	Y+1, r24	; 0x01
	switch (INT)
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	28 2f       	mov	r18, r24
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	3b 83       	std	Y+3, r19	; 0x03
 3a2:	2a 83       	std	Y+2, r18	; 0x02
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	9b 81       	ldd	r25, Y+3	; 0x03
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	91 05       	cpc	r25, r1
 3ac:	89 f0       	breq	.+34     	; 0x3d0 <EXT_INT_CLEAR_FLAG+0x44>
 3ae:	2a 81       	ldd	r18, Y+2	; 0x02
 3b0:	3b 81       	ldd	r19, Y+3	; 0x03
 3b2:	22 30       	cpi	r18, 0x02	; 2
 3b4:	31 05       	cpc	r19, r1
 3b6:	a1 f0       	breq	.+40     	; 0x3e0 <EXT_INT_CLEAR_FLAG+0x54>
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	9b 81       	ldd	r25, Y+3	; 0x03
 3bc:	00 97       	sbiw	r24, 0x00	; 0
 3be:	b9 f4       	brne	.+46     	; 0x3ee <EXT_INT_CLEAR_FLAG+0x62>
	{
	case GENERAL_INT0 :
	{
		SET_BIT(GIFR,INTF0);
 3c0:	aa e5       	ldi	r26, 0x5A	; 90
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	ea e5       	ldi	r30, 0x5A	; 90
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	80 64       	ori	r24, 0x40	; 64
 3cc:	8c 93       	st	X, r24
 3ce:	0f c0       	rjmp	.+30     	; 0x3ee <EXT_INT_CLEAR_FLAG+0x62>
	}break;

	case GENERAL_INT1 :
	{
		SET_BIT(GIFR,INTF1);
 3d0:	aa e5       	ldi	r26, 0x5A	; 90
 3d2:	b0 e0       	ldi	r27, 0x00	; 0
 3d4:	ea e5       	ldi	r30, 0x5A	; 90
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	80 68       	ori	r24, 0x80	; 128
 3dc:	8c 93       	st	X, r24
 3de:	07 c0       	rjmp	.+14     	; 0x3ee <EXT_INT_CLEAR_FLAG+0x62>
	}break;
	case GENERAL_INT2 :
	{
		SET_BIT(GIFR,INTF2);
 3e0:	aa e5       	ldi	r26, 0x5A	; 90
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	ea e5       	ldi	r30, 0x5A	; 90
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	80 62       	ori	r24, 0x20	; 32
 3ec:	8c 93       	st	X, r24
	}break;
	}
}
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	cf 91       	pop	r28
 3f8:	df 91       	pop	r29
 3fa:	08 95       	ret

000003fc <INT0_Callback_Function>:
/*******************************************************************************************/
//callback int0
StdReturn INT0_Callback_Function(void(*Fptr0)(void))
{
 3fc:	df 93       	push	r29
 3fe:	cf 93       	push	r28
 400:	00 d0       	rcall	.+0      	; 0x402 <INT0_Callback_Function+0x6>
 402:	0f 92       	push	r0
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	9a 83       	std	Y+2, r25	; 0x02
 40a:	89 83       	std	Y+1, r24	; 0x01
	INT0_Func_Address=&Fptr0;
 40c:	ce 01       	movw	r24, r28
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	90 93 61 00 	sts	0x0061, r25
 414:	80 93 60 00 	sts	0x0060, r24

}
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	cf 91       	pop	r28
 420:	df 91       	pop	r29
 422:	08 95       	ret

00000424 <INT1_Callback_Function>:
}*/
/*******************************************************************************************/
//callback int 1

StdReturn INT1_Callback_Function(void(*Fptr1)(void))
{
 424:	df 93       	push	r29
 426:	cf 93       	push	r28
 428:	00 d0       	rcall	.+0      	; 0x42a <INT1_Callback_Function+0x6>
 42a:	0f 92       	push	r0
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	9a 83       	std	Y+2, r25	; 0x02
 432:	89 83       	std	Y+1, r24	; 0x01
	INT1_Func_Address=&Fptr1;
 434:	ce 01       	movw	r24, r28
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	90 93 63 00 	sts	0x0063, r25
 43c:	80 93 62 00 	sts	0x0062, r24

}
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	cf 91       	pop	r28
 448:	df 91       	pop	r29
 44a:	08 95       	ret

0000044c <__vector_2>:
void __vector_2(void)__attribute__((signal));
void __vector_2(void)
{
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
 46e:	df 93       	push	r29
 470:	cf 93       	push	r28
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
	INT1_Func_Address();
 476:	e0 91 62 00 	lds	r30, 0x0062
 47a:	f0 91 63 00 	lds	r31, 0x0063
 47e:	09 95       	icall
}
 480:	cf 91       	pop	r28
 482:	df 91       	pop	r29
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <INT2_Callback_Function>:
/*******************************************************************************************/
//callback int 2

StdReturn INT2_Callback_Function(void(*Fptr2)(void))
{
 4a6:	df 93       	push	r29
 4a8:	cf 93       	push	r28
 4aa:	00 d0       	rcall	.+0      	; 0x4ac <INT2_Callback_Function+0x6>
 4ac:	0f 92       	push	r0
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	9a 83       	std	Y+2, r25	; 0x02
 4b4:	89 83       	std	Y+1, r24	; 0x01
	INT2_Func_Address=&Fptr2;
 4b6:	ce 01       	movw	r24, r28
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	90 93 65 00 	sts	0x0065, r25
 4be:	80 93 64 00 	sts	0x0064, r24

}
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	cf 91       	pop	r28
 4ca:	df 91       	pop	r29
 4cc:	08 95       	ret

000004ce <__vector_3>:
void __vector_3(void)__attribute__((signal));
void __vector_3(void)
{
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	2f 93       	push	r18
 4da:	3f 93       	push	r19
 4dc:	4f 93       	push	r20
 4de:	5f 93       	push	r21
 4e0:	6f 93       	push	r22
 4e2:	7f 93       	push	r23
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
 4e8:	af 93       	push	r26
 4ea:	bf 93       	push	r27
 4ec:	ef 93       	push	r30
 4ee:	ff 93       	push	r31
 4f0:	df 93       	push	r29
 4f2:	cf 93       	push	r28
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
	INT2_Func_Address();
 4f8:	e0 91 64 00 	lds	r30, 0x0064
 4fc:	f0 91 65 00 	lds	r31, 0x0065
 500:	09 95       	icall
}
 502:	cf 91       	pop	r28
 504:	df 91       	pop	r29
 506:	ff 91       	pop	r31
 508:	ef 91       	pop	r30
 50a:	bf 91       	pop	r27
 50c:	af 91       	pop	r26
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	7f 91       	pop	r23
 514:	6f 91       	pop	r22
 516:	5f 91       	pop	r21
 518:	4f 91       	pop	r20
 51a:	3f 91       	pop	r19
 51c:	2f 91       	pop	r18
 51e:	0f 90       	pop	r0
 520:	0f be       	out	0x3f, r0	; 63
 522:	0f 90       	pop	r0
 524:	1f 90       	pop	r1
 526:	18 95       	reti

00000528 <DIO_u8SetPinDirection>:
#include "DIO_private.h"
#include "DIO_config.h"
//function to set the pin direction , to be input or output . we took 3 arg 
//which port ,which pin ,direction ip or op
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
 528:	df 93       	push	r29
 52a:	cf 93       	push	r28
 52c:	cd b7       	in	r28, 0x3d	; 61
 52e:	de b7       	in	r29, 0x3e	; 62
 530:	28 97       	sbiw	r28, 0x08	; 8
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	f8 94       	cli
 536:	de bf       	out	0x3e, r29	; 62
 538:	0f be       	out	0x3f, r0	; 63
 53a:	cd bf       	out	0x3d, r28	; 61
 53c:	8a 83       	std	Y+2, r24	; 0x02
 53e:	6b 83       	std	Y+3, r22	; 0x03
 540:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState=0; //seting local error value with 0
 542:	19 82       	std	Y+1, r1	; 0x01

    if(Copy_u8Pin<=DIO_u8PIN7) //checking that the pin value dosen't exceed 7
 544:	8b 81       	ldd	r24, Y+3	; 0x03
 546:	88 30       	cpi	r24, 0x08	; 8
 548:	08 f0       	brcs	.+2      	; 0x54c <DIO_u8SetPinDirection+0x24>
 54a:	f4 c0       	rjmp	.+488    	; 0x734 <DIO_u8SetPinDirection+0x20c>
    {

        //we have two options for the direction of pin to be  input or output
        if (Copy_u8Direction==DIO_u8PIN_INPUT) //for the input pin direction
 54c:	8c 81       	ldd	r24, Y+4	; 0x04
 54e:	88 23       	and	r24, r24
 550:	09 f0       	breq	.+2      	; 0x554 <DIO_u8SetPinDirection+0x2c>
 552:	77 c0       	rjmp	.+238    	; 0x642 <DIO_u8SetPinDirection+0x11a>
        {
         switch (Copy_u8Port) //we switch between the 4 port cases to clear bit
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	28 2f       	mov	r18, r24
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	38 87       	std	Y+8, r19	; 0x08
 55c:	2f 83       	std	Y+7, r18	; 0x07
 55e:	8f 81       	ldd	r24, Y+7	; 0x07
 560:	98 85       	ldd	r25, Y+8	; 0x08
 562:	81 30       	cpi	r24, 0x01	; 1
 564:	91 05       	cpc	r25, r1
 566:	59 f1       	breq	.+86     	; 0x5be <DIO_u8SetPinDirection+0x96>
 568:	2f 81       	ldd	r18, Y+7	; 0x07
 56a:	38 85       	ldd	r19, Y+8	; 0x08
 56c:	22 30       	cpi	r18, 0x02	; 2
 56e:	31 05       	cpc	r19, r1
 570:	2c f4       	brge	.+10     	; 0x57c <DIO_u8SetPinDirection+0x54>
 572:	8f 81       	ldd	r24, Y+7	; 0x07
 574:	98 85       	ldd	r25, Y+8	; 0x08
 576:	00 97       	sbiw	r24, 0x00	; 0
 578:	69 f0       	breq	.+26     	; 0x594 <DIO_u8SetPinDirection+0x6c>
 57a:	60 c0       	rjmp	.+192    	; 0x63c <DIO_u8SetPinDirection+0x114>
 57c:	2f 81       	ldd	r18, Y+7	; 0x07
 57e:	38 85       	ldd	r19, Y+8	; 0x08
 580:	22 30       	cpi	r18, 0x02	; 2
 582:	31 05       	cpc	r19, r1
 584:	89 f1       	breq	.+98     	; 0x5e8 <DIO_u8SetPinDirection+0xc0>
 586:	8f 81       	ldd	r24, Y+7	; 0x07
 588:	98 85       	ldd	r25, Y+8	; 0x08
 58a:	83 30       	cpi	r24, 0x03	; 3
 58c:	91 05       	cpc	r25, r1
 58e:	09 f4       	brne	.+2      	; 0x592 <DIO_u8SetPinDirection+0x6a>
 590:	40 c0       	rjmp	.+128    	; 0x612 <DIO_u8SetPinDirection+0xea>
 592:	54 c0       	rjmp	.+168    	; 0x63c <DIO_u8SetPinDirection+0x114>
         {
             //if he chose dio_u8portA we use clr_bit func which take 2 arg ,the port and the pin number whic we take from him at the first setpindirection func
             case DIO_u8PORTA:CLR_BIT(DDRA,Copy_u8Pin);break;
 594:	aa e3       	ldi	r26, 0x3A	; 58
 596:	b0 e0       	ldi	r27, 0x00	; 0
 598:	ea e3       	ldi	r30, 0x3A	; 58
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	80 81       	ld	r24, Z
 59e:	48 2f       	mov	r20, r24
 5a0:	8b 81       	ldd	r24, Y+3	; 0x03
 5a2:	28 2f       	mov	r18, r24
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 2e       	mov	r0, r18
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_u8SetPinDirection+0x8a>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	0a 94       	dec	r0
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_u8SetPinDirection+0x86>
 5b6:	80 95       	com	r24
 5b8:	84 23       	and	r24, r20
 5ba:	8c 93       	st	X, r24
 5bc:	bd c0       	rjmp	.+378    	; 0x738 <DIO_u8SetPinDirection+0x210>
             case DIO_u8PORTB:CLR_BIT(DDRB,Copy_u8Pin);break;
 5be:	a7 e3       	ldi	r26, 0x37	; 55
 5c0:	b0 e0       	ldi	r27, 0x00	; 0
 5c2:	e7 e3       	ldi	r30, 0x37	; 55
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	48 2f       	mov	r20, r24
 5ca:	8b 81       	ldd	r24, Y+3	; 0x03
 5cc:	28 2f       	mov	r18, r24
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 2e       	mov	r0, r18
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_u8SetPinDirection+0xb4>
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	0a 94       	dec	r0
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_u8SetPinDirection+0xb0>
 5e0:	80 95       	com	r24
 5e2:	84 23       	and	r24, r20
 5e4:	8c 93       	st	X, r24
 5e6:	a8 c0       	rjmp	.+336    	; 0x738 <DIO_u8SetPinDirection+0x210>
             case DIO_u8PORTC:CLR_BIT(DDRC,Copy_u8Pin);break;
 5e8:	a4 e3       	ldi	r26, 0x34	; 52
 5ea:	b0 e0       	ldi	r27, 0x00	; 0
 5ec:	e4 e3       	ldi	r30, 0x34	; 52
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	48 2f       	mov	r20, r24
 5f4:	8b 81       	ldd	r24, Y+3	; 0x03
 5f6:	28 2f       	mov	r18, r24
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 2e       	mov	r0, r18
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_u8SetPinDirection+0xde>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	0a 94       	dec	r0
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_u8SetPinDirection+0xda>
 60a:	80 95       	com	r24
 60c:	84 23       	and	r24, r20
 60e:	8c 93       	st	X, r24
 610:	93 c0       	rjmp	.+294    	; 0x738 <DIO_u8SetPinDirection+0x210>
             case DIO_u8PORTD:CLR_BIT(DDRD,Copy_u8Pin);break;
 612:	a1 e3       	ldi	r26, 0x31	; 49
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	e1 e3       	ldi	r30, 0x31	; 49
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	48 2f       	mov	r20, r24
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	28 2f       	mov	r18, r24
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 2e       	mov	r0, r18
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_u8SetPinDirection+0x108>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	0a 94       	dec	r0
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_u8SetPinDirection+0x104>
 634:	80 95       	com	r24
 636:	84 23       	and	r24, r20
 638:	8c 93       	st	X, r24
 63a:	7e c0       	rjmp	.+252    	; 0x738 <DIO_u8SetPinDirection+0x210>
             default:Local_u8ErrorState=1; //return a local error with 1 if chose wrong port
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	89 83       	std	Y+1, r24	; 0x01
 640:	7b c0       	rjmp	.+246    	; 0x738 <DIO_u8SetPinDirection+0x210>
         }   
        }
        else if (Copy_u8Direction==DIO_u8PIN_OUTPUT) //for the outout pin
 642:	8c 81       	ldd	r24, Y+4	; 0x04
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	09 f0       	breq	.+2      	; 0x64a <DIO_u8SetPinDirection+0x122>
 648:	72 c0       	rjmp	.+228    	; 0x72e <DIO_u8SetPinDirection+0x206>
        {
            switch (Copy_u8Port)
 64a:	8a 81       	ldd	r24, Y+2	; 0x02
 64c:	28 2f       	mov	r18, r24
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	3e 83       	std	Y+6, r19	; 0x06
 652:	2d 83       	std	Y+5, r18	; 0x05
 654:	8d 81       	ldd	r24, Y+5	; 0x05
 656:	9e 81       	ldd	r25, Y+6	; 0x06
 658:	81 30       	cpi	r24, 0x01	; 1
 65a:	91 05       	cpc	r25, r1
 65c:	49 f1       	breq	.+82     	; 0x6b0 <DIO_u8SetPinDirection+0x188>
 65e:	2d 81       	ldd	r18, Y+5	; 0x05
 660:	3e 81       	ldd	r19, Y+6	; 0x06
 662:	22 30       	cpi	r18, 0x02	; 2
 664:	31 05       	cpc	r19, r1
 666:	2c f4       	brge	.+10     	; 0x672 <DIO_u8SetPinDirection+0x14a>
 668:	8d 81       	ldd	r24, Y+5	; 0x05
 66a:	9e 81       	ldd	r25, Y+6	; 0x06
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	61 f0       	breq	.+24     	; 0x688 <DIO_u8SetPinDirection+0x160>
 670:	5b c0       	rjmp	.+182    	; 0x728 <DIO_u8SetPinDirection+0x200>
 672:	2d 81       	ldd	r18, Y+5	; 0x05
 674:	3e 81       	ldd	r19, Y+6	; 0x06
 676:	22 30       	cpi	r18, 0x02	; 2
 678:	31 05       	cpc	r19, r1
 67a:	71 f1       	breq	.+92     	; 0x6d8 <DIO_u8SetPinDirection+0x1b0>
 67c:	8d 81       	ldd	r24, Y+5	; 0x05
 67e:	9e 81       	ldd	r25, Y+6	; 0x06
 680:	83 30       	cpi	r24, 0x03	; 3
 682:	91 05       	cpc	r25, r1
 684:	e9 f1       	breq	.+122    	; 0x700 <DIO_u8SetPinDirection+0x1d8>
 686:	50 c0       	rjmp	.+160    	; 0x728 <DIO_u8SetPinDirection+0x200>
            {
             //same thing but we set the pin to make it output
             case DIO_u8PORTA:SET_BIT(DDRA,Copy_u8Pin);break;
 688:	aa e3       	ldi	r26, 0x3A	; 58
 68a:	b0 e0       	ldi	r27, 0x00	; 0
 68c:	ea e3       	ldi	r30, 0x3A	; 58
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	48 2f       	mov	r20, r24
 694:	8b 81       	ldd	r24, Y+3	; 0x03
 696:	28 2f       	mov	r18, r24
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	02 2e       	mov	r0, r18
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_u8SetPinDirection+0x17e>
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	0a 94       	dec	r0
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_u8SetPinDirection+0x17a>
 6aa:	84 2b       	or	r24, r20
 6ac:	8c 93       	st	X, r24
 6ae:	44 c0       	rjmp	.+136    	; 0x738 <DIO_u8SetPinDirection+0x210>
             case DIO_u8PORTB:SET_BIT(DDRB,Copy_u8Pin);break;
 6b0:	a7 e3       	ldi	r26, 0x37	; 55
 6b2:	b0 e0       	ldi	r27, 0x00	; 0
 6b4:	e7 e3       	ldi	r30, 0x37	; 55
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	48 2f       	mov	r20, r24
 6bc:	8b 81       	ldd	r24, Y+3	; 0x03
 6be:	28 2f       	mov	r18, r24
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 2e       	mov	r0, r18
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_u8SetPinDirection+0x1a6>
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	0a 94       	dec	r0
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <DIO_u8SetPinDirection+0x1a2>
 6d2:	84 2b       	or	r24, r20
 6d4:	8c 93       	st	X, r24
 6d6:	30 c0       	rjmp	.+96     	; 0x738 <DIO_u8SetPinDirection+0x210>
             case DIO_u8PORTC:SET_BIT(DDRC,Copy_u8Pin);break;
 6d8:	a4 e3       	ldi	r26, 0x34	; 52
 6da:	b0 e0       	ldi	r27, 0x00	; 0
 6dc:	e4 e3       	ldi	r30, 0x34	; 52
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	80 81       	ld	r24, Z
 6e2:	48 2f       	mov	r20, r24
 6e4:	8b 81       	ldd	r24, Y+3	; 0x03
 6e6:	28 2f       	mov	r18, r24
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	02 2e       	mov	r0, r18
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_u8SetPinDirection+0x1ce>
 6f2:	88 0f       	add	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	0a 94       	dec	r0
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_u8SetPinDirection+0x1ca>
 6fa:	84 2b       	or	r24, r20
 6fc:	8c 93       	st	X, r24
 6fe:	1c c0       	rjmp	.+56     	; 0x738 <DIO_u8SetPinDirection+0x210>
             case DIO_u8PORTD:SET_BIT(DDRD,Copy_u8Pin);break;
 700:	a1 e3       	ldi	r26, 0x31	; 49
 702:	b0 e0       	ldi	r27, 0x00	; 0
 704:	e1 e3       	ldi	r30, 0x31	; 49
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	48 2f       	mov	r20, r24
 70c:	8b 81       	ldd	r24, Y+3	; 0x03
 70e:	28 2f       	mov	r18, r24
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	02 2e       	mov	r0, r18
 718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_u8SetPinDirection+0x1f6>
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	0a 94       	dec	r0
 720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_u8SetPinDirection+0x1f2>
 722:	84 2b       	or	r24, r20
 724:	8c 93       	st	X, r24
 726:	08 c0       	rjmp	.+16     	; 0x738 <DIO_u8SetPinDirection+0x210>
             default:Local_u8ErrorState=1;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	89 83       	std	Y+1, r24	; 0x01
 72c:	05 c0       	rjmp	.+10     	; 0x738 <DIO_u8SetPinDirection+0x210>
            }
        }
         else 
        {
        Local_u8ErrorState=1; //error if he didn't chose ip or op
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	89 83       	std	Y+1, r24	; 0x01
 732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_u8SetPinDirection+0x210>
        }
    }

    else 
    {
        Local_u8ErrorState=1; //error if he chose more than pin7
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	89 83       	std	Y+1, r24	; 0x01
    }
    
    return Local_u8ErrorState; 
 738:	89 81       	ldd	r24, Y+1	; 0x01
	
}
 73a:	28 96       	adiw	r28, 0x08	; 8
 73c:	0f b6       	in	r0, 0x3f	; 63
 73e:	f8 94       	cli
 740:	de bf       	out	0x3e, r29	; 62
 742:	0f be       	out	0x3f, r0	; 63
 744:	cd bf       	out	0x3d, r28	; 61
 746:	cf 91       	pop	r28
 748:	df 91       	pop	r29
 74a:	08 95       	ret

0000074c <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8Port,  u8 Copy_u8Direction)//func to set port direction ip or op
{
 74c:	df 93       	push	r29
 74e:	cf 93       	push	r28
 750:	00 d0       	rcall	.+0      	; 0x752 <DIO_u8SetPortDirection+0x6>
 752:	00 d0       	rcall	.+0      	; 0x754 <DIO_u8SetPortDirection+0x8>
 754:	0f 92       	push	r0
 756:	cd b7       	in	r28, 0x3d	; 61
 758:	de b7       	in	r29, 0x3e	; 62
 75a:	8a 83       	std	Y+2, r24	; 0x02
 75c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 75e:	19 82       	std	Y+1, r1	; 0x01

    switch (Copy_u8Port)
 760:	8a 81       	ldd	r24, Y+2	; 0x02
 762:	28 2f       	mov	r18, r24
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	3d 83       	std	Y+5, r19	; 0x05
 768:	2c 83       	std	Y+4, r18	; 0x04
 76a:	8c 81       	ldd	r24, Y+4	; 0x04
 76c:	9d 81       	ldd	r25, Y+5	; 0x05
 76e:	81 30       	cpi	r24, 0x01	; 1
 770:	91 05       	cpc	r25, r1
 772:	d1 f0       	breq	.+52     	; 0x7a8 <DIO_u8SetPortDirection+0x5c>
 774:	2c 81       	ldd	r18, Y+4	; 0x04
 776:	3d 81       	ldd	r19, Y+5	; 0x05
 778:	22 30       	cpi	r18, 0x02	; 2
 77a:	31 05       	cpc	r19, r1
 77c:	2c f4       	brge	.+10     	; 0x788 <DIO_u8SetPortDirection+0x3c>
 77e:	8c 81       	ldd	r24, Y+4	; 0x04
 780:	9d 81       	ldd	r25, Y+5	; 0x05
 782:	00 97       	sbiw	r24, 0x00	; 0
 784:	61 f0       	breq	.+24     	; 0x79e <DIO_u8SetPortDirection+0x52>
 786:	1f c0       	rjmp	.+62     	; 0x7c6 <DIO_u8SetPortDirection+0x7a>
 788:	2c 81       	ldd	r18, Y+4	; 0x04
 78a:	3d 81       	ldd	r19, Y+5	; 0x05
 78c:	22 30       	cpi	r18, 0x02	; 2
 78e:	31 05       	cpc	r19, r1
 790:	81 f0       	breq	.+32     	; 0x7b2 <DIO_u8SetPortDirection+0x66>
 792:	8c 81       	ldd	r24, Y+4	; 0x04
 794:	9d 81       	ldd	r25, Y+5	; 0x05
 796:	83 30       	cpi	r24, 0x03	; 3
 798:	91 05       	cpc	r25, r1
 79a:	81 f0       	breq	.+32     	; 0x7bc <DIO_u8SetPortDirection+0x70>
 79c:	14 c0       	rjmp	.+40     	; 0x7c6 <DIO_u8SetPortDirection+0x7a>
    {
        case DIO_u8PORTA : DDRA =Copy_u8Direction;break;
 79e:	ea e3       	ldi	r30, 0x3A	; 58
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	8b 81       	ldd	r24, Y+3	; 0x03
 7a4:	80 83       	st	Z, r24
 7a6:	11 c0       	rjmp	.+34     	; 0x7ca <DIO_u8SetPortDirection+0x7e>
        case DIO_u8PORTB : DDRB =Copy_u8Direction;break;
 7a8:	e7 e3       	ldi	r30, 0x37	; 55
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	8b 81       	ldd	r24, Y+3	; 0x03
 7ae:	80 83       	st	Z, r24
 7b0:	0c c0       	rjmp	.+24     	; 0x7ca <DIO_u8SetPortDirection+0x7e>
        case DIO_u8PORTC : DDRC =Copy_u8Direction;break;
 7b2:	e4 e3       	ldi	r30, 0x34	; 52
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	8b 81       	ldd	r24, Y+3	; 0x03
 7b8:	80 83       	st	Z, r24
 7ba:	07 c0       	rjmp	.+14     	; 0x7ca <DIO_u8SetPortDirection+0x7e>
        case DIO_u8PORTD : DDRD =Copy_u8Direction;break;
 7bc:	e1 e3       	ldi	r30, 0x31	; 49
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	8b 81       	ldd	r24, Y+3	; 0x03
 7c2:	80 83       	st	Z, r24
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_u8SetPortDirection+0x7e>
        default: Local_u8ErrorState=1;
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	89 83       	std	Y+1, r24	; 0x01
    
    }
    return Local_u8ErrorState;
 7ca:	89 81       	ldd	r24, Y+1	; 0x01
}
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	0f 90       	pop	r0
 7d2:	0f 90       	pop	r0
 7d4:	0f 90       	pop	r0
 7d6:	cf 91       	pop	r28
 7d8:	df 91       	pop	r29
 7da:	08 95       	ret

000007dc <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin , u8 Copy_u8Value)
{
 7dc:	df 93       	push	r29
 7de:	cf 93       	push	r28
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
 7e4:	28 97       	sbiw	r28, 0x08	; 8
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	f8 94       	cli
 7ea:	de bf       	out	0x3e, r29	; 62
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	cd bf       	out	0x3d, r28	; 61
 7f0:	8a 83       	std	Y+2, r24	; 0x02
 7f2:	6b 83       	std	Y+3, r22	; 0x03
 7f4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 7f6:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8Pin<=DIO_u8PIN7)
 7f8:	8b 81       	ldd	r24, Y+3	; 0x03
 7fa:	88 30       	cpi	r24, 0x08	; 8
 7fc:	08 f0       	brcs	.+2      	; 0x800 <DIO_u8SetPinValue+0x24>
 7fe:	f4 c0       	rjmp	.+488    	; 0x9e8 <__stack+0x189>
    {
        if(Copy_u8Value==DIO_u8PIN_LOW)
 800:	8c 81       	ldd	r24, Y+4	; 0x04
 802:	88 23       	and	r24, r24
 804:	09 f0       	breq	.+2      	; 0x808 <DIO_u8SetPinValue+0x2c>
 806:	77 c0       	rjmp	.+238    	; 0x8f6 <__stack+0x97>
        {
            switch (Copy_u8Port)
 808:	8a 81       	ldd	r24, Y+2	; 0x02
 80a:	28 2f       	mov	r18, r24
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	38 87       	std	Y+8, r19	; 0x08
 810:	2f 83       	std	Y+7, r18	; 0x07
 812:	8f 81       	ldd	r24, Y+7	; 0x07
 814:	98 85       	ldd	r25, Y+8	; 0x08
 816:	81 30       	cpi	r24, 0x01	; 1
 818:	91 05       	cpc	r25, r1
 81a:	59 f1       	breq	.+86     	; 0x872 <__stack+0x13>
 81c:	2f 81       	ldd	r18, Y+7	; 0x07
 81e:	38 85       	ldd	r19, Y+8	; 0x08
 820:	22 30       	cpi	r18, 0x02	; 2
 822:	31 05       	cpc	r19, r1
 824:	2c f4       	brge	.+10     	; 0x830 <DIO_u8SetPinValue+0x54>
 826:	8f 81       	ldd	r24, Y+7	; 0x07
 828:	98 85       	ldd	r25, Y+8	; 0x08
 82a:	00 97       	sbiw	r24, 0x00	; 0
 82c:	69 f0       	breq	.+26     	; 0x848 <DIO_u8SetPinValue+0x6c>
 82e:	60 c0       	rjmp	.+192    	; 0x8f0 <__stack+0x91>
 830:	2f 81       	ldd	r18, Y+7	; 0x07
 832:	38 85       	ldd	r19, Y+8	; 0x08
 834:	22 30       	cpi	r18, 0x02	; 2
 836:	31 05       	cpc	r19, r1
 838:	89 f1       	breq	.+98     	; 0x89c <__stack+0x3d>
 83a:	8f 81       	ldd	r24, Y+7	; 0x07
 83c:	98 85       	ldd	r25, Y+8	; 0x08
 83e:	83 30       	cpi	r24, 0x03	; 3
 840:	91 05       	cpc	r25, r1
 842:	09 f4       	brne	.+2      	; 0x846 <DIO_u8SetPinValue+0x6a>
 844:	40 c0       	rjmp	.+128    	; 0x8c6 <__stack+0x67>
 846:	54 c0       	rjmp	.+168    	; 0x8f0 <__stack+0x91>
            {
                case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin);break;
 848:	ab e3       	ldi	r26, 0x3B	; 59
 84a:	b0 e0       	ldi	r27, 0x00	; 0
 84c:	eb e3       	ldi	r30, 0x3B	; 59
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	80 81       	ld	r24, Z
 852:	48 2f       	mov	r20, r24
 854:	8b 81       	ldd	r24, Y+3	; 0x03
 856:	28 2f       	mov	r18, r24
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	02 2e       	mov	r0, r18
 860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
 862:	88 0f       	add	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	0a 94       	dec	r0
 868:	e2 f7       	brpl	.-8      	; 0x862 <__stack+0x3>
 86a:	80 95       	com	r24
 86c:	84 23       	and	r24, r20
 86e:	8c 93       	st	X, r24
 870:	bd c0       	rjmp	.+378    	; 0x9ec <__stack+0x18d>
                case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin);break;
 872:	a8 e3       	ldi	r26, 0x38	; 56
 874:	b0 e0       	ldi	r27, 0x00	; 0
 876:	e8 e3       	ldi	r30, 0x38	; 56
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	80 81       	ld	r24, Z
 87c:	48 2f       	mov	r20, r24
 87e:	8b 81       	ldd	r24, Y+3	; 0x03
 880:	28 2f       	mov	r18, r24
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	02 2e       	mov	r0, r18
 88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
 88c:	88 0f       	add	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	0a 94       	dec	r0
 892:	e2 f7       	brpl	.-8      	; 0x88c <__stack+0x2d>
 894:	80 95       	com	r24
 896:	84 23       	and	r24, r20
 898:	8c 93       	st	X, r24
 89a:	a8 c0       	rjmp	.+336    	; 0x9ec <__stack+0x18d>
                case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin);break;
 89c:	a5 e3       	ldi	r26, 0x35	; 53
 89e:	b0 e0       	ldi	r27, 0x00	; 0
 8a0:	e5 e3       	ldi	r30, 0x35	; 53
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	80 81       	ld	r24, Z
 8a6:	48 2f       	mov	r20, r24
 8a8:	8b 81       	ldd	r24, Y+3	; 0x03
 8aa:	28 2f       	mov	r18, r24
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	02 2e       	mov	r0, r18
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	0a 94       	dec	r0
 8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <__stack+0x57>
 8be:	80 95       	com	r24
 8c0:	84 23       	and	r24, r20
 8c2:	8c 93       	st	X, r24
 8c4:	93 c0       	rjmp	.+294    	; 0x9ec <__stack+0x18d>
                case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin);break;
 8c6:	a2 e3       	ldi	r26, 0x32	; 50
 8c8:	b0 e0       	ldi	r27, 0x00	; 0
 8ca:	e2 e3       	ldi	r30, 0x32	; 50
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	80 81       	ld	r24, Z
 8d0:	48 2f       	mov	r20, r24
 8d2:	8b 81       	ldd	r24, Y+3	; 0x03
 8d4:	28 2f       	mov	r18, r24
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	02 2e       	mov	r0, r18
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <__stack+0x85>
 8e0:	88 0f       	add	r24, r24
 8e2:	99 1f       	adc	r25, r25
 8e4:	0a 94       	dec	r0
 8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <__stack+0x81>
 8e8:	80 95       	com	r24
 8ea:	84 23       	and	r24, r20
 8ec:	8c 93       	st	X, r24
 8ee:	7e c0       	rjmp	.+252    	; 0x9ec <__stack+0x18d>
                default :Local_u8ErrorState=1;break;
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	89 83       	std	Y+1, r24	; 0x01
 8f4:	7b c0       	rjmp	.+246    	; 0x9ec <__stack+0x18d>
            }
        }
        
        else if (Copy_u8Value==DIO_u8PIN_HIGH)
 8f6:	8c 81       	ldd	r24, Y+4	; 0x04
 8f8:	81 30       	cpi	r24, 0x01	; 1
 8fa:	09 f0       	breq	.+2      	; 0x8fe <__stack+0x9f>
 8fc:	72 c0       	rjmp	.+228    	; 0x9e2 <__stack+0x183>
        {
            switch (Copy_u8Port)
 8fe:	8a 81       	ldd	r24, Y+2	; 0x02
 900:	28 2f       	mov	r18, r24
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	3e 83       	std	Y+6, r19	; 0x06
 906:	2d 83       	std	Y+5, r18	; 0x05
 908:	8d 81       	ldd	r24, Y+5	; 0x05
 90a:	9e 81       	ldd	r25, Y+6	; 0x06
 90c:	81 30       	cpi	r24, 0x01	; 1
 90e:	91 05       	cpc	r25, r1
 910:	49 f1       	breq	.+82     	; 0x964 <__stack+0x105>
 912:	2d 81       	ldd	r18, Y+5	; 0x05
 914:	3e 81       	ldd	r19, Y+6	; 0x06
 916:	22 30       	cpi	r18, 0x02	; 2
 918:	31 05       	cpc	r19, r1
 91a:	2c f4       	brge	.+10     	; 0x926 <__stack+0xc7>
 91c:	8d 81       	ldd	r24, Y+5	; 0x05
 91e:	9e 81       	ldd	r25, Y+6	; 0x06
 920:	00 97       	sbiw	r24, 0x00	; 0
 922:	61 f0       	breq	.+24     	; 0x93c <__stack+0xdd>
 924:	5b c0       	rjmp	.+182    	; 0x9dc <__stack+0x17d>
 926:	2d 81       	ldd	r18, Y+5	; 0x05
 928:	3e 81       	ldd	r19, Y+6	; 0x06
 92a:	22 30       	cpi	r18, 0x02	; 2
 92c:	31 05       	cpc	r19, r1
 92e:	71 f1       	breq	.+92     	; 0x98c <__stack+0x12d>
 930:	8d 81       	ldd	r24, Y+5	; 0x05
 932:	9e 81       	ldd	r25, Y+6	; 0x06
 934:	83 30       	cpi	r24, 0x03	; 3
 936:	91 05       	cpc	r25, r1
 938:	e9 f1       	breq	.+122    	; 0x9b4 <__stack+0x155>
 93a:	50 c0       	rjmp	.+160    	; 0x9dc <__stack+0x17d>
            {
                case DIO_u8PORTA : SET_BIT (PORTA,Copy_u8Pin);break;
 93c:	ab e3       	ldi	r26, 0x3B	; 59
 93e:	b0 e0       	ldi	r27, 0x00	; 0
 940:	eb e3       	ldi	r30, 0x3B	; 59
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	80 81       	ld	r24, Z
 946:	48 2f       	mov	r20, r24
 948:	8b 81       	ldd	r24, Y+3	; 0x03
 94a:	28 2f       	mov	r18, r24
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	02 2e       	mov	r0, r18
 954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0xfb>
 956:	88 0f       	add	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	0a 94       	dec	r0
 95c:	e2 f7       	brpl	.-8      	; 0x956 <__stack+0xf7>
 95e:	84 2b       	or	r24, r20
 960:	8c 93       	st	X, r24
 962:	44 c0       	rjmp	.+136    	; 0x9ec <__stack+0x18d>
                case DIO_u8PORTB : SET_BIT (PORTB,Copy_u8Pin);break;
 964:	a8 e3       	ldi	r26, 0x38	; 56
 966:	b0 e0       	ldi	r27, 0x00	; 0
 968:	e8 e3       	ldi	r30, 0x38	; 56
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	48 2f       	mov	r20, r24
 970:	8b 81       	ldd	r24, Y+3	; 0x03
 972:	28 2f       	mov	r18, r24
 974:	30 e0       	ldi	r19, 0x00	; 0
 976:	81 e0       	ldi	r24, 0x01	; 1
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	02 2e       	mov	r0, r18
 97c:	02 c0       	rjmp	.+4      	; 0x982 <__stack+0x123>
 97e:	88 0f       	add	r24, r24
 980:	99 1f       	adc	r25, r25
 982:	0a 94       	dec	r0
 984:	e2 f7       	brpl	.-8      	; 0x97e <__stack+0x11f>
 986:	84 2b       	or	r24, r20
 988:	8c 93       	st	X, r24
 98a:	30 c0       	rjmp	.+96     	; 0x9ec <__stack+0x18d>
                case DIO_u8PORTC : SET_BIT (PORTC,Copy_u8Pin);break;
 98c:	a5 e3       	ldi	r26, 0x35	; 53
 98e:	b0 e0       	ldi	r27, 0x00	; 0
 990:	e5 e3       	ldi	r30, 0x35	; 53
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	48 2f       	mov	r20, r24
 998:	8b 81       	ldd	r24, Y+3	; 0x03
 99a:	28 2f       	mov	r18, r24
 99c:	30 e0       	ldi	r19, 0x00	; 0
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	02 2e       	mov	r0, r18
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <__stack+0x14b>
 9a6:	88 0f       	add	r24, r24
 9a8:	99 1f       	adc	r25, r25
 9aa:	0a 94       	dec	r0
 9ac:	e2 f7       	brpl	.-8      	; 0x9a6 <__stack+0x147>
 9ae:	84 2b       	or	r24, r20
 9b0:	8c 93       	st	X, r24
 9b2:	1c c0       	rjmp	.+56     	; 0x9ec <__stack+0x18d>
                case DIO_u8PORTD : SET_BIT (PORTD,Copy_u8Pin);break;
 9b4:	a2 e3       	ldi	r26, 0x32	; 50
 9b6:	b0 e0       	ldi	r27, 0x00	; 0
 9b8:	e2 e3       	ldi	r30, 0x32	; 50
 9ba:	f0 e0       	ldi	r31, 0x00	; 0
 9bc:	80 81       	ld	r24, Z
 9be:	48 2f       	mov	r20, r24
 9c0:	8b 81       	ldd	r24, Y+3	; 0x03
 9c2:	28 2f       	mov	r18, r24
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	02 2e       	mov	r0, r18
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <__stack+0x173>
 9ce:	88 0f       	add	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	0a 94       	dec	r0
 9d4:	e2 f7       	brpl	.-8      	; 0x9ce <__stack+0x16f>
 9d6:	84 2b       	or	r24, r20
 9d8:	8c 93       	st	X, r24
 9da:	08 c0       	rjmp	.+16     	; 0x9ec <__stack+0x18d>
                default:Local_u8ErrorState=1;break;
 9dc:	81 e0       	ldi	r24, 0x01	; 1
 9de:	89 83       	std	Y+1, r24	; 0x01
 9e0:	05 c0       	rjmp	.+10     	; 0x9ec <__stack+0x18d>

            }
        }
        else
        {
            Local_u8ErrorState=1;
 9e2:	81 e0       	ldi	r24, 0x01	; 1
 9e4:	89 83       	std	Y+1, r24	; 0x01
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <__stack+0x18d>
        }

    } 
    else 
    {
        Local_u8ErrorState=1;
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	89 83       	std	Y+1, r24	; 0x01
    }
    

    
    
    return Local_u8ErrorState;
 9ec:	89 81       	ldd	r24, Y+1	; 0x01
}
 9ee:	28 96       	adiw	r28, 0x08	; 8
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	f8 94       	cli
 9f4:	de bf       	out	0x3e, r29	; 62
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	cd bf       	out	0x3d, r28	; 61
 9fa:	cf 91       	pop	r28
 9fc:	df 91       	pop	r29
 9fe:	08 95       	ret

00000a00 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port,  u8 Copy_u8Value)
{
 a00:	df 93       	push	r29
 a02:	cf 93       	push	r28
 a04:	00 d0       	rcall	.+0      	; 0xa06 <DIO_u8SetPortValue+0x6>
 a06:	00 d0       	rcall	.+0      	; 0xa08 <DIO_u8SetPortValue+0x8>
 a08:	0f 92       	push	r0
 a0a:	cd b7       	in	r28, 0x3d	; 61
 a0c:	de b7       	in	r29, 0x3e	; 62
 a0e:	8a 83       	std	Y+2, r24	; 0x02
 a10:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 a12:	19 82       	std	Y+1, r1	; 0x01
    
        switch (Copy_u8Port)
 a14:	8a 81       	ldd	r24, Y+2	; 0x02
 a16:	28 2f       	mov	r18, r24
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	3d 83       	std	Y+5, r19	; 0x05
 a1c:	2c 83       	std	Y+4, r18	; 0x04
 a1e:	8c 81       	ldd	r24, Y+4	; 0x04
 a20:	9d 81       	ldd	r25, Y+5	; 0x05
 a22:	81 30       	cpi	r24, 0x01	; 1
 a24:	91 05       	cpc	r25, r1
 a26:	d1 f0       	breq	.+52     	; 0xa5c <DIO_u8SetPortValue+0x5c>
 a28:	2c 81       	ldd	r18, Y+4	; 0x04
 a2a:	3d 81       	ldd	r19, Y+5	; 0x05
 a2c:	22 30       	cpi	r18, 0x02	; 2
 a2e:	31 05       	cpc	r19, r1
 a30:	2c f4       	brge	.+10     	; 0xa3c <DIO_u8SetPortValue+0x3c>
 a32:	8c 81       	ldd	r24, Y+4	; 0x04
 a34:	9d 81       	ldd	r25, Y+5	; 0x05
 a36:	00 97       	sbiw	r24, 0x00	; 0
 a38:	61 f0       	breq	.+24     	; 0xa52 <DIO_u8SetPortValue+0x52>
 a3a:	1f c0       	rjmp	.+62     	; 0xa7a <DIO_u8SetPortValue+0x7a>
 a3c:	2c 81       	ldd	r18, Y+4	; 0x04
 a3e:	3d 81       	ldd	r19, Y+5	; 0x05
 a40:	22 30       	cpi	r18, 0x02	; 2
 a42:	31 05       	cpc	r19, r1
 a44:	81 f0       	breq	.+32     	; 0xa66 <DIO_u8SetPortValue+0x66>
 a46:	8c 81       	ldd	r24, Y+4	; 0x04
 a48:	9d 81       	ldd	r25, Y+5	; 0x05
 a4a:	83 30       	cpi	r24, 0x03	; 3
 a4c:	91 05       	cpc	r25, r1
 a4e:	81 f0       	breq	.+32     	; 0xa70 <DIO_u8SetPortValue+0x70>
 a50:	14 c0       	rjmp	.+40     	; 0xa7a <DIO_u8SetPortValue+0x7a>
    {
        case DIO_u8PORTA : PORTA =Copy_u8Value;break;
 a52:	eb e3       	ldi	r30, 0x3B	; 59
 a54:	f0 e0       	ldi	r31, 0x00	; 0
 a56:	8b 81       	ldd	r24, Y+3	; 0x03
 a58:	80 83       	st	Z, r24
 a5a:	11 c0       	rjmp	.+34     	; 0xa7e <DIO_u8SetPortValue+0x7e>
        case DIO_u8PORTB : PORTB =Copy_u8Value;break;
 a5c:	e8 e3       	ldi	r30, 0x38	; 56
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	8b 81       	ldd	r24, Y+3	; 0x03
 a62:	80 83       	st	Z, r24
 a64:	0c c0       	rjmp	.+24     	; 0xa7e <DIO_u8SetPortValue+0x7e>
        case DIO_u8PORTC : PORTC =Copy_u8Value;break;
 a66:	e5 e3       	ldi	r30, 0x35	; 53
 a68:	f0 e0       	ldi	r31, 0x00	; 0
 a6a:	8b 81       	ldd	r24, Y+3	; 0x03
 a6c:	80 83       	st	Z, r24
 a6e:	07 c0       	rjmp	.+14     	; 0xa7e <DIO_u8SetPortValue+0x7e>
        case DIO_u8PORTD : PORTD =Copy_u8Value;break;
 a70:	e2 e3       	ldi	r30, 0x32	; 50
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	8b 81       	ldd	r24, Y+3	; 0x03
 a76:	80 83       	st	Z, r24
 a78:	02 c0       	rjmp	.+4      	; 0xa7e <DIO_u8SetPortValue+0x7e>
        default: Local_u8ErrorState=1;
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorState;
 a7e:	89 81       	ldd	r24, Y+1	; 0x01
}
 a80:	0f 90       	pop	r0
 a82:	0f 90       	pop	r0
 a84:	0f 90       	pop	r0
 a86:	0f 90       	pop	r0
 a88:	0f 90       	pop	r0
 a8a:	cf 91       	pop	r28
 a8c:	df 91       	pop	r29
 a8e:	08 95       	ret

00000a90 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8*Copy_pu8Value)
{
 a90:	df 93       	push	r29
 a92:	cf 93       	push	r28
 a94:	cd b7       	in	r28, 0x3d	; 61
 a96:	de b7       	in	r29, 0x3e	; 62
 a98:	27 97       	sbiw	r28, 0x07	; 7
 a9a:	0f b6       	in	r0, 0x3f	; 63
 a9c:	f8 94       	cli
 a9e:	de bf       	out	0x3e, r29	; 62
 aa0:	0f be       	out	0x3f, r0	; 63
 aa2:	cd bf       	out	0x3d, r28	; 61
 aa4:	8a 83       	std	Y+2, r24	; 0x02
 aa6:	6b 83       	std	Y+3, r22	; 0x03
 aa8:	5d 83       	std	Y+5, r21	; 0x05
 aaa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 aac:	19 82       	std	Y+1, r1	; 0x01
    
    if ((Copy_pu8Value!=Null) && (Copy_u8Pin<=DIO_u8PIN7))
 aae:	8c 81       	ldd	r24, Y+4	; 0x04
 ab0:	9d 81       	ldd	r25, Y+5	; 0x05
 ab2:	00 97       	sbiw	r24, 0x00	; 0
 ab4:	09 f4       	brne	.+2      	; 0xab8 <DIO_u8GetPinValue+0x28>
 ab6:	78 c0       	rjmp	.+240    	; 0xba8 <DIO_u8GetPinValue+0x118>
 ab8:	8b 81       	ldd	r24, Y+3	; 0x03
 aba:	88 30       	cpi	r24, 0x08	; 8
 abc:	08 f0       	brcs	.+2      	; 0xac0 <DIO_u8GetPinValue+0x30>
 abe:	74 c0       	rjmp	.+232    	; 0xba8 <DIO_u8GetPinValue+0x118>
    {
           switch (Copy_u8Port)
 ac0:	8a 81       	ldd	r24, Y+2	; 0x02
 ac2:	28 2f       	mov	r18, r24
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	3f 83       	std	Y+7, r19	; 0x07
 ac8:	2e 83       	std	Y+6, r18	; 0x06
 aca:	4e 81       	ldd	r20, Y+6	; 0x06
 acc:	5f 81       	ldd	r21, Y+7	; 0x07
 ace:	41 30       	cpi	r20, 0x01	; 1
 ad0:	51 05       	cpc	r21, r1
 ad2:	59 f1       	breq	.+86     	; 0xb2a <DIO_u8GetPinValue+0x9a>
 ad4:	8e 81       	ldd	r24, Y+6	; 0x06
 ad6:	9f 81       	ldd	r25, Y+7	; 0x07
 ad8:	82 30       	cpi	r24, 0x02	; 2
 ada:	91 05       	cpc	r25, r1
 adc:	34 f4       	brge	.+12     	; 0xaea <DIO_u8GetPinValue+0x5a>
 ade:	2e 81       	ldd	r18, Y+6	; 0x06
 ae0:	3f 81       	ldd	r19, Y+7	; 0x07
 ae2:	21 15       	cp	r18, r1
 ae4:	31 05       	cpc	r19, r1
 ae6:	69 f0       	breq	.+26     	; 0xb02 <DIO_u8GetPinValue+0x72>
 ae8:	5c c0       	rjmp	.+184    	; 0xba2 <DIO_u8GetPinValue+0x112>
 aea:	4e 81       	ldd	r20, Y+6	; 0x06
 aec:	5f 81       	ldd	r21, Y+7	; 0x07
 aee:	42 30       	cpi	r20, 0x02	; 2
 af0:	51 05       	cpc	r21, r1
 af2:	79 f1       	breq	.+94     	; 0xb52 <DIO_u8GetPinValue+0xc2>
 af4:	8e 81       	ldd	r24, Y+6	; 0x06
 af6:	9f 81       	ldd	r25, Y+7	; 0x07
 af8:	83 30       	cpi	r24, 0x03	; 3
 afa:	91 05       	cpc	r25, r1
 afc:	09 f4       	brne	.+2      	; 0xb00 <DIO_u8GetPinValue+0x70>
 afe:	3d c0       	rjmp	.+122    	; 0xb7a <DIO_u8GetPinValue+0xea>
 b00:	50 c0       	rjmp	.+160    	; 0xba2 <DIO_u8GetPinValue+0x112>
    {
        case DIO_u8PORTA : *Copy_pu8Value =GET_BIT(PINA,Copy_u8Pin);break;
 b02:	e9 e3       	ldi	r30, 0x39	; 57
 b04:	f0 e0       	ldi	r31, 0x00	; 0
 b06:	80 81       	ld	r24, Z
 b08:	28 2f       	mov	r18, r24
 b0a:	30 e0       	ldi	r19, 0x00	; 0
 b0c:	8b 81       	ldd	r24, Y+3	; 0x03
 b0e:	88 2f       	mov	r24, r24
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	a9 01       	movw	r20, r18
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <DIO_u8GetPinValue+0x8a>
 b16:	55 95       	asr	r21
 b18:	47 95       	ror	r20
 b1a:	8a 95       	dec	r24
 b1c:	e2 f7       	brpl	.-8      	; 0xb16 <DIO_u8GetPinValue+0x86>
 b1e:	ca 01       	movw	r24, r20
 b20:	81 70       	andi	r24, 0x01	; 1
 b22:	ec 81       	ldd	r30, Y+4	; 0x04
 b24:	fd 81       	ldd	r31, Y+5	; 0x05
 b26:	80 83       	st	Z, r24
 b28:	41 c0       	rjmp	.+130    	; 0xbac <DIO_u8GetPinValue+0x11c>
        case DIO_u8PORTB : *Copy_pu8Value =GET_BIT(PINB,Copy_u8Pin);break;
 b2a:	e6 e3       	ldi	r30, 0x36	; 54
 b2c:	f0 e0       	ldi	r31, 0x00	; 0
 b2e:	80 81       	ld	r24, Z
 b30:	28 2f       	mov	r18, r24
 b32:	30 e0       	ldi	r19, 0x00	; 0
 b34:	8b 81       	ldd	r24, Y+3	; 0x03
 b36:	88 2f       	mov	r24, r24
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	a9 01       	movw	r20, r18
 b3c:	02 c0       	rjmp	.+4      	; 0xb42 <DIO_u8GetPinValue+0xb2>
 b3e:	55 95       	asr	r21
 b40:	47 95       	ror	r20
 b42:	8a 95       	dec	r24
 b44:	e2 f7       	brpl	.-8      	; 0xb3e <DIO_u8GetPinValue+0xae>
 b46:	ca 01       	movw	r24, r20
 b48:	81 70       	andi	r24, 0x01	; 1
 b4a:	ec 81       	ldd	r30, Y+4	; 0x04
 b4c:	fd 81       	ldd	r31, Y+5	; 0x05
 b4e:	80 83       	st	Z, r24
 b50:	2d c0       	rjmp	.+90     	; 0xbac <DIO_u8GetPinValue+0x11c>
        case DIO_u8PORTC : *Copy_pu8Value =GET_BIT(PINC,Copy_u8Pin);break;
 b52:	e3 e3       	ldi	r30, 0x33	; 51
 b54:	f0 e0       	ldi	r31, 0x00	; 0
 b56:	80 81       	ld	r24, Z
 b58:	28 2f       	mov	r18, r24
 b5a:	30 e0       	ldi	r19, 0x00	; 0
 b5c:	8b 81       	ldd	r24, Y+3	; 0x03
 b5e:	88 2f       	mov	r24, r24
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	a9 01       	movw	r20, r18
 b64:	02 c0       	rjmp	.+4      	; 0xb6a <DIO_u8GetPinValue+0xda>
 b66:	55 95       	asr	r21
 b68:	47 95       	ror	r20
 b6a:	8a 95       	dec	r24
 b6c:	e2 f7       	brpl	.-8      	; 0xb66 <DIO_u8GetPinValue+0xd6>
 b6e:	ca 01       	movw	r24, r20
 b70:	81 70       	andi	r24, 0x01	; 1
 b72:	ec 81       	ldd	r30, Y+4	; 0x04
 b74:	fd 81       	ldd	r31, Y+5	; 0x05
 b76:	80 83       	st	Z, r24
 b78:	19 c0       	rjmp	.+50     	; 0xbac <DIO_u8GetPinValue+0x11c>
        case DIO_u8PORTD : *Copy_pu8Value =GET_BIT(PIND,Copy_u8Pin);break;
 b7a:	e0 e3       	ldi	r30, 0x30	; 48
 b7c:	f0 e0       	ldi	r31, 0x00	; 0
 b7e:	80 81       	ld	r24, Z
 b80:	28 2f       	mov	r18, r24
 b82:	30 e0       	ldi	r19, 0x00	; 0
 b84:	8b 81       	ldd	r24, Y+3	; 0x03
 b86:	88 2f       	mov	r24, r24
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	a9 01       	movw	r20, r18
 b8c:	02 c0       	rjmp	.+4      	; 0xb92 <DIO_u8GetPinValue+0x102>
 b8e:	55 95       	asr	r21
 b90:	47 95       	ror	r20
 b92:	8a 95       	dec	r24
 b94:	e2 f7       	brpl	.-8      	; 0xb8e <DIO_u8GetPinValue+0xfe>
 b96:	ca 01       	movw	r24, r20
 b98:	81 70       	andi	r24, 0x01	; 1
 b9a:	ec 81       	ldd	r30, Y+4	; 0x04
 b9c:	fd 81       	ldd	r31, Y+5	; 0x05
 b9e:	80 83       	st	Z, r24
 ba0:	05 c0       	rjmp	.+10     	; 0xbac <DIO_u8GetPinValue+0x11c>
        default: Local_u8ErrorState=1;
 ba2:	81 e0       	ldi	r24, 0x01	; 1
 ba4:	89 83       	std	Y+1, r24	; 0x01
 ba6:	02 c0       	rjmp	.+4      	; 0xbac <DIO_u8GetPinValue+0x11c>
    


    }
    else {
        Local_u8ErrorState=1;
 ba8:	81 e0       	ldi	r24, 0x01	; 1
 baa:	89 83       	std	Y+1, r24	; 0x01
        }
    return Local_u8ErrorState;
 bac:	89 81       	ldd	r24, Y+1	; 0x01
}
 bae:	27 96       	adiw	r28, 0x07	; 7
 bb0:	0f b6       	in	r0, 0x3f	; 63
 bb2:	f8 94       	cli
 bb4:	de bf       	out	0x3e, r29	; 62
 bb6:	0f be       	out	0x3f, r0	; 63
 bb8:	cd bf       	out	0x3d, r28	; 61
 bba:	cf 91       	pop	r28
 bbc:	df 91       	pop	r29
 bbe:	08 95       	ret

00000bc0 <main>:
#include "../MCAL/DIO/DIO_private.h"
#include "../MCAL/DIO/DIO_register.h"
#include "../MCAL/DIO/DIO_interface.h"

int main()
{
 bc0:	df 93       	push	r29
 bc2:	cf 93       	push	r28
 bc4:	cd b7       	in	r28, 0x3d	; 61
 bc6:	de b7       	in	r29, 0x3e	; 62
DIO_u8SetPinDirection(DIO_PORT_A,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
 bc8:	80 e0       	ldi	r24, 0x00	; 0
 bca:	61 e0       	ldi	r22, 0x01	; 1
 bcc:	41 e0       	ldi	r20, 0x01	; 1
 bce:	0e 94 94 02 	call	0x528	; 0x528 <DIO_u8SetPinDirection>
DIO_u8SetPinValue(DIO_PORT_A,DIO_u8PIN1,DIO_u8PIN_LOW);
 bd2:	80 e0       	ldi	r24, 0x00	; 0
 bd4:	61 e0       	ldi	r22, 0x01	; 1
 bd6:	40 e0       	ldi	r20, 0x00	; 0
 bd8:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DIO_u8SetPinValue>


DIO_u8SetPinDirection(DIO_PORT_D,DIO_u8PIN2,DIO_u8PIN_INPUT);
 bdc:	83 e0       	ldi	r24, 0x03	; 3
 bde:	62 e0       	ldi	r22, 0x02	; 2
 be0:	40 e0       	ldi	r20, 0x00	; 0
 be2:	0e 94 94 02 	call	0x528	; 0x528 <DIO_u8SetPinDirection>
DIO_u8SetPinValue(DIO_PORT_D,DIO_u8PIN2,DIO_u8PIN_HIGH);
 be6:	83 e0       	ldi	r24, 0x03	; 3
 be8:	62 e0       	ldi	r22, 0x02	; 2
 bea:	41 e0       	ldi	r20, 0x01	; 1
 bec:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DIO_u8SetPinValue>

EXT_INT_SENSE_CONTROL(GENERAL_INT0,INT_FALLING);
 bf0:	80 e0       	ldi	r24, 0x00	; 0
 bf2:	60 e0       	ldi	r22, 0x00	; 0
 bf4:	0e 94 26 01 	call	0x24c	; 0x24c <EXT_INT_SENSE_CONTROL>
 GIE_INT_ENABLE( GLOBAL_INT_ENABLE );
 bf8:	81 e0       	ldi	r24, 0x01	; 1
 bfa:	0e 94 74 00 	call	0xe8	; 0xe8 <GIE_INT_ENABLE>

 GENERAL_INT_CONTROL(GENERAL_INT0 ,GICR_ENABLE );
 bfe:	80 e0       	ldi	r24, 0x00	; 0
 c00:	61 e0       	ldi	r22, 0x01	; 1
 c02:	0e 94 a0 00 	call	0x140	; 0x140 <GENERAL_INT_CONTROL>
 c06:	ff cf       	rjmp	.-2      	; 0xc06 <main+0x46>

00000c08 <__vector_1>:


}
void __vector_1(void)__attribute__((signal));
void __vector_1(void)
{
 c08:	1f 92       	push	r1
 c0a:	0f 92       	push	r0
 c0c:	0f b6       	in	r0, 0x3f	; 63
 c0e:	0f 92       	push	r0
 c10:	11 24       	eor	r1, r1
 c12:	2f 93       	push	r18
 c14:	3f 93       	push	r19
 c16:	4f 93       	push	r20
 c18:	5f 93       	push	r21
 c1a:	6f 93       	push	r22
 c1c:	7f 93       	push	r23
 c1e:	8f 93       	push	r24
 c20:	9f 93       	push	r25
 c22:	af 93       	push	r26
 c24:	bf 93       	push	r27
 c26:	ef 93       	push	r30
 c28:	ff 93       	push	r31
 c2a:	df 93       	push	r29
 c2c:	cf 93       	push	r28
 c2e:	cd b7       	in	r28, 0x3d	; 61
 c30:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_PORT_A,DIO_u8PIN1,DIO_u8PIN_HIGH);
 c32:	80 e0       	ldi	r24, 0x00	; 0
 c34:	61 e0       	ldi	r22, 0x01	; 1
 c36:	41 e0       	ldi	r20, 0x01	; 1
 c38:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DIO_u8SetPinValue>

}
 c3c:	cf 91       	pop	r28
 c3e:	df 91       	pop	r29
 c40:	ff 91       	pop	r31
 c42:	ef 91       	pop	r30
 c44:	bf 91       	pop	r27
 c46:	af 91       	pop	r26
 c48:	9f 91       	pop	r25
 c4a:	8f 91       	pop	r24
 c4c:	7f 91       	pop	r23
 c4e:	6f 91       	pop	r22
 c50:	5f 91       	pop	r21
 c52:	4f 91       	pop	r20
 c54:	3f 91       	pop	r19
 c56:	2f 91       	pop	r18
 c58:	0f 90       	pop	r0
 c5a:	0f be       	out	0x3f, r0	; 63
 c5c:	0f 90       	pop	r0
 c5e:	1f 90       	pop	r1
 c60:	18 95       	reti

00000c62 <_exit>:
 c62:	f8 94       	cli

00000c64 <__stop_program>:
 c64:	ff cf       	rjmp	.-2      	; 0xc64 <__stop_program>
